ÙË
BC:\sonarqube\projects\log4net-2.0.7\src\Appender\AdoNetAppender.cs
	namespace!! 	
log4net!!
 
.!! 
Appender!! 
{"" 
public}} 
class}} 
AdoNetAppender}} 
:}} %
BufferingAppenderSkeleton}} 8
{~~ 
public
áá 
AdoNetAppender
áá	 
(
áá 
)
áá 
{
àà 
ConnectionType
ââ 
=
ââ 
$strââ ä
;ââä ã
UseTransactions
ää 
=
ää 
true
ää 
;
ää 
CommandType
ãã 
=
ãã 
System
ãã 
.
ãã 
Data
ãã 
.
ãã 
CommandType
ãã (
.
ãã( )
Text
ãã) -
;
ãã- .
m_parameters
åå 
=
åå 
new
åå 
	ArrayList
åå 
(
åå  
)
åå  !
;
åå! "
ReconnectOnError
çç 
=
çç 
false
çç 
;
çç 
}
éé 
public
™™ 
string
™™	 
ConnectionString
™™  
{
´´ 
get
¨¨ 
{
¨¨ 
return
¨¨	  
m_connectionString
¨¨ "
;
¨¨" #
}
¨¨$ %
set
≠≠ 
{
≠≠  
m_connectionString
≠≠	 
=
≠≠ 
value
≠≠ #
;
≠≠# $
}
≠≠% &
}
ÆÆ 
public
≥≥ 
string
≥≥	 
AppSettingsKey
≥≥ 
{
¥¥ 
get
µµ 
{
µµ 
return
µµ	 
m_appSettingsKey
µµ  
;
µµ  !
}
µµ" #
set
∂∂ 
{
∂∂ 
m_appSettingsKey
∂∂	 
=
∂∂ 
value
∂∂ !
;
∂∂! "
}
∂∂# $
}
∑∑ 
public
¿¿ 
string
¿¿	 "
ConnectionStringName
¿¿ $
{
¡¡ 
get
¬¬ 
{
¬¬ 
return
¬¬	 $
m_connectionStringName
¬¬ &
;
¬¬& '
}
¬¬( )
set
√√ 
{
√√ $
m_connectionStringName
√√	 
=
√√  !
value
√√" '
;
√√' (
}
√√) *
}
ƒƒ 
public
ËË 
string
ËË	 
ConnectionType
ËË 
{
ÈÈ 
get
ÍÍ 
{
ÍÍ 
return
ÍÍ	 
m_connectionType
ÍÍ  
;
ÍÍ  !
}
ÍÍ" #
set
ÎÎ 
{
ÎÎ 
m_connectionType
ÎÎ	 
=
ÎÎ 
value
ÎÎ !
;
ÎÎ! "
}
ÎÎ# $
}
ÏÏ 
public
ÑÑ 
string
ÑÑ	 
CommandText
ÑÑ 
{
ÖÖ 
get
ÜÜ 
{
ÜÜ 
return
ÜÜ	 
m_commandText
ÜÜ 
;
ÜÜ 
}
ÜÜ  
set
áá 
{
áá 
m_commandText
áá	 
=
áá 
value
áá 
;
áá 
}
áá  !
}
àà 
public
úú 
CommandType
úú	 
CommandType
úú  
{
ùù 
get
ûû 
{
ûû 
return
ûû	 
m_commandType
ûû 
;
ûû 
}
ûû  
set
üü 
{
üü 
m_commandType
üü	 
=
üü 
value
üü 
;
üü 
}
üü  !
}
†† 
public
¥¥ 
bool
¥¥	 
UseTransactions
¥¥ 
{
µµ 
get
∂∂ 
{
∂∂ 
return
∂∂	 
m_useTransactions
∂∂ !
;
∂∂! "
}
∂∂# $
set
∑∑ 
{
∑∑ 
m_useTransactions
∑∑	 
=
∑∑ 
value
∑∑ "
;
∑∑" #
}
∑∑$ %
}
∏∏ 
public
»» 
SecurityContext
»»	 
SecurityContext
»» (
{
…… 
get
   
{
   
return
  	 
m_securityContext
   !
;
  ! "
}
  # $
set
ÀÀ 
{
ÀÀ 
m_securityContext
ÀÀ	 
=
ÀÀ 
value
ÀÀ "
;
ÀÀ" #
}
ÀÀ$ %
}
ÃÃ 
public
ÊÊ 
bool
ÊÊ	 
ReconnectOnError
ÊÊ 
{
ÁÁ 
get
ËË 
{
ËË 
return
ËË	  
m_reconnectOnError
ËË "
;
ËË" #
}
ËË$ %
set
ÈÈ 
{
ÈÈ  
m_reconnectOnError
ÈÈ	 
=
ÈÈ 
value
ÈÈ #
;
ÈÈ# $
}
ÈÈ% &
}
ÍÍ 
	protected
˝˝ 
IDbConnection
˝˝ 

Connection
˝˝ $
{
˛˛ 
get
ˇˇ 
{
ˇˇ 
return
ˇˇ	 
m_dbConnection
ˇˇ 
;
ˇˇ 
}
ˇˇ  !
set
ÄÄ 
{
ÄÄ 
m_dbConnection
ÄÄ	 
=
ÄÄ 
value
ÄÄ 
;
ÄÄ  
}
ÄÄ! "
}
ÅÅ 
override
óó 

public
óó 
void
óó 
ActivateOptions
óó &
(
óó& '
)
óó' (
{
òò 
base
ôô 
.
ôô 
ActivateOptions
ôô 
(
ôô 
)
ôô 
;
ôô 
if
õõ 
(
õõ 
SecurityContext
õõ 
==
õõ 
null
õõ 
)
õõ 
{
úú 
SecurityContext
ùù 
=
ùù %
SecurityContextProvider
ùù -
.
ùù- .
DefaultProvider
ùù. =
.
ùù= >#
CreateSecurityContext
ùù> S
(
ùùS T
this
ùùT X
)
ùùX Y
;
ùùY Z
}
ûû *
InitializeDatabaseConnection
†† 
(
††  
)
††  !
;
††! "
}
°° 
override
ØØ 

	protected
ØØ 
void
ØØ 
OnClose
ØØ !
(
ØØ! "
)
ØØ" #
{
∞∞ 
base
±± 
.
±± 
OnClose
±± 
(
±± 
)
±± 
;
±± 
DiposeConnection
≤≤ 
(
≤≤ 
)
≤≤ 
;
≤≤ 
}
≥≥ 
override
√√ 

	protected
√√ 
void
√√ 

SendBuffer
√√ $
(
√√$ %
LoggingEvent
√√% 1
[
√√1 2
]
√√2 3
events
√√4 :
)
√√: ;
{
ƒƒ 
if
≈≈ 
(
≈≈ 
ReconnectOnError
≈≈ 
&&
≈≈ 
(
≈≈ 

Connection
≈≈ &
==
≈≈' )
null
≈≈* .
||
≈≈/ 1

Connection
≈≈2 <
.
≈≈< =
State
≈≈= B
!=
≈≈C E
ConnectionState
≈≈F U
.
≈≈U V
Open
≈≈V Z
)
≈≈Z [
)
≈≈[ \
{
∆∆ 
LogLog
«« 

.
««
 
Debug
«« 
(
«« 
declaringType
«« 
,
«« 
$str
««  a
+
««b c
(
««d e
(
««e f

Connection
««f p
==
««q s
null
««t x
)
««x y
?
««z {

SystemInfo««| Ü
.««Ü á
NullText««á è
:««ê ë

Connection««í ú
.««ú ù
State««ù ¢
.««¢ £
ToString««£ ´
(««´ ¨
)««¨ ≠
)««≠ Æ
)««Æ Ø
;««Ø ∞*
InitializeDatabaseConnection
……  
(
……  !
)
……! "
;
……" #
}
   
if
ÕÕ 
(
ÕÕ 

Connection
ÕÕ 
!=
ÕÕ 
null
ÕÕ 
&&
ÕÕ 

Connection
ÕÕ '
.
ÕÕ' (
State
ÕÕ( -
==
ÕÕ. 0
ConnectionState
ÕÕ1 @
.
ÕÕ@ A
Open
ÕÕA E
)
ÕÕE F
{
ŒŒ 
if
œœ 
(
œœ 
UseTransactions
œœ 
)
œœ 
{
–– 
using
”” 

(
”” 
IDbTransaction
”” 
dbTran
”” !
=
””" #

Connection
””$ .
.
””. /
BeginTransaction
””/ ?
(
””? @
)
””@ A
)
””A B
{
‘‘ 
try
’’ 	
{
÷÷ 

SendBuffer
◊◊ 
(
◊◊ 
dbTran
◊◊ 
,
◊◊ 
events
◊◊  
)
◊◊  !
;
◊◊! "
dbTran
⁄⁄ 
.
⁄⁄ 
Commit
⁄⁄ 
(
⁄⁄ 
)
⁄⁄ 
;
⁄⁄ 
}
€€ 
catch
‹‹ 
(
‹‹ 
	Exception
‹‹ 
ex
‹‹ 
)
‹‹ 
{
›› 
try
ﬂﬂ 

{
‡‡ 
dbTran
·· 
.
·· 
Rollback
·· 
(
·· 
)
·· 
;
·· 
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„ 
)
„„ 
{
‰‰ 
}
ÊÊ 
ErrorHandler
ÈÈ 
.
ÈÈ 
Error
ÈÈ 
(
ÈÈ 
$str
ÈÈ ?
,
ÈÈ? @
ex
ÈÈA C
)
ÈÈC D
;
ÈÈD E
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 
else
ÌÌ 
{
ÓÓ 

SendBuffer
 
(
 
null
 
,
 
events
 
)
 
;
 
}
ÒÒ 
}
ÚÚ 
}
ÛÛ 
public
ÇÇ 
void
ÇÇ	 
AddParameter
ÇÇ 
(
ÇÇ %
AdoNetAppenderParameter
ÇÇ 2
	parameter
ÇÇ3 <
)
ÇÇ< =
{
ÉÉ 
m_parameters
ÑÑ 
.
ÑÑ 
Add
ÑÑ 
(
ÑÑ 
	parameter
ÑÑ 
)
ÑÑ 
;
ÑÑ 
}
ÖÖ 
virtual
òò 	
	protected
òò
 
void
òò 

SendBuffer
òò #
(
òò# $
IDbTransaction
òò$ 2
dbTran
òò3 9
,
òò9 :
LoggingEvent
òò; G
[
òòG H
]
òòH I
events
òòJ P
)
òòP Q
{
ôô 
if
õõ 
(
õõ 
CommandText
õõ 
!=
õõ 
null
õõ 
&&
õõ 
CommandText
õõ )
.
õõ) *
Trim
õõ* .
(
õõ. /
)
õõ/ 0
!=
õõ1 3
$str
õõ4 6
)
õõ6 7
{
úú 
using
ùù 	
(
ùù
 

IDbCommand
ùù 
dbCmd
ùù 
=
ùù 

Connection
ùù (
.
ùù( )
CreateCommand
ùù) 6
(
ùù6 7
)
ùù7 8
)
ùù8 9
{
ûû 
dbCmd
†† 

.
††
 
CommandText
†† 
=
†† 
CommandText
†† $
;
††$ %
dbCmd
££ 

.
££
 
CommandType
££ 
=
££ 
CommandType
££ $
;
££$ %
if
•• 
(
•• 	
dbTran
••	 
!=
•• 
null
•• 
)
•• 
{
¶¶ 
dbCmd
ßß 
.
ßß 
Transaction
ßß 
=
ßß 
dbTran
ßß  
;
ßß  !
}
®® 
dbCmd
™™ 

.
™™
 
Prepare
™™ 
(
™™ 
)
™™ 
;
™™ 
foreach
¨¨ 
(
¨¨ 
LoggingEvent
¨¨ 
e
¨¨ 
in
¨¨ 
events
¨¨  &
)
¨¨& '
{
≠≠ 
dbCmd
ØØ 
.
ØØ 

Parameters
ØØ 
.
ØØ 
Clear
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
foreach
≤≤ 
(
≤≤ %
AdoNetAppenderParameter
≤≤ &
param
≤≤' ,
in
≤≤- /
m_parameters
≤≤0 <
)
≤≤< =
{
≥≥ 
param
¥¥ 
.
¥¥ 
Prepare
¥¥ 
(
¥¥ 
dbCmd
¥¥ 
)
¥¥ 
;
¥¥ 
param
µµ 
.
µµ 
FormatValue
µµ 
(
µµ 
dbCmd
µµ 
,
µµ 
e
µµ  !
)
µµ! "
;
µµ" #
}
∂∂ 
dbCmd
ππ 
.
ππ 
ExecuteNonQuery
ππ 
(
ππ 
)
ππ 
;
ππ 
}
∫∫ 
}
ªª 
}
ºº 
else
ΩΩ 
{
ææ 
using
¿¿ 	
(
¿¿
 

IDbCommand
¿¿ 
dbCmd
¿¿ 
=
¿¿ 

Connection
¿¿ (
.
¿¿( )
CreateCommand
¿¿) 6
(
¿¿6 7
)
¿¿7 8
)
¿¿8 9
{
¡¡ 
if
¬¬ 
(
¬¬ 	
dbTran
¬¬	 
!=
¬¬ 
null
¬¬ 
)
¬¬ 
{
√√ 
dbCmd
ƒƒ 
.
ƒƒ 
Transaction
ƒƒ 
=
ƒƒ 
dbTran
ƒƒ  
;
ƒƒ  !
}
≈≈ 
foreach
«« 
(
«« 
LoggingEvent
«« 
e
«« 
in
«« 
events
««  &
)
««& '
{
»» 
string
   
logStatement
   
=
   
GetLogStatement
   +
(
  + ,
e
  , -
)
  - .
;
  . /
LogLog
ÃÃ 
.
ÃÃ 
Debug
ÃÃ 
(
ÃÃ 
declaringType
ÃÃ  
,
ÃÃ  !
$str
ÃÃ" 2
+
ÃÃ3 4
logStatement
ÃÃ5 A
+
ÃÃB C
$str
ÃÃD G
)
ÃÃG H
;
ÃÃH I
dbCmd
ŒŒ 
.
ŒŒ 
CommandText
ŒŒ 
=
ŒŒ 
logStatement
ŒŒ &
;
ŒŒ& '
dbCmd
œœ 
.
œœ 
ExecuteNonQuery
œœ 
(
œœ 
)
œœ 
;
œœ 
}
–– 
}
—— 
}
““ 
}
”” 
virtual
‡‡ 	
	protected
‡‡
 
string
‡‡ 
GetLogStatement
‡‡ *
(
‡‡* +
LoggingEvent
‡‡+ 7
logEvent
‡‡8 @
)
‡‡@ A
{
·· 
if
‚‚ 
(
‚‚ 
Layout
‚‚ 
==
‚‚ 
null
‚‚ 
)
‚‚ 
{
„„ 
ErrorHandler
‰‰ 
.
‰‰ 
Error
‰‰ 
(
‰‰ 
$str
‰‰ =
)
‰‰= >
;
‰‰> ?
return
ÂÂ 

$str
ÂÂ 
;
ÂÂ 
}
ÊÊ 
else
ÁÁ 
{
ËË 
StringWriter
ÈÈ 
writer
ÈÈ 
=
ÈÈ 
new
ÈÈ 
StringWriter
ÈÈ *
(
ÈÈ* +
System
ÈÈ+ 1
.
ÈÈ1 2
Globalization
ÈÈ2 ?
.
ÈÈ? @
CultureInfo
ÈÈ@ K
.
ÈÈK L
InvariantCulture
ÈÈL \
)
ÈÈ\ ]
;
ÈÈ] ^
Layout
ÍÍ 

.
ÍÍ
 
Format
ÍÍ 
(
ÍÍ 
writer
ÍÍ 
,
ÍÍ 
logEvent
ÍÍ "
)
ÍÍ" #
;
ÍÍ# $
return
ÎÎ 

writer
ÎÎ 
.
ÎÎ 
ToString
ÎÎ 
(
ÎÎ 
)
ÎÎ 
;
ÎÎ 
}
ÏÏ 
}
ÌÌ 
virtual
¯¯ 	
	protected
¯¯
 
IDbConnection
¯¯ !
CreateConnection
¯¯" 2
(
¯¯2 3
Type
¯¯3 7
connectionType
¯¯8 F
,
¯¯F G
string
¯¯H N
connectionString
¯¯O _
)
¯¯_ `
{
˘˘ 
IDbConnection
˙˙ 

connection
˙˙ 
=
˙˙ 
(
˙˙ 
IDbConnection
˙˙ ,
)
˙˙, -
	Activator
˙˙- 6
.
˙˙6 7
CreateInstance
˙˙7 E
(
˙˙E F
connectionType
˙˙F T
)
˙˙T U
;
˙˙U V

connection
˚˚ 
.
˚˚ 
ConnectionString
˚˚ 
=
˚˚  
connectionString
˚˚! 1
;
˚˚1 2
return
¸¸ 	

connection
¸¸
 
;
¸¸ 
}
˝˝ 
virtual
àà 	
	protected
àà
 
string
àà %
ResolveConnectionString
àà 2
(
àà2 3
out
àà3 6
string
àà7 =%
connectionStringContext
àà> U
)
ààU V
{
ââ 
if
ää 
(
ää 
ConnectionString
ää 
!=
ää 
null
ää 
&&
ää  "
ConnectionString
ää# 3
.
ää3 4
Length
ää4 :
>
ää; <
$num
ää= >
)
ää> ?
{
ãã %
connectionStringContext
åå 
=
åå 
$str
åå 0
;
åå0 1
return
çç 

ConnectionString
çç 
;
çç 
}
éé 
if
ëë 
(
ëë 
!
ëë 
String
ëë 
.
ëë 
IsNullOrEmpty
ëë 
(
ëë "
ConnectionStringName
ëë 1
)
ëë1 2
)
ëë2 3
{
íí &
ConnectionStringSettings
ìì 
settings
ìì %
=
ìì& '"
ConfigurationManager
ìì( <
.
ìì< =
ConnectionStrings
ìì= N
[
ììN O"
ConnectionStringName
ììO c
]
ììc d
;
ììd e
if
îî 
(
îî 
settings
îî 
!=
îî 
null
îî 
)
îî 
{
ïï %
connectionStringContext
ññ 
=
ññ 
$str
ññ 5
;
ññ5 6
return
óó 
settings
óó 
.
óó 
ConnectionString
óó %
;
óó% &
}
òò 
else
ôô 
{
öö 
throw
õõ 

new
õõ 
LogException
õõ 
(
õõ 
$str
õõ .
+
õõ/ 0"
ConnectionStringName
õõ1 E
+
õõF G
$str
õõH w
)
õõw x
;
õõx y
}
úú 
}
ùù 
if
†† 
(
†† 
AppSettingsKey
†† 
!=
†† 
null
†† 
&&
††  
AppSettingsKey
††! /
.
††/ 0
Length
††0 6
>
††7 8
$num
††9 :
)
††: ;
{
°° %
connectionStringContext
¢¢ 
=
¢¢ 
$str
¢¢ .
;
¢¢. /
string
££ 
)
appSettingsConnectionString
££ &
=
££' (

SystemInfo
££) 3
.
££3 4
GetAppSetting
££4 A
(
££A B
AppSettingsKey
££B P
)
££P Q
;
££Q R
if
§§ 
(
§§ )
appSettingsConnectionString
§§ #
==
§§$ &
null
§§' +
||
§§, .)
appSettingsConnectionString
§§/ J
.
§§J K
Length
§§K Q
==
§§R T
$num
§§U V
)
§§V W
{
•• 
throw
¶¶ 

new
¶¶ 
LogException
¶¶ 
(
¶¶ 
$str
¶¶ .
+
¶¶/ 0
AppSettingsKey
¶¶1 ?
+
¶¶@ A
$str
¶¶B V
)
¶¶V W
;
¶¶W X
}
ßß 
return
®® 
)
appSettingsConnectionString
®® &
;
®®& '
}
©© %
connectionStringContext
´´ 
=
´´ 
$str
´´ |
;
´´| }
return
¨¨ 	
string
¨¨
 
.
¨¨ 
Empty
¨¨ 
;
¨¨ 
}
≠≠ 
virtual
ææ 	
	protected
ææ
 
Type
ææ #
ResolveConnectionType
ææ .
(
ææ. /
)
ææ/ 0
{
øø 
try
¿¿ 
{
¡¡ 
return
¬¬ 


SystemInfo
¬¬ 
.
¬¬ 
GetTypeFromString
¬¬ '
(
¬¬' (
ConnectionType
¬¬( 6
,
¬¬6 7
true
¬¬8 <
,
¬¬< =
false
¬¬> C
)
¬¬C D
;
¬¬D E
}
√√ 
catch
ƒƒ 
(
ƒƒ	 

	Exception
ƒƒ
 
ex
ƒƒ 
)
ƒƒ 
{
≈≈ 
ErrorHandler
∆∆ 
.
∆∆ 
Error
∆∆ 
(
∆∆ 
$str
∆∆ 9
+
∆∆: ;
ConnectionType
∆∆< J
+
∆∆K L
$str
∆∆M P
,
∆∆P Q
ex
∆∆R T
)
∆∆T U
;
∆∆U V
throw
«« 	
;
««	 

}
»» 
}
…… 
private
““ 	
void
““
 *
InitializeDatabaseConnection
““ +
(
““+ ,
)
““, -
{
”” 
string
‘‘ 	%
connectionStringContext
‘‘
 !
=
‘‘" #
$str
‘‘$ T
;
‘‘T U
string
’’ 	&
resolvedConnectionString
’’
 "
=
’’# $
string
’’% +
.
’’+ ,
Empty
’’, 1
;
’’1 2
try
◊◊ 
{
ÿÿ 
DiposeConnection
ŸŸ 
(
ŸŸ 
)
ŸŸ 
;
ŸŸ &
resolvedConnectionString
‹‹ 
=
‹‹ %
ResolveConnectionString
‹‹ 6
(
‹‹6 7
out
‹‹7 :%
connectionStringContext
‹‹; R
)
‹‹R S
;
‹‹S T

Connection
ﬁﬁ 
=
ﬁﬁ 
CreateConnection
ﬁﬁ !
(
ﬁﬁ! "#
ResolveConnectionType
ﬁﬁ" 7
(
ﬁﬁ7 8
)
ﬁﬁ8 9
,
ﬁﬁ9 :&
resolvedConnectionString
ﬁﬁ; S
)
ﬁﬁS T
;
ﬁﬁT U
using
‡‡ 	
(
‡‡
 
SecurityContext
‡‡ 
.
‡‡ 
Impersonate
‡‡ &
(
‡‡& '
this
‡‡' +
)
‡‡+ ,
)
‡‡, -
{
·· 

Connection
„„ 
.
„„ 
Open
„„ 
(
„„ 
)
„„ 
;
„„ 
}
‰‰ 
}
ÂÂ 
catch
ÊÊ 
(
ÊÊ	 

	Exception
ÊÊ
 
e
ÊÊ 
)
ÊÊ 
{
ÁÁ 
ErrorHandler
ÈÈ 
.
ÈÈ 
Error
ÈÈ 
(
ÈÈ 
$str
ÈÈ =
+
ÈÈ> ?&
resolvedConnectionString
ÈÈ@ X
+
ÈÈY Z
$str
ÈÈ[ {
+
ÈÈ| }&
connectionStringContextÈÈ~ ï
+ÈÈñ ó
$strÈÈò ú
,ÈÈú ù
eÈÈû ü
)ÈÈü †
;ÈÈ† °

Connection
ÎÎ 
=
ÎÎ 
null
ÎÎ 
;
ÎÎ 
}
ÏÏ 
}
ÌÌ 
private
ıı 	
void
ıı
 
DiposeConnection
ıı 
(
ıı  
)
ıı  !
{
ˆˆ 
if
˜˜ 
(
˜˜ 

Connection
˜˜ 
!=
˜˜ 
null
˜˜ 
)
˜˜ 
{
¯¯ 
try
˘˘ 
{
˙˙ 

Connection
˚˚ 
.
˚˚ 
Close
˚˚ 
(
˚˚ 
)
˚˚ 
;
˚˚ 
}
¸¸ 
catch
˝˝ 	
(
˝˝
 
	Exception
˝˝ 
ex
˝˝ 
)
˝˝ 
{
˛˛ 
LogLog
ˇˇ 
.
ˇˇ 
Warn
ˇˇ 
(
ˇˇ 
declaringType
ˇˇ 
,
ˇˇ 
$str
ˇˇ  T
,
ˇˇT U
ex
ˇˇV X
)
ˇˇX Y
;
ˇˇY Z
}
ÄÄ 

Connection
ÅÅ 
=
ÅÅ 
null
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}
ÉÉ 
	protected
ëë 
	ArrayList
ëë 
m_parameters
ëë "
;
ëë" #
private
öö 	
SecurityContext
öö
 
m_securityContext
öö +
;
öö+ ,
private
†† 	
IDbConnection
††
 
m_dbConnection
†† &
;
††& '
private
•• 	
string
••
  
m_connectionString
•• #
;
••# $
private
™™ 	
string
™™
 
m_appSettingsKey
™™ !
;
™™! "
private
∞∞ 	
string
∞∞
 $
m_connectionStringName
∞∞ '
;
∞∞' (
private
∂∂ 	
string
∂∂
 
m_connectionType
∂∂ !
;
∂∂! "
private
ªª 	
string
ªª
 
m_commandText
ªª 
;
ªª 
private
¿¿ 	
CommandType
¿¿
 
m_commandType
¿¿ #
;
¿¿# $
private
≈≈ 	
bool
≈≈
 
m_useTransactions
≈≈  
;
≈≈  !
private
   	
bool
  
  
m_reconnectOnError
   !
;
  ! "
private
◊◊ 	
readonly
◊◊
 
static
◊◊ 
Type
◊◊ 
declaringType
◊◊ ,
=
◊◊- .
typeof
◊◊/ 5
(
◊◊5 6
AdoNetAppender
◊◊6 D
)
◊◊D E
;
◊◊E F
}
⁄⁄ 
public
ÈÈ 
class
ÈÈ %
AdoNetAppenderParameter
ÈÈ %
{
ÍÍ 
public
ÛÛ %
AdoNetAppenderParameter
ÛÛ	  
(
ÛÛ  !
)
ÛÛ! "
{
ÙÙ 
	Precision
ıı 
=
ıı 
$num
ıı 
;
ıı 
Scale
ˆˆ 
=
ˆˆ	 

$num
ˆˆ 
;
ˆˆ 
Size
˜˜ 
=
˜˜ 	
$num
˜˜
 
;
˜˜ 
}
¯¯ 
public
ãã 
string
ãã	 
ParameterName
ãã 
{
åå 
get
çç 
{
çç 
return
çç	 
m_parameterName
çç 
;
çç  
}
çç! "
set
éé 
{
éé 
m_parameterName
éé	 
=
éé 
value
éé  
;
éé  !
}
éé" #
}
èè 
public
££ 
DbType
££	 
DbType
££ 
{
§§ 
get
•• 
{
•• 
return
••	 
m_dbType
•• 
;
•• 
}
•• 
set
¶¶ 
{
ßß 
m_dbType
®® 
=
®® 
value
®® 
;
®® 
m_inferType
©© 
=
©© 
false
©© 
;
©© 
}
™™ 
}
´´ 
public
ΩΩ 
byte
ΩΩ	 
	Precision
ΩΩ 
{
ææ 
get
øø 
{
øø 
return
øø	 
m_precision
øø 
;
øø 
}
øø 
set
¿¿ 
{
¿¿ 
m_precision
¿¿	 
=
¿¿ 
value
¿¿ 
;
¿¿ 
}
¿¿ 
}
¡¡ 
public
”” 
byte
””	 
Scale
”” 
{
‘‘ 
get
’’ 
{
’’ 
return
’’	 
m_scale
’’ 
;
’’ 
}
’’ 
set
÷÷ 
{
÷÷ 
m_scale
÷÷	 
=
÷÷ 
value
÷÷ 
;
÷÷ 
}
÷÷ 
}
◊◊ 
public
ÏÏ 
int
ÏÏ	 
Size
ÏÏ 
{
ÌÌ 
get
ÓÓ 
{
ÓÓ 
return
ÓÓ	 
m_size
ÓÓ 
;
ÓÓ 
}
ÓÓ 
set
ÔÔ 
{
ÔÔ 
m_size
ÔÔ	 
=
ÔÔ 
value
ÔÔ 
;
ÔÔ 
}
ÔÔ 
}
 
public
ÜÜ 

IRawLayout
ÜÜ	 
Layout
ÜÜ 
{
áá 
get
àà 
{
àà 
return
àà	 
m_layout
àà 
;
àà 
}
àà 
set
ââ 
{
ââ 
m_layout
ââ	 
=
ââ 
value
ââ 
;
ââ 
}
ââ 
}
ää 
virtual
öö 	
public
öö
 
void
öö 
Prepare
öö 
(
öö 

IDbCommand
öö (
command
öö) 0
)
öö0 1
{
õõ 
IDbDataParameter
ùù 
param
ùù 
=
ùù 
command
ùù #
.
ùù# $
CreateParameter
ùù$ 3
(
ùù3 4
)
ùù4 5
;
ùù5 6
param
†† 
.
†† 	
ParameterName
††	 
=
†† 
ParameterName
†† &
;
††& '
if
¢¢ 
(
¢¢ 
!
¢¢ 
m_inferType
¢¢ 
)
¢¢ 
{
££ 
param
§§ 	
.
§§	 

DbType
§§
 
=
§§ 
DbType
§§ 
;
§§ 
}
•• 
if
¶¶ 
(
¶¶ 
	Precision
¶¶ 
!=
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
param
®® 	
.
®®	 

	Precision
®®
 
=
®® 
	Precision
®® 
;
®®  
}
©© 
if
™™ 
(
™™ 
Scale
™™ 
!=
™™ 
$num
™™ 
)
™™ 
{
´´ 
param
¨¨ 	
.
¨¨	 

Scale
¨¨
 
=
¨¨ 
Scale
¨¨ 
;
¨¨ 
}
≠≠ 
if
ÆÆ 
(
ÆÆ 
Size
ÆÆ 
!=
ÆÆ 
$num
ÆÆ 
)
ÆÆ 
{
ØØ 
param
∞∞ 	
.
∞∞	 

Size
∞∞
 
=
∞∞ 
Size
∞∞ 
;
∞∞ 
}
±± 
command
¥¥ 

.
¥¥
 

Parameters
¥¥ 
.
¥¥ 
Add
¥¥ 
(
¥¥ 
param
¥¥ 
)
¥¥  
;
¥¥  !
}
µµ 
virtual
¬¬ 	
public
¬¬
 
void
¬¬ 
FormatValue
¬¬ !
(
¬¬! "

IDbCommand
¬¬" ,
command
¬¬- 4
,
¬¬4 5
LoggingEvent
¬¬6 B
loggingEvent
¬¬C O
)
¬¬O P
{
√√ 
IDbDataParameter
≈≈ 
param
≈≈ 
=
≈≈ 
(
≈≈ 
IDbDataParameter
≈≈ -
)
≈≈- .
command
≈≈. 5
.
≈≈5 6

Parameters
≈≈6 @
[
≈≈@ A
ParameterName
≈≈A N
]
≈≈N O
;
≈≈O P
object
»» 	
formattedValue
»»
 
=
»» 
Layout
»» !
.
»»! "
Format
»»" (
(
»»( )
loggingEvent
»») 5
)
»»5 6
;
»»6 7
if
ÀÀ 
(
ÀÀ 
formattedValue
ÀÀ 
==
ÀÀ 
null
ÀÀ 
)
ÀÀ 
{
ÃÃ 
formattedValue
ÕÕ 
=
ÕÕ 
DBNull
ÕÕ 
.
ÕÕ 
Value
ÕÕ !
;
ÕÕ! "
}
ŒŒ 
param
–– 
.
–– 	
Value
––	 
=
–– 
formattedValue
–– 
;
––  
}
—— 
private
⁄⁄ 	
string
⁄⁄
 
m_parameterName
⁄⁄  
;
⁄⁄  !
private
ﬂﬂ 	
DbType
ﬂﬂ
 
m_dbType
ﬂﬂ 
;
ﬂﬂ 
private
‰‰ 	
bool
‰‰
 
m_inferType
‰‰ 
=
‰‰ 
true
‰‰ !
;
‰‰! "
private
ÈÈ 	
byte
ÈÈ
 
m_precision
ÈÈ 
;
ÈÈ 
private
ÓÓ 	
byte
ÓÓ
 
m_scale
ÓÓ 
;
ÓÓ 
private
ÛÛ 	
int
ÛÛ
 
m_size
ÛÛ 
;
ÛÛ 
private
˘˘ 	

IRawLayout
˘˘
 
m_layout
˘˘ 
;
˘˘ 
}
¸¸ 
}˝˝ ùy
MC:\sonarqube\projects\log4net-2.0.7\src\Appender\AnsiColorTerminalAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
publichh 
classhh %
AnsiColorTerminalAppenderhh '
:hh( )
AppenderSkeletonhh* :
{ii 
[vv 
Flagsvv 
]vv 	
publicww 
enumww	 
AnsiAttributesww 
:ww 
intww "
{xx 
Bright|| 	
=|| 
$num|| 
,|| 
Dim
ÄÄ 
=
ÄÄ
 
$num
ÄÄ 
,
ÄÄ 

Underscore
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
,
ÖÖ 
Blink
çç 
=
çç 
$num
çç 
,
çç 
Reverse
íí 

=
íí 
$num
íí 
,
íí 
Hidden
óó 	
=
óó 
$num
óó 
,
óó 
Strikethrough
úú 
=
úú 
$num
úú 
,
úú 
Light
°° 
=
°° 
$num
°° 
}
¢¢ 
public
ÆÆ 
enum
ÆÆ	 
	AnsiColor
ÆÆ 
:
ÆÆ 
int
ÆÆ 
{
ØØ 
Black
≥≥ 
=
≥≥	 

$num
≥≥ 
,
≥≥ 
Red
∏∏ 
=
∏∏ 
$num
∏∏	 

,
∏∏
 
Green
ΩΩ 
=
ΩΩ	 

$num
ΩΩ 
,
ΩΩ 
Yellow
¬¬ 	
=
¬¬
 
$num
¬¬ 
,
¬¬ 
Blue
«« 
=
«« 	
$num
««
 
,
«« 
Magenta
ÃÃ 

=
ÃÃ 
$num
ÃÃ 
,
ÃÃ 
Cyan
—— 
=
—— 	
$num
——
 
,
—— 
White
÷÷ 
=
÷÷	 

$num
÷÷ 
}
◊◊ 
public
‰‰ '
AnsiColorTerminalAppender
‰‰	 "
(
‰‰" #
)
‰‰# $
{
ÂÂ 
}
ÊÊ 
virtual
˘˘ 	
public
˘˘
 
string
˘˘ 
Target
˘˘ 
{
˙˙ 
get
˚˚ 
{
˚˚ 
return
˚˚	 "
m_writeToErrorStream
˚˚ $
?
˚˚% &
ConsoleError
˚˚' 3
:
˚˚4 5

ConsoleOut
˚˚6 @
;
˚˚@ A
}
˚˚B C
set
¸¸ 
{
˝˝ 
string
˛˛ 

trimmedTargetName
˛˛ 
=
˛˛ 
value
˛˛ $
.
˛˛$ %
Trim
˛˛% )
(
˛˛) *
)
˛˛* +
;
˛˛+ ,
if
ÄÄ 
(
ÄÄ 

SystemInfo
ÄÄ 
.
ÄÄ  
EqualsIgnoringCase
ÄÄ %
(
ÄÄ% &
ConsoleError
ÄÄ& 2
,
ÄÄ2 3
trimmedTargetName
ÄÄ4 E
)
ÄÄE F
)
ÄÄF G
{
ÅÅ "
m_writeToErrorStream
ÇÇ 
=
ÇÇ 
true
ÇÇ  
;
ÇÇ  !
}
ÉÉ 
else
ÑÑ 
{
ÖÖ "
m_writeToErrorStream
ÜÜ 
=
ÜÜ 
false
ÜÜ !
;
ÜÜ! "
}
áá 
}
àà 
}
ââ 
public
ññ 
void
ññ	 

AddMapping
ññ 
(
ññ 
LevelColors
ññ $
mapping
ññ% ,
)
ññ, -
{
óó 
m_levelMapping
òò 
.
òò 
Add
òò 
(
òò 
mapping
òò 
)
òò 
;
òò 
}
ôô 
override
´´ 

	protected
´´ 
void
´´ 
Append
´´  
(
´´  !
log4net
´´! (
.
´´( )
Core
´´) -
.
´´- .
LoggingEvent
´´. :
loggingEvent
´´; G
)
´´G H
{
¨¨ 
string
≠≠ 	
loggingMessage
≠≠
 
=
≠≠  
RenderLoggingEvent
≠≠ -
(
≠≠- .
loggingEvent
≠≠. :
)
≠≠: ;
;
≠≠; <
LevelColors
∞∞ 
levelColors
∞∞ 
=
∞∞ 
m_levelMapping
∞∞ +
.
∞∞+ ,
Lookup
∞∞, 2
(
∞∞2 3
loggingEvent
∞∞3 ?
.
∞∞? @
Level
∞∞@ E
)
∞∞E F
as
∞∞G I
LevelColors
∞∞J U
;
∞∞U V
if
±± 
(
±± 
levelColors
±± 
!=
±± 
null
±± 
)
±± 
{
≤≤ 
loggingMessage
¥¥ 
=
¥¥ 
levelColors
¥¥  
.
¥¥  !
CombinedColor
¥¥! .
+
¥¥/ 0
loggingMessage
¥¥1 ?
;
¥¥? @
}
µµ 
if
ªª 
(
ªª 
loggingMessage
ªª 
.
ªª 
Length
ªª 
>
ªª 
$num
ªª  
)
ªª  !
{
ºº 
if
ΩΩ 
(
ΩΩ 
loggingMessage
ΩΩ 
.
ΩΩ 
EndsWith
ΩΩ 
(
ΩΩ  
$str
ΩΩ  &
)
ΩΩ& '
||
ΩΩ( *
loggingMessage
ΩΩ+ 9
.
ΩΩ9 :
EndsWith
ΩΩ: B
(
ΩΩB C
$str
ΩΩC I
)
ΩΩI J
)
ΩΩJ K
{
ææ 
loggingMessage
øø 
=
øø 
loggingMessage
øø $
.
øø$ %
Insert
øø% +
(
øø+ ,
loggingMessage
øø, :
.
øø: ;
Length
øø; A
-
øøB C
$num
øøD E
,
øøE F
PostEventCodes
øøG U
)
øøU V
;
øøV W
}
¿¿ 
else
¡¡ 
if
¡¡	 
(
¡¡ 
loggingMessage
¡¡ 
.
¡¡ 
EndsWith
¡¡ $
(
¡¡$ %
$str
¡¡% )
)
¡¡) *
||
¡¡+ -
loggingMessage
¡¡. <
.
¡¡< =
EndsWith
¡¡= E
(
¡¡E F
$str
¡¡F J
)
¡¡J K
)
¡¡K L
{
¬¬ 
loggingMessage
√√ 
=
√√ 
loggingMessage
√√ $
.
√√$ %
Insert
√√% +
(
√√+ ,
loggingMessage
√√, :
.
√√: ;
Length
√√; A
-
√√B C
$num
√√D E
,
√√E F
PostEventCodes
√√G U
)
√√U V
;
√√V W
}
ƒƒ 
else
≈≈ 
{
∆∆ 
loggingMessage
«« 
=
«« 
loggingMessage
«« $
+
««% &
PostEventCodes
««' 5
;
««5 6
}
»» 
}
…… 
else
   
{
ÀÀ 
if
ÃÃ 
(
ÃÃ 
loggingMessage
ÃÃ 
[
ÃÃ 
$num
ÃÃ 
]
ÃÃ 
==
ÃÃ 
$char
ÃÃ !
||
ÃÃ" $
loggingMessage
ÃÃ% 3
[
ÃÃ3 4
$num
ÃÃ4 5
]
ÃÃ5 6
==
ÃÃ7 9
$char
ÃÃ: >
)
ÃÃ> ?
{
ÕÕ 
loggingMessage
ŒŒ 
=
ŒŒ 
PostEventCodes
ŒŒ $
+
ŒŒ% &
loggingMessage
ŒŒ' 5
;
ŒŒ5 6
}
œœ 
else
–– 
{
—— 
loggingMessage
““ 
=
““ 
loggingMessage
““ $
+
““% &
PostEventCodes
““' 5
;
““5 6
}
”” 
}
‘‘ 
if
⁄⁄ 
(
⁄⁄ "
m_writeToErrorStream
⁄⁄ 
)
⁄⁄ 
{
€€ 
Console
›› 
.
›› 
Error
›› 
.
›› 
Write
›› 
(
›› 
loggingMessage
›› &
)
››& '
;
››' (
}
ﬁﬁ 
else
ﬂﬂ 
{
‡‡ 
Console
‚‚ 
.
‚‚ 
Write
‚‚ 
(
‚‚ 
loggingMessage
‚‚  
)
‚‚  !
;
‚‚! "
}
„„ 
}
ÊÊ 
override
ÒÒ 

	protected
ÒÒ 
bool
ÒÒ 
RequiresLayout
ÒÒ (
{
ÚÚ 
get
ÛÛ 
{
ÛÛ 
return
ÛÛ	 
true
ÛÛ 
;
ÛÛ 
}
ÛÛ 
}
ÙÙ 
public
˛˛ 
override
˛˛	 
void
˛˛ 
ActivateOptions
˛˛ &
(
˛˛& '
)
˛˛' (
{
ˇˇ 
base
ÄÄ 
.
ÄÄ 
ActivateOptions
ÄÄ 
(
ÄÄ 
)
ÄÄ 
;
ÄÄ 
m_levelMapping
ÅÅ 
.
ÅÅ 
ActivateOptions
ÅÅ !
(
ÅÅ! "
)
ÅÅ" #
;
ÅÅ# $
}
ÇÇ 
public
íí 
const
íí	 
string
íí 

ConsoleOut
íí  
=
íí! "
$str
íí# 0
;
íí0 1
public
ûû 
const
ûû	 
string
ûû 
ConsoleError
ûû "
=
ûû# $
$str
ûû% 4
;
ûû4 5
private
ßß 	
bool
ßß
 "
m_writeToErrorStream
ßß #
=
ßß$ %
false
ßß& +
;
ßß+ ,
private
¨¨ 	
LevelMapping
¨¨
 
m_levelMapping
¨¨ %
=
¨¨& '
new
¨¨( +
LevelMapping
¨¨, 8
(
¨¨8 9
)
¨¨9 :
;
¨¨: ;
private
±± 	
const
±±
 
string
±± 
PostEventCodes
±± %
=
±±& '
$str
±±( 1
;
±±1 2
public
¿¿ 
class
¿¿	 
LevelColors
¿¿ 
:
¿¿ 
LevelMappingEntry
¿¿ .
{
¡¡ 
private
¬¬ 

	AnsiColor
¬¬ 
m_foreColor
¬¬  
;
¬¬  !
private
√√ 

	AnsiColor
√√ 
m_backColor
√√  
;
√√  !
private
ƒƒ 

AnsiAttributes
ƒƒ 
m_attributes
ƒƒ &
;
ƒƒ& '
private
≈≈ 

string
≈≈ 
m_combinedColor
≈≈ !
=
≈≈" #
$str
≈≈$ &
;
≈≈& '
public
–– 	
	AnsiColor
––
 
	ForeColor
–– 
{
—— 
get
““ 
{
““ 	
return
““
 
m_foreColor
““ 
;
““ 
}
““ 
set
”” 
{
”” 	
m_foreColor
””
 
=
”” 
value
”” 
;
”” 
}
””  
}
‘‘ 
public
ﬂﬂ 	
	AnsiColor
ﬂﬂ
 
	BackColor
ﬂﬂ 
{
‡‡ 
get
·· 
{
·· 	
return
··
 
m_backColor
·· 
;
·· 
}
·· 
set
‚‚ 
{
‚‚ 	
m_backColor
‚‚
 
=
‚‚ 
value
‚‚ 
;
‚‚ 
}
‚‚  
}
„„ 
public
ÓÓ 	
AnsiAttributes
ÓÓ
 

Attributes
ÓÓ #
{
ÔÔ 
get
 
{
 	
return

 
m_attributes
 
;
 
}
  
set
ÒÒ 
{
ÒÒ 	
m_attributes
ÒÒ
 
=
ÒÒ 
value
ÒÒ 
;
ÒÒ 
}
ÒÒ  !
}
ÚÚ 
public
˝˝ 	
override
˝˝
 
void
˝˝ 
ActivateOptions
˝˝ '
(
˝˝' (
)
˝˝( )
{
˛˛ 
base
ˇˇ 
.
ˇˇ 	
ActivateOptions
ˇˇ	 
(
ˇˇ 
)
ˇˇ 
;
ˇˇ 
StringBuilder
ÅÅ 
buf
ÅÅ 
=
ÅÅ 
new
ÅÅ 
StringBuilder
ÅÅ )
(
ÅÅ) *
)
ÅÅ* +
;
ÅÅ+ ,
buf
ÑÑ 
.
ÑÑ 
Append
ÑÑ 
(
ÑÑ 
$str
ÑÑ 
)
ÑÑ 
;
ÑÑ 
int
ÜÜ 
lightAdjustment
ÜÜ 
=
ÜÜ 
(
ÜÜ 
(
ÜÜ 
m_attributes
ÜÜ (
&
ÜÜ) *
AnsiAttributes
ÜÜ+ 9
.
ÜÜ9 :
Light
ÜÜ: ?
)
ÜÜ? @
>
ÜÜA B
$num
ÜÜC D
)
ÜÜD E
?
ÜÜF G
$num
ÜÜH J
:
ÜÜK L
$num
ÜÜM N
;
ÜÜN O
buf
ââ 
.
ââ 
Append
ââ 
(
ââ 
$num
ââ 
+
ââ 
lightAdjustment
ââ #
+
ââ$ %
(
ââ& '
int
ââ' *
)
ââ* +
m_foreColor
ââ+ 6
)
ââ6 7
;
ââ7 8
buf
ää 
.
ää 
Append
ää 
(
ää 
$char
ää 
)
ää 
;
ää 
buf
çç 
.
çç 
Append
çç 
(
çç 
$num
çç 
+
çç 
lightAdjustment
çç #
+
çç$ %
(
çç& '
int
çç' *
)
çç* +
m_backColor
çç+ 6
)
çç6 7
;
çç7 8
if
êê 
(
êê 
(
êê 	
m_attributes
êê	 
&
êê 
AnsiAttributes
êê &
.
êê& '
Bright
êê' -
)
êê- .
>
êê/ 0
$num
êê1 2
)
êê2 3
{
ëë 
buf
íí 
.
íí 	
Append
íí	 
(
íí 
$str
íí 
)
íí 
;
íí 
}
ìì 
if
îî 
(
îî 
(
îî 	
m_attributes
îî	 
&
îî 
AnsiAttributes
îî &
.
îî& '
Dim
îî' *
)
îî* +
>
îî, -
$num
îî. /
)
îî/ 0
{
ïï 
buf
ññ 
.
ññ 	
Append
ññ	 
(
ññ 
$str
ññ 
)
ññ 
;
ññ 
}
óó 
if
òò 
(
òò 
(
òò 	
m_attributes
òò	 
&
òò 
AnsiAttributes
òò &
.
òò& '

Underscore
òò' 1
)
òò1 2
>
òò3 4
$num
òò5 6
)
òò6 7
{
ôô 
buf
öö 
.
öö 	
Append
öö	 
(
öö 
$str
öö 
)
öö 
;
öö 
}
õõ 
if
úú 
(
úú 
(
úú 	
m_attributes
úú	 
&
úú 
AnsiAttributes
úú &
.
úú& '
Blink
úú' ,
)
úú, -
>
úú. /
$num
úú0 1
)
úú1 2
{
ùù 
buf
ûû 
.
ûû 	
Append
ûû	 
(
ûû 
$str
ûû 
)
ûû 
;
ûû 
}
üü 
if
†† 
(
†† 
(
†† 	
m_attributes
††	 
&
†† 
AnsiAttributes
†† &
.
††& '
Reverse
††' .
)
††. /
>
††0 1
$num
††2 3
)
††3 4
{
°° 
buf
¢¢ 
.
¢¢ 	
Append
¢¢	 
(
¢¢ 
$str
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
if
§§ 
(
§§ 
(
§§ 	
m_attributes
§§	 
&
§§ 
AnsiAttributes
§§ &
.
§§& '
Hidden
§§' -
)
§§- .
>
§§/ 0
$num
§§1 2
)
§§2 3
{
•• 
buf
¶¶ 
.
¶¶ 	
Append
¶¶	 
(
¶¶ 
$str
¶¶ 
)
¶¶ 
;
¶¶ 
}
ßß 
if
®® 
(
®® 
(
®® 	
m_attributes
®®	 
&
®® 
AnsiAttributes
®® &
.
®®& '
Strikethrough
®®' 4
)
®®4 5
>
®®6 7
$num
®®8 9
)
®®9 :
{
©© 
buf
™™ 
.
™™ 	
Append
™™	 
(
™™ 
$str
™™ 
)
™™ 
;
™™ 
}
´´ 
buf
≠≠ 
.
≠≠ 
Append
≠≠ 
(
≠≠ 
$char
≠≠ 
)
≠≠ 
;
≠≠ 
m_combinedColor
ØØ 
=
ØØ 
buf
ØØ 
.
ØØ 
ToString
ØØ "
(
ØØ" #
)
ØØ# $
;
ØØ$ %
}
∞∞ 
internal
∂∂ 
string
∂∂ 
CombinedColor
∂∂  
{
∑∑ 
get
∏∏ 
{
∏∏ 	
return
∏∏
 
m_combinedColor
∏∏  
;
∏∏  !
}
∏∏" #
}
ππ 
}
∫∫ 
}
ΩΩ 
}ææ ‚∫
FC:\sonarqube\projects\log4net-2.0.7\src\Appender\AppenderCollection.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public 
class 
AppenderCollection  
:! "
ICollection# .
,. /
IList0 5
,5 6
IEnumerable7 B
, 

ICloneable 
{!! 
public'' 
	interface''	 )
IAppenderCollectionEnumerator'' 0
{(( 
	IAppender,, 
Current,, 
{,, 
get,, 
;,, 
},, 
bool88 
MoveNext88 
(88 
)88 
;88 
void== 
Reset== 
(== 
)== 
;== 
}>> 
privateAA 	
constAA
 
intAA 
DEFAULT_CAPACITYAA $
=AA% &
$numAA' )
;AA) *
privateEE 	
	IAppenderEE
 
[EE 
]EE 
m_arrayEE 
;EE 
privateFF 	
intFF
 
m_countFF 
=FF 
$numFF 
;FF 
privateGG 	
intGG
 
	m_versionGG 
=GG 
$numGG 
;GG 
publicTT 
staticTT	 
AppenderCollectionTT "
ReadOnlyTT# +
(TT+ ,
AppenderCollectionTT, >
listTT? C
)TTC D
{UU 
ifVV 
(VV 
listVV 

==VV
 
nullVV 
)VV 
throwVV 
newVV !
ArgumentNullExceptionVV 1
(VV1 2
$strVV2 8
)VV8 9
;VV9 :
returnXX 	
newXX
 &
ReadOnlyAppenderCollectionXX (
(XX( )
listXX) -
)XX- .
;XX. /
}YY 
publicbb 
staticbb	 
readonlybb 
AppenderCollectionbb +
EmptyCollectionbb, ;
=bb< =
ReadOnlybb> F
(bbF G
newbbG J
AppenderCollectionbbK ]
(bb] ^
$numbb^ _
)bb_ `
)bb` a
;bba b
publicll 
AppenderCollectionll	 
(ll 
)ll 
{mm 
m_arraynn 

=nn 
newnn 
	IAppendernn 
[nn 
DEFAULT_CAPACITYnn +
]nn+ ,
;nn, -
}oo 
publicxx 
AppenderCollectionxx	 
(xx 
intxx 
capacityxx  (
)xx( )
{yy 
m_arrayzz 

=zz 
newzz 
	IAppenderzz 
[zz 
capacityzz #
]zz# $
;zz$ %
}{{ 
public
ÇÇ  
AppenderCollection
ÇÇ	 
(
ÇÇ  
AppenderCollection
ÇÇ .
c
ÇÇ/ 0
)
ÇÇ0 1
{
ÉÉ 
m_array
ÑÑ 

=
ÑÑ 
new
ÑÑ 
	IAppender
ÑÑ 
[
ÑÑ 
c
ÑÑ 
.
ÑÑ 
Count
ÑÑ "
]
ÑÑ" #
;
ÑÑ# $
AddRange
ÖÖ 
(
ÖÖ 
c
ÖÖ 
)
ÖÖ 
;
ÖÖ 
}
ÜÜ 
public
çç  
AppenderCollection
çç	 
(
çç 
	IAppender
çç %
[
çç% &
]
çç& '
a
çç( )
)
çç) *
{
éé 
m_array
èè 

=
èè 
new
èè 
	IAppender
èè 
[
èè 
a
èè 
.
èè 
Length
èè #
]
èè# $
;
èè$ %
AddRange
êê 
(
êê 
a
êê 
)
êê 
;
êê 
}
ëë 
public
òò  
AppenderCollection
òò	 
(
òò 
ICollection
òò '
col
òò( +
)
òò+ ,
{
ôô 
m_array
öö 

=
öö 
new
öö 
	IAppender
öö 
[
öö 
col
öö 
.
öö 
Count
öö $
]
öö$ %
;
öö% &
AddRange
õõ 
(
õõ 
col
õõ 
)
õõ 
;
õõ 
}
úú 
internal
££ 

	protected
££ 
enum
££ 
Tag
££ 
{
§§ 
Default
®® 

}
©© 
internal
∞∞ 

	protected
∞∞  
AppenderCollection
∞∞ '
(
∞∞' (
Tag
∞∞( +
tag
∞∞, /
)
∞∞/ 0
{
±± 
m_array
≤≤ 

=
≤≤ 
null
≤≤ 
;
≤≤ 
}
≥≥ 
public
ºº 
virtual
ºº	 
int
ºº 
Count
ºº 
{
ΩΩ 
get
ææ 
{
ææ 
return
ææ	 
m_count
ææ 
;
ææ 
}
ææ 
}
øø 
public
∆∆ 
virtual
∆∆	 
void
∆∆ 
CopyTo
∆∆ 
(
∆∆ 
	IAppender
∆∆ &
[
∆∆& '
]
∆∆' (
array
∆∆) .
)
∆∆. /
{
«« 
this
»» 
.
»» 
CopyTo
»» 
(
»» 
array
»» 
,
»» 
$num
»» 
)
»» 
;
»» 
}
…… 
public
—— 
virtual
——	 
void
—— 
CopyTo
—— 
(
—— 
	IAppender
—— &
[
——& '
]
——' (
array
——) .
,
——. /
int
——0 3
start
——4 9
)
——9 :
{
““ 
if
”” 
(
”” 
m_count
”” 
>
”” 
array
”” 
.
”” 
GetUpperBound
”” $
(
””$ %
$num
””% &
)
””& '
+
””( )
$num
””* +
-
””, -
start
””. 3
)
””3 4
{
‘‘ 
throw
’’ 	
new
’’
 
System
’’ 
.
’’ 
ArgumentException
’’ &
(
’’& '
$str
’’' O
)
’’O P
;
’’P Q
}
÷÷ 
Array
ÿÿ 
.
ÿÿ 	
Copy
ÿÿ	 
(
ÿÿ 
m_array
ÿÿ 
,
ÿÿ 
$num
ÿÿ 
,
ÿÿ 
array
ÿÿ 
,
ÿÿ  
start
ÿÿ! &
,
ÿÿ& '
m_count
ÿÿ( /
)
ÿÿ/ 0
;
ÿÿ0 1
}
ŸŸ 
public
ﬂﬂ 
virtual
ﬂﬂ	 
bool
ﬂﬂ 
IsSynchronized
ﬂﬂ $
{
‡‡ 
get
·· 
{
·· 
return
··	 
false
·· 
;
·· 
}
·· 
}
‚‚ 
public
ÁÁ 
virtual
ÁÁ	 
object
ÁÁ 
SyncRoot
ÁÁ  
{
ËË 
get
ÈÈ 
{
ÈÈ 
return
ÈÈ	 
m_array
ÈÈ 
;
ÈÈ 
}
ÈÈ 
}
ÍÍ 
public
˘˘ 
virtual
˘˘	 
	IAppender
˘˘ 
this
˘˘ 
[
˘˘  
int
˘˘  #
index
˘˘$ )
]
˘˘) *
{
˙˙ 
get
˚˚ 
{
¸¸ 
ValidateIndex
˝˝ 
(
˝˝ 
index
˝˝ 
)
˝˝ 
;
˝˝ 
return
˛˛ 

m_array
˛˛ 
[
˛˛ 
index
˛˛ 
]
˛˛ 
;
˛˛ 
}
ˇˇ 
set
ÄÄ 
{
ÅÅ 
ValidateIndex
ÇÇ 
(
ÇÇ 
index
ÇÇ 
)
ÇÇ 
;
ÇÇ 
++
ÉÉ 
	m_version
ÉÉ 
;
ÉÉ 
m_array
ÑÑ 
[
ÑÑ 
index
ÑÑ 
]
ÑÑ 
=
ÑÑ 
value
ÑÑ 
;
ÑÑ 
}
ÖÖ 
}
ÜÜ 
public
çç 
virtual
çç	 
int
çç 
Add
çç 
(
çç 
	IAppender
çç "
item
çç# '
)
çç' (
{
éé 
if
èè 
(
èè 
m_count
èè 
==
èè 
m_array
èè 
.
èè 
Length
èè  
)
èè  !
{
êê 
EnsureCapacity
ëë 
(
ëë 
m_count
ëë 
+
ëë 
$num
ëë 
)
ëë 
;
ëë  
}
íí 
m_array
îî 

[
îî
 
m_count
îî 
]
îî 
=
îî 
item
îî 
;
îî 
	m_version
ïï 
++
ïï 
;
ïï 
return
óó 	
m_count
óó
 
++
óó 
;
óó 
}
òò 
public
ùù 
virtual
ùù	 
void
ùù 
Clear
ùù 
(
ùù 
)
ùù 
{
ûû 
++
üü 
	m_version
üü 
;
üü 
m_array
†† 

=
†† 
new
†† 
	IAppender
†† 
[
†† 
DEFAULT_CAPACITY
†† +
]
††+ ,
;
††, -
m_count
°° 

=
°° 
$num
°° 
;
°° 
}
¢¢ 
public
®® 
virtual
®®	 
object
®® 
Clone
®® 
(
®® 
)
®® 
{
©©  
AppenderCollection
™™ 
newCol
™™ 
=
™™ 
new
™™ " 
AppenderCollection
™™# 5
(
™™5 6
m_count
™™6 =
)
™™= >
;
™™> ?
Array
´´ 
.
´´ 	
Copy
´´	 
(
´´ 
m_array
´´ 
,
´´ 
$num
´´ 
,
´´ 
newCol
´´  
.
´´  !
m_array
´´! (
,
´´( )
$num
´´* +
,
´´+ ,
m_count
´´- 4
)
´´4 5
;
´´5 6
newCol
¨¨ 	
.
¨¨	 

m_count
¨¨
 
=
¨¨ 
m_count
¨¨ 
;
¨¨ 
newCol
≠≠ 	
.
≠≠	 

	m_version
≠≠
 
=
≠≠ 
	m_version
≠≠ 
;
≠≠  
return
ØØ 	
newCol
ØØ
 
;
ØØ 
}
∞∞ 
public
∑∑ 
virtual
∑∑	 
bool
∑∑ 
Contains
∑∑ 
(
∑∑ 
	IAppender
∑∑ (
item
∑∑) -
)
∑∑- .
{
∏∏ 
for
ππ 
(
ππ 
int
ππ 
i
ππ 
=
ππ 
$num
ππ 
;
ππ 
i
ππ 
!=
ππ 
m_count
ππ 
;
ππ 
++
ππ !
i
ππ! "
)
ππ" #
{
∫∫ 
if
ªª 
(
ªª 
m_array
ªª 
[
ªª 
i
ªª 
]
ªª 
.
ªª 
Equals
ªª 
(
ªª 
item
ªª 
)
ªª 
)
ªª  
{
ºº 
return
ΩΩ 
true
ΩΩ 
;
ΩΩ 
}
ææ 
}
øø 
return
¿¿ 	
false
¿¿
 
;
¿¿ 
}
¡¡ 
public
ÃÃ 
virtual
ÃÃ	 
int
ÃÃ 
IndexOf
ÃÃ 
(
ÃÃ 
	IAppender
ÃÃ &
item
ÃÃ' +
)
ÃÃ+ ,
{
ÕÕ 
for
ŒŒ 
(
ŒŒ 
int
ŒŒ 
i
ŒŒ 
=
ŒŒ 
$num
ŒŒ 
;
ŒŒ 
i
ŒŒ 
!=
ŒŒ 
m_count
ŒŒ 
;
ŒŒ 
++
ŒŒ !
i
ŒŒ! "
)
ŒŒ" #
{
œœ 
if
–– 
(
–– 
m_array
–– 
[
–– 
i
–– 
]
–– 
.
–– 
Equals
–– 
(
–– 
item
–– 
)
–– 
)
––  
{
—— 
return
““ 
i
““ 
;
““ 
}
”” 
}
‘‘ 
return
’’ 	
-
’’
 
$num
’’ 
;
’’ 
}
÷÷ 
public
‚‚ 
virtual
‚‚	 
void
‚‚ 
Insert
‚‚ 
(
‚‚ 
int
‚‚  
index
‚‚! &
,
‚‚& '
	IAppender
‚‚( 1
item
‚‚2 6
)
‚‚6 7
{
„„ 
ValidateIndex
‰‰ 
(
‰‰ 
index
‰‰ 
,
‰‰ 
true
‰‰ 
)
‰‰ 
;
‰‰ 
if
ÊÊ 
(
ÊÊ 
m_count
ÊÊ 
==
ÊÊ 
m_array
ÊÊ 
.
ÊÊ 
Length
ÊÊ  
)
ÊÊ  !
{
ÁÁ 
EnsureCapacity
ËË 
(
ËË 
m_count
ËË 
+
ËË 
$num
ËË 
)
ËË 
;
ËË  
}
ÈÈ 
if
ÎÎ 
(
ÎÎ 
index
ÎÎ 
<
ÎÎ 
m_count
ÎÎ 
)
ÎÎ 
{
ÏÏ 
Array
ÌÌ 	
.
ÌÌ	 

Copy
ÌÌ
 
(
ÌÌ 
m_array
ÌÌ 
,
ÌÌ 
index
ÌÌ 
,
ÌÌ 
m_array
ÌÌ &
,
ÌÌ& '
index
ÌÌ( -
+
ÌÌ. /
$num
ÌÌ0 1
,
ÌÌ1 2
m_count
ÌÌ3 :
-
ÌÌ; <
index
ÌÌ= B
)
ÌÌB C
;
ÌÌC D
}
ÓÓ 
m_array
 

[

 
index
 
]
 
=
 
item
 
;
 
m_count
ÒÒ 

++
ÒÒ
 
;
ÒÒ 
	m_version
ÚÚ 
++
ÚÚ 
;
ÚÚ 
}
ÛÛ 
public
¸¸ 
virtual
¸¸	 
void
¸¸ 
Remove
¸¸ 
(
¸¸ 
	IAppender
¸¸ &
item
¸¸' +
)
¸¸+ ,
{
˝˝ 
int
˛˛ 
i
˛˛ 
=
˛˛	 

IndexOf
˛˛ 
(
˛˛ 
item
˛˛ 
)
˛˛ 
;
˛˛ 
if
ˇˇ 
(
ˇˇ 
i
ˇˇ 
<
ˇˇ	 

$num
ˇˇ 
)
ˇˇ 
{
ÄÄ 
throw
ÅÅ 	
new
ÅÅ
 
System
ÅÅ 
.
ÅÅ 
ArgumentException
ÅÅ &
(
ÅÅ& '
$str
ÅÅ' 
)ÅÅ Ä
;ÅÅÄ Å
}
ÇÇ 
++
ÑÑ 
	m_version
ÑÑ 
;
ÑÑ 
RemoveAt
ÖÖ 
(
ÖÖ 
i
ÖÖ 
)
ÖÖ 
;
ÖÖ 
}
ÜÜ 
public
ëë 
virtual
ëë	 
void
ëë 
RemoveAt
ëë 
(
ëë 
int
ëë "
index
ëë# (
)
ëë( )
{
íí 
ValidateIndex
ìì 
(
ìì 
index
ìì 
)
ìì 
;
ìì 
m_count
ïï 

--
ïï
 
;
ïï 
if
óó 
(
óó 
index
óó 
<
óó 
m_count
óó 
)
óó 
{
òò 
Array
ôô 	
.
ôô	 

Copy
ôô
 
(
ôô 
m_array
ôô 
,
ôô 
index
ôô 
+
ôô 
$num
ôô  !
,
ôô! "
m_array
ôô# *
,
ôô* +
index
ôô, 1
,
ôô1 2
m_count
ôô3 :
-
ôô; <
index
ôô= B
)
ôôB C
;
ôôC D
}
öö 
	IAppender
üü 
[
üü 
]
üü 
temp
üü 
=
üü 
new
üü 
	IAppender
üü #
[
üü# $
$num
üü$ %
]
üü% &
;
üü& '
Array
†† 
.
†† 	
Copy
††	 
(
†† 
temp
†† 
,
†† 
$num
†† 
,
†† 
m_array
†† 
,
†† 
m_count
††  '
,
††' (
$num
††) *
)
††* +
;
††+ ,
	m_version
°° 
++
°° 
;
°° 
}
¢¢ 
public
®® 
virtual
®®	 
bool
®® 
IsFixedSize
®® !
{
©© 
get
™™ 
{
™™ 
return
™™	 
false
™™ 
;
™™ 
}
™™ 
}
´´ 
public
±± 
virtual
±±	 
bool
±± 

IsReadOnly
±±  
{
≤≤ 
get
≥≥ 
{
≥≥ 
return
≥≥	 
false
≥≥ 
;
≥≥ 
}
≥≥ 
}
¥¥ 
public
ææ 
virtual
ææ	 +
IAppenderCollectionEnumerator
ææ .
GetEnumerator
ææ/ <
(
ææ< =
)
ææ= >
{
øø 
return
¿¿ 	
new
¿¿
 

Enumerator
¿¿ 
(
¿¿ 
this
¿¿ 
)
¿¿ 
;
¿¿ 
}
¡¡ 
public
   
virtual
  	 
int
   
Capacity
   
{
ÀÀ 
get
ÃÃ 
{
ÕÕ 
return
ŒŒ 

m_array
ŒŒ 
.
ŒŒ 
Length
ŒŒ 
;
ŒŒ 
}
œœ 
set
–– 
{
—— 
if
““ 
(
““ 
value
““ 
<
““ 
m_count
““ 
)
““ 
{
”” 
value
‘‘ 

=
‘‘ 
m_count
‘‘ 
;
‘‘ 
}
’’ 
if
◊◊ 
(
◊◊ 
value
◊◊ 
!=
◊◊ 
m_array
◊◊ 
.
◊◊ 
Length
◊◊ 
)
◊◊  
{
ÿÿ 
if
ŸŸ 
(
ŸŸ 	
value
ŸŸ	 
>
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
	IAppender
€€ 
[
€€ 
]
€€ 
temp
€€ 
=
€€ 
new
€€ 
	IAppender
€€ &
[
€€& '
value
€€' ,
]
€€, -
;
€€- .
Array
‹‹ 
.
‹‹ 
Copy
‹‹ 
(
‹‹ 
m_array
‹‹ 
,
‹‹ 
$num
‹‹ 
,
‹‹ 
temp
‹‹ !
,
‹‹! "
$num
‹‹# $
,
‹‹$ %
m_count
‹‹& -
)
‹‹- .
;
‹‹. /
m_array
›› 
=
›› 
temp
›› 
;
›› 
}
ﬁﬁ 
else
ﬂﬂ 	
{
‡‡ 
m_array
·· 
=
·· 
new
·· 
	IAppender
·· 
[
·· 
DEFAULT_CAPACITY
·· .
]
··. /
;
··/ 0
}
‚‚ 
}
„„ 
}
‰‰ 
}
ÂÂ 
public
ÏÏ 
virtual
ÏÏ	 
int
ÏÏ 
AddRange
ÏÏ 
(
ÏÏ  
AppenderCollection
ÏÏ 0
x
ÏÏ1 2
)
ÏÏ2 3
{
ÌÌ 
if
ÓÓ 
(
ÓÓ 
m_count
ÓÓ 
+
ÓÓ 
x
ÓÓ 
.
ÓÓ 
Count
ÓÓ 
>=
ÓÓ 
m_array
ÓÓ #
.
ÓÓ# $
Length
ÓÓ$ *
)
ÓÓ* +
{
ÔÔ 
EnsureCapacity
 
(
 
m_count
 
+
 
x
 
.
 
Count
 $
)
$ %
;
% &
}
ÒÒ 
Array
ÛÛ 
.
ÛÛ 	
Copy
ÛÛ	 
(
ÛÛ 
x
ÛÛ 
.
ÛÛ 
m_array
ÛÛ 
,
ÛÛ 
$num
ÛÛ 
,
ÛÛ 
m_array
ÛÛ #
,
ÛÛ# $
m_count
ÛÛ% ,
,
ÛÛ, -
x
ÛÛ. /
.
ÛÛ/ 0
Count
ÛÛ0 5
)
ÛÛ5 6
;
ÛÛ6 7
m_count
ÙÙ 

+=
ÙÙ 
x
ÙÙ 
.
ÙÙ 
Count
ÙÙ 
;
ÙÙ 
	m_version
ıı 
++
ıı 
;
ıı 
return
˜˜ 	
m_count
˜˜
 
;
˜˜ 
}
¯¯ 
public
ˇˇ 
virtual
ˇˇ	 
int
ˇˇ 
AddRange
ˇˇ 
(
ˇˇ 
	IAppender
ˇˇ '
[
ˇˇ' (
]
ˇˇ( )
x
ˇˇ* +
)
ˇˇ+ ,
{
ÄÄ 
if
ÅÅ 
(
ÅÅ 
m_count
ÅÅ 
+
ÅÅ 
x
ÅÅ 
.
ÅÅ 
Length
ÅÅ 
>=
ÅÅ 
m_array
ÅÅ $
.
ÅÅ$ %
Length
ÅÅ% +
)
ÅÅ+ ,
{
ÇÇ 
EnsureCapacity
ÉÉ 
(
ÉÉ 
m_count
ÉÉ 
+
ÉÉ 
x
ÉÉ 
.
ÉÉ 
Length
ÉÉ %
)
ÉÉ% &
;
ÉÉ& '
}
ÑÑ 
Array
ÜÜ 
.
ÜÜ 	
Copy
ÜÜ	 
(
ÜÜ 
x
ÜÜ 
,
ÜÜ 
$num
ÜÜ 
,
ÜÜ 
m_array
ÜÜ 
,
ÜÜ 
m_count
ÜÜ $
,
ÜÜ$ %
x
ÜÜ& '
.
ÜÜ' (
Length
ÜÜ( .
)
ÜÜ. /
;
ÜÜ/ 0
m_count
áá 

+=
áá 
x
áá 
.
áá 
Length
áá 
;
áá 
	m_version
àà 
++
àà 
;
àà 
return
ää 	
m_count
ää
 
;
ää 
}
ãã 
public
íí 
virtual
íí	 
int
íí 
AddRange
íí 
(
íí 
ICollection
íí )
col
íí* -
)
íí- .
{
ìì 
if
îî 
(
îî 
m_count
îî 
+
îî 
col
îî 
.
îî 
Count
îî 
>=
îî 
m_array
îî %
.
îî% &
Length
îî& ,
)
îî, -
{
ïï 
EnsureCapacity
ññ 
(
ññ 
m_count
ññ 
+
ññ 
col
ññ  
.
ññ  !
Count
ññ! &
)
ññ& '
;
ññ' (
}
óó 
foreach
ôô 

(
ôô
 
object
ôô 
item
ôô 
in
ôô 
col
ôô 
)
ôô 
{
öö 
Add
õõ 
(
õõ 
(
õõ 	
	IAppender
õõ	 
)
õõ 
item
õõ 
)
õõ 
;
õõ 
}
úú 
return
ûû 	
m_count
ûû
 
;
ûû 
}
üü 
public
§§ 
virtual
§§	 
void
§§ 

TrimToSize
§§  
(
§§  !
)
§§! "
{
•• 
this
¶¶ 
.
¶¶ 
Capacity
¶¶ 
=
¶¶ 
m_count
¶¶ 
;
¶¶ 
}
ßß 
public
≠≠ 
virtual
≠≠	 
	IAppender
≠≠ 
[
≠≠ 
]
≠≠ 
ToArray
≠≠ $
(
≠≠$ %
)
≠≠% &
{
ÆÆ 
	IAppender
ØØ 
[
ØØ 
]
ØØ 
resultArray
ØØ 
=
ØØ 
new
ØØ  
	IAppender
ØØ! *
[
ØØ* +
m_count
ØØ+ 2
]
ØØ2 3
;
ØØ3 4
if
∞∞ 
(
∞∞ 
m_count
∞∞ 
>
∞∞ 
$num
∞∞ 
)
∞∞ 
{
±± 
Array
≤≤ 	
.
≤≤	 

Copy
≤≤
 
(
≤≤ 
m_array
≤≤ 
,
≤≤ 
$num
≤≤ 
,
≤≤ 
resultArray
≤≤ &
,
≤≤& '
$num
≤≤( )
,
≤≤) *
m_count
≤≤+ 2
)
≤≤2 3
;
≤≤3 4
}
≥≥ 
return
¥¥ 	
resultArray
¥¥
 
;
¥¥ 
}
µµ 
private
¿¿ 	
void
¿¿
 
ValidateIndex
¿¿ 
(
¿¿ 
int
¿¿  
i
¿¿! "
)
¿¿" #
{
¡¡ 
ValidateIndex
¬¬ 
(
¬¬ 
i
¬¬ 
,
¬¬ 
false
¬¬ 
)
¬¬ 
;
¬¬ 
}
√√ 
private
   	
void
  
 
ValidateIndex
   
(
   
int
    
i
  ! "
,
  " #
bool
  $ (
allowEqualEnd
  ) 6
)
  6 7
{
ÀÀ 
int
ÃÃ 
max
ÃÃ 

=
ÃÃ 
(
ÃÃ 
allowEqualEnd
ÃÃ 
)
ÃÃ 
?
ÃÃ 
(
ÃÃ  
m_count
ÃÃ  '
)
ÃÃ' (
:
ÃÃ) *
(
ÃÃ+ ,
m_count
ÃÃ, 3
-
ÃÃ3 4
$num
ÃÃ4 5
)
ÃÃ5 6
;
ÃÃ6 7
if
ÕÕ 
(
ÕÕ 
i
ÕÕ 
<
ÕÕ	 

$num
ÕÕ 
||
ÕÕ 
i
ÕÕ 
>
ÕÕ 
max
ÕÕ 
)
ÕÕ 
{
ŒŒ 
throw
œœ 	
log4net
œœ
 
.
œœ 
Util
œœ 
.
œœ 

SystemInfo
œœ !
.
œœ! "/
!CreateArgumentOutOfRangeException
œœ" C
(
œœC D
$str
œœD G
,
œœG H
(
œœI J
object
œœJ P
)
œœP Q
i
œœQ R
,
œœR S
$strœœT Æ
+œœØ ∞
(œœ± ≤
objectœœ≤ ∏
)œœ∏ π
iœœπ ∫
+œœª º
$strœœΩ ˘
)œœ˘ ˙
;œœ˙ ˚
}
–– 
}
—— 
private
”” 	
void
””
 
EnsureCapacity
”” 
(
”” 
int
”” !
min
””" %
)
””% &
{
‘‘ 
int
’’ 
newCapacity
’’ 
=
’’ 
(
’’ 
(
’’ 
m_array
’’ 
.
’’ 
Length
’’ %
==
’’& (
$num
’’) *
)
’’* +
?
’’, -
DEFAULT_CAPACITY
’’. >
:
’’? @
m_array
’’A H
.
’’H I
Length
’’I O
*
’’P Q
$num
’’R S
)
’’S T
;
’’T U
if
÷÷ 
(
÷÷ 
newCapacity
÷÷ 
<
÷÷ 
min
÷÷ 
)
÷÷ 
{
◊◊ 
newCapacity
ÿÿ 
=
ÿÿ 
min
ÿÿ 
;
ÿÿ 
}
ŸŸ 
this
€€ 
.
€€ 
Capacity
€€ 
=
€€ 
newCapacity
€€ 
;
€€ 
}
‹‹ 
void
‚‚ 
ICollection
‚‚ 
.
‚‚ 
CopyTo
‚‚ 
(
‚‚ 
Array
‚‚ 
array
‚‚  %
,
‚‚% &
int
‚‚' *
start
‚‚+ 0
)
‚‚0 1
{
„„ 
if
‰‰ 
(
‰‰ 
m_count
‰‰ 
>
‰‰ 
$num
‰‰ 
)
‰‰ 
{
ÂÂ 
Array
ÊÊ 	
.
ÊÊ	 

Copy
ÊÊ
 
(
ÊÊ 
m_array
ÊÊ 
,
ÊÊ 
$num
ÊÊ 
,
ÊÊ 
array
ÊÊ  
,
ÊÊ  !
start
ÊÊ" '
,
ÊÊ' (
m_count
ÊÊ) 0
)
ÊÊ0 1
;
ÊÊ1 2
}
ÁÁ 
}
ËË 
object
ÓÓ 
IList
ÓÓ	 
.
ÓÓ 
this
ÓÓ 
[
ÓÓ 
int
ÓÓ 
i
ÓÓ 
]
ÓÓ 
{
ÔÔ 
get
 
{
 
return
	 
(
 
object
 
)
 
this
 
[
 
i
 
]
 
;
  
}
! "
set
ÒÒ 
{
ÒÒ 
this
ÒÒ	 
[
ÒÒ 
i
ÒÒ 
]
ÒÒ 
=
ÒÒ 
(
ÒÒ 
	IAppender
ÒÒ 
)
ÒÒ 
value
ÒÒ #
;
ÒÒ# $
}
ÒÒ% &
}
ÚÚ 
int
ÙÙ 
IList
ÙÙ 
.
ÙÙ 
Add
ÙÙ 
(
ÙÙ 
object
ÙÙ 
x
ÙÙ 
)
ÙÙ 
{
ıı 
return
ˆˆ 	
this
ˆˆ
 
.
ˆˆ 
Add
ˆˆ 
(
ˆˆ 
(
ˆˆ 
	IAppender
ˆˆ 
)
ˆˆ 
x
ˆˆ 
)
ˆˆ  
;
ˆˆ  !
}
˜˜ 
bool
˘˘ 
IList
˘˘ 
.
˘˘ 
Contains
˘˘ 
(
˘˘ 
object
˘˘ 
x
˘˘ 
)
˘˘ 
{
˙˙ 
return
˚˚ 	
this
˚˚
 
.
˚˚ 
Contains
˚˚ 
(
˚˚ 
(
˚˚ 
	IAppender
˚˚ "
)
˚˚" #
x
˚˚# $
)
˚˚$ %
;
˚˚% &
}
¸¸ 
int
˛˛ 
IList
˛˛ 
.
˛˛ 
IndexOf
˛˛ 
(
˛˛ 
object
˛˛ 
x
˛˛ 
)
˛˛ 
{
ˇˇ 
return
ÄÄ 	
this
ÄÄ
 
.
ÄÄ 
IndexOf
ÄÄ 
(
ÄÄ 
(
ÄÄ 
	IAppender
ÄÄ !
)
ÄÄ! "
x
ÄÄ" #
)
ÄÄ# $
;
ÄÄ$ %
}
ÅÅ 
void
ÉÉ 
IList
ÉÉ 
.
ÉÉ 
Insert
ÉÉ 
(
ÉÉ 
int
ÉÉ 
pos
ÉÉ 
,
ÉÉ 
object
ÉÉ #
x
ÉÉ$ %
)
ÉÉ% &
{
ÑÑ 
this
ÖÖ 
.
ÖÖ 
Insert
ÖÖ 
(
ÖÖ 
pos
ÖÖ 
,
ÖÖ 
(
ÖÖ 
	IAppender
ÖÖ 
)
ÖÖ 
x
ÖÖ  
)
ÖÖ  !
;
ÖÖ! "
}
ÜÜ 
void
àà 
IList
àà 
.
àà 
Remove
àà 
(
àà 
object
àà 
x
àà 
)
àà 
{
ââ 
this
ää 
.
ää 
Remove
ää 
(
ää 
(
ää 
	IAppender
ää 
)
ää 
x
ää 
)
ää 
;
ää 
}
ãã 
void
çç 
IList
çç 
.
çç 
RemoveAt
çç 
(
çç 
int
çç 
pos
çç 
)
çç 
{
éé 
this
èè 
.
èè 
RemoveAt
èè 
(
èè 
pos
èè 
)
èè 
;
èè 
}
êê 
IEnumerator
ññ 
IEnumerable
ññ 
.
ññ 
GetEnumerator
ññ '
(
ññ' (
)
ññ( )
{
óó 
return
òò 	
(
òò
 
IEnumerator
òò 
)
òò 
(
òò 
this
òò 
.
òò 
GetEnumerator
òò *
(
òò* +
)
òò+ ,
)
òò, -
;
òò- .
}
ôô 
private
££ 	
sealed
££
 
class
££ 

Enumerator
££ !
:
££" #
IEnumerator
££$ /
,
££/ 0+
IAppenderCollectionEnumerator
££1 N
{
§§ 
private
ßß 

readonly
ßß  
AppenderCollection
ßß &
m_collection
ßß' 3
;
ßß3 4
private
®® 

int
®® 
m_index
®® 
;
®® 
private
©© 

int
©© 
	m_version
©© 
;
©© 
internal
≥≥ 

Enumerator
≥≥ 
(
≥≥  
AppenderCollection
≥≥ )
tc
≥≥* ,
)
≥≥, -
{
¥¥ 
m_collection
µµ 
=
µµ 
tc
µµ 
;
µµ 
m_index
∂∂ 
=
∂∂ 
-
∂∂ 
$num
∂∂ 
;
∂∂ 
	m_version
∑∑ 
=
∑∑ 
tc
∑∑ 
.
∑∑ 
	m_version
∑∑ 
;
∑∑ 
}
∏∏ 
public
¡¡ 	
	IAppender
¡¡
 
Current
¡¡ 
{
¬¬ 
get
√√ 
{
√√ 	
return
√√
 
m_collection
√√ 
[
√√ 
m_index
√√ %
]
√√% &
;
√√& '
}
√√( )
}
ƒƒ 
public
–– 	
bool
––
 
MoveNext
–– 
(
–– 
)
–– 
{
—— 
if
““ 
(
““ 
	m_version
““ 
!=
““ 
m_collection
““ !
.
““! "
	m_version
““" +
)
““+ ,
{
”” 
throw
‘‘ 

new
‘‘ 
System
‘‘ 
.
‘‘ '
InvalidOperationException
‘‘ /
(
‘‘/ 0
$str
‘‘0 q
)
‘‘q r
;
‘‘r s
}
’’ 
++
◊◊ 
m_index
◊◊ 
;
◊◊ 
return
ÿÿ 

(
ÿÿ 
m_index
ÿÿ 
<
ÿÿ 
m_collection
ÿÿ "
.
ÿÿ" #
Count
ÿÿ# (
)
ÿÿ( )
;
ÿÿ) *
}
ŸŸ 
public
ﬁﬁ 	
void
ﬁﬁ
 
Reset
ﬁﬁ 
(
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
m_index
‡‡ 
=
‡‡ 
-
‡‡ 
$num
‡‡ 
;
‡‡ 
}
·· 
object
ÊÊ 	
IEnumerator
ÊÊ
 
.
ÊÊ 
Current
ÊÊ 
{
ÁÁ 
get
ËË 
{
ËË 	
return
ËË
 
this
ËË 
.
ËË 
Current
ËË 
;
ËË 
}
ËË  
}
ÈÈ 
}
ÏÏ 
private
ÛÛ 	
sealed
ÛÛ
 
class
ÛÛ (
ReadOnlyAppenderCollection
ÛÛ 1
:
ÛÛ2 3 
AppenderCollection
ÛÛ4 F
,
ÛÛF G
ICollection
ÛÛH S
{
ÙÙ 
private
˜˜ 

readonly
˜˜  
AppenderCollection
˜˜ &
m_collection
˜˜' 3
;
˜˜3 4
internal
˝˝ (
ReadOnlyAppenderCollection
˝˝ &
(
˝˝& ' 
AppenderCollection
˝˝' 9
list
˝˝: >
)
˝˝> ?
:
˝˝@ A
base
˝˝B F
(
˝˝F G
Tag
˝˝G J
.
˝˝J K
Default
˝˝K R
)
˝˝R S
{
˛˛ 
m_collection
ˇˇ 
=
ˇˇ 
list
ˇˇ 
;
ˇˇ 
}
ÄÄ 
public
ÜÜ 	
override
ÜÜ
 
void
ÜÜ 
CopyTo
ÜÜ 
(
ÜÜ 
	IAppender
ÜÜ (
[
ÜÜ( )
]
ÜÜ) *
array
ÜÜ+ 0
)
ÜÜ0 1
{
áá 
m_collection
àà 
.
àà 
CopyTo
àà 
(
àà 
array
àà 
)
àà 
;
àà 
}
ââ 
public
ãã 	
override
ãã
 
void
ãã 
CopyTo
ãã 
(
ãã 
	IAppender
ãã (
[
ãã( )
]
ãã) *
array
ãã+ 0
,
ãã0 1
int
ãã2 5
start
ãã6 ;
)
ãã; <
{
åå 
m_collection
çç 
.
çç 
CopyTo
çç 
(
çç 
array
çç 
,
çç 
start
çç #
)
çç# $
;
çç$ %
}
éé 
void
êê 
ICollection
êê 
.
êê 
CopyTo
êê 
(
êê 
Array
êê  
array
êê! &
,
êê& '
int
êê( +
start
êê, 1
)
êê1 2
{
ëë 
(
íí 
(
íí 
ICollection
íí 
)
íí 
m_collection
íí 
)
íí 
.
íí  
CopyTo
íí  &
(
íí& '
array
íí' ,
,
íí, -
start
íí. 3
)
íí3 4
;
íí4 5
}
ìì 
public
ïï 	
override
ïï
 
int
ïï 
Count
ïï 
{
ññ 
get
óó 
{
óó 	
return
óó
 
m_collection
óó 
.
óó 
Count
óó #
;
óó# $
}
óó% &
}
òò 
public
öö 	
override
öö
 
bool
öö 
IsSynchronized
öö &
{
õõ 
get
úú 
{
úú 	
return
úú
 
m_collection
úú 
.
úú 
IsSynchronized
úú ,
;
úú, -
}
úú. /
}
ùù 
public
üü 	
override
üü
 
object
üü 
SyncRoot
üü "
{
†† 
get
°° 
{
°° 	
return
°°
 
this
°° 
.
°° 
m_collection
°° "
.
°°" #
SyncRoot
°°# +
;
°°+ ,
}
°°- .
}
¢¢ 
public
®® 	
override
®®
 
	IAppender
®® 
this
®® !
[
®®! "
int
®®" %
i
®®& '
]
®®' (
{
©© 
get
™™ 
{
™™ 	
return
™™
 
m_collection
™™ 
[
™™ 
i
™™ 
]
™™  
;
™™  !
}
™™" #
set
´´ 
{
´´ 	
throw
´´
 
new
´´ #
NotSupportedException
´´ )
(
´´) *
$str
´´* b
)
´´b c
;
´´c d
}
´´e f
}
¨¨ 
public
ÆÆ 	
override
ÆÆ
 
int
ÆÆ 
Add
ÆÆ 
(
ÆÆ 
	IAppender
ÆÆ $
x
ÆÆ% &
)
ÆÆ& '
{
ØØ 
throw
∞∞ 	
new
∞∞
 #
NotSupportedException
∞∞ #
(
∞∞# $
$str
∞∞$ \
)
∞∞\ ]
;
∞∞] ^
}
±± 
public
≥≥ 	
override
≥≥
 
void
≥≥ 
Clear
≥≥ 
(
≥≥ 
)
≥≥ 
{
¥¥ 
throw
µµ 	
new
µµ
 #
NotSupportedException
µµ #
(
µµ# $
$str
µµ$ \
)
µµ\ ]
;
µµ] ^
}
∂∂ 
public
∏∏ 	
override
∏∏
 
bool
∏∏ 
Contains
∏∏  
(
∏∏  !
	IAppender
∏∏! *
x
∏∏+ ,
)
∏∏, -
{
ππ 
return
∫∫ 

m_collection
∫∫ 
.
∫∫ 
Contains
∫∫  
(
∫∫  !
x
∫∫! "
)
∫∫" #
;
∫∫# $
}
ªª 
public
ΩΩ 	
override
ΩΩ
 
int
ΩΩ 
IndexOf
ΩΩ 
(
ΩΩ 
	IAppender
ΩΩ (
x
ΩΩ) *
)
ΩΩ* +
{
ææ 
return
øø 

m_collection
øø 
.
øø 
IndexOf
øø 
(
øø  
x
øø  !
)
øø! "
;
øø" #
}
¿¿ 
public
¬¬ 	
override
¬¬
 
void
¬¬ 
Insert
¬¬ 
(
¬¬ 
int
¬¬ "
pos
¬¬# &
,
¬¬& '
	IAppender
¬¬( 1
x
¬¬2 3
)
¬¬3 4
{
√√ 
throw
ƒƒ 	
new
ƒƒ
 #
NotSupportedException
ƒƒ #
(
ƒƒ# $
$str
ƒƒ$ \
)
ƒƒ\ ]
;
ƒƒ] ^
}
≈≈ 
public
«« 	
override
««
 
void
«« 
Remove
«« 
(
«« 
	IAppender
«« (
x
««) *
)
««* +
{
»» 
throw
…… 	
new
……
 #
NotSupportedException
…… #
(
……# $
$str
……$ \
)
……\ ]
;
……] ^
}
   
public
ÃÃ 	
override
ÃÃ
 
void
ÃÃ 
RemoveAt
ÃÃ  
(
ÃÃ  !
int
ÃÃ! $
pos
ÃÃ% (
)
ÃÃ( )
{
ÕÕ 
throw
ŒŒ 	
new
ŒŒ
 #
NotSupportedException
ŒŒ #
(
ŒŒ# $
$str
ŒŒ$ \
)
ŒŒ\ ]
;
ŒŒ] ^
}
œœ 
public
—— 	
override
——
 
bool
—— 
IsFixedSize
—— #
{
““ 
get
”” 
{
”” 	
return
””
 
true
”” 
;
”” 
}
”” 
}
‘‘ 
public
÷÷ 	
override
÷÷
 
bool
÷÷ 

IsReadOnly
÷÷ "
{
◊◊ 
get
ÿÿ 
{
ÿÿ 	
return
ÿÿ
 
true
ÿÿ 
;
ÿÿ 
}
ÿÿ 
}
ŸŸ 
public
ﬂﬂ 	
override
ﬂﬂ
 +
IAppenderCollectionEnumerator
ﬂﬂ 0
GetEnumerator
ﬂﬂ1 >
(
ﬂﬂ> ?
)
ﬂﬂ? @
{
‡‡ 
return
·· 

m_collection
·· 
.
·· 
GetEnumerator
·· %
(
··% &
)
··& '
;
··' (
}
‚‚ 
public
ÈÈ 	
override
ÈÈ
 
int
ÈÈ 
Capacity
ÈÈ 
{
ÍÍ 
get
ÎÎ 
{
ÎÎ 	
return
ÎÎ
 
m_collection
ÎÎ 
.
ÎÎ 
Capacity
ÎÎ &
;
ÎÎ& '
}
ÎÎ( )
set
ÏÏ 
{
ÏÏ 	
throw
ÏÏ
 
new
ÏÏ #
NotSupportedException
ÏÏ )
(
ÏÏ) *
$str
ÏÏ* b
)
ÏÏb c
;
ÏÏc d
}
ÏÏe f
}
ÌÌ 
public
ÔÔ 	
override
ÔÔ
 
int
ÔÔ 
AddRange
ÔÔ 
(
ÔÔ   
AppenderCollection
ÔÔ  2
x
ÔÔ3 4
)
ÔÔ4 5
{
 
throw
ÒÒ 	
new
ÒÒ
 #
NotSupportedException
ÒÒ #
(
ÒÒ# $
$str
ÒÒ$ \
)
ÒÒ\ ]
;
ÒÒ] ^
}
ÚÚ 
public
ÙÙ 	
override
ÙÙ
 
int
ÙÙ 
AddRange
ÙÙ 
(
ÙÙ  
	IAppender
ÙÙ  )
[
ÙÙ) *
]
ÙÙ* +
x
ÙÙ, -
)
ÙÙ- .
{
ıı 
throw
ˆˆ 	
new
ˆˆ
 #
NotSupportedException
ˆˆ #
(
ˆˆ# $
$str
ˆˆ$ \
)
ˆˆ\ ]
;
ˆˆ] ^
}
˜˜ 
public
˘˘ 	
override
˘˘
 
	IAppender
˘˘ 
[
˘˘ 
]
˘˘ 
ToArray
˘˘ &
(
˘˘& '
)
˘˘' (
{
˙˙ 
return
˚˚ 

m_collection
˚˚ 
.
˚˚ 
ToArray
˚˚ 
(
˚˚  
)
˚˚  !
;
˚˚! "
}
¸¸ 
public
˛˛ 	
override
˛˛
 
void
˛˛ 

TrimToSize
˛˛ "
(
˛˛" #
)
˛˛# $
{
ˇˇ 
throw
ÄÄ 	
new
ÄÄ
 #
NotSupportedException
ÄÄ #
(
ÄÄ# $
$str
ÄÄ$ \
)
ÄÄ\ ]
;
ÄÄ] ^
}
ÅÅ 
}
ÑÑ 
}
áá 
}ââ Ωñ
DC:\sonarqube\projects\log4net-2.0.7\src\Appender\AppenderSkeleton.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public// 
abstract// 
class// 
AppenderSkeleton// '
://( )
	IAppender//* 3
,//3 4
IBulkAppender//5 B
,//B C
IOptionHandler//D R
,//R S

IFlushable//T ^
{00 
	protected99 
AppenderSkeleton99 
(99 
)99 
{:: 
m_errorHandler;; 
=;; 
new;;  
OnlyOnceErrorHandler;; ,
(;;, -
this;;- 1
.;;1 2
GetType;;2 9
(;;9 :
);;: ;
.;;; <
Name;;< @
);;@ A
;;;A B
}<< 
~LL 
AppenderSkeletonLL 
(LL 
)LL 
{MM 
ifPP 
(PP 
!PP 
m_closedPP 
)PP 
{QQ 
LogLogRR 

.RR
 
DebugRR 
(RR 
declaringTypeRR 
,RR 
$strRR  =
+RR= >
m_nameRR> D
+RRD E
$strRRE I
)RRI J
;RRJ K
CloseSS 	
(SS	 

)SS
 
;SS 
}TT 
}UU 
publicll 
Levelll	 
	Thresholdll 
{mm 
getnn 
{nn 
returnnn	 
m_thresholdnn 
;nn 
}nn 
setoo 
{oo 
m_thresholdoo	 
=oo 
valueoo 
;oo 
}oo 
}pp 
virtual|| 	
public||
 
IErrorHandler|| 
ErrorHandler|| +
{}} 
get~~ 
{~~ 
return~~	 
this~~ 
.~~ 
m_errorHandler~~ #
;~~# $
}~~% &
set 
{
ÄÄ 
lock
ÅÅ 
(
ÅÅ 	
this
ÅÅ	 
)
ÅÅ 
{
ÇÇ 
if
ÉÉ 
(
ÉÉ 	
value
ÉÉ	 
==
ÉÉ 
null
ÉÉ 
)
ÉÉ 
{
ÑÑ 
LogLog
áá 
.
áá 
Warn
áá 
(
áá 
declaringType
áá 
,
áá  
$str
áá! N
)
ááN O
;
ááO P
}
àà 
else
ââ 	
{
ää 
m_errorHandler
ãã 
=
ãã 
value
ãã 
;
ãã 
}
åå 
}
çç 
}
éé 
}
èè 
virtual
õõ 	
public
õõ
 
IFilter
õõ 

FilterHead
õõ #
{
úú 
get
ùù 
{
ùù 
return
ùù	 
m_headFilter
ùù 
;
ùù 
}
ùù 
}
ûû 
virtual
™™ 	
public
™™
 
ILayout
™™ 
Layout
™™ 
{
´´ 
get
¨¨ 
{
¨¨ 
return
¨¨	 
m_layout
¨¨ 
;
¨¨ 
}
¨¨ 
set
≠≠ 
{
≠≠ 
m_layout
≠≠	 
=
≠≠ 
value
≠≠ 
;
≠≠ 
}
≠≠ 
}
ÆÆ 
virtual
ƒƒ 	
public
ƒƒ
 
void
ƒƒ 
ActivateOptions
ƒƒ %
(
ƒƒ% &
)
ƒƒ& '
{
≈≈ 
}
∆∆ 
public
’’ 
string
’’	 
Name
’’ 
{
÷÷ 
get
◊◊ 
{
◊◊ 
return
◊◊	 
m_name
◊◊ 
;
◊◊ 
}
◊◊ 
set
ÿÿ 
{
ÿÿ 
m_name
ÿÿ	 
=
ÿÿ 
value
ÿÿ 
;
ÿÿ 
}
ÿÿ 
}
ŸŸ 
public
ÏÏ 
void
ÏÏ	 
Close
ÏÏ 
(
ÏÏ 
)
ÏÏ 
{
ÌÌ 
lock
ÔÔ 
(
ÔÔ 
this
ÔÔ 
)
ÔÔ 
{
 
if
ÒÒ 
(
ÒÒ 
!
ÒÒ 	
m_closed
ÒÒ	 
)
ÒÒ 
{
ÚÚ 
OnClose
ÛÛ 
(
ÛÛ 
)
ÛÛ 
;
ÛÛ 
m_closed
ÙÙ 
=
ÙÙ 
true
ÙÙ 
;
ÙÙ 
}
ıı 
}
ˆˆ 
}
˜˜ 
public
¢¢ 
void
¢¢	 
DoAppend
¢¢ 
(
¢¢ 
LoggingEvent
¢¢ #
loggingEvent
¢¢$ 0
)
¢¢0 1
{
££ 
lock
©© 
(
©© 
this
©© 
)
©© 
{
™™ 
if
´´ 
(
´´ 
m_closed
´´ 
)
´´ 
{
¨¨ 
ErrorHandler
≠≠ 
.
≠≠ 
Error
≠≠ 
(
≠≠ 
$str
≠≠ H
+
≠≠H I
m_name
≠≠I O
+
≠≠O P
$str
≠≠P T
)
≠≠T U
;
≠≠U V
return
ÆÆ 
;
ÆÆ 
}
ØØ 
if
≤≤ 
(
≤≤ 
m_recursiveGuard
≤≤ 
)
≤≤ 
{
≥≥ 
return
¥¥ 
;
¥¥ 
}
µµ 
try
∑∑ 
{
∏∏ 
m_recursiveGuard
ππ 
=
ππ 
true
ππ 
;
ππ 
if
ªª 
(
ªª 	
FilterEvent
ªª	 
(
ªª 
loggingEvent
ªª !
)
ªª! "
&&
ªª# %
PreAppendCheck
ªª& 4
(
ªª4 5
)
ªª5 6
)
ªª6 7
{
ºº 
this
ΩΩ 

.
ΩΩ
 
Append
ΩΩ 
(
ΩΩ 
loggingEvent
ΩΩ 
)
ΩΩ 
;
ΩΩ  
}
ææ 
}
øø 
catch
¿¿ 	
(
¿¿	 

	Exception
¿¿
 
ex
¿¿ 
)
¿¿ 
{
¡¡ 
ErrorHandler
¬¬ 
.
¬¬ 
Error
¬¬ 
(
¬¬ 
$str
¬¬ ,
,
¬¬, -
ex
¬¬. 0
)
¬¬0 1
;
¬¬1 2
}
√√ 
finally
œœ 
{
–– 
m_recursiveGuard
—— 
=
—— 
false
—— 
;
—— 
}
““ 
}
”” 
}
‘‘ 
public
ÉÉ 
void
ÉÉ	 
DoAppend
ÉÉ 
(
ÉÉ 
LoggingEvent
ÉÉ #
[
ÉÉ# $
]
ÉÉ$ %
loggingEvents
ÉÉ& 3
)
ÉÉ3 4
{
ÑÑ 
lock
ää 
(
ää 
this
ää 
)
ää 
{
ãã 
if
åå 
(
åå 
m_closed
åå 
)
åå 
{
çç 
ErrorHandler
éé 
.
éé 
Error
éé 
(
éé 
$str
éé H
+
ééH I
m_name
ééI O
+
ééO P
$str
ééP T
)
ééT U
;
ééU V
return
èè 
;
èè 
}
êê 
if
ìì 
(
ìì 
m_recursiveGuard
ìì 
)
ìì 
{
îî 
return
ïï 
;
ïï 
}
ññ 
try
òò 
{
ôô 
m_recursiveGuard
öö 
=
öö 
true
öö 
;
öö 
	ArrayList
úú 
filteredEvents
úú 
=
úú 
new
úú  #
	ArrayList
úú$ -
(
úú- .
loggingEvents
úú. ;
.
úú; <
Length
úú< B
)
úúB C
;
úúC D
foreach
ûû 
(
ûû 
LoggingEvent
ûû 
loggingEvent
ûû &
in
ûû' )
loggingEvents
ûû* 7
)
ûû7 8
{
üü 
if
†† 
(
††	 

FilterEvent
††
 
(
†† 
loggingEvent
†† "
)
††" #
)
††# $
{
°° 
filteredEvents
¢¢ 
.
¢¢ 
Add
¢¢ 
(
¢¢ 
loggingEvent
¢¢ &
)
¢¢& '
;
¢¢' (
}
££ 
}
§§ 
if
¶¶ 
(
¶¶ 	
filteredEvents
¶¶	 
.
¶¶ 
Count
¶¶ 
>
¶¶ 
$num
¶¶  !
&&
¶¶" $
PreAppendCheck
¶¶% 3
(
¶¶3 4
)
¶¶4 5
)
¶¶5 6
{
ßß 
this
®® 

.
®®
 
Append
®® 
(
®® 
(
®® 
LoggingEvent
®® 
[
®®  
]
®®  !
)
®®! "
filteredEvents
®®" 0
.
®®0 1
ToArray
®®1 8
(
®®8 9
typeof
®®9 ?
(
®®? @
LoggingEvent
®®@ L
)
®®L M
)
®®M N
)
®®N O
;
®®O P
}
©© 
}
™™ 
catch
´´ 	
(
´´	 

	Exception
´´
 
ex
´´ 
)
´´ 
{
¨¨ 
ErrorHandler
≠≠ 
.
≠≠ 
Error
≠≠ 
(
≠≠ 
$str
≠≠ 1
,
≠≠1 2
ex
≠≠3 5
)
≠≠5 6
;
≠≠6 7
}
ÆÆ 
finally
∫∫ 
{
ªª 
m_recursiveGuard
ºº 
=
ºº 
false
ºº 
;
ºº 
}
ΩΩ 
}
ææ 
}
øø 
virtual
‚‚ 	
	protected
‚‚
 
bool
‚‚ 
FilterEvent
‚‚ $
(
‚‚$ %
LoggingEvent
‚‚% 1
loggingEvent
‚‚2 >
)
‚‚> ?
{
„„ 
if
‰‰ 
(
‰‰ 
!
‰‰ #
IsAsSevereAsThreshold
‰‰ 
(
‰‰ 
loggingEvent
‰‰ *
.
‰‰* +
Level
‰‰+ 0
)
‰‰0 1
)
‰‰1 2
{
ÂÂ 
return
ÊÊ 

false
ÊÊ 
;
ÊÊ 
}
ÁÁ 
IFilter
ÈÈ 

f
ÈÈ 
=
ÈÈ 
this
ÈÈ 
.
ÈÈ 

FilterHead
ÈÈ 
;
ÈÈ 
while
ÎÎ 
(
ÎÎ 	
f
ÎÎ	 

!=
ÎÎ 
null
ÎÎ 
)
ÎÎ 
{
ÏÏ 
switch
ÌÌ 

(
ÌÌ
 
f
ÌÌ 
.
ÌÌ 
Decide
ÌÌ 
(
ÌÌ 
loggingEvent
ÌÌ  
)
ÌÌ  !
)
ÌÌ! "
{
ÓÓ 
case
ÔÔ 	
FilterDecision
ÔÔ
 
.
ÔÔ 
Deny
ÔÔ 
:
ÔÔ 
return
 
false
 
;
 
case
ÚÚ 	
FilterDecision
ÚÚ
 
.
ÚÚ 
Accept
ÚÚ 
:
ÚÚ  
f
ÛÛ 
=
ÛÛ 	
null
ÛÛ
 
;
ÛÛ 
break
ÙÙ 
;
ÙÙ 
case
ˆˆ 	
FilterDecision
ˆˆ
 
.
ˆˆ 
Neutral
ˆˆ  
:
ˆˆ  !
f
˜˜ 
=
˜˜ 	
f
˜˜
 
.
˜˜ 
Next
˜˜ 
;
˜˜ 
break
¯¯ 
;
¯¯ 
}
˘˘ 
}
˙˙ 
return
¸¸ 	
true
¸¸
 
;
¸¸ 
}
˝˝ 
virtual
éé 	
public
éé
 
void
éé 
	AddFilter
éé 
(
éé  
IFilter
éé  '
filter
éé( .
)
éé. /
{
èè 
if
êê 
(
êê 
filter
êê 
==
êê 
null
êê 
)
êê 
{
ëë 
throw
íí 	
new
íí
 #
ArgumentNullException
íí #
(
íí# $
$str
íí$ C
)
ííC D
;
ííD E
}
ìì 
if
ïï 
(
ïï 
m_headFilter
ïï 
==
ïï 
null
ïï 
)
ïï 
{
ññ 
m_headFilter
óó 
=
óó 
m_tailFilter
óó 
=
óó  !
filter
óó" (
;
óó( )
}
òò 
else
ôô 
{
öö 
m_tailFilter
õõ 
.
õõ 
Next
õõ 
=
õõ 
filter
õõ 
;
õõ 
m_tailFilter
úú 
=
úú 
filter
úú 
;
úú 
}
ùù 
}
ûû 
virtual
®® 	
public
®®
 
void
®® 
ClearFilters
®® "
(
®®" #
)
®®# $
{
©© 
m_headFilter
™™ 
=
™™ 
m_tailFilter
™™ 
=
™™  
null
™™! %
;
™™% &
}
´´ 
virtual
ææ 	
	protected
ææ
 
bool
ææ #
IsAsSevereAsThreshold
ææ .
(
ææ. /
Level
ææ/ 4
level
ææ5 :
)
ææ: ;
{
øø 
return
¿¿ 	
(
¿¿
 
(
¿¿ 
m_threshold
¿¿ 
==
¿¿ 
null
¿¿ 
)
¿¿  
||
¿¿! #
level
¿¿$ )
>=
¿¿* ,
m_threshold
¿¿- 8
)
¿¿8 9
;
¿¿9 :
}
¡¡ 
virtual
–– 	
	protected
––
 
void
–– 
OnClose
––  
(
––  !
)
––! "
{
—— 
}
”” 
abstract
ÁÁ 

	protected
ÁÁ 
void
ÁÁ 
Append
ÁÁ  
(
ÁÁ  !
LoggingEvent
ÁÁ! -
loggingEvent
ÁÁ. :
)
ÁÁ: ;
;
ÁÁ; <
virtual
˜˜ 	
	protected
˜˜
 
void
˜˜ 
Append
˜˜ 
(
˜˜  
LoggingEvent
˜˜  ,
[
˜˜, -
]
˜˜- .
loggingEvents
˜˜/ <
)
˜˜< =
{
¯¯ 
foreach
˘˘ 

(
˘˘
 
LoggingEvent
˘˘ 
loggingEvent
˘˘ $
in
˘˘% '
loggingEvents
˘˘( 5
)
˘˘5 6
{
˙˙ 
Append
˚˚ 

(
˚˚
 
loggingEvent
˚˚ 
)
˚˚ 
;
˚˚ 
}
¸¸ 
}
˝˝ 
virtual
ëë 	
	protected
ëë
 
bool
ëë 
PreAppendCheck
ëë '
(
ëë' (
)
ëë( )
{
íí 
if
ìì 
(
ìì 
(
ìì 
m_layout
ìì 
==
ìì 
null
ìì 
)
ìì 
&&
ìì 
RequiresLayout
ìì +
)
ìì+ ,
{
îî 
ErrorHandler
ïï 
.
ïï 
Error
ïï 
(
ïï 
$str
ïï Q
+
ïïQ R
m_name
ïïR X
+
ïïX Y
$str
ïïY ]
)
ïï] ^
;
ïï^ _
return
ññ 

false
ññ 
;
ññ 
}
óó 
return
ôô 	
true
ôô
 
;
ôô 
}
öö 
	protected
¥¥ 
string
¥¥  
RenderLoggingEvent
¥¥ %
(
¥¥% &
LoggingEvent
¥¥& 2
loggingEvent
¥¥3 ?
)
¥¥? @
{
µµ 
if
∑∑ 
(
∑∑ 
m_renderWriter
∑∑ 
==
∑∑ 
null
∑∑ 
)
∑∑ 
{
∏∏ 
m_renderWriter
ππ 
=
ππ 
new
ππ "
ReusableStringWriter
ππ -
(
ππ- .
System
ππ. 4
.
ππ4 5
Globalization
ππ5 B
.
ππB C
CultureInfo
ππC N
.
ππN O
InvariantCulture
ππO _
)
ππ_ `
;
ππ` a
}
∫∫ 
lock
ºº 
(
ºº 
m_renderWriter
ºº  
)
ºº  !
{
ΩΩ 
m_renderWriter
øø 
.
øø 
Reset
øø $
(
øø$ %'
c_renderBufferMaxCapacity
øø% >
,
øø> ? 
c_renderBufferSize
øø@ R
)
øøR S
;
øøS T 
RenderLoggingEvent
¡¡ "
(
¡¡" #
m_renderWriter
¡¡# 1
,
¡¡1 2
loggingEvent
¡¡3 ?
)
¡¡? @
;
¡¡@ A
return
¬¬ 
m_renderWriter
¬¬ %
.
¬¬% &
ToString
¬¬& .
(
¬¬. /
)
¬¬/ 0
;
¬¬0 1
}
√√ 
}
ƒƒ 
	protected
›› 
void
››  
RenderLoggingEvent
›› #
(
››# $

TextWriter
››$ .
writer
››/ 5
,
››5 6
LoggingEvent
››7 C
loggingEvent
››D P
)
››P Q
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
m_layout
ﬂﬂ 
==
ﬂﬂ 
null
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
throw
·· 	
new
··
 '
InvalidOperationException
·· '
(
··' (
$str
··( >
)
··> ?
;
··? @
}
‚‚ 
if
‰‰ 
(
‰‰ 
m_layout
‰‰ 
.
‰‰ 
IgnoresException
‰‰  
)
‰‰  !
{
ÂÂ 
string
ÊÊ 

exceptionStr
ÊÊ 
=
ÊÊ 
loggingEvent
ÊÊ &
.
ÊÊ& ' 
GetExceptionString
ÊÊ' 9
(
ÊÊ9 :
)
ÊÊ: ;
;
ÊÊ; <
if
ÁÁ 
(
ÁÁ 
exceptionStr
ÁÁ 
!=
ÁÁ 
null
ÁÁ 
&&
ÁÁ 
exceptionStr
ÁÁ  ,
.
ÁÁ, -
Length
ÁÁ- 3
>
ÁÁ4 5
$num
ÁÁ6 7
)
ÁÁ7 8
{
ËË 
m_layout
ÍÍ 
.
ÍÍ 
Format
ÍÍ 
(
ÍÍ 
writer
ÍÍ 
,
ÍÍ 
loggingEvent
ÍÍ )
)
ÍÍ) *
;
ÍÍ* +
writer
ÎÎ 
.
ÎÎ 
	WriteLine
ÎÎ 
(
ÎÎ 
exceptionStr
ÎÎ "
)
ÎÎ" #
;
ÎÎ# $
}
ÏÏ 
else
ÌÌ 
{
ÓÓ 
m_layout
 
.
 
Format
 
(
 
writer
 
,
 
loggingEvent
 )
)
) *
;
* +
}
ÒÒ 
}
ÚÚ 
else
ÛÛ 
{
ÙÙ 
m_layout
ˆˆ 
.
ˆˆ 
Format
ˆˆ 
(
ˆˆ 
writer
ˆˆ 
,
ˆˆ 
loggingEvent
ˆˆ (
)
ˆˆ( )
;
ˆˆ) *
}
˜˜ 
}
¯¯ 
virtual
ää 	
	protected
ää
 
bool
ää 
RequiresLayout
ää '
{
ãã 
get
åå 
{
åå 
return
åå	 
false
åå 
;
åå 
}
åå 
}
çç 
public
òò	 
virtual
òò 
bool
òò 
Flush
òò "
(
òò" #
int
òò# &!
millisecondsTimeout
òò' :
)
òò: ;
{
ôô	 

return
öö 
true
öö 
;
öö 
}
õõ	 

private
•• 	
ILayout
••
 
m_layout
•• 
;
•• 
private
≠≠ 	
string
≠≠
 
m_name
≠≠ 
;
≠≠ 
private
∫∫ 	
Level
∫∫
 
m_threshold
∫∫ 
;
∫∫ 
private
«« 	
IErrorHandler
««
 
m_errorHandler
«« &
;
««& '
private
‘‘ 	
IFilter
‘‘
 
m_headFilter
‘‘ 
;
‘‘ 
private
‹‹ 	
IFilter
‹‹
 
m_tailFilter
‹‹ 
;
‹‹ 
private
‰‰ 	
bool
‰‰
 
m_closed
‰‰ 
=
‰‰ 
false
‰‰ 
;
‰‰  
private
ÈÈ 	
bool
ÈÈ
 
m_recursiveGuard
ÈÈ 
=
ÈÈ  !
false
ÈÈ" '
;
ÈÈ' (
private
ÓÓ 	"
ReusableStringWriter
ÓÓ
 
m_renderWriter
ÓÓ -
=
ÓÓ. /
null
ÓÓ0 4
;
ÓÓ4 5
private
˜˜ 	
const
˜˜
 
int
˜˜  
c_renderBufferSize
˜˜ &
=
˜˜' (
$num
˜˜) ,
;
˜˜, -
private
¸¸ 	
const
¸¸
 
int
¸¸ '
c_renderBufferMaxCapacity
¸¸ -
=
¸¸. /
$num
¸¸0 4
;
¸¸4 5
private
ââ 
readonly
ââ 
static
ââ 
Type
ââ !
declaringType
ââ" /
=
ââ0 1
typeof
ââ2 8
(
ââ8 9
AppenderSkeleton
ââ9 I
)
ââI J
;
ââJ K
}
åå 
}çç †
GC:\sonarqube\projects\log4net-2.0.7\src\Appender\AspNetTraceAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public88 
class88 
AspNetTraceAppender88 !
:88" #
AppenderSkeleton88$ 4
{99 
publicDD 
AspNetTraceAppenderDD	 
(DD 
)DD 
{EE 
}FF 
overrideWW 

	protectedWW 
voidWW 
AppendWW  
(WW  !
LoggingEventWW! -
loggingEventWW. :
)WW: ;
{XX 
ifZZ 
(ZZ 
HttpContextZZ 
.ZZ 
CurrentZZ 
!=ZZ 
nullZZ "
)ZZ" #
{[[ 
if]] 
(]] 
HttpContext]] 
.]] 
Current]] 
.]] 
Trace]] !
.]]! "
	IsEnabled]]" +
)]]+ ,
{^^ 
if__ 
(__ 	
loggingEvent__	 
.__ 
Level__ 
>=__ 
Level__ $
.__$ %
Warn__% )
)__) *
{`` 
HttpContextaa #
.aa# $
Currentaa$ +
.aa+ ,
Traceaa, 1
.aa1 2
Warnaa2 6
(aa6 7

m_categoryaa7 A
.aaA B
FormataaB H
(aaH I
loggingEventaaI U
)aaU V
,aaV W
RenderLoggingEventaaX j
(aaj k
loggingEventaak w
)aaw x
)aax y
;aay z
}bb 
elsecc 	
{dd 
HttpContextee #
.ee# $
Currentee$ +
.ee+ ,
Traceee, 1
.ee1 2
Writeee2 7
(ee7 8

m_categoryee8 B
.eeB C
FormateeC I
(eeI J
loggingEventeeJ V
)eeV W
,eeW X
RenderLoggingEventeeY k
(eek l
loggingEventeel x
)eex y
)eey z
;eez {
}ff 
}gg 
}hh 
}ii 
overridett 

	protectedtt 
booltt 
RequiresLayouttt (
{uu 
getvv 
{vv 
returnvv	 
truevv 
;vv 
}vv 
}ww 
public
àà 
PatternLayout
àà 
Category
àà %
{
ââ 	
get
ää 
{
ää 
return
ää 

m_category
ää #
;
ää# $
}
ää% &
set
ãã 
{
ãã 

m_category
ãã 
=
ãã 
value
ãã $
;
ãã$ %
}
ãã& '
}
åå 	
private
ïï 
PatternLayout
ïï 

m_category
ïï %
=
ïï& '
new
ïï( +
PatternLayout
ïï, 9
(
ïï9 :
$str
ïï: C
)
ïïC D
;
ïïD E
}
òò 
}ôô ì
MC:\sonarqube\projects\log4net-2.0.7\src\Appender\BufferingAppenderSkeleton.cs
	namespace 	
log4net
 
. 
Appender 
{ 
publicGG 

abstractGG 
classGG %
BufferingAppenderSkeletonGG 3
:GG4 5
AppenderSkeletonGG6 F
{HH 
	protectedSS %
BufferingAppenderSkeletonSS %
(SS% &
)SS& '
:SS( )
thisSS* .
(SS. /
trueSS/ 3
)SS3 4
{TT 
}UU 
	protectedff %
BufferingAppenderSkeletonff %
(ff% &
boolff& *
eventMustBeFixedff+ ;
)ff; <
:ff= >
baseff? C
(ffC D
)ffD E
{gg 
m_eventMustBeFixedhh 
=hh 
eventMustBeFixedhh (
;hh( )
}ii 
public
ÅÅ 
bool
ÅÅ	 
Lossy
ÅÅ 
{
ÇÇ 
get
ÉÉ 
{
ÉÉ 
return
ÉÉ	 
m_lossy
ÉÉ 
;
ÉÉ 
}
ÉÉ 
set
ÑÑ 
{
ÑÑ 
m_lossy
ÑÑ	 
=
ÑÑ 
value
ÑÑ 
;
ÑÑ 
}
ÑÑ 
}
ÖÖ 
public
ûû 
int
ûû	 

BufferSize
ûû 
{
üü 
get
†† 
{
†† 
return
††	 
m_bufferSize
†† 
;
†† 
}
†† 
set
°° 
{
°° 
m_bufferSize
°°	 
=
°° 
value
°° 
;
°° 
}
°°  
}
¢¢ 
public
µµ '
ITriggeringEventEvaluator
µµ	 "
	Evaluator
µµ# ,
{
∂∂ 
get
∑∑ 
{
∑∑ 
return
∑∑	 
m_evaluator
∑∑ 
;
∑∑ 
}
∑∑ 
set
∏∏ 
{
∏∏ 
m_evaluator
∏∏	 
=
∏∏ 
value
∏∏ 
;
∏∏ 
}
∏∏ 
}
ππ 
public
»» '
ITriggeringEventEvaluator
»»	 "
LossyEvaluator
»»# 1
{
…… 
get
   
{
   
return
  	 
m_lossyEvaluator
    
;
    !
}
  " #
set
ÀÀ 
{
ÀÀ 
m_lossyEvaluator
ÀÀ	 
=
ÀÀ 
value
ÀÀ !
;
ÀÀ! "
}
ÀÀ# $
}
ÃÃ 
[
ﬂﬂ 
Obsolete
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ 
)
ﬂﬂ 
]
ﬂﬂ  
virtual
‡‡ 	
public
‡‡
 
bool
‡‡ %
OnlyFixPartialEventData
‡‡ -
{
·· 
get
‚‚ 
{
‚‚ 
return
‚‚	 
(
‚‚ 
Fix
‚‚ 
==
‚‚ 
FixFlags
‚‚  
.
‚‚  !
Partial
‚‚! (
)
‚‚( )
;
‚‚) *
}
‚‚+ ,
set
„„ 
{
‰‰ 
if
ÂÂ 
(
ÂÂ 
value
ÂÂ 
)
ÂÂ 
{
ÊÊ 
Fix
ÁÁ 
=
ÁÁ	 

FixFlags
ÁÁ 
.
ÁÁ 
Partial
ÁÁ 
;
ÁÁ 
}
ËË 
else
ÈÈ 
{
ÍÍ 
Fix
ÎÎ 
=
ÎÎ	 

FixFlags
ÎÎ 
.
ÎÎ 
All
ÎÎ 
;
ÎÎ 
}
ÏÏ 
}
ÌÌ 
}
ÓÓ 
virtual
˛˛ 	
public
˛˛
 
FixFlags
˛˛ 
Fix
˛˛ 
{
ˇˇ 
get
ÄÄ 
{
ÄÄ 
return
ÄÄ	 

m_fixFlags
ÄÄ 
;
ÄÄ 
}
ÄÄ 
set
ÅÅ 
{
ÅÅ 

m_fixFlags
ÅÅ	 
=
ÅÅ 
value
ÅÅ 
;
ÅÅ 
}
ÅÅ 
}
ÇÇ 
public
çç 
override
çç 
bool
çç 
Flush
çç "
(
çç" #
int
çç# &!
millisecondsTimeout
çç' :
)
çç: ;
{
éé 	
Flush
èè 
(
èè 
)
èè 
;
èè 
return
êê 
true
êê 
;
êê 
}
ëë 	
public
üü 
virtual
üü	 
void
üü 
Flush
üü 
(
üü 
)
üü 
{
†† 
Flush
°° 
(
°° 	
false
°°	 
)
°° 
;
°° 
}
¢¢ 
public
ππ 
virtual
ππ	 
void
ππ 
Flush
ππ 
(
ππ 
bool
ππ  
flushLossyBuffer
ππ! 1
)
ππ1 2
{
∫∫ 
lock
ææ 
(
ææ 
this
ææ 
)
ææ 
{
øø 
if
¿¿ 
(
¿¿ 
m_cb
¿¿ 
!=
¿¿ 
null
¿¿ 
&&
¿¿ 
m_cb
¿¿ 
.
¿¿ 
Length
¿¿ #
>
¿¿$ %
$num
¿¿& '
)
¿¿' (
{
¡¡ 
if
¬¬ 
(
¬¬ 	
m_lossy
¬¬	 
)
¬¬ 
{
√√ 
if
≈≈ 
(
≈≈	 

flushLossyBuffer
≈≈
 
)
≈≈ 
{
∆∆ 
if
«« 	
(
««
 
m_lossyEvaluator
«« 
!=
«« 
null
«« #
)
««# $
{
»» 
LoggingEvent
   
[
   
]
   
bufferedEvents
   %
=
  & '
m_cb
  ( ,
.
  , -
PopAll
  - 3
(
  3 4
)
  4 5
;
  5 6
	ArrayList
ÀÀ 
filteredEvents
ÀÀ  
=
ÀÀ! "
new
ÀÀ# &
	ArrayList
ÀÀ' 0
(
ÀÀ0 1
bufferedEvents
ÀÀ1 ?
.
ÀÀ? @
Length
ÀÀ@ F
)
ÀÀF G
;
ÀÀG H
foreach
ÕÕ 
(
ÕÕ 
LoggingEvent
ÕÕ 
loggingEvent
ÕÕ )
in
ÕÕ* ,
bufferedEvents
ÕÕ- ;
)
ÕÕ; <
{
ŒŒ 	
if
œœ	 
(
œœ 
m_lossyEvaluator
œœ 
.
œœ 
IsTriggeringEvent
œœ /
(
œœ/ 0
loggingEvent
œœ0 <
)
œœ< =
)
œœ= >
{
––	 

filteredEvents
——
 
.
—— 
Add
—— 
(
—— 
loggingEvent
—— )
)
——) *
;
——* +
}
““	 

}
”” 	
if
÷÷ 

(
÷÷ 
filteredEvents
÷÷ 
.
÷÷ 
Count
÷÷  
>
÷÷! "
$num
÷÷# $
)
÷÷$ %
{
◊◊ 	

SendBuffer
ÿÿ	 
(
ÿÿ 
(
ÿÿ 
LoggingEvent
ÿÿ !
[
ÿÿ! "
]
ÿÿ" #
)
ÿÿ# $
filteredEvents
ÿÿ$ 2
.
ÿÿ2 3
ToArray
ÿÿ3 :
(
ÿÿ: ;
typeof
ÿÿ; A
(
ÿÿA B
LoggingEvent
ÿÿB N
)
ÿÿN O
)
ÿÿO P
)
ÿÿP Q
;
ÿÿQ R
}
ŸŸ 	
}
⁄⁄ 
else
€€ 
{
‹‹ 
m_cb
ﬁﬁ 
.
ﬁﬁ 
Clear
ﬁﬁ 
(
ﬁﬁ 
)
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 
}
·· 
else
‚‚ 	
{
„„ 
SendFromBuffer
ÂÂ 
(
ÂÂ 
null
ÂÂ 
,
ÂÂ 
m_cb
ÂÂ 
)
ÂÂ  
;
ÂÂ  !
}
ÊÊ 
}
ÁÁ 
}
ËË 
}
ÈÈ 
override
ˇˇ 

public
ˇˇ 
void
ˇˇ 
ActivateOptions
ˇˇ &
(
ˇˇ& '
)
ˇˇ' (
{
ÄÄ 
base
ÅÅ 
.
ÅÅ 
ActivateOptions
ÅÅ 
(
ÅÅ 
)
ÅÅ 
;
ÅÅ 
if
ÜÜ 
(
ÜÜ 
m_lossy
ÜÜ 
&&
ÜÜ 
m_evaluator
ÜÜ 
==
ÜÜ  
null
ÜÜ! %
)
ÜÜ% &
{
áá 
ErrorHandler
àà 
.
àà 
Error
àà 
(
àà 
$str
àà #
+
àà# $
Name
àà$ (
+
àà( )
$str
àà) j
)
ààj k
;
ààk l
}
ââ 
if
ãã 
(
ãã 
m_bufferSize
ãã 
>
ãã 
$num
ãã 
)
ãã 
{
åå 
m_cb
çç 
=
çç	 

new
çç 
CyclicBuffer
çç 
(
çç 
m_bufferSize
çç (
)
çç( )
;
çç) *
}
éé 
else
èè 
{
êê 
m_cb
ëë 
=
ëë	 

null
ëë 
;
ëë 
}
íí 
}
ìì 
override
££ 

	protected
££ 
void
££ 
OnClose
££ !
(
££! "
)
££" #
{
§§ 
Flush
¶¶ 
(
¶¶ 	
true
¶¶	 
)
¶¶ 
;
¶¶ 
}
ßß 
override
«« 

	protected
«« 
void
«« 
Append
««  
(
««  !
LoggingEvent
««! -
loggingEvent
««. :
)
««: ;
{
»» 
if
ÕÕ 
(
ÕÕ 
m_cb
ÕÕ 
==
ÕÕ 
null
ÕÕ 
||
ÕÕ 
m_bufferSize
ÕÕ #
<=
ÕÕ$ &
$num
ÕÕ' (
)
ÕÕ( )
{
ŒŒ 
if
–– 
(
–– 
(
–– 	
!
––	 

m_lossy
––
 
)
–– 
||
–– 
(
—— 
m_evaluator
—— 
!=
—— 
null
—— 
&&
—— 
m_evaluator
—— (
.
——( )
IsTriggeringEvent
——) :
(
——: ;
loggingEvent
——; G
)
——G H
)
——H I
||
——J L
(
““ 
m_lossyEvaluator
““ 
!=
““ 
null
““ 
&&
““ !
m_lossyEvaluator
““" 2
.
““2 3
IsTriggeringEvent
““3 D
(
““D E
loggingEvent
““E Q
)
““Q R
)
““R S
)
““S T
{
”” 
if
‘‘ 
(
‘‘ 	 
m_eventMustBeFixed
‘‘	 
)
‘‘ 
{
’’ 
loggingEvent
◊◊ 
.
◊◊ 
Fix
◊◊ 
=
◊◊ 
this
◊◊ 
.
◊◊ 
Fix
◊◊ !
;
◊◊! "
}
ÿÿ 

SendBuffer
€€ 
(
€€ 
new
€€ 
LoggingEvent
€€  
[
€€  !
]
€€! "
{
€€# $
loggingEvent
€€% 1
}
€€2 3
)
€€4 5
;
€€5 6
}
‹‹ 
}
›› 
else
ﬁﬁ 
{
ﬂﬂ 
loggingEvent
„„ 
.
„„ 
Fix
„„ 
=
„„ 
this
„„ 
.
„„ 
Fix
„„ 
;
„„  
LoggingEvent
ÊÊ #
discardedLoggingEvent
ÊÊ &
=
ÊÊ' (
m_cb
ÊÊ) -
.
ÊÊ- .
Append
ÊÊ. 4
(
ÊÊ4 5
loggingEvent
ÊÊ5 A
)
ÊÊA B
;
ÊÊB C
if
ËË 
(
ËË #
discardedLoggingEvent
ËË 
!=
ËË  
null
ËË! %
)
ËË% &
{
ÈÈ 
if
ÎÎ 
(
ÎÎ 	
!
ÎÎ	 

m_lossy
ÎÎ
 
)
ÎÎ 
{
ÏÏ 
SendFromBuffer
ÓÓ 
(
ÓÓ #
discardedLoggingEvent
ÓÓ *
,
ÓÓ* +
m_cb
ÓÓ, 0
)
ÓÓ0 1
;
ÓÓ1 2
}
ÔÔ 
else
 	
{
ÒÒ 
if
ÛÛ 
(
ÛÛ	 

m_lossyEvaluator
ÛÛ
 
==
ÛÛ 
null
ÛÛ "
||
ÛÛ# %
!
ÛÛ& '
m_lossyEvaluator
ÛÛ' 7
.
ÛÛ7 8
IsTriggeringEvent
ÛÛ8 I
(
ÛÛI J#
discardedLoggingEvent
ÛÛJ _
)
ÛÛ_ `
)
ÛÛ` a
{
ÙÙ #
discardedLoggingEvent
ˆˆ 
=
ˆˆ 
null
ˆˆ #
;
ˆˆ# $
}
˜˜ 
if
˙˙ 
(
˙˙	 

m_evaluator
˙˙
 
!=
˙˙ 
null
˙˙ 
&&
˙˙  
m_evaluator
˙˙! ,
.
˙˙, -
IsTriggeringEvent
˙˙- >
(
˙˙> ?
loggingEvent
˙˙? K
)
˙˙K L
)
˙˙L M
{
˚˚ 
SendFromBuffer
¸¸ 
(
¸¸ #
discardedLoggingEvent
¸¸ +
,
¸¸+ ,
m_cb
¸¸- 1
)
¸¸1 2
;
¸¸2 3
}
˝˝ 
else
˛˛ 

if
˛˛ 
(
˛˛ #
discardedLoggingEvent
˛˛ $
!=
˛˛% '
null
˛˛( ,
)
˛˛, -
{
ˇˇ 

SendBuffer
ÅÅ 
(
ÅÅ 
new
ÅÅ 
LoggingEvent
ÅÅ "
[
ÅÅ" #
]
ÅÅ# $
{
ÅÅ% &#
discardedLoggingEvent
ÅÅ' <
}
ÅÅ= >
)
ÅÅ? @
;
ÅÅ@ A
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 
else
ÖÖ 
{
ÜÜ 
if
ää 
(
ää 	
m_evaluator
ää	 
!=
ää 
null
ää 
&&
ää 
m_evaluator
ää  +
.
ää+ ,
IsTriggeringEvent
ää, =
(
ää= >
loggingEvent
ää> J
)
ääJ K
)
ääK L
{
ãã 
SendFromBuffer
åå 
(
åå 
null
åå 
,
åå 
m_cb
åå 
)
åå  
;
åå  !
}
çç 
}
éé 
}
èè 
}
êê 
virtual
†† 	
	protected
††
 
void
†† 
SendFromBuffer
†† '
(
††' (
LoggingEvent
††( 4
firstLoggingEvent
††5 F
,
††F G
CyclicBuffer
††H T
buffer
††U [
)
††[ \
{
°° 
LoggingEvent
¢¢ 
[
¢¢ 
]
¢¢ 
bufferEvents
¢¢ 
=
¢¢  
buffer
¢¢! '
.
¢¢' (
PopAll
¢¢( .
(
¢¢. /
)
¢¢/ 0
;
¢¢0 1
if
§§ 
(
§§ 
firstLoggingEvent
§§ 
==
§§ 
null
§§  
)
§§  !
{
•• 

SendBuffer
¶¶ 
(
¶¶ 
bufferEvents
¶¶ 
)
¶¶ 
;
¶¶ 
}
ßß 
else
®® 
if
®® 

(
®® 
bufferEvents
®® 
.
®® 
Length
®® 
==
®®  "
$num
®®# $
)
®®$ %
{
©© 

SendBuffer
™™ 
(
™™ 
new
™™ 
LoggingEvent
™™ 
[
™™  
]
™™  !
{
™™" #
firstLoggingEvent
™™$ 5
}
™™6 7
)
™™8 9
;
™™9 :
}
´´ 
else
¨¨ 
{
≠≠ 
LoggingEvent
ØØ 
[
ØØ 
]
ØØ 
events
ØØ 
=
ØØ 
new
ØØ 
LoggingEvent
ØØ  ,
[
ØØ, -
bufferEvents
ØØ- 9
.
ØØ9 :
Length
ØØ: @
+
ØØA B
$num
ØØC D
]
ØØD E
;
ØØE F
Array
∞∞ 	
.
∞∞	 

Copy
∞∞
 
(
∞∞ 
bufferEvents
∞∞ 
,
∞∞ 
$num
∞∞ 
,
∞∞ 
events
∞∞  &
,
∞∞& '
$num
∞∞( )
,
∞∞) *
bufferEvents
∞∞+ 7
.
∞∞7 8
Length
∞∞8 >
)
∞∞> ?
;
∞∞? @
events
±± 

[
±±
 
$num
±± 
]
±± 
=
±± 
firstLoggingEvent
±± !
;
±±! "

SendBuffer
≥≥ 
(
≥≥ 
events
≥≥ 
)
≥≥ 
;
≥≥ 
}
¥¥ 
}
µµ 
abstract
¬¬ 

	protected
¬¬ 
void
¬¬ 

SendBuffer
¬¬ $
(
¬¬$ %
LoggingEvent
¬¬% 1
[
¬¬1 2
]
¬¬2 3
events
¬¬4 :
)
¬¬: ;
;
¬¬; <
private
ÕÕ 	
const
ÕÕ
 
int
ÕÕ !
DEFAULT_BUFFER_SIZE
ÕÕ '
=
ÕÕ( )
$num
ÕÕ* -
;
ÕÕ- .
private
ŸŸ 	
int
ŸŸ
 
m_bufferSize
ŸŸ 
=
ŸŸ !
DEFAULT_BUFFER_SIZE
ŸŸ 0
;
ŸŸ0 1
private
ﬁﬁ 	
CyclicBuffer
ﬁﬁ
 
m_cb
ﬁﬁ 
;
ﬁﬁ 
private
ÎÎ 	'
ITriggeringEventEvaluator
ÎÎ
 #
m_evaluator
ÎÎ$ /
;
ÎÎ/ 0
private
ˆˆ 	
bool
ˆˆ
 
m_lossy
ˆˆ 
=
ˆˆ 
false
ˆˆ 
;
ˆˆ 
private
ÅÅ 	'
ITriggeringEventEvaluator
ÅÅ
 #
m_lossyEvaluator
ÅÅ$ 4
;
ÅÅ4 5
private
ââ 	
FixFlags
ââ
 

m_fixFlags
ââ 
=
ââ 
FixFlags
ââ  (
.
ââ( )
All
ââ) ,
;
ââ, -
private
éé 	
readonly
éé
 
bool
éé  
m_eventMustBeFixed
éé *
;
éé* +
}
ëë 
}íí È4
OC:\sonarqube\projects\log4net-2.0.7\src\Appender\BufferingForwardingAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public-- 
class-- '
BufferingForwardingAppender-- )
:--* +%
BufferingAppenderSkeleton--, E
,--E F
IAppenderAttachable--G Z
{.. 
public99 '
BufferingForwardingAppender99	 $
(99$ %
)99% &
{:: 
};; 
overrideMM 

	protectedMM 
voidMM 
OnCloseMM !
(MM! "
)MM" #
{NN 
lockPP 
(PP 
thisPP 
)PP 
{QQ 
baseSS 
.SS 	
OnCloseSS	 
(SS 
)SS 
;SS 
ifUU 
(UU "
m_appenderAttachedImplUU 
!=UU !
nullUU" &
)UU& '
{VV "
m_appenderAttachedImplWW 
.WW 
RemoveAllAppendersWW .
(WW. /
)WW/ 0
;WW0 1
}XX 
}YY 
}ZZ 
overrideii 

	protectedii 
voidii 

SendBufferii $
(ii$ %
LoggingEventii% 1
[ii1 2
]ii2 3
eventsii4 :
)ii: ;
{jj 
ifll 
(ll "
m_appenderAttachedImplll 
!=ll  
nullll! %
)ll% &
{mm "
m_appenderAttachedImplnn 
.nn !
AppendLoopOnAppendersnn 0
(nn0 1
eventsnn1 7
)nn7 8
;nn8 9
}oo 
}pp 
virtual
ÅÅ 	
public
ÅÅ
 
void
ÅÅ 
AddAppender
ÅÅ !
(
ÅÅ! "
	IAppender
ÅÅ" +
newAppender
ÅÅ, 7
)
ÅÅ7 8
{
ÇÇ 
if
ÉÉ 
(
ÉÉ 
newAppender
ÉÉ 
==
ÉÉ 
null
ÉÉ 
)
ÉÉ 
{
ÑÑ 
throw
ÖÖ 	
new
ÖÖ
 #
ArgumentNullException
ÖÖ #
(
ÖÖ# $
$str
ÖÖ$ 1
)
ÖÖ1 2
;
ÖÖ2 3
}
ÜÜ 
lock
áá 
(
áá 
this
áá 
)
áá 
{
àà 
if
ââ 
(
ââ $
m_appenderAttachedImpl
ââ 
==
ââ !
null
ââ" &
)
ââ& '
{
ää $
m_appenderAttachedImpl
ãã 
=
ãã 
new
ãã !
log4net
ãã" )
.
ãã) *
Util
ãã* .
.
ãã. /"
AppenderAttachedImpl
ãã/ C
(
ããC D
)
ããD E
;
ããE F
}
åå $
m_appenderAttachedImpl
çç 
.
çç 
AddAppender
çç &
(
çç& '
newAppender
çç' 2
)
çç2 3
;
çç3 4
}
éé 
}
èè 
virtual
úú 	
public
úú
  
AppenderCollection
úú #
	Appenders
úú$ -
{
ùù 
get
ûû 
{
üü 
lock
†† 
(
†† 	
this
††	 
)
†† 
{
°° 
if
¢¢ 
(
¢¢ 	$
m_appenderAttachedImpl
¢¢	 
==
¢¢  "
null
¢¢# '
)
¢¢' (
{
££ 
return
§§  
AppenderCollection
§§ 
.
§§  
EmptyCollection
§§  /
;
§§/ 0
}
•• 
else
¶¶ 	
{
ßß 
return
®® $
m_appenderAttachedImpl
®® #
.
®®# $
	Appenders
®®$ -
;
®®- .
}
©© 
}
™™ 
}
´´ 
}
¨¨ 
virtual
∫∫ 	
public
∫∫
 
	IAppender
∫∫ 
GetAppender
∫∫ &
(
∫∫& '
string
∫∫' -
name
∫∫. 2
)
∫∫2 3
{
ªª 
lock
ºº 
(
ºº 
this
ºº 
)
ºº 
{
ΩΩ 
if
ææ 
(
ææ $
m_appenderAttachedImpl
ææ 
==
ææ !
null
ææ" &
||
ææ' )
name
ææ* .
==
ææ/ 1
null
ææ2 6
)
ææ6 7
{
øø 
return
¿¿ 
null
¿¿ 
;
¿¿ 
}
¡¡ 
return
√√ 
$
m_appenderAttachedImpl
√√ !
.
√√! "
GetAppender
√√" -
(
√√- .
name
√√. 2
)
√√2 3
;
√√3 4
}
ƒƒ 
}
≈≈ 
virtual
œœ 	
public
œœ
 
void
œœ  
RemoveAllAppenders
œœ (
(
œœ( )
)
œœ) *
{
–– 
lock
—— 
(
—— 
this
—— 
)
—— 
{
““ 
if
”” 
(
”” $
m_appenderAttachedImpl
”” 
!=
”” !
null
””" &
)
””& '
{
‘‘ $
m_appenderAttachedImpl
’’ 
.
’’  
RemoveAllAppenders
’’ .
(
’’. /
)
’’/ 0
;
’’0 1$
m_appenderAttachedImpl
÷÷ 
=
÷÷ 
null
÷÷ "
;
÷÷" #
}
◊◊ 
}
ÿÿ 
}
ŸŸ 
virtual
ÂÂ 	
public
ÂÂ
 
	IAppender
ÂÂ 
RemoveAppender
ÂÂ )
(
ÂÂ) *
	IAppender
ÂÂ* 3
appender
ÂÂ4 <
)
ÂÂ< =
{
ÊÊ 
lock
ÁÁ 
(
ÁÁ 
this
ÁÁ 
)
ÁÁ 
{
ËË 
if
ÈÈ 
(
ÈÈ 
appender
ÈÈ 
!=
ÈÈ 
null
ÈÈ 
&&
ÈÈ $
m_appenderAttachedImpl
ÈÈ 2
!=
ÈÈ3 5
null
ÈÈ6 :
)
ÈÈ: ;
{
ÍÍ 
return
ÎÎ $
m_appenderAttachedImpl
ÎÎ "
.
ÎÎ" #
RemoveAppender
ÎÎ# 1
(
ÎÎ1 2
appender
ÎÎ2 :
)
ÎÎ: ;
;
ÎÎ; <
}
ÏÏ 
}
ÌÌ 
return
ÓÓ 	
null
ÓÓ
 
;
ÓÓ 
}
ÔÔ 
virtual
˚˚ 	
public
˚˚
 
	IAppender
˚˚ 
RemoveAppender
˚˚ )
(
˚˚) *
string
˚˚* 0
name
˚˚1 5
)
˚˚5 6
{
¸¸ 
lock
˝˝ 
(
˝˝ 
this
˝˝ 
)
˝˝ 
{
˛˛ 
if
ˇˇ 
(
ˇˇ 
name
ˇˇ 
!=
ˇˇ 
null
ˇˇ 
&&
ˇˇ $
m_appenderAttachedImpl
ˇˇ .
!=
ˇˇ/ 1
null
ˇˇ2 6
)
ˇˇ6 7
{
ÄÄ 
return
ÅÅ $
m_appenderAttachedImpl
ÅÅ "
.
ÅÅ" #
RemoveAppender
ÅÅ# 1
(
ÅÅ1 2
name
ÅÅ2 6
)
ÅÅ6 7
;
ÅÅ7 8
}
ÇÇ 
}
ÉÉ 
return
ÑÑ 	
null
ÑÑ
 
;
ÑÑ 
}
ÖÖ 
private
éé 	"
AppenderAttachedImpl
éé
 $
m_appenderAttachedImpl
éé 5
;
éé5 6
}
ëë 
}íí Úõ
JC:\sonarqube\projects\log4net-2.0.7\src\Appender\ColoredConsoleAppender.cs
	namespace&& 	
log4net&&
 
.&& 
Appender&& 
{'' 
public__ 
class__ "
ColoredConsoleAppender__ $
:__% &
AppenderSkeleton__' 7
{`` 
[mm 
Flagsmm 
]mm 	
publicnn 
enumnn	 
Colorsnn 
:nn 
intnn 
{oo 
Bluess 
=ss 	
$numss
 
,ss 
Greenxx 
=xx	 

$numxx 
,xx 
Red}} 
=}} 
$num}}	 
,}} 
White
ÇÇ 
=
ÇÇ	 

Blue
ÇÇ 
|
ÇÇ 
Green
ÇÇ 
|
ÇÇ 
Red
ÇÇ 
,
ÇÇ 
Yellow
áá 	
=
áá
 
Red
áá 
|
áá 
Green
áá 
,
áá 
Purple
åå 	
=
åå
 
Red
åå 
|
åå 
Blue
åå 
,
åå 
Cyan
ëë 
=
ëë 	
Green
ëë
 
|
ëë 
Blue
ëë 
,
ëë 
HighIntensity
ññ 
=
ññ 
$num
ññ 
,
ññ 
}
óó 
public
§§ $
ColoredConsoleAppender
§§	 
(
§§  
)
§§  !
{
•• 
}
¶¶ 
[
±± 
Obsolete
±± 
(
±± 
$str
±± M
)
±±M N
]
±±N O
public
≤≤ $
ColoredConsoleAppender
≤≤	 
(
≤≤  
ILayout
≤≤  '
layout
≤≤( .
)
≤≤. /
:
≤≤0 1
this
≤≤2 6
(
≤≤6 7
layout
≤≤7 =
,
≤≤= >
false
≤≤? D
)
≤≤D E
{
≥≥ 
}
¥¥ 
[
¡¡ 
Obsolete
¡¡ 
(
¡¡ 
$str
¡¡ X
)
¡¡X Y
]
¡¡Y Z
public
¬¬ $
ColoredConsoleAppender
¬¬	 
(
¬¬  
ILayout
¬¬  '
layout
¬¬( .
,
¬¬. /
bool
¬¬0 4 
writeToErrorStream
¬¬5 G
)
¬¬G H
{
√√ 
Layout
ƒƒ 	
=
ƒƒ
 
layout
ƒƒ 
;
ƒƒ "
m_writeToErrorStream
≈≈ 
=
≈≈  
writeToErrorStream
≈≈ ,
;
≈≈, -
}
∆∆ 
virtual
⁄⁄ 	
public
⁄⁄
 
string
⁄⁄ 
Target
⁄⁄ 
{
€€ 
get
‹‹ 
{
‹‹ 
return
‹‹	 "
m_writeToErrorStream
‹‹ $
?
‹‹% &
ConsoleError
‹‹' 3
:
‹‹4 5

ConsoleOut
‹‹6 @
;
‹‹@ A
}
‹‹B C
set
›› 
{
ﬁﬁ 
string
ﬂﬂ 

v
ﬂﬂ 
=
ﬂﬂ 
value
ﬂﬂ 
.
ﬂﬂ 
Trim
ﬂﬂ 
(
ﬂﬂ 
)
ﬂﬂ 
;
ﬂﬂ 
if
·· 
(
·· 
string
·· 
.
·· 
Compare
·· 
(
·· 
ConsoleError
·· #
,
··# $
v
··% &
,
··& '
true
··( ,
,
··, -
CultureInfo
··. 9
.
··9 :
InvariantCulture
··: J
)
··J K
==
··L N
$num
··O P
)
··P Q
{
‚‚ "
m_writeToErrorStream
„„ 
=
„„ 
true
„„  
;
„„  !
}
‰‰ 
else
ÂÂ 
{
ÊÊ "
m_writeToErrorStream
ÁÁ 
=
ÁÁ 
false
ÁÁ !
;
ÁÁ! "
}
ËË 
}
ÈÈ 
}
ÍÍ 
public
˜˜ 
void
˜˜	 

AddMapping
˜˜ 
(
˜˜ 
LevelColors
˜˜ $
mapping
˜˜% ,
)
˜˜, -
{
¯¯ 
m_levelMapping
˘˘ 
.
˘˘ 
Add
˘˘ 
(
˘˘ 
mapping
˘˘ 
)
˘˘ 
;
˘˘ 
}
˙˙ 
[
çç 	
System
çç	 
.
çç 
Security
çç 
.
çç "
SecuritySafeCritical
çç -
]
çç- .
[
èè 	
System
èè	 
.
èè 
Security
èè 
.
èè 
Permissions
èè $
.
èè$ % 
SecurityPermission
èè% 7
(
èè7 8
System
èè8 >
.
èè> ?
Security
èè? G
.
èèG H
Permissions
èèH S
.
èèS T
SecurityAction
èèT b
.
èèb c
Demand
èèc i
,
èèi j
UnmanagedCode
èèk x
=
èèy z
true
èè{ 
)èè Ä
]èèÄ Å
override
êê 
	protected
êê 
void
êê 
Append
êê  &
(
êê& '
log4net
êê' .
.
êê. /
Core
êê/ 3
.
êê3 4
LoggingEvent
êê4 @
loggingEvent
êêA M
)
êêM N
{
ëë 
if
íí 
(
íí #
m_consoleOutputWriter
íí 
!=
íí 
null
íí  $
)
íí$ %
{
ìì 
IntPtr
îî 

consoleHandle
îî 
=
îî 
IntPtr
îî !
.
îî! "
Zero
îî" &
;
îî& '
if
ïï 
(
ïï "
m_writeToErrorStream
ïï 
)
ïï 
{
ññ 
consoleHandle
òò 
=
òò 
GetStdHandle
òò !
(
òò! "
STD_ERROR_HANDLE
òò" 2
)
òò2 3
;
òò3 4
}
ôô 
else
öö 
{
õõ 
consoleHandle
ùù 
=
ùù 
GetStdHandle
ùù !
(
ùù! "
STD_OUTPUT_HANDLE
ùù" 3
)
ùù3 4
;
ùù4 5
}
ûû 
ushort
°° 

	colorInfo
°° 
=
°° 
(
°° 
ushort
°° 
)
°° 
Colors
°° %
.
°°% &
White
°°& +
;
°°+ ,
LevelColors
§§ 
levelColors
§§ 
=
§§ 
m_levelMapping
§§ ,
.
§§, -
Lookup
§§- 3
(
§§3 4
loggingEvent
§§4 @
.
§§@ A
Level
§§A F
)
§§F G
as
§§H J
LevelColors
§§K V
;
§§V W
if
•• 
(
•• 
levelColors
•• 
!=
•• 
null
•• 
)
•• 
{
¶¶ 
	colorInfo
ßß 
=
ßß 
levelColors
ßß 
.
ßß 
CombinedColor
ßß *
;
ßß* +
}
®® 
string
´´ 

strLoggingMessage
´´ 
=
´´  
RenderLoggingEvent
´´ 1
(
´´1 2
loggingEvent
´´2 >
)
´´> ?
;
´´? @(
CONSOLE_SCREEN_BUFFER_INFO
ÆÆ 

bufferInfo
ÆÆ )
;
ÆÆ) *(
GetConsoleScreenBufferInfo
ØØ 
(
ØØ 
consoleHandle
ØØ ,
,
ØØ, -
out
ØØ. 1

bufferInfo
ØØ2 <
)
ØØ< =
;
ØØ= >%
SetConsoleTextAttribute
≤≤ 
(
≤≤ 
consoleHandle
≤≤ )
,
≤≤) *
	colorInfo
≤≤+ 4
)
≤≤4 5
;
≤≤5 6
char
ÑÑ 
[
ÑÑ 	
]
ÑÑ	 

messageCharArray
ÑÑ 
=
ÑÑ 
strLoggingMessage
ÑÑ /
.
ÑÑ/ 0
ToCharArray
ÑÑ0 ;
(
ÑÑ; <
)
ÑÑ< =
;
ÑÑ= >
int
ÖÖ 
arrayLength
ÖÖ 
=
ÖÖ 
messageCharArray
ÖÖ &
.
ÖÖ& '
Length
ÖÖ' -
;
ÖÖ- .
bool
ÜÜ 
appendNewline
ÜÜ	 
=
ÜÜ 
false
ÜÜ 
;
ÜÜ 
if
ââ 
(
ââ 
arrayLength
ââ 
>
ââ 
$num
ââ 
&&
ââ 
messageCharArray
ââ +
[
ââ+ ,
arrayLength
ââ, 7
-
ââ7 8
$num
ââ8 9
]
ââ9 :
==
ââ; =
$char
ââ> B
&&
ââC E
messageCharArray
ââF V
[
ââV W
arrayLength
ââW b
-
ââb c
$num
ââc d
]
ââd e
==
ââf h
$char
ââi m
)
ââm n
{
ää 
arrayLength
ãã 
-=
ãã 
$num
ãã 
;
ãã 
appendNewline
åå 
=
åå 
true
åå 
;
åå 
}
çç #
m_consoleOutputWriter
êê 
.
êê 
Write
êê 
(
êê  
messageCharArray
êê  0
,
êê0 1
$num
êê2 3
,
êê3 4
arrayLength
êê5 @
)
êê@ A
;
êêA B%
SetConsoleTextAttribute
ìì 
(
ìì 
consoleHandle
ìì )
,
ìì) *

bufferInfo
ìì+ 5
.
ìì5 6
wAttributes
ìì6 A
)
ììA B
;
ììB C
if
ïï 
(
ïï 
appendNewline
ïï 
)
ïï 
{
ññ #
m_consoleOutputWriter
òò 
.
òò 
Write
òò  
(
òò  !
s_windowsNewline
òò! 1
,
òò1 2
$num
òò3 4
,
òò4 5
$num
òò6 7
)
òò7 8
;
òò8 9
}
ôô 
}
öö 
}
õõ 
private
ùù 	
static
ùù
 
readonly
ùù 
char
ùù 
[
ùù 
]
ùù  
s_windowsNewline
ùù! 1
=
ùù2 3
{
ùù4 5
$char
ùù5 9
,
ùù9 :
$char
ùù; ?
}
ùù? @
;
ùù@ A
override
®® 

	protected
®® 
bool
®® 
RequiresLayout
®® (
{
©© 
get
™™ 
{
™™ 
return
™™	 
true
™™ 
;
™™ 
}
™™ 
}
´´ 
[
∂∂ 	
System
∂∂	 
.
∂∂ 
Security
∂∂ 
.
∂∂ "
SecuritySafeCritical
∂∂ -
]
∂∂- .
[
∏∏ 	
System
∏∏	 
.
∏∏ 
Security
∏∏ 
.
∏∏ 
Permissions
∏∏ $
.
∏∏$ % 
SecurityPermission
∏∏% 7
(
∏∏7 8
System
∏∏8 >
.
∏∏> ?
Security
∏∏? G
.
∏∏G H
Permissions
∏∏H S
.
∏∏S T
SecurityAction
∏∏T b
.
∏∏b c
Demand
∏∏c i
,
∏∏i j
UnmanagedCode
∏∏k x
=
∏∏x y
true
∏∏y }
)
∏∏} ~
]
∏∏~ 
public
ππ 
override
ππ 
void
ππ 
ActivateOptions
ππ ,
(
ππ, -
)
ππ- .
{
∫∫ 
base
ªª 
.
ªª 
ActivateOptions
ªª 
(
ªª 
)
ªª 
;
ªª 
m_levelMapping
ºº 
.
ºº 
ActivateOptions
ºº !
(
ºº! "
)
ºº" #
;
ºº# $
System
ææ 	
.
ææ	 

IO
ææ
 
.
ææ 
Stream
ææ !
consoleOutputStream
ææ '
=
ææ( )
null
ææ* .
;
ææ. /
if
¡¡ 
(
¡¡ "
m_writeToErrorStream
¡¡ 
)
¡¡ 
{
¬¬ !
consoleOutputStream
ƒƒ 
=
ƒƒ 
Console
ƒƒ !
.
ƒƒ! "
OpenStandardError
ƒƒ" 3
(
ƒƒ3 4
)
ƒƒ4 5
;
ƒƒ5 6
}
≈≈ 
else
∆∆ 
{
«« !
consoleOutputStream
…… 
=
…… 
Console
…… !
.
……! " 
OpenStandardOutput
……" 4
(
……4 5
)
……5 6
;
……6 7
}
   
System
ÕÕ 	
.
ÕÕ	 

Text
ÕÕ
 
.
ÕÕ 
Encoding
ÕÕ 
consoleEncoding
ÕÕ '
=
ÕÕ( )
System
ÕÕ* 0
.
ÕÕ0 1
Text
ÕÕ1 5
.
ÕÕ5 6
Encoding
ÕÕ6 >
.
ÕÕ> ?
GetEncoding
ÕÕ? J
(
ÕÕJ K 
GetConsoleOutputCP
ÕÕK ]
(
ÕÕ] ^
)
ÕÕ^ _
)
ÕÕ_ `
;
ÕÕ` a#
m_consoleOutputWriter
–– 
=
–– 
new
–– 
System
–– %
.
––% &
IO
––& (
.
––( )
StreamWriter
––) 5
(
––5 6!
consoleOutputStream
––6 I
,
––I J
consoleEncoding
––K Z
,
––Z [
$num
––\ a
)
––a b
;
––b c#
m_consoleOutputWriter
““ 
.
““ 
	AutoFlush
““ "
=
““# $
true
““% )
;
““) *
GC
ÿÿ 
.
ÿÿ 
SuppressFinalize
ÿÿ 
(
ÿÿ #
m_consoleOutputWriter
ÿÿ ,
)
ÿÿ, -
;
ÿÿ- .
}
ŸŸ 
public
ÈÈ 
const
ÈÈ	 
string
ÈÈ 

ConsoleOut
ÈÈ  
=
ÈÈ! "
$str
ÈÈ# 0
;
ÈÈ0 1
public
ıı 
const
ıı	 
string
ıı 
ConsoleError
ıı "
=
ıı# $
$str
ıı% 4
;
ıı4 5
private
˛˛ 	
bool
˛˛
 "
m_writeToErrorStream
˛˛ #
=
˛˛$ %
false
˛˛& +
;
˛˛+ ,
private
ÉÉ 	
LevelMapping
ÉÉ
 
m_levelMapping
ÉÉ %
=
ÉÉ& '
new
ÉÉ( +
LevelMapping
ÉÉ, 8
(
ÉÉ8 9
)
ÉÉ9 :
;
ÉÉ: ;
private
çç 	
System
çç
 
.
çç 
IO
çç 
.
çç 
StreamWriter
çç  #
m_consoleOutputWriter
çç! 6
=
çç7 8
null
çç9 =
;
çç= >
[
ìì 
	DllImport
ìì 
(
ìì 
$str
ìì 
,
ìì 
SetLastError
ìì )
=
ìì) *
true
ìì* .
,
ìì. /
CharSet
ìì0 7
=
ìì7 8
CharSet
ìì8 ?
.
ìì? @
Auto
ìì@ D
)
ììD E
]
ììE F
private
îî 	
static
îî
 
extern
îî 
int
îî  
GetConsoleOutputCP
îî .
(
îî. /
)
îî/ 0
;
îî0 1
[
ññ 
	DllImport
ññ 
(
ññ 
$str
ññ 
,
ññ 
SetLastError
ññ )
=
ññ) *
true
ññ* .
,
ññ. /
CharSet
ññ0 7
=
ññ7 8
CharSet
ññ8 ?
.
ññ? @
Auto
ññ@ D
)
ññD E
]
ññE F
private
óó 	
static
óó
 
extern
óó 
bool
óó %
SetConsoleTextAttribute
óó 4
(
óó4 5
IntPtr
òò 	
consoleHandle
òò
 
,
òò 
ushort
ôô 	

attributes
ôô
 
)
ôô 
;
ôô 
[
õõ 
	DllImport
õõ 
(
õõ 
$str
õõ 
,
õõ 
SetLastError
õõ )
=
õõ) *
true
õõ* .
,
õõ. /
CharSet
õõ0 7
=
õõ7 8
CharSet
õõ8 ?
.
õõ? @
Auto
õõ@ D
)
õõD E
]
õõE F
private
úú 	
static
úú
 
extern
úú 
bool
úú (
GetConsoleScreenBufferInfo
úú 7
(
úú7 8
IntPtr
ùù 	
consoleHandle
ùù
 
,
ùù 
out
ûû (
CONSOLE_SCREEN_BUFFER_INFO
ûû !

bufferInfo
ûû" ,
)
ûû, -
;
ûû- .
private
©© 	
const
©©
 
UInt32
©© 
STD_OUTPUT_HANDLE
©© (
=
©©) *
	unchecked
©©+ 4
(
©©4 5
(
©©5 6
UInt32
©©6 <
)
©©< =
(
©©= >
-
©©> ?
$num
©©? A
)
©©A B
)
©©B C
;
©©C D
private
™™ 	
const
™™
 
UInt32
™™ 
STD_ERROR_HANDLE
™™ '
=
™™( )
	unchecked
™™* 3
(
™™3 4
(
™™4 5
UInt32
™™5 ;
)
™™; <
(
™™< =
-
™™= >
$num
™™> @
)
™™@ A
)
™™A B
;
™™B C
[
¨¨ 
	DllImport
¨¨ 
(
¨¨ 
$str
¨¨ 
,
¨¨ 
SetLastError
¨¨ )
=
¨¨) *
true
¨¨* .
,
¨¨. /
CharSet
¨¨0 7
=
¨¨7 8
CharSet
¨¨8 ?
.
¨¨? @
Auto
¨¨@ D
)
¨¨D E
]
¨¨E F
private
≠≠ 	
static
≠≠
 
extern
≠≠ 
IntPtr
≠≠ 
GetStdHandle
≠≠ +
(
≠≠+ ,
UInt32
ÆÆ 	
type
ÆÆ
 
)
ÆÆ 
;
ÆÆ 
[
∞∞ 
StructLayout
∞∞ 
(
∞∞ 

LayoutKind
∞∞ 
.
∞∞ 

Sequential
∞∞ %
)
∞∞% &
]
∞∞& '
private
±± 	
struct
±±
 
COORD
±± 
{
≤≤ 
public
≥≥ 	
UInt16
≥≥
 
x
≥≥ 
;
≥≥ 
public
¥¥ 	
UInt16
¥¥
 
y
¥¥ 
;
¥¥ 
}
µµ 
[
∑∑ 
StructLayout
∑∑ 
(
∑∑ 

LayoutKind
∑∑ 
.
∑∑ 

Sequential
∑∑ %
)
∑∑% &
]
∑∑& '
private
∏∏ 	
struct
∏∏
 

SMALL_RECT
∏∏ 
{
ππ 
public
∫∫ 	
UInt16
∫∫
 
Left
∫∫ 
;
∫∫ 
public
ªª 	
UInt16
ªª
 
Top
ªª 
;
ªª 
public
ºº 	
UInt16
ºº
 
Right
ºº 
;
ºº 
public
ΩΩ 	
UInt16
ΩΩ
 
Bottom
ΩΩ 
;
ΩΩ 
}
ææ 
[
¿¿ 
StructLayout
¿¿ 
(
¿¿ 

LayoutKind
¿¿ 
.
¿¿ 

Sequential
¿¿ %
)
¿¿% &
]
¿¿& '
private
¡¡ 	
struct
¡¡
 (
CONSOLE_SCREEN_BUFFER_INFO
¡¡ +
{
¬¬ 
public
√√ 	
COORD
√√
 
dwSize
√√ 
;
√√ 
public
ƒƒ 	
COORD
ƒƒ
 
dwCursorPosition
ƒƒ %
;
ƒƒ% &
public
≈≈ 	
ushort
≈≈
 
wAttributes
≈≈  
;
≈≈  !
public
∆∆ 	

SMALL_RECT
∆∆
 
srWindow
∆∆ 
;
∆∆ 
public
«« 	
COORD
««
 !
dwMaximumWindowSize
«« (
;
««( )
}
»» 
public
◊◊ 
class
◊◊	 
LevelColors
◊◊ 
:
◊◊ 
LevelMappingEntry
◊◊ .
{
ÿÿ 
private
ŸŸ 

Colors
ŸŸ 
m_foreColor
ŸŸ 
;
ŸŸ 
private
⁄⁄ 

Colors
⁄⁄ 
m_backColor
⁄⁄ 
;
⁄⁄ 
private
€€ 

ushort
€€ 
m_combinedColor
€€ !
=
€€" #
$num
€€$ %
;
€€% &
public
ÊÊ 	
Colors
ÊÊ
 
	ForeColor
ÊÊ 
{
ÁÁ 
get
ËË 
{
ËË 	
return
ËË
 
m_foreColor
ËË 
;
ËË 
}
ËË 
set
ÈÈ 
{
ÈÈ 	
m_foreColor
ÈÈ
 
=
ÈÈ 
value
ÈÈ 
;
ÈÈ 
}
ÈÈ  
}
ÍÍ 
public
ıı 	
Colors
ıı
 
	BackColor
ıı 
{
ˆˆ 
get
˜˜ 
{
˜˜ 	
return
˜˜
 
m_backColor
˜˜ 
;
˜˜ 
}
˜˜ 
set
¯¯ 
{
¯¯ 	
m_backColor
¯¯
 
=
¯¯ 
value
¯¯ 
;
¯¯ 
}
¯¯  
}
˘˘ 
public
ÉÉ 	
override
ÉÉ
 
void
ÉÉ 
ActivateOptions
ÉÉ '
(
ÉÉ' (
)
ÉÉ( )
{
ÑÑ 
base
ÖÖ 
.
ÖÖ 	
ActivateOptions
ÖÖ	 
(
ÖÖ 
)
ÖÖ 
;
ÖÖ 
m_combinedColor
ÜÜ 
=
ÜÜ 
(
ÜÜ 
ushort
ÜÜ 
)
ÜÜ 
(
ÜÜ 
(
ÜÜ  !
int
ÜÜ! $
)
ÜÜ$ %
m_foreColor
ÜÜ% 0
+
ÜÜ1 2
(
ÜÜ3 4
(
ÜÜ4 5
(
ÜÜ5 6
int
ÜÜ6 9
)
ÜÜ9 :
m_backColor
ÜÜ: E
)
ÜÜE F
<<
ÜÜG I
$num
ÜÜJ K
)
ÜÜK L
)
ÜÜM N
;
ÜÜN O
}
áá 
internal
çç 
ushort
çç 
CombinedColor
çç  
{
éé 
get
èè 
{
èè 	
return
èè
 
m_combinedColor
èè  
;
èè  !
}
èè" #
}
êê 
}
ëë 
}
îî 
}ïï ±
CC:\sonarqube\projects\log4net-2.0.7\src\Appender\ConsoleAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public55 
class55 
ConsoleAppender55 
:55 
AppenderSkeleton55  0
{66 
public@@ 
ConsoleAppender@@	 
(@@ 
)@@ 
{AA 
}BB 
[MM 
ObsoleteMM 
(MM 
$strMM M
)MMM N
]MMN O
publicNN 
ConsoleAppenderNN	 
(NN 
ILayoutNN  
layoutNN! '
)NN' (
:NN) *
thisNN+ /
(NN/ 0
layoutNN0 6
,NN6 7
falseNN8 =
)NN= >
{OO 
}PP 
[]] 
Obsolete]] 
(]] 
$str]] X
)]]X Y
]]]Y Z
public^^ 
ConsoleAppender^^	 
(^^ 
ILayout^^  
layout^^! '
,^^' (
bool^^) -
writeToErrorStream^^. @
)^^@ A
{__ 
Layout`` 	
=``
 
layout`` 
;``  
m_writeToErrorStreamaa 
=aa 
writeToErrorStreamaa ,
;aa, -
}bb 
virtualvv 	
publicvv
 
stringvv 
Targetvv 
{ww 
getxx 
{xx 
returnxx	  
m_writeToErrorStreamxx $
?xx% &
ConsoleErrorxx' 3
:xx4 5

ConsoleOutxx6 @
;xx@ A
}xxB C
setyy 
{zz 
string{{ 

v{{ 
={{ 
value{{ 
.{{ 
Trim{{ 
({{ 
){{ 
;{{ 
if}} 
(}} 

SystemInfo}} 
.}} 
EqualsIgnoringCase}} %
(}}% &
ConsoleError}}& 2
,}}2 3
v}}4 5
)}}5 6
)}}6 7
{~~  
m_writeToErrorStream 
= 
true  
;  !
}
ÄÄ 
else
ÅÅ 
{
ÇÇ "
m_writeToErrorStream
ÉÉ 
=
ÉÉ 
false
ÉÉ !
;
ÉÉ! "
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 
override
òò 

	protected
òò 
void
òò 
Append
òò  
(
òò  !
LoggingEvent
òò! -
loggingEvent
òò. :
)
òò: ;
{
ôô 
if
ûû 
(
ûû "
m_writeToErrorStream
ûû 
)
ûû 
{
üü 
Console
°° 
.
°° 
Error
°° 
.
°° 
Write
°° 
(
°°  
RenderLoggingEvent
°° *
(
°°* +
loggingEvent
°°+ 7
)
°°7 8
)
°°8 9
;
°°9 :
}
¢¢ 
else
££ 
{
§§ 
Console
¶¶ 
.
¶¶ 
Write
¶¶ 
(
¶¶  
RenderLoggingEvent
¶¶ $
(
¶¶$ %
loggingEvent
¶¶% 1
)
¶¶1 2
)
¶¶2 3
;
¶¶3 4
}
ßß 
}
©© 
override
¥¥ 

	protected
¥¥ 
bool
¥¥ 
RequiresLayout
¥¥ (
{
µµ 
get
∂∂ 
{
∂∂ 
return
∂∂	 
true
∂∂ 
;
∂∂ 
}
∂∂ 
}
∑∑ 
public
«« 
const
««	 
string
«« 

ConsoleOut
««  
=
««! "
$str
««# 0
;
««0 1
public
”” 
const
””	 
string
”” 
ConsoleError
”” "
=
””# $
$str
””% 4
;
””4 5
private
ŸŸ 	
bool
ŸŸ
 "
m_writeToErrorStream
ŸŸ #
=
ŸŸ$ %
false
ŸŸ& +
;
ŸŸ+ ,
}
‹‹ 
}›› Ù
AC:\sonarqube\projects\log4net-2.0.7\src\Appender\DebugAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public++ 
class++ 
DebugAppender++ 
:++ 
AppenderSkeleton++ .
{,, 
public77 
DebugAppender77	 
(77 
)77 
{88 
}99 
[EE 
SystemEE 	
.EE	 

ObsoleteEE
 
(EE 
$strEE T
)EET U
]EEU V
publicFF 
DebugAppenderFF	 
(FF 
ILayoutFF 
layoutFF %
)FF% &
{GG 
LayoutHH 	
=HH
 
layoutHH 
;HH 
}II 
publicaa 
boolaa	 
ImmediateFlushaa 
{bb 
getcc 
{cc 
returncc	 
m_immediateFlushcc  
;cc  !
}cc" #
setdd 
{dd 
m_immediateFlushdd	 
=dd 
valuedd !
;dd! "
}dd# $
}ee 
publicoo 
overrideoo 
booloo  
Flushoo! &
(oo& '
intoo' *
millisecondsTimeoutoo+ >
)oo> ?
{pp 
ifrr 
(rr 
m_immediateFlushrr $
)rr$ %
returnrr& ,
truerr- 1
;rr1 2
Systemuu 
.uu 
Diagnosticsuu "
.uu" #
Debuguu# (
.uu( )
Flushuu) .
(uu. /
)uu/ 0
;uu0 1
returnww 
trueww 
;ww 
}xx 
override
àà 

	protected
àà 
void
àà 
Append
àà  
(
àà  !
LoggingEvent
àà! -
loggingEvent
àà. :
)
àà: ;
{
ââ 
System
çç 	
.
çç	 

Diagnostics
çç
 
.
çç 
Debug
çç 
.
çç 
Write
çç !
(
çç! " 
RenderLoggingEvent
çç" 4
(
çç4 5
loggingEvent
çç5 A
)
ççA B
,
ççB C
loggingEvent
ççD P
.
ççP Q

LoggerName
ççQ [
)
çç[ \
;
çç\ ]
if
íí 
(
íí 
m_immediateFlush
íí 
)
íí 
{
ìì 
System
îî 

.
îî
 
Diagnostics
îî 
.
îî 
Debug
îî 
.
îî 
Flush
îî "
(
îî" #
)
îî# $
;
îî$ %
}
ïï 
}
óó 
override
¢¢ 

	protected
¢¢ 
bool
¢¢ 
RequiresLayout
¢¢ (
{
££ 
get
§§ 
{
§§ 
return
§§	 
true
§§ 
;
§§ 
}
§§ 
}
•• 
private
∫∫ 	
bool
∫∫
 
m_immediateFlush
∫∫ 
=
∫∫  !
true
∫∫" &
;
∫∫& '
}
ΩΩ 
}ææ ö≠
DC:\sonarqube\projects\log4net-2.0.7\src\Appender\EventLogAppender.cs
	namespace## 	
log4net##
 
.## 
Appender## 
{$$ 
publicWW 
classWW 
EventLogAppenderWW 
:WW  
AppenderSkeletonWW! 1
{XX 
publiccc 
EventLogAppendercc	 
(cc 
)cc 
{dd 
m_applicationNameee 
=ee 
Systemee 
.ee 
	Threadingee '
.ee' (
Threadee( .
.ee. /
	GetDomainee/ 8
(ee8 9
)ee9 :
.ee: ;
FriendlyNameee; G
;eeG H
	m_logNameff 
=ff 
$strff 
;ff 
m_machineNamegg 
=gg 
$strgg 
;gg 
}hh 
[tt 
Obsoletett 
(tt 
$strtt M
)ttM N
]ttN O
publicuu 
EventLogAppenderuu	 
(uu 
ILayoutuu !
layoutuu" (
)uu( )
:uu* +
thisuu, 0
(uu0 1
)uu1 2
{vv 
Layoutww 	
=ww
 
layoutww 
;ww 
}xx 
public
êê 
string
êê	 
LogName
êê 
{
ëë 
get
íí 
{
íí 
return
íí	 
	m_logName
íí 
;
íí 
}
íí 
set
ìì 
{
ìì 
	m_logName
ìì	 
=
ìì 
value
ìì 
;
ìì 
}
ìì 
}
îî 
public
†† 
string
††	 
ApplicationName
†† 
{
°° 
get
¢¢ 
{
¢¢ 
return
¢¢	 
m_applicationName
¢¢ !
;
¢¢! "
}
¢¢# $
set
££ 
{
££ 
m_applicationName
££	 
=
££ 
value
££ "
;
££" #
}
££$ %
}
§§ 
public
≥≥ 
string
≥≥	 
MachineName
≥≥ 
{
¥¥ 
get
µµ 
{
µµ 
return
µµ	 
m_machineName
µµ 
;
µµ 
}
µµ  
set
∂∂ 
{
∂∂ 
;
∂∂G H
}
∂∂I J
}
∑∑ 
public
√√ 
void
√√	 

AddMapping
√√ 
(
√√ %
Level2EventLogEntryType
√√ 0
mapping
√√1 8
)
√√8 9
{
ƒƒ 
m_levelMapping
≈≈ 
.
≈≈ 
Add
≈≈ 
(
≈≈ 
mapping
≈≈ 
)
≈≈ 
;
≈≈ 
}
∆∆ 
public
ŸŸ 
SecurityContext
ŸŸ	 
SecurityContext
ŸŸ (
{
⁄⁄ 
get
€€ 
{
€€ 
return
€€	 
m_securityContext
€€ !
;
€€! "
}
€€# $
set
‹‹ 
{
‹‹ 
m_securityContext
‹‹	 
=
‹‹ 
value
‹‹ "
;
‹‹" #
}
‹‹$ %
}
›› 
public
ÍÍ 
int
ÍÍ 
EventId
ÍÍ 
{
ÍÍ 
get
ÎÎ 
{
ÎÎ 
return
ÎÎ 
	m_eventId
ÎÎ "
;
ÎÎ" #
}
ÎÎ$ %
set
ÏÏ 
{
ÏÏ 
	m_eventId
ÏÏ 
=
ÏÏ 
value
ÏÏ #
;
ÏÏ# $
}
ÏÏ% &
}
ÌÌ 	
public
˚˚ 
short
˚˚ 
Category
˚˚ 
{
¸¸ 	
get
˝˝ 
{
˝˝ 
return
˝˝ 

m_category
˝˝ #
;
˝˝# $
}
˝˝% &
set
˛˛ 
{
˛˛ 

m_category
˛˛ 
=
˛˛ 
value
˛˛ $
;
˛˛$ %
}
˛˛& '
}
ˇˇ 	
override
îî 

public
îî 
void
îî 
ActivateOptions
îî &
(
îî& '
)
îî' (
{
ïï 
try
ññ 
{
óó 
base
òò 
.
òò 
ActivateOptions
òò $
(
òò$ %
)
òò% &
;
òò& '
if
öö 
(
öö 
m_securityContext
öö %
==
öö& (
null
öö) -
)
öö- .
{
õõ 
m_securityContext
úú %
=
úú& '%
SecurityContextProvider
úú( ?
.
úú? @
DefaultProvider
úú@ O
.
úúO P#
CreateSecurityContext
úúP e
(
úúe f
this
úúf j
)
úúj k
;
úúk l
}
ùù 
bool
üü !
sourceAlreadyExists
üü (
=
üü) *
false
üü+ 0
;
üü0 1
string
†† 
currentLogName
†† %
=
††& '
null
††( ,
;
††, -
using
¢¢ 
(
¢¢ 
SecurityContext
¢¢ &
.
¢¢& '
Impersonate
¢¢' 2
(
¢¢2 3
this
¢¢3 7
)
¢¢7 8
)
¢¢8 9
{
££ !
sourceAlreadyExists
§§ '
=
§§( )
EventLog
§§* 2
.
§§2 3
SourceExists
§§3 ?
(
§§? @
m_applicationName
§§@ Q
)
§§Q R
;
§§R S
if
•• 
(
•• !
sourceAlreadyExists
•• +
)
••+ ,
{
••- .
currentLogName
¶¶ &
=
¶¶' (
EventLog
¶¶) 1
.
¶¶1 2#
LogNameFromSourceName
¶¶2 G
(
¶¶G H
m_applicationName
¶¶H Y
,
¶¶Y Z
m_machineName
¶¶[ h
)
¶¶h i
;
¶¶i j
}
ßß 
}
®® 
if
™™ 
(
™™ !
sourceAlreadyExists
™™ '
&&
™™( *
currentLogName
™™+ 9
!=
™™: <
	m_logName
™™= F
)
™™F G
{
´´ 
LogLog
¨¨ 
.
¨¨ 
Debug
¨¨  
(
¨¨  !
declaringType
¨¨! .
,
¨¨. /
$str
¨¨0 I
+
¨¨J K
m_applicationName
¨¨L ]
+
¨¨^ _
$str
¨¨` n
+
¨¨o p
currentLogName
¨¨q 
+¨¨Ä Å
$str¨¨Ç é
+¨¨è ê
	m_logName¨¨ë ö
+¨¨õ ú
$str¨¨ù †
)¨¨† °
;¨¨° ¢
}
≠≠ 
else
ÆÆ 
if
ÆÆ 
(
ÆÆ 
!
ÆÆ !
sourceAlreadyExists
ÆÆ -
)
ÆÆ- .
{
ØØ 
LogLog
∞∞ 
.
∞∞ 
Debug
∞∞  
(
∞∞  !
declaringType
∞∞! .
,
∞∞. /
$str
∞∞0 P
+
∞∞Q R
m_applicationName
∞∞S d
+
∞∞e f
$str
∞∞g r
+
∞∞s t
	m_logName
∞∞u ~
+∞∞ Ä
$str∞∞Å Ñ
)∞∞Ñ Ö
;∞∞Ö Ü
}
±± 
string
≥≥ 
registeredLogName
≥≥ (
=
≥≥) *
null
≥≥+ /
;
≥≥/ 0
using
µµ 
(
µµ 
SecurityContext
µµ &
.
µµ& '
Impersonate
µµ' 2
(
µµ2 3
this
µµ3 7
)
µµ7 8
)
µµ8 9
{
∂∂ 
if
∑∑ 
(
∑∑ !
sourceAlreadyExists
∑∑ +
&&
∑∑, .
currentLogName
∑∑/ =
!=
∑∑> @
	m_logName
∑∑A J
)
∑∑J K
{
∏∏ 
EventLog
ΩΩ  
.
ΩΩ  !
DeleteEventSource
ΩΩ! 2
(
ΩΩ2 3
m_applicationName
ΩΩ3 D
,
ΩΩD E
m_machineName
ΩΩF S
)
ΩΩS T
;
ΩΩT U
CreateEventSource
ææ )
(
ææ) *
m_applicationName
ææ* ;
,
ææ; <
	m_logName
ææ= F
,
ææF G
m_machineName
ææH U
)
ææU V
;
ææV W
registeredLogName
¿¿ )
=
¿¿* +
EventLog
¿¿, 4
.
¿¿4 5#
LogNameFromSourceName
¿¿5 J
(
¿¿J K
m_applicationName
¿¿K \
,
¿¿\ ]
m_machineName
¿¿^ k
)
¿¿k l
;
¿¿l m
}
¡¡ 
else
¬¬ 
if
¬¬ 
(
¬¬ 
!
¬¬ !
sourceAlreadyExists
¬¬ 1
)
¬¬1 2
{
√√ 
CreateEventSource
ƒƒ )
(
ƒƒ) *
m_applicationName
ƒƒ* ;
,
ƒƒ; <
	m_logName
ƒƒ= F
,
ƒƒF G
m_machineName
ƒƒH U
)
ƒƒU V
;
ƒƒV W
registeredLogName
∆∆ )
=
∆∆* +
EventLog
∆∆, 4
.
∆∆4 5#
LogNameFromSourceName
∆∆5 J
(
∆∆J K
m_applicationName
∆∆K \
,
∆∆\ ]
m_machineName
∆∆^ k
)
∆∆k l
;
∆∆l m
}
«« 
}
»» 
m_levelMapping
   
.
   
ActivateOptions
   .
(
  . /
)
  / 0
;
  0 1
LogLog
ÃÃ 
.
ÃÃ 
Debug
ÃÃ 
(
ÃÃ 
declaringType
ÃÃ *
,
ÃÃ* +
$str
ÃÃ, 6
+
ÃÃ7 8
m_applicationName
ÃÃ9 J
+
ÃÃK L
$str
ÃÃM g
+
ÃÃh i
registeredLogName
ÃÃj {
+
ÃÃ| }
$strÃÃ~ Å
)ÃÃÅ Ç
;ÃÃÇ É
}
ÕÕ 
catch
ŒŒ 
(
ŒŒ 
System
ŒŒ 
.
ŒŒ 
Security
ŒŒ "
.
ŒŒ" #
SecurityException
ŒŒ# 4
ex
ŒŒ5 7
)
ŒŒ7 8
{
œœ 
ErrorHandler
–– 
.
–– 
Error
–– "
(
––" #
$str
––# }
+
—— 
m_applicationName
—— '
+
““ 
$str
““ t
+
”” 
$str
”” a
,
””a b
ex
‘‘ 
)
‘‘ 
;
‘‘ 
	Threshold
’’ 
=
’’ 
Level
’’ !
.
’’! "
Off
’’" %
;
’’% &
}
÷÷ 
}
◊◊ 
private
·· 	
static
··
 
void
·· 
CreateEventSource
·· '
(
··' (
string
··( .
source
··/ 5
,
··5 6
string
··7 =
logName
··> E
,
··E F
string
··G M
machineName
··N Y
)
··Y Z
{
‚‚ %
EventSourceCreationData
‰‰ %
eventSourceCreationData
‰‰ 2
=
‰‰3 4
new
‰‰5 8%
EventSourceCreationData
‰‰9 P
(
‰‰P Q
source
‰‰Q W
,
‰‰W X
logName
‰‰Y `
)
‰‰` a
;
‰‰a b%
eventSourceCreationData
ÂÂ 
.
ÂÂ 
MachineName
ÂÂ &
=
ÂÂ' (
machineName
ÂÂ) 4
;
ÂÂ4 5
EventLog
ÊÊ 
.
ÊÊ 
CreateEventSource
ÊÊ 
(
ÊÊ %
eventSourceCreationData
ÊÊ 5
)
ÊÊ5 6
;
ÊÊ6 7
}
ÍÍ 
override
˛˛ 

	protected
˛˛ 
void
˛˛ 
Append
˛˛  
(
˛˛  !
LoggingEvent
˛˛! -
loggingEvent
˛˛. :
)
˛˛: ;
{
ˇˇ 
int
ÉÉ 
eventID
ÉÉ 
=
ÉÉ 
	m_eventId
ÉÉ 
;
ÉÉ 
object
ÜÜ 	 
eventIDPropertyObj
ÜÜ
 
=
ÜÜ 
loggingEvent
ÜÜ +
.
ÜÜ+ ,
LookupProperty
ÜÜ, :
(
ÜÜ: ;
$str
ÜÜ; D
)
ÜÜD E
;
ÜÜE F
if
áá 
(
áá  
eventIDPropertyObj
áá 
!=
áá 
null
áá !
)
áá! "
{
àà 
if
ââ 
(
ââ  
eventIDPropertyObj
ââ 
is
ââ 
int
ââ !
)
ââ! "
{
ää 
eventID
ãã 
=
ãã 
(
ãã 
int
ãã 
)
ãã  
eventIDPropertyObj
ãã &
;
ãã& '
}
åå 
else
çç 
{
éé 
string
èè #
eventIDPropertyString
èè !
=
èè" # 
eventIDPropertyObj
èè$ 6
as
èè7 9
string
èè: @
;
èè@ A
if
êê 
(
êê #
eventIDPropertyString
êê -
==
êê. 0
null
êê1 5
)
êê5 6
{
ëë #
eventIDPropertyString
íí -
=
íí. / 
eventIDPropertyObj
íí0 B
.
ííB C
ToString
ííC K
(
ííK L
)
ííL M
;
ííM N
}
ìì 
if
îî 
(
îî 	#
eventIDPropertyString
îî	 
!=
îî !
null
îî" &
&&
îî' )#
eventIDPropertyString
îî* ?
.
îî? @
Length
îî@ F
>
îîG H
$num
îîI J
)
îîJ K
{
ïï 
int
óó 	
intVal
óó
 
;
óó 
if
òò 
(
òò	 


SystemInfo
òò
 
.
òò 
TryParse
òò 
(
òò #
eventIDPropertyString
òò 3
,
òò3 4
out
òò5 8
intVal
òò9 ?
)
òò? @
)
òò@ A
{
ôô 
eventID
öö 
=
öö 
intVal
öö 
;
öö 
}
õõ 
else
úú 

{
ùù 
ErrorHandler
ûû 
.
ûû 
Error
ûû 
(
ûû 
$str
ûû ?
+
ûû@ A#
eventIDPropertyString
ûûB W
+
ûûX Y
$str
ûûZ ^
)
ûû^ _
;
ûû_ `
}
üü 
}
†† 
}
°° 
}
¢¢ 
short
§§ 
category
§§ 
=
§§ 

m_category
§§ '
;
§§' (
object
¶¶ !
categoryPropertyObj
¶¶ &
=
¶¶' (
loggingEvent
¶¶) 5
.
¶¶5 6
LookupProperty
¶¶6 D
(
¶¶D E
$str
¶¶E O
)
¶¶O P
;
¶¶P Q
if
ßß 
(
ßß !
categoryPropertyObj
ßß #
!=
ßß$ &
null
ßß' +
)
ßß+ ,
{
®® 
if
©© 
(
©© !
categoryPropertyObj
©© '
is
©©( *
short
©©+ 0
)
©©0 1
{
™™ 
category
´´ 
=
´´ 
(
´´  
short
´´  %
)
´´% &!
categoryPropertyObj
´´' :
;
´´: ;
}
¨¨ 
else
≠≠ 
{
ÆÆ 
string
ØØ $
categoryPropertyString
ØØ 1
=
ØØ2 3!
categoryPropertyObj
ØØ4 G
as
ØØH J
string
ØØK Q
;
ØØQ R
if
∞∞ 
(
∞∞ $
categoryPropertyString
∞∞ .
==
∞∞/ 1
null
∞∞2 6
)
∞∞6 7
{
±± $
categoryPropertyString
≤≤ .
=
≤≤/ 0!
categoryPropertyObj
≤≤1 D
.
≤≤D E
ToString
≤≤E M
(
≤≤M N
)
≤≤N O
;
≤≤O P
}
≥≥ 
if
¥¥ 
(
¥¥ $
categoryPropertyString
¥¥ .
!=
¥¥/ 1
null
¥¥2 6
&&
¥¥7 9$
categoryPropertyString
¥¥: P
.
¥¥P Q
Length
¥¥Q W
>
¥¥X Y
$num
¥¥Z [
)
¥¥[ \
{
µµ 
short
∑∑ 
shortVal
∑∑ &
;
∑∑& '
if
∏∏ 
(
∏∏ 

SystemInfo
∏∏ &
.
∏∏& '
TryParse
∏∏' /
(
∏∏/ 0$
categoryPropertyString
∏∏0 F
,
∏∏F G
out
∏∏H K
shortVal
∏∏L T
)
∏∏T U
)
∏∏U V
{
ππ 
category
∫∫ $
=
∫∫% &
shortVal
∫∫' /
;
∫∫/ 0
}
ªª 
else
ºº 
{
ΩΩ 
ErrorHandler
ææ (
.
ææ( )
Error
ææ) .
(
ææ. /
$str
ææ/ Z
+
ææ[ \$
categoryPropertyString
ææ] s
+
ææt u
$str
ææv z
)
ææz {
;
ææ{ |
}
øø 
}
¿¿ 
}
¡¡ 
}
¬¬ 
try
≈≈ 
{
∆∆ 
string
«« 

eventTxt
«« 
=
««  
RenderLoggingEvent
«« (
(
««( )
loggingEvent
««) 5
)
««5 6
;
««6 7
if
   
(
   
eventTxt
   
.
   
Length
   
>
   '
MAX_EVENTLOG_MESSAGE_SIZE
   3
)
  3 4
{
ÀÀ 
eventTxt
ÃÃ 
=
ÃÃ 
eventTxt
ÃÃ 
.
ÃÃ 
	Substring
ÃÃ "
(
ÃÃ" #
$num
ÃÃ# $
,
ÃÃ$ %'
MAX_EVENTLOG_MESSAGE_SIZE
ÃÃ& ?
)
ÃÃ? @
;
ÃÃ@ A
}
ÕÕ 
EventLogEntryType
œœ 
	entryType
œœ 
=
œœ  !
GetEntryType
œœ" .
(
œœ. /
loggingEvent
œœ/ ;
.
œœ; <
Level
œœ< A
)
œœA B
;
œœB C
using
—— 	
(
——	 

SecurityContext
——
 
.
—— 
Impersonate
—— %
(
——% &
this
——& *
)
——* +
)
——+ ,
{
““ 
EventLog
”” 
.
”” 

WriteEntry
”” 
(
”” 
m_applicationName
”” *
,
””* +
eventTxt
””, 4
,
””4 5
	entryType
””6 ?
,
””? @
eventID
””A H
,
””H I
category
””J R
)
””R S
;
””S T
}
‘‘ 
}
’’ 
catch
÷÷ 
(
÷÷ 	
	Exception
÷÷	 
ex
÷÷ 
)
÷÷ 
{
◊◊ 
ErrorHandler
ÿÿ 
.
ÿÿ 
Error
ÿÿ 
(
ÿÿ 
$str
ÿÿ 7
+
ÿÿ8 9
	m_logName
ÿÿ: C
+
ÿÿD E
$str
ÿÿF X
+
ÿÿY Z
m_applicationName
ÿÿ[ l
+
ÿÿm n
$str
ÿÿo r
,
ÿÿr s
ex
ÿÿt v
)
ÿÿv w
;
ÿÿw x
}
ŸŸ 
}
⁄⁄ 
override
ÂÂ 

	protected
ÂÂ 
bool
ÂÂ 
RequiresLayout
ÂÂ (
{
ÊÊ 
get
ÁÁ 
{
ÁÁ 
return
ÁÁ	 
true
ÁÁ 
;
ÁÁ 
}
ÁÁ 
}
ËË 
virtual
˘˘ 	
	protected
˘˘
 
EventLogEntryType
˘˘ %
GetEntryType
˘˘& 2
(
˘˘2 3
Level
˘˘3 8
level
˘˘9 >
)
˘˘> ?
{
˙˙ %
Level2EventLogEntryType
¸¸ 
	entryType
¸¸ $
=
¸¸% &
m_levelMapping
¸¸' 5
.
¸¸5 6
Lookup
¸¸6 <
(
¸¸< =
level
¸¸= B
)
¸¸B C
as
¸¸D F%
Level2EventLogEntryType
¸¸G ^
;
¸¸^ _
if
˝˝ 
(
˝˝ 
	entryType
˝˝ 
!=
˝˝ 
null
˝˝ 
)
˝˝ 
{
˛˛ 
return
ˇˇ 

	entryType
ˇˇ 
.
ˇˇ 
EventLogEntryType
ˇˇ &
;
ˇˇ& '
}
ÄÄ 
if
ÑÑ 
(
ÑÑ 
level
ÑÑ 
>=
ÑÑ 
Level
ÑÑ 
.
ÑÑ 
Error
ÑÑ 
)
ÑÑ 
{
ÖÖ 
return
ÜÜ 

EventLogEntryType
ÜÜ 
.
ÜÜ 
Error
ÜÜ "
;
ÜÜ" #
}
áá 
else
àà 
if
àà 

(
àà 
level
àà 
==
àà 
Level
àà 
.
àà 
Warn
àà 
)
àà  
{
ââ 
return
ää 

EventLogEntryType
ää 
.
ää 
Warning
ää $
;
ää$ %
}
ãã 
return
éé 	
EventLogEntryType
éé
 
.
éé 
Information
éé '
;
éé' (
}
èè 
private
ôô 	
string
ôô
 
	m_logName
ôô 
;
ôô 
private
üü 	
string
üü
 
m_applicationName
üü "
;
üü" #
private
•• 	
string
••
 
m_machineName
•• 
;
•• 
private
™™ 	
LevelMapping
™™
 
m_levelMapping
™™ %
=
™™& '
new
™™( +
LevelMapping
™™, 8
(
™™8 9
)
™™9 :
;
™™: ;
private
ØØ 	
SecurityContext
ØØ
 
m_securityContext
ØØ +
;
ØØ+ ,
private
¥¥ 
int
¥¥ 
	m_eventId
¥¥ 
=
¥¥ 
$num
¥¥  !
;
¥¥! "
private
ππ 
short
ππ 

m_category
ππ  
=
ππ! "
$num
ππ# $
;
ππ$ %
public
»» 
class
»»	 %
Level2EventLogEntryType
»» &
:
»»' (
LevelMappingEntry
»») :
{
…… 
private
   

EventLogEntryType
   
m_entryType
   (
;
  ( )
public
’’ 	
EventLogEntryType
’’
 
EventLogEntryType
’’ -
{
÷÷ 
get
◊◊ 
{
◊◊ 	
return
◊◊
 
m_entryType
◊◊ 
;
◊◊ 
}
◊◊ 
set
ÿÿ 
{
ÿÿ 	
m_entryType
ÿÿ
 
=
ÿÿ 
value
ÿÿ 
;
ÿÿ 
}
ÿÿ  
}
ŸŸ 
}
⁄⁄ 
private
ÁÁ 
readonly
ÁÁ 
static
ÁÁ 
Type
ÁÁ !
declaringType
ÁÁ" /
=
ÁÁ0 1
typeof
ÁÁ2 8
(
ÁÁ8 9
EventLogAppender
ÁÁ9 I
)
ÁÁI J
;
ÁÁJ K
private
ıı 	
readonly
ıı
 
static
ıı 
int
ıı /
!MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT
ıı ?
=
ıı@ A
$num
ııB G
;
ııG H
private
îî 	
readonly
îî
 
static
îî 
int
îî 6
(MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER
îî F
=
îîG H
$num
îîI N
-
îîO P
$num
îîQ R
;
îîR S
private
üü 	
readonly
üü
 
static
üü 
int
üü '
MAX_EVENTLOG_MESSAGE_SIZE
üü 7
=
üü8 9'
GetMaxEventLogMessageSize
üü: S
(
üüS T
)
üüT U
;
üüU V
private
¶¶ 	
static
¶¶
 
int
¶¶ '
GetMaxEventLogMessageSize
¶¶ .
(
¶¶. /
)
¶¶/ 0
{
ßß 
if
®® 
(
®® 
Environment
®® 
.
®® 
	OSVersion
®® 
.
®® 
Platform
®® %
==
®®& (

PlatformID
®®) 3
.
®®3 4
Win32NT
®®4 ;
&&
®®< >
Environment
®®? J
.
®®J K
	OSVersion
®®K T
.
®®T U
Version
®®U \
.
®®\ ]
Major
®®] b
>=
®®c e
$num
®®f g
)
®®g h
return
©© 
6
(MAX_EVENTLOG_MESSAGE_SIZE_VISTA_OR_NEWER
©© 3
;
©©3 4
return
™™ 	/
!MAX_EVENTLOG_MESSAGE_SIZE_DEFAULT
™™
 +
;
™™+ ,
}
´´ 
}
ÆÆ 
}ØØ È¯
@C:\sonarqube\projects\log4net-2.0.7\src\Appender\FileAppender.cs
	namespace 	
log4net
 
. 
Appender 
{   
public
ÉÉ 
class
ÉÉ 
FileAppender
ÉÉ 
:
ÉÉ  
TextWriterAppender
ÉÉ /
{
ÑÑ 
private
ãã 	
sealed
ãã
 
class
ãã 
LockingStream
ãã $
:
ãã% &
Stream
ãã' -
,
ãã- .
IDisposable
ãã/ :
{
åå 
public
çç 	
sealed
çç
 
class
çç  
LockStateException
çç )
:
çç* +
LogException
çç, 8
{
éé 
public
èè 
 
LockStateException
èè 
(
èè 
string
èè $
message
èè% ,
)
èè, -
:
êê 
base
êê 
(
êê 
message
êê 
)
êê 
{
ëë 
}
íí 
}
ìì 
private
ïï 

Stream
ïï 
m_realStream
ïï 
=
ïï  
null
ïï! %
;
ïï% &
private
ññ 

LockingModelBase
ññ 
m_lockingModel
ññ *
=
ññ+ ,
null
ññ- 1
;
ññ1 2
private
óó 

int
óó 
m_lockLevel
óó 
=
óó 
$num
óó 
;
óó 
public
ôô 	
LockingStream
ôô
 
(
ôô 
LockingModelBase
ôô (
locking
ôô) 0
)
ôô0 1
:
öö 
base
öö 

(
öö
 
)
öö 
{
õõ 
if
úú 
(
úú 
locking
úú 
==
úú 
null
úú 
)
úú 
{
ùù 
throw
ûû 

new
ûû 
ArgumentException
ûû  
(
ûû  !
$str
ûû! @
,
ûû@ A
$str
ûûB K
)
ûûK L
;
ûûL M
}
üü 
m_lockingModel
†† 
=
†† 
locking
†† 
;
†† 
}
°° 
private
≠≠ 

int
≠≠ 
m_readTotal
≠≠ 
=
≠≠ 
-
≠≠ 
$num
≠≠ 
;
≠≠  
public
∞∞ 	
override
∞∞
 
IAsyncResult
∞∞ 
	BeginRead
∞∞  )
(
∞∞) *
byte
∞∞* .
[
∞∞. /
]
∞∞/ 0
buffer
∞∞1 7
,
∞∞7 8
int
∞∞9 <
offset
∞∞= C
,
∞∞C D
int
∞∞E H
count
∞∞I N
,
∞∞N O
AsyncCallback
∞∞P ]
callback
∞∞^ f
,
∞∞f g
object
∞∞h n
state
∞∞o t
)
∞∞t u
{
±± 
AssertLocked
≤≤ 
(
≤≤ 
)
≤≤ 
;
≤≤ 
IAsyncResult
≥≥ 
ret
≥≥ 
=
≥≥ 
m_realStream
≥≥ #
.
≥≥# $
	BeginRead
≥≥$ -
(
≥≥- .
buffer
≥≥. 4
,
≥≥4 5
offset
≥≥6 <
,
≥≥< =
count
≥≥> C
,
≥≥C D
callback
≥≥E M
,
≥≥M N
state
≥≥O T
)
≥≥T U
;
≥≥U V
m_readTotal
¥¥ 
=
¥¥ 
EndRead
¥¥ 
(
¥¥ 
ret
¥¥ 
)
¥¥ 
;
¥¥ 
return
µµ 

ret
µµ 
;
µµ 
}
∂∂ 
public
ªª 	
override
ªª
 
IAsyncResult
ªª 

BeginWrite
ªª  *
(
ªª* +
byte
ªª+ /
[
ªª/ 0
]
ªª0 1
buffer
ªª2 8
,
ªª8 9
int
ªª: =
offset
ªª> D
,
ªªD E
int
ªªF I
count
ªªJ O
,
ªªO P
AsyncCallback
ªªQ ^
callback
ªª_ g
,
ªªg h
object
ªªi o
state
ªªp u
)
ªªu v
{
ºº 
AssertLocked
ΩΩ 
(
ΩΩ 
)
ΩΩ 
;
ΩΩ 
IAsyncResult
ææ 
ret
ææ 
=
ææ 
m_realStream
ææ #
.
ææ# $

BeginWrite
ææ$ .
(
ææ. /
buffer
ææ/ 5
,
ææ5 6
offset
ææ7 =
,
ææ= >
count
ææ? D
,
ææD E
callback
ææF N
,
ææN O
state
ææP U
)
ææU V
;
ææV W
EndWrite
øø 
(
øø 
ret
øø 
)
øø 
;
øø 
return
¿¿ 

ret
¿¿ 
;
¿¿ 
}
¡¡ 
public
√√ 	
override
√√
 
void
√√ 
Close
√√ 
(
√√ 
)
√√ 
{
ƒƒ 
m_lockingModel
≈≈ 
.
≈≈ 
	CloseFile
≈≈ 
(
≈≈ 
)
≈≈ 
;
≈≈ 
}
∆∆ 
public
»» 	
override
»»
 
int
»» 
EndRead
»» 
(
»» 
IAsyncResult
»» +
asyncResult
»», 7
)
»»7 8
{
…… 
AssertLocked
   
(
   
)
   
;
   
return
ÀÀ 

m_readTotal
ÀÀ 
;
ÀÀ 
}
ÃÃ 
public
ÕÕ 	
override
ÕÕ
 
void
ÕÕ 
EndWrite
ÕÕ  
(
ÕÕ  !
IAsyncResult
ÕÕ! -
asyncResult
ÕÕ. 9
)
ÕÕ9 :
{
ŒŒ 
}
–– 
public
‘‘ 	
override
‘‘
 
Task
‘‘ 
<
‘‘ 
int
‘‘ 
>
‘‘ 
	ReadAsync
‘‘ &
(
‘‘& '
byte
‘‘' +
[
‘‘+ ,
]
‘‘, -
buffer
‘‘. 4
,
‘‘4 5
int
‘‘6 9
offset
‘‘: @
,
‘‘@ A
int
‘‘B E
count
‘‘F K
,
‘‘K L
CancellationToken
‘‘M ^
cancellationToken
‘‘_ p
)
‘‘p q
{
’’ 
AssertLocked
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷ 
return
◊◊ 
m_realStream
◊◊ 
.
◊◊ 
	ReadAsync
◊◊ "
(
◊◊" #
buffer
◊◊# )
,
◊◊) *
offset
◊◊+ 1
,
◊◊1 2
count
◊◊3 8
,
◊◊8 9
cancellationToken
◊◊: K
)
◊◊K L
;
◊◊L M
}
ÿÿ 
public
⁄⁄ 

override
⁄⁄ 
Task
⁄⁄ 

WriteAsync
⁄⁄ #
(
⁄⁄# $
byte
⁄⁄$ (
[
⁄⁄( )
]
⁄⁄) *
buffer
⁄⁄+ 1
,
⁄⁄1 2
int
⁄⁄3 6
offset
⁄⁄7 =
,
⁄⁄= >
int
⁄⁄? B
count
⁄⁄C H
,
⁄⁄H I
CancellationToken
⁄⁄J [
cancellationToken
⁄⁄\ m
)
⁄⁄m n
{
€€ 
AssertLocked
‹‹ 
(
‹‹ 
)
‹‹ 
;
‹‹ 
return
›› 
base
›› 
.
›› 

WriteAsync
›› 
(
›› 
buffer
›› "
,
››" #
offset
››$ *
,
››* +
count
››, 1
,
››1 2
cancellationToken
››3 D
)
››D E
;
››E F
}
ﬁﬁ 
public
·· 	
override
··
 
void
·· 
Flush
·· 
(
·· 
)
·· 
{
‚‚ 
AssertLocked
„„ 
(
„„ 
)
„„ 
;
„„ 
m_realStream
‰‰ 
.
‰‰ 
Flush
‰‰ 
(
‰‰ 
)
‰‰ 
;
‰‰ 
}
ÂÂ 
public
ÊÊ 	
override
ÊÊ
 
int
ÊÊ 
Read
ÊÊ 
(
ÊÊ 
byte
ÊÊ  
[
ÊÊ  !
]
ÊÊ! "
buffer
ÊÊ# )
,
ÊÊ) *
int
ÊÊ+ .
offset
ÊÊ/ 5
,
ÊÊ5 6
int
ÊÊ7 :
count
ÊÊ; @
)
ÊÊ@ A
{
ÁÁ 
return
ËË 

m_realStream
ËË 
.
ËË 
Read
ËË 
(
ËË 
buffer
ËË #
,
ËË# $
offset
ËË% +
,
ËË+ ,
count
ËË- 2
)
ËË2 3
;
ËË3 4
}
ÈÈ 
public
ÍÍ 	
override
ÍÍ
 
int
ÍÍ 
ReadByte
ÍÍ 
(
ÍÍ  
)
ÍÍ  !
{
ÎÎ 
return
ÏÏ 

m_realStream
ÏÏ 
.
ÏÏ 
ReadByte
ÏÏ  
(
ÏÏ  !
)
ÏÏ! "
;
ÏÏ" #
}
ÌÌ 
public
ÓÓ 	
override
ÓÓ
 
long
ÓÓ 
Seek
ÓÓ 
(
ÓÓ 
long
ÓÓ !
offset
ÓÓ" (
,
ÓÓ( )

SeekOrigin
ÓÓ* 4
origin
ÓÓ5 ;
)
ÓÓ; <
{
ÔÔ 
AssertLocked
 
(
 
)
 
;
 
return
ÒÒ 

m_realStream
ÒÒ 
.
ÒÒ 
Seek
ÒÒ 
(
ÒÒ 
offset
ÒÒ #
,
ÒÒ# $
origin
ÒÒ% +
)
ÒÒ+ ,
;
ÒÒ, -
}
ÚÚ 
public
ÛÛ 	
override
ÛÛ
 
void
ÛÛ 
	SetLength
ÛÛ !
(
ÛÛ! "
long
ÛÛ" &
value
ÛÛ' ,
)
ÛÛ, -
{
ÙÙ 
AssertLocked
ıı 
(
ıı 
)
ıı 
;
ıı 
m_realStream
ˆˆ 
.
ˆˆ 
	SetLength
ˆˆ 
(
ˆˆ 
value
ˆˆ  
)
ˆˆ  !
;
ˆˆ! "
}
˜˜ 
void
¯¯ 
IDisposable
¯¯ 
.
¯¯ 
Dispose
¯¯ 
(
¯¯ 
)
¯¯ 
{
˘˘ 
Close
˝˝ 	
(
˝˝	 

)
˝˝
 
;
˝˝ 
}
ˇˇ 
public
ÄÄ 	
override
ÄÄ
 
void
ÄÄ 
Write
ÄÄ 
(
ÄÄ 
byte
ÄÄ "
[
ÄÄ" #
]
ÄÄ# $
buffer
ÄÄ% +
,
ÄÄ+ ,
int
ÄÄ- 0
offset
ÄÄ1 7
,
ÄÄ7 8
int
ÄÄ9 <
count
ÄÄ= B
)
ÄÄB C
{
ÅÅ 
AssertLocked
ÇÇ 
(
ÇÇ 
)
ÇÇ 
;
ÇÇ 
m_realStream
ÉÉ 
.
ÉÉ 
Write
ÉÉ 
(
ÉÉ 
buffer
ÉÉ 
,
ÉÉ 
offset
ÉÉ %
,
ÉÉ% &
count
ÉÉ' ,
)
ÉÉ, -
;
ÉÉ- .
}
ÑÑ 
public
ÖÖ 	
override
ÖÖ
 
void
ÖÖ 
	WriteByte
ÖÖ !
(
ÖÖ! "
byte
ÖÖ" &
value
ÖÖ' ,
)
ÖÖ, -
{
ÜÜ 
AssertLocked
áá 
(
áá 
)
áá 
;
áá 
m_realStream
àà 
.
àà 
	WriteByte
àà 
(
àà 
value
àà  
)
àà  !
;
àà! "
}
ââ 
public
åå 	
override
åå
 
bool
åå 
CanRead
åå 
{
çç 
get
éé 
{
éé 	
return
éé
 
false
éé 
;
éé 
}
éé 
}
èè 
public
êê 	
override
êê
 
bool
êê 
CanSeek
êê 
{
ëë 
get
íí 
{
ìì 
AssertLocked
îî 
(
îî 
)
îî 
;
îî 
return
ïï 
m_realStream
ïï 
.
ïï 
CanSeek
ïï  
;
ïï  !
}
ññ 
}
óó 
public
òò 	
override
òò
 
bool
òò 
CanWrite
òò  
{
ôô 
get
öö 
{
õõ 
AssertLocked
úú 
(
úú 
)
úú 
;
úú 
return
ùù 
m_realStream
ùù 
.
ùù 
CanWrite
ùù !
;
ùù! "
}
ûû 
}
üü 
public
†† 	
override
††
 
long
†† 
Length
†† 
{
°° 
get
¢¢ 
{
££ 
AssertLocked
§§ 
(
§§ 
)
§§ 
;
§§ 
return
•• 
m_realStream
•• 
.
•• 
Length
•• 
;
••  
}
¶¶ 
}
ßß 
public
®® 	
override
®®
 
long
®® 
Position
®®  
{
©© 
get
™™ 
{
´´ 
AssertLocked
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
return
≠≠ 
m_realStream
≠≠ 
.
≠≠ 
Position
≠≠ !
;
≠≠! "
}
ÆÆ 
set
ØØ 
{
∞∞ 
AssertLocked
±± 
(
±± 
)
±± 
;
±± 
m_realStream
≤≤ 
.
≤≤ 
Position
≤≤ 
=
≤≤ 
value
≤≤ "
;
≤≤" #
}
≥≥ 
}
¥¥ 
private
∫∫ 

void
∫∫ 
AssertLocked
∫∫ 
(
∫∫ 
)
∫∫ 
{
ªª 
if
ºº 
(
ºº 
m_realStream
ºº 
==
ºº 
null
ºº 
)
ºº 
{
ΩΩ 
throw
ææ 

new
ææ  
LockStateException
ææ !
(
ææ! "
$str
ææ" D
)
ææD E
;
ææE F
}
øø 
}
¿¿ 
public
¬¬ 	
bool
¬¬
 
AcquireLock
¬¬ 
(
¬¬ 
)
¬¬ 
{
√√ 
bool
ƒƒ 
ret
ƒƒ	 
=
ƒƒ 
false
ƒƒ 
;
ƒƒ 
lock
≈≈ 
(
≈≈	 

this
≈≈
 
)
≈≈ 
{
∆∆ 
if
«« 
(
«« 	
m_lockLevel
««	 
==
«« 
$num
«« 
)
«« 
{
»» 
m_realStream
   
=
   
m_lockingModel
   #
.
  # $
AcquireLock
  $ /
(
  / 0
)
  0 1
;
  1 2
}
ÀÀ 
if
ÃÃ 
(
ÃÃ 	
m_realStream
ÃÃ	 
!=
ÃÃ 
null
ÃÃ 
)
ÃÃ 
{
ÕÕ 
m_lockLevel
ŒŒ 
++
ŒŒ 
;
ŒŒ 
ret
œœ 	
=
œœ
 
true
œœ 
;
œœ 
}
–– 
}
—— 
return
““ 

ret
““ 
;
““ 
}
”” 
public
’’ 	
void
’’
 
ReleaseLock
’’ 
(
’’ 
)
’’ 
{
÷÷ 
lock
◊◊ 
(
◊◊	 

this
◊◊
 
)
◊◊ 
{
ÿÿ 
m_lockLevel
ŸŸ 
--
ŸŸ 
;
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 	
m_lockLevel
⁄⁄	 
==
⁄⁄ 
$num
⁄⁄ 
)
⁄⁄ 
{
€€ 
m_lockingModel
›› 
.
›› 
ReleaseLock
››  
(
››  !
)
››! "
;
››" #
m_realStream
ﬁﬁ 
=
ﬁﬁ 
null
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 
}
·· 
}
‰‰ 
public
ÚÚ 
abstract
ÚÚ	 
class
ÚÚ 
LockingModelBase
ÚÚ (
{
ÛÛ 
private
ÙÙ 

FileAppender
ÙÙ 

m_appender
ÙÙ "
=
ÙÙ# $
null
ÙÙ% )
;
ÙÙ) *
public
ÑÑ 	
abstract
ÑÑ
 
void
ÑÑ 
OpenFile
ÑÑ  
(
ÑÑ  !
string
ÑÑ! '
filename
ÑÑ( 0
,
ÑÑ0 1
bool
ÑÑ2 6
append
ÑÑ7 =
,
ÑÑ= >
Encoding
ÑÑ? G
encoding
ÑÑH P
)
ÑÑP Q
;
ÑÑQ R
public
éé 	
abstract
éé
 
void
éé 
	CloseFile
éé !
(
éé! "
)
éé" #
;
éé# $
public
ìì 	
abstract
ìì
 
void
ìì 
ActivateOptions
ìì '
(
ìì' (
)
ìì( )
;
ìì) *
public
òò 	
abstract
òò
 
void
òò 
OnClose
òò 
(
òò  
)
òò  !
;
òò! "
public
•• 	
abstract
••
 
Stream
•• 
AcquireLock
•• %
(
••% &
)
••& '
;
••' (
public
∞∞ 	
abstract
∞∞
 
void
∞∞ 
ReleaseLock
∞∞ #
(
∞∞# $
)
∞∞$ %
;
∞∞% &
public
≈≈ 	
FileAppender
≈≈
 
CurrentAppender
≈≈ &
{
∆∆ 
get
«« 
{
«« 	
return
««
 

m_appender
«« 
;
«« 
}
«« 
set
»» 
{
»» 	

m_appender
»»
 
=
»» 
value
»» 
;
»» 
}
»» 
}
…… 
	protected
€€ 
Stream
€€ 
CreateStream
€€  
(
€€  !
string
€€! '
filename
€€( 0
,
€€0 1
bool
€€2 6
append
€€7 =
,
€€= >
	FileShare
€€? H
	fileShare
€€I R
)
€€R S
{
‹‹ 
using
›› 	
(
››
 
CurrentAppender
›› 
.
›› 
SecurityContext
›› *
.
››* +
Impersonate
››+ 6
(
››6 7
this
››7 ;
)
››; <
)
››< =
{
ﬁﬁ 
string
‡‡ 
directoryFullName
‡‡ 
=
‡‡ 
Path
‡‡  $
.
‡‡$ %
GetDirectoryName
‡‡% 5
(
‡‡5 6
filename
‡‡6 >
)
‡‡> ?
;
‡‡? @
if
‰‰ 
(
‰‰ 	
!
‰‰	 

	Directory
‰‰
 
.
‰‰ 
Exists
‰‰ 
(
‰‰ 
directoryFullName
‰‰ ,
)
‰‰, -
)
‰‰- .
{
ÂÂ 
	Directory
ÊÊ 
.
ÊÊ 
CreateDirectory
ÊÊ 
(
ÊÊ  
directoryFullName
ÊÊ  1
)
ÊÊ1 2
;
ÊÊ2 3
}
ÁÁ 
FileMode
ÈÈ 
fileOpenMode
ÈÈ 
=
ÈÈ 
append
ÈÈ #
?
ÈÈ$ %
FileMode
ÈÈ& .
.
ÈÈ. /
Append
ÈÈ/ 5
:
ÈÈ6 7
FileMode
ÈÈ8 @
.
ÈÈ@ A
Create
ÈÈA G
;
ÈÈG H
return
ÍÍ 
new
ÍÍ 

FileStream
ÍÍ 
(
ÍÍ 
filename
ÍÍ #
,
ÍÍ# $
fileOpenMode
ÍÍ% 1
,
ÍÍ1 2

FileAccess
ÍÍ3 =
.
ÍÍ= >
Write
ÍÍ> C
,
ÍÍC D
	fileShare
ÍÍE N
)
ÍÍN O
;
ÍÍO P
}
ÎÎ 
}
ÏÏ 
	protected
ıı 
void
ıı 
CloseStream
ıı 
(
ıı 
Stream
ıı $
stream
ıı% +
)
ıı+ ,
{
ˆˆ 
using
˜˜ 	
(
˜˜
 
CurrentAppender
˜˜ 
.
˜˜ 
SecurityContext
˜˜ *
.
˜˜* +
Impersonate
˜˜+ 6
(
˜˜6 7
this
˜˜7 ;
)
˜˜; <
)
˜˜< =
{
¯¯ 
stream
˘˘ 
.
˘˘ 
Close
˘˘ 
(
˘˘ 
)
˘˘ 
;
˘˘ 
}
˙˙ 
}
˚˚ 
}
¸¸ 
public
áá 
class
áá	 
ExclusiveLock
áá 
:
áá 
LockingModelBase
áá /
{
àà 
private
ââ 

Stream
ââ 
m_stream
ââ 
=
ââ 
null
ââ !
;
ââ! "
public
ôô 	
override
ôô
 
void
ôô 
OpenFile
ôô  
(
ôô  !
string
ôô! '
filename
ôô( 0
,
ôô0 1
bool
ôô2 6
append
ôô7 =
,
ôô= >
Encoding
ôô? G
encoding
ôôH P
)
ôôP Q
{
öö 
try
õõ 
{
úú 
m_stream
ùù 
=
ùù 
CreateStream
ùù 
(
ùù 
filename
ùù %
,
ùù% &
append
ùù' -
,
ùù- .
	FileShare
ùù/ 8
.
ùù8 9
Read
ùù9 =
)
ùù= >
;
ùù> ?
}
ûû 
catch
üü 	
(
üü
 
	Exception
üü 
e1
üü 
)
üü 
{
†† 
CurrentAppender
°° 
.
°° 
ErrorHandler
°° !
.
°°! "
Error
°°" '
(
°°' (
$str
°°( I
+
°°J K
filename
°°L T
+
°°U V
$str
°°W [
+
°°\ ]
e1
°°^ `
.
°°` a
Message
°°a h
)
°°h i
;
°°i j
}
¢¢ 
}
££ 
public
≠≠ 	
override
≠≠
 
void
≠≠ 
	CloseFile
≠≠ !
(
≠≠! "
)
≠≠" #
{
ÆÆ 
CloseStream
ØØ 
(
ØØ 
m_stream
ØØ 
)
ØØ 
;
ØØ 
m_stream
∞∞ 
=
∞∞ 
null
∞∞ 
;
∞∞ 
}
±± 
public
ºº 	
override
ºº
 
Stream
ºº 
AcquireLock
ºº %
(
ºº% &
)
ºº& '
{
ΩΩ 
return
ææ 

m_stream
ææ 
;
ææ 
}
øø 
public
…… 	
override
……
 
void
…… 
ReleaseLock
…… #
(
……# $
)
……$ %
{
   
}
ÃÃ 
public
—— 	
override
——
 
void
—— 
ActivateOptions
—— '
(
——' (
)
——( )
{
““ 
}
‘‘ 
public
ŸŸ 	
override
ŸŸ
 
void
ŸŸ 
OnClose
ŸŸ 
(
ŸŸ  
)
ŸŸ  !
{
⁄⁄ 
}
‹‹ 
}
›› 
public
ÍÍ 
class
ÍÍ	 
MinimalLock
ÍÍ 
:
ÍÍ 
LockingModelBase
ÍÍ -
{
ÎÎ 
private
ÏÏ 

string
ÏÏ 

m_filename
ÏÏ 
;
ÏÏ 
private
ÌÌ 

bool
ÌÌ 
m_append
ÌÌ 
;
ÌÌ 
private
ÓÓ 

Stream
ÓÓ 
m_stream
ÓÓ 
=
ÓÓ 
null
ÓÓ !
;
ÓÓ! "
public
˛˛ 	
override
˛˛
 
void
˛˛ 
OpenFile
˛˛  
(
˛˛  !
string
˛˛! '
filename
˛˛( 0
,
˛˛0 1
bool
˛˛2 6
append
˛˛7 =
,
˛˛= >
Encoding
˛˛? G
encoding
˛˛H P
)
˛˛P Q
{
ˇˇ 

m_filename
ÄÄ 
=
ÄÄ 
filename
ÄÄ 
;
ÄÄ 
m_append
ÅÅ 
=
ÅÅ 
append
ÅÅ 
;
ÅÅ 
}
ÇÇ 
public
åå 	
override
åå
 
void
åå 
	CloseFile
åå !
(
åå! "
)
åå" #
{
çç 
}
èè 
public
úú 	
override
úú
 
Stream
úú 
AcquireLock
úú %
(
úú% &
)
úú& '
{
ùù 
if
ûû 
(
ûû 
m_stream
ûû 
==
ûû 
null
ûû 
)
ûû 
{
üü 
try
†† 
{
°° 
m_stream
¢¢ 
=
¢¢ 
CreateStream
¢¢ 
(
¢¢ 

m_filename
¢¢ (
,
¢¢( )
m_append
¢¢* 2
,
¢¢2 3
	FileShare
¢¢4 =
.
¢¢= >
Read
¢¢> B
)
¢¢B C
;
¢¢C D
m_append
££ 
=
££ 
true
££ 
;
££ 
}
§§ 
catch
•• 

(
•• 
	Exception
•• 
e1
•• 
)
•• 
{
¶¶ 
CurrentAppender
ßß 
.
ßß 
ErrorHandler
ßß "
.
ßß" #
Error
ßß# (
(
ßß( )
$str
ßß) J
+
ßßK L

m_filename
ßßM W
+
ßßX Y
$str
ßßZ ^
+
ßß_ `
e1
ßßa c
.
ßßc d
Message
ßßd k
)
ßßk l
;
ßßl m
}
®® 
}
©© 
return
™™ 

m_stream
™™ 
;
™™ 
}
´´ 
public
∂∂ 	
override
∂∂
 
void
∂∂ 
ReleaseLock
∂∂ #
(
∂∂# $
)
∂∂$ %
{
∑∑ 
CloseStream
∏∏ 
(
∏∏ 
m_stream
∏∏ 
)
∏∏ 
;
∏∏ 
m_stream
ππ 
=
ππ 
null
ππ 
;
ππ 
}
∫∫ 
public
øø 	
override
øø
 
void
øø 
ActivateOptions
øø '
(
øø' (
)
øø( )
{
¿¿ 
}
¬¬ 
public
«« 	
override
««
 
void
«« 
OnClose
«« 
(
««  
)
««  !
{
»» 
}
   
}
ÀÀ 
public
”” 
class
””	 
InterProcessLock
”” 
:
””  !
LockingModelBase
””" 2
{
‘‘ 
private
’’ 

Mutex
’’ 
m_mutex
’’ 
=
’’ 
null
’’ 
;
’’  
private
÷÷ 

Stream
÷÷ 
m_stream
÷÷ 
=
÷÷ 
null
÷÷ !
;
÷÷! "
private
◊◊ 

int
◊◊ 
m_recursiveWatch
◊◊ 
=
◊◊  !
$num
◊◊" #
;
◊◊# $
[
ËË 
System
ËË 

.
ËË
 
Security
ËË 
.
ËË "
SecuritySafeCritical
ËË (
]
ËË( )
public
ÍÍ 	
override
ÍÍ
 
void
ÍÍ 
OpenFile
ÍÍ  
(
ÍÍ  !
string
ÍÍ! '
filename
ÍÍ( 0
,
ÍÍ0 1
bool
ÍÍ2 6
append
ÍÍ7 =
,
ÍÍ= >
Encoding
ÍÍ? G
encoding
ÍÍH P
)
ÍÍP Q
{
ÎÎ 
try
ÏÏ 
{
ÌÌ 
m_stream
ÓÓ 
=
ÓÓ 
CreateStream
ÓÓ 
(
ÓÓ 
filename
ÓÓ %
,
ÓÓ% &
append
ÓÓ' -
,
ÓÓ- .
	FileShare
ÓÓ/ 8
.
ÓÓ8 9
	ReadWrite
ÓÓ9 B
)
ÓÓB C
;
ÓÓC D
}
ÔÔ 
catch
 	
(

 
	Exception
 
e1
 
)
 
{
ÒÒ 
CurrentAppender
ÚÚ 
.
ÚÚ 
ErrorHandler
ÚÚ !
.
ÚÚ! "
Error
ÚÚ" '
(
ÚÚ' (
$str
ÚÚ( I
+
ÚÚJ K
filename
ÚÚL T
+
ÚÚU V
$str
ÚÚW [
+
ÚÚ\ ]
e1
ÚÚ^ `
.
ÚÚ` a
Message
ÚÚa h
)
ÚÚh i
;
ÚÚi j
}
ÛÛ 
}
ÙÙ 
public
˛˛ 	
override
˛˛
 
void
˛˛ 
	CloseFile
˛˛ !
(
˛˛! "
)
˛˛" #
{
ˇˇ 
try
ÄÄ 
{
ÅÅ 
CloseStream
ÇÇ 
(
ÇÇ 
m_stream
ÇÇ 
)
ÇÇ 
;
ÇÇ 
m_stream
ÉÉ 
=
ÉÉ 
null
ÉÉ 
;
ÉÉ 
}
ÑÑ 
finally
ÖÖ 
{
ÜÜ 
ReleaseLock
áá 
(
áá 
)
áá 
;
áá 
}
àà 
}
ââ 
public
îî 	
override
îî
 
Stream
îî 
AcquireLock
îî %
(
îî% &
)
îî& '
{
ïï 
if
ññ 
(
ññ 
m_mutex
ññ 
!=
ññ 
null
ññ 
)
ññ 
{
óó 
m_mutex
ôô 
.
ôô 
WaitOne
ôô 
(
ôô 
)
ôô 
;
ôô 
m_recursiveWatch
úú 
++
úú 
;
úú 
if
üü 
(
üü 	
m_stream
üü	 
!=
üü 
null
üü 
)
üü 
{
†† 
if
°° 
(
°°	 

m_stream
°°
 
.
°° 
CanSeek
°° 
)
°° 
{
¢¢ 
m_stream
££ 
.
££ 
Seek
££ 
(
££ 
$num
££ 
,
££ 

SeekOrigin
££ "
.
££" #
End
££# &
)
££& '
;
££' (
}
§§ 
}
•• 
else
¶¶ 	
{
ßß 
}
©© 
}
™™ 
else
´´ 
{
¨¨ 
CurrentAppender
≠≠ 
.
≠≠ 
ErrorHandler
≠≠ !
.
≠≠! "
Error
≠≠" '
(
≠≠' (
$str≠≠( á
)≠≠á à
;≠≠à â
}
ÆÆ 
return
ØØ 

m_stream
ØØ 
;
ØØ 
}
∞∞ 
public
µµ 	
override
µµ
 
void
µµ 
ReleaseLock
µµ #
(
µµ# $
)
µµ$ %
{
∂∂ 
if
∑∑ 
(
∑∑ 
m_mutex
∑∑ 
!=
∑∑ 
null
∑∑ 
)
∑∑ 
{
∏∏ 
if
ππ 
(
ππ 	
m_recursiveWatch
ππ	 
>
ππ 
$num
ππ 
)
ππ 
{
∫∫ 
m_recursiveWatch
ªª 
--
ªª 
;
ªª 
m_mutex
ºº 
.
ºº 
ReleaseMutex
ºº 
(
ºº 
)
ºº 
;
ºº 
}
ΩΩ 
}
ææ 
else
øø 
{
¿¿ 
CurrentAppender
¡¡ 
.
¡¡ 
ErrorHandler
¡¡ !
.
¡¡! "
Error
¡¡" '
(
¡¡' (
$str
¡¡( d
)
¡¡d e
;
¡¡e f
}
¬¬ 
}
√√ 
public
»» 	
override
»»
 
void
»» 
ActivateOptions
»» '
(
»»' (
)
»»( )
{
…… 
if
   
(
   
m_mutex
   
==
   
null
   
)
   
{
ÀÀ 
string
ÃÃ #
mutexFriendlyFilename
ÃÃ !
=
ÃÃ" #
CurrentAppender
ÃÃ$ 3
.
ÃÃ3 4
File
ÃÃ4 8
.
ÕÕ 
Replace
ÕÕ 
(
ÕÕ 
$str
ÕÕ 
,
ÕÕ 
$str
ÕÕ 
)
ÕÕ 
.
ŒŒ 
Replace
ŒŒ 
(
ŒŒ 
$str
ŒŒ 
,
ŒŒ 
$str
ŒŒ 
)
ŒŒ 
.
œœ 
Replace
œœ 
(
œœ 
$str
œœ 
,
œœ 
$str
œœ 
)
œœ 
;
œœ 
m_mutex
—— 
=
—— 
new
—— 
Mutex
—— 
(
—— 
false
—— 
,
—— #
mutexFriendlyFilename
——  5
)
——5 6
;
——6 7
}
““ 
else
”” 
{
‘‘ 
CurrentAppender
’’ 
.
’’ 
ErrorHandler
’’ !
.
’’! "
Error
’’" '
(
’’' (
$str
’’( W
)
’’W X
;
’’X Y
}
÷÷ 
}
◊◊ 
public
‹‹ 	
override
‹‹
 
void
‹‹ 
OnClose
‹‹ 
(
‹‹  
)
‹‹  !
{
›› 
if
ﬁﬁ 
(
ﬁﬁ 
m_mutex
ﬁﬁ 
!=
ﬁﬁ 
null
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
m_mutex
·· 
.
·· 
Dispose
·· 
(
·· 
)
·· 
;
·· 
m_mutex
ÂÂ 
=
ÂÂ 
null
ÂÂ 
;
ÂÂ 
}
ÊÊ 
else
ÁÁ 
{
ËË 
CurrentAppender
ÈÈ 
.
ÈÈ 
ErrorHandler
ÈÈ !
.
ÈÈ! "
Error
ÈÈ" '
(
ÈÈ' (
$str
ÈÈ( S
)
ÈÈS T
;
ÈÈT U
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 
public
˚˚ 
FileAppender
˚˚	 
(
˚˚ 
)
˚˚ 
{
¸¸ 
}
˝˝ 
[
ää 
Obsolete
ää 
(
ää 
$str
ää d
)
ääd e
]
ääe f
public
ãã 
FileAppender
ãã	 
(
ãã 
ILayout
ãã 
layout
ãã $
,
ãã$ %
string
ãã& ,
filename
ãã- 5
,
ãã5 6
bool
ãã7 ;
append
ãã< B
)
ããB C
{
åå 
Layout
çç 	
=
çç
 
layout
çç 
;
çç 
File
éé 
=
éé 	
filename
éé
 
;
éé 
AppendToFile
èè 
=
èè 
append
èè 
;
èè 
ActivateOptions
êê 
(
êê 
)
êê 
;
êê 
}
ëë 
[
ûû 
Obsolete
ûû 
(
ûû 
$str
ûû V
)
ûûV W
]
ûûW X
public
üü 
FileAppender
üü	 
(
üü 
ILayout
üü 
layout
üü $
,
üü$ %
string
üü& ,
filename
üü- 5
)
üü5 6
:
†† 
this
†† 	
(
††	 

layout
††
 
,
†† 
filename
†† 
,
†† 
true
††  
)
††  !
{
°° 
}
¢¢ 
virtual
¥¥ 	
public
¥¥
 
string
¥¥ 
File
¥¥ 
{
µµ 
get
∂∂ 
{
∂∂ 
return
∂∂	 

m_fileName
∂∂ 
;
∂∂ 
}
∂∂ 
set
∑∑ 
{
∑∑ 

m_fileName
∑∑	 
=
∑∑ 
value
∑∑ 
;
∑∑ 
}
∑∑ 
}
∏∏ 
public
»» 
bool
»»	 
AppendToFile
»» 
{
…… 
get
   
{
   
return
  	 
m_appendToFile
   
;
   
}
    !
set
ÀÀ 
{
ÀÀ 
m_appendToFile
ÀÀ	 
=
ÀÀ 
value
ÀÀ 
;
ÀÀ  
}
ÀÀ! "
}
ÃÃ 
public
⁄⁄ 
Encoding
⁄⁄	 
Encoding
⁄⁄ 
{
€€ 
get
‹‹ 
{
‹‹ 
return
‹‹	 

m_encoding
‹‹ 
;
‹‹ 
}
‹‹ 
set
›› 
{
›› 

m_encoding
››	 
=
›› 
value
›› 
;
›› 
}
›› 
}
ﬁﬁ 
public
ÓÓ 
SecurityContext
ÓÓ	 
SecurityContext
ÓÓ (
{
ÔÔ 
get
 
{
 
return
	 
m_securityContext
 !
;
! "
}
# $
set
ÒÒ 
{
ÒÒ 
m_securityContext
ÒÒ	 
=
ÒÒ 
value
ÒÒ "
;
ÒÒ" #
}
ÒÒ$ %
}
ÚÚ 
public
üü 
FileAppender
üü	 
.
üü 
LockingModelBase
üü &
LockingModel
üü' 3
{
†† 
get
°° 
{
°° 
return
°°	 
m_lockingModel
°° 
;
°° 
}
°°  !
set
¢¢ 
{
¢¢ 
m_lockingModel
¢¢	 
=
¢¢ 
value
¢¢ 
;
¢¢  
}
¢¢! "
}
££ 
override
ºº 

public
ºº 
void
ºº 
ActivateOptions
ºº &
(
ºº& '
)
ºº' (
{
ΩΩ 
base
ææ 
.
ææ 
ActivateOptions
ææ 
(
ææ 
)
ææ 
;
ææ 
if
¿¿ 
(
¿¿ 
m_securityContext
¿¿ 
==
¿¿ 
null
¿¿  
)
¿¿  !
{
¡¡ 
m_securityContext
¬¬ 
=
¬¬ %
SecurityContextProvider
¬¬ /
.
¬¬/ 0
DefaultProvider
¬¬0 ?
.
¬¬? @#
CreateSecurityContext
¬¬@ U
(
¬¬U V
this
¬¬V Z
)
¬¬Z [
;
¬¬[ \
}
√√ 
if
≈≈ 
(
≈≈ 
m_lockingModel
≈≈ 
==
≈≈ 
null
≈≈ 
)
≈≈ 
{
∆∆ 
m_lockingModel
«« 
=
«« 
new
«« 
FileAppender
«« %
.
««% &
ExclusiveLock
««& 3
(
««3 4
)
««4 5
;
««5 6
}
»» 
m_lockingModel
   
.
   
CurrentAppender
   !
=
  " #
this
  $ (
;
  ( )
m_lockingModel
ÀÀ 
.
ÀÀ 
ActivateOptions
ÀÀ !
(
ÀÀ! "
)
ÀÀ" #
;
ÀÀ# $
if
ÕÕ 
(
ÕÕ 

m_fileName
ÕÕ 
!=
ÕÕ 
null
ÕÕ 
)
ÕÕ 
{
ŒŒ 
using
œœ 	
(
œœ
 
SecurityContext
œœ 
.
œœ 
Impersonate
œœ &
(
œœ& '
this
œœ' +
)
œœ+ ,
)
œœ, -
{
–– 

m_fileName
—— 
=
—— 
ConvertToFullPath
—— #
(
——# $

m_fileName
——$ .
.
——. /
Trim
——/ 3
(
——3 4
)
——4 5
)
——5 6
;
——6 7
}
““ 
SafeOpenFile
”” 
(
”” 

m_fileName
”” 
,
”” 
m_appendToFile
”” +
)
””+ ,
;
””, -
}
‘‘ 
else
’’ 
{
÷÷ 
LogLog
◊◊ 

.
◊◊
 
Warn
◊◊ 
(
◊◊ 
declaringType
◊◊ 
,
◊◊ 
$str
◊◊ Q
+
◊◊R S
Name
◊◊T X
+
◊◊Y Z
$str
◊◊[ _
)
◊◊_ `
;
◊◊` a
LogLog
ÿÿ 

.
ÿÿ
 
Warn
ÿÿ 
(
ÿÿ 
declaringType
ÿÿ 
,
ÿÿ 
$str
ÿÿ e
)
ÿÿe f
;
ÿÿf g
}
ŸŸ 
}
⁄⁄ 
override
ËË 

	protected
ËË 
void
ËË 
Reset
ËË 
(
ËË  
)
ËË  !
{
ÈÈ 
base
ÍÍ 
.
ÍÍ 
Reset
ÍÍ 
(
ÍÍ 
)
ÍÍ 
;
ÍÍ 

m_fileName
ÎÎ 
=
ÎÎ 
null
ÎÎ 
;
ÎÎ 
}
ÏÏ 
override
ÒÒ 

	protected
ÒÒ 
void
ÒÒ 
OnClose
ÒÒ !
(
ÒÒ! "
)
ÒÒ" #
{
ÚÚ 
base
ÛÛ 
.
ÛÛ 
OnClose
ÛÛ 
(
ÛÛ 
)
ÛÛ 
;
ÛÛ 
m_lockingModel
ÙÙ 
.
ÙÙ 
OnClose
ÙÙ 
(
ÙÙ 
)
ÙÙ 
;
ÙÙ 
}
ıı 
override
Ä	Ä	 

	protected
Ä	Ä	 
void
Ä	Ä	 
PrepareWriter
Ä	Ä	 '
(
Ä	Ä	' (
)
Ä	Ä	( )
{
Å	Å	 
SafeOpenFile
Ç	Ç	 
(
Ç	Ç	 

m_fileName
Ç	Ç	 
,
Ç	Ç	 
m_appendToFile
Ç	Ç	 *
)
Ç	Ç	* +
;
Ç	Ç	+ ,
}
É	É	 
override
ì	ì	 

	protected
ì	ì	 
void
ì	ì	 
Append
ì	ì	  
(
ì	ì	  !
LoggingEvent
ì	ì	! -
loggingEvent
ì	ì	. :
)
ì	ì	: ;
{
î	î	 
if
ï	ï	 
(
ï	ï	 
m_stream
ï	ï	 
.
ï	ï	 
AcquireLock
ï	ï	 
(
ï	ï	 
)
ï	ï	 
)
ï	ï	 
{
ñ	ñ	 
try
ó	ó	 
{
ò	ò	 
base
ô	ô	 	
.
ô	ô		 

Append
ô	ô	
 
(
ô	ô	 
loggingEvent
ô	ô	 
)
ô	ô	 
;
ô	ô	 
}
ö	ö	 
finally
õ	õ	 
{
ú	ú	 
m_stream
ù	ù	 
.
ù	ù	 
ReleaseLock
ù	ù	 
(
ù	ù	 
)
ù	ù	 
;
ù	ù	 
}
û	û	 
}
ü	ü	 
}
†	†	 
override
≠	≠	 

	protected
≠	≠	 
void
≠	≠	 
Append
≠	≠	  
(
≠	≠	  !
LoggingEvent
≠	≠	! -
[
≠	≠	- .
]
≠	≠	. /
loggingEvents
≠	≠	0 =
)
≠	≠	= >
{
Æ	Æ	 
if
Ø	Ø	 
(
Ø	Ø	 
m_stream
Ø	Ø	 
.
Ø	Ø	 
AcquireLock
Ø	Ø	 
(
Ø	Ø	 
)
Ø	Ø	 
)
Ø	Ø	 
{
∞	∞	 
try
±	±	 
{
≤	≤	 
base
≥	≥	 	
.
≥	≥		 

Append
≥	≥	
 
(
≥	≥	 
loggingEvents
≥	≥	 
)
≥	≥	 
;
≥	≥	  
}
¥	¥	 
finally
µ	µ	 
{
∂	∂	 
m_stream
∑	∑	 
.
∑	∑	 
ReleaseLock
∑	∑	 
(
∑	∑	 
)
∑	∑	 
;
∑	∑	 
}
∏	∏	 
}
π	π	 
}
∫	∫	 
	protected
ƒ	ƒ	 
override
ƒ	ƒ	 
void
ƒ	ƒ	 
WriteFooter
ƒ	ƒ	 %
(
ƒ	ƒ	% &
)
ƒ	ƒ	& '
{
≈	≈	 
if
∆	∆	 
(
∆	∆	 
m_stream
∆	∆	 
!=
∆	∆	 
null
∆	∆	 
)
∆	∆	 
{
«	«	 
m_stream
…	…	 
.
…	…	 
AcquireLock
…	…	 
(
…	…	 
)
…	…	 
;
…	…	 
try
 	 	 
{
À	À	 
base
Ã	Ã	 	
.
Ã	Ã		 

WriteFooter
Ã	Ã	
 
(
Ã	Ã	 
)
Ã	Ã	 
;
Ã	Ã	 
}
Õ	Õ	 
finally
Œ	Œ	 
{
œ	œ	 
m_stream
–	–	 
.
–	–	 
ReleaseLock
–	–	 
(
–	–	 
)
–	–	 
;
–	–	 
}
—	—	 
}
“	“	 
}
”	”	 
	protected
›	›	 
override
›	›	 
void
›	›	 
WriteHeader
›	›	 %
(
›	›	% &
)
›	›	& '
{
ﬁ	ﬁ	 
if
ﬂ	ﬂ	 
(
ﬂ	ﬂ	 
m_stream
ﬂ	ﬂ	 
!=
ﬂ	ﬂ	 
null
ﬂ	ﬂ	 
)
ﬂ	ﬂ	 
{
‡	‡	 
if
·	·	 
(
·	·	 
m_stream
·	·	 
.
·	·	 
AcquireLock
·	·	 
(
·	·	 
)
·	·	 
)
·	·	 
{
‚	‚	 
try
„	„	 
{
‰	‰	 
base
Â	Â	 

.
Â	Â	
 
WriteHeader
Â	Â	 
(
Â	Â	 
)
Â	Â	 
;
Â	Â	 
}
Ê	Ê	 
finally
Á	Á	 
{
Ë	Ë	 
m_stream
È	È	 
.
È	È	 
ReleaseLock
È	È	 
(
È	È	 
)
È	È	 
;
È	È	 
}
Í	Í	 
}
Î	Î	 
}
Ï	Ï	 
}
Ì	Ì	 
	protected
˜	˜	 
override
˜	˜	 
void
˜	˜	 
CloseWriter
˜	˜	 %
(
˜	˜	% &
)
˜	˜	& '
{
¯	¯	 
if
˘	˘	 
(
˘	˘	 
m_stream
˘	˘	 
!=
˘	˘	 
null
˘	˘	 
)
˘	˘	 
{
˙	˙	 
m_stream
˚	˚	 
.
˚	˚	 
AcquireLock
˚	˚	 
(
˚	˚	 
)
˚	˚	 
;
˚	˚	 
try
¸	¸	 
{
˝	˝	 
base
˛	˛	 	
.
˛	˛		 

CloseWriter
˛	˛	
 
(
˛	˛	 
)
˛	˛	 
;
˛	˛	 
}
ˇ	ˇ	 
finally
Ä
Ä
 
{
Å
Å
 
m_stream
Ç
Ç
 
.
Ç
Ç
 
ReleaseLock
Ç
Ç
 
(
Ç
Ç
 
)
Ç
Ç
 
;
Ç
Ç
 
}
É
É
 
}
Ñ
Ñ
 
}
Ö
Ö
 
	protected
î
î
 
void
î
î
 
	CloseFile
î
î
 
(
î
î
 
)
î
î
 
{
ï
ï
 '
WriteFooterAndCloseWriter
ñ
ñ
 
(
ñ
ñ
 
)
ñ
ñ
 
;
ñ
ñ
 
}
ó
ó
 
virtual
®
®
 	
	protected
®
®

 
void
®
®
 
SafeOpenFile
®
®
 %
(
®
®
% &
string
®
®
& ,
fileName
®
®
- 5
,
®
®
5 6
bool
®
®
7 ;
append
®
®
< B
)
®
®
B C
{
©
©
 
try
™
™
 
{
´
´
 
OpenFile
¨
¨
 
(
¨
¨
 
fileName
¨
¨
 
,
¨
¨
 
append
¨
¨
 
)
¨
¨
 
;
¨
¨
 
}
≠
≠
 
catch
Æ
Æ
 
(
Æ
Æ
	 

	Exception
Æ
Æ

 
e
Æ
Æ
 
)
Æ
Æ
 
{
Ø
Ø
 
ErrorHandler
∞
∞
 
.
∞
∞
 
Error
∞
∞
 
(
∞
∞
 
$str
∞
∞
 "
+
∞
∞
# $
fileName
∞
∞
% -
+
∞
∞
. /
$str
∞
∞
0 3
+
∞
∞
4 5
append
∞
∞
6 <
+
∞
∞
= >
$str
∞
∞
? O
,
∞
∞
O P
e
∞
∞
Q R
,
∞
∞
R S
	ErrorCode
∞
∞
T ]
.
∞
∞
] ^
FileOpenFailure
∞
∞
^ m
)
∞
∞
m n
;
∞
∞
n o
}
±
±
 
}
≤
≤
 
virtual
√
√
 	
	protected
√
√

 
void
√
√
 
OpenFile
√
√
 !
(
√
√
! "
string
√
√
" (
fileName
√
√
) 1
,
√
√
1 2
bool
√
√
3 7
append
√
√
8 >
)
√
√
> ?
{
ƒ
ƒ
 
if
≈
≈
 
(
≈
≈
 
LogLog
≈
≈
 
.
≈
≈
 
IsErrorEnabled
≈
≈
 
)
≈
≈
 
{
∆
∆
 
bool
»
»
 
isPathRooted
»
»
	 
=
»
»
 
false
»
»
 
;
»
»
 
using
…
…
 	
(
…
…

 
SecurityContext
…
…
 
.
…
…
 
Impersonate
…
…
 &
(
…
…
& '
this
…
…
' +
)
…
…
+ ,
)
…
…
, -
{
 
 
 
isPathRooted
À
À
 
=
À
À
 
Path
À
À
 
.
À
À
 
IsPathRooted
À
À
 %
(
À
À
% &
fileName
À
À
& .
)
À
À
. /
;
À
À
/ 0
}
Ã
Ã
 
if
Õ
Õ
 
(
Õ
Õ
 
!
Õ
Õ
 	
isPathRooted
Õ
Õ
	 
)
Õ
Õ
 
{
Œ
Œ
 
LogLog
œ
œ
 
.
œ
œ
 
Error
œ
œ
 
(
œ
œ
 
declaringType
œ
œ
 
,
œ
œ
  
$str
œ
œ
! <
+
œ
œ
= >
fileName
œ
œ
? G
+
œ
œ
H I
$str
œ
œ
J p
)
œ
œ
p q
;
œ
œ
q r
}
–
–
 
}
—
—
 
lock
”
”
 
(
”
”
 	
this
”
”
	 
)
”
”
 
{
‘
‘
 
Reset
’
’
 	
(
’
’
	 

)
’
’

 
;
’
’
 
LogLog
◊
◊
 

.
◊
◊

 
Debug
◊
◊
 
(
◊
◊
 
declaringType
◊
◊
 
,
◊
◊
 
$str
◊
◊
  <
+
◊
◊
= >
fileName
◊
◊
? G
+
◊
◊
H I
$str
◊
◊
J V
+
◊
◊
W X
append
◊
◊
Y _
+
◊
◊
` a
$str
◊
◊
b e
)
◊
◊
e f
;
◊
◊
f g

m_fileName
⁄
⁄
 
=
⁄
⁄
 
fileName
⁄
⁄
 
;
⁄
⁄
 
m_appendToFile
€
€
 
=
€
€
 
append
€
€
 
;
€
€
 
LockingModel
›
›
 
.
›
›
 
CurrentAppender
›
›
  
=
›
›
! "
this
›
›
# '
;
›
›
' (
LockingModel
ﬁ
ﬁ
 
.
ﬁ
ﬁ
 
OpenFile
ﬁ
ﬁ
 
(
ﬁ
ﬁ
 
fileName
ﬁ
ﬁ
 "
,
ﬁ
ﬁ
" #
append
ﬁ
ﬁ
$ *
,
ﬁ
ﬁ
* +

m_encoding
ﬁ
ﬁ
, 6
)
ﬁ
ﬁ
6 7
;
ﬁ
ﬁ
7 8
m_stream
ﬂ
ﬂ
 
=
ﬂ
ﬂ
 
new
ﬂ
ﬂ
 
LockingStream
ﬂ
ﬂ
  
(
ﬂ
ﬂ
  !
LockingModel
ﬂ
ﬂ
! -
)
ﬂ
ﬂ
- .
;
ﬂ
ﬂ
. /
if
·
·
 
(
·
·
 
m_stream
·
·
 
!=
·
·
 
null
·
·
 
)
·
·
 
{
‚
‚
 
m_stream
„
„
 
.
„
„
 
AcquireLock
„
„
 
(
„
„
 
)
„
„
 
;
„
„
 
try
‰
‰
 
{
Â
Â
 
SetQWForFiles
Ê
Ê
 
(
Ê
Ê
 
m_stream
Ê
Ê
 
)
Ê
Ê
 
;
Ê
Ê
 
}
Á
Á
 
finally
Ë
Ë
 
{
È
È
 
m_stream
Í
Í
 
.
Í
Í
 
ReleaseLock
Í
Í
 
(
Í
Í
 
)
Í
Í
 
;
Í
Í
 
}
Î
Î
 
}
Ï
Ï
 
WriteHeader
Ó
Ó
 
(
Ó
Ó
 
)
Ó
Ó
 
;
Ó
Ó
 
}
Ô
Ô
 
}


 
virtual
ÇÇ 	
	protected
ÇÇ
 
void
ÇÇ 
SetQWForFiles
ÇÇ &
(
ÇÇ& '
Stream
ÇÇ' -

fileStream
ÇÇ. 8
)
ÇÇ8 9
{
ÉÉ 
SetQWForFiles
ÑÑ 
(
ÑÑ 
new
ÑÑ 
StreamWriter
ÑÑ !
(
ÑÑ! "

fileStream
ÑÑ" ,
,
ÑÑ, -

m_encoding
ÑÑ. 8
)
ÑÑ8 9
)
ÑÑ9 :
;
ÑÑ: ;
}
ÖÖ 
virtual
ëë 	
	protected
ëë
 
void
ëë 
SetQWForFiles
ëë &
(
ëë& '

TextWriter
ëë' 1
writer
ëë2 8
)
ëë8 9
{
íí 
QuietWriter
ìì 
=
ìì 
new
ìì 
QuietTextWriter
ìì $
(
ìì$ %
writer
ìì% +
,
ìì+ ,
ErrorHandler
ìì- 9
)
ìì9 :
;
ìì: ;
}
îî 
	protected
ßß 
static
ßß 
string
ßß 
ConvertToFullPath
ßß +
(
ßß+ ,
string
ßß, 2
path
ßß3 7
)
ßß7 8
{
®® 
return
©© 	

SystemInfo
©©
 
.
©© 
ConvertToFullPath
©© &
(
©©& '
path
©©' +
)
©©+ ,
;
©©, -
}
™™ 
private
¥¥ 	
bool
¥¥
 
m_appendToFile
¥¥ 
=
¥¥ 
true
¥¥  $
;
¥¥$ %
private
ππ 	
string
ππ
 

m_fileName
ππ 
=
ππ 
null
ππ "
;
ππ" #
private
ææ 	
Encoding
ææ
 

m_encoding
ææ 
=
ææ 
Encoding
ææ  (
.
ææ( )
GetEncoding
ææ) 4
(
ææ4 5
$num
ææ5 6
)
ææ6 7
;
ææ7 8
private
√√ 	
SecurityContext
√√
 
m_securityContext
√√ +
;
√√+ ,
private
»» 	
FileAppender
»»
 
.
»» 
LockingStream
»» $
m_stream
»»% -
=
»». /
null
»»0 4
;
»»4 5
private
ÕÕ 	
FileAppender
ÕÕ
 
.
ÕÕ 
LockingModelBase
ÕÕ '
m_lockingModel
ÕÕ( 6
=
ÕÕ7 8
new
ÕÕ9 <
FileAppender
ÕÕ= I
.
ÕÕI J
ExclusiveLock
ÕÕJ W
(
ÕÕW X
)
ÕÕX Y
;
ÕÕY Z
private
⁄⁄ 	
readonly
⁄⁄
 
static
⁄⁄ 
Type
⁄⁄ 
declaringType
⁄⁄ ,
=
⁄⁄- .
typeof
⁄⁄/ 5
(
⁄⁄5 6
FileAppender
⁄⁄6 B
)
⁄⁄B C
;
⁄⁄C D
}
›› 
}ﬁﬁ ﬁ7
FC:\sonarqube\projects\log4net-2.0.7\src\Appender\ForwardingAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public'' 
class'' 
ForwardingAppender''  
:''! "
AppenderSkeleton''# 3
,''3 4
IAppenderAttachable''5 H
{(( 
public33 
ForwardingAppender33	 
(33 
)33 
{44 
}55 
overrideGG 

	protectedGG 
voidGG 
OnCloseGG !
(GG! "
)GG" #
{HH 
lockJJ 
(JJ 
thisJJ 
)JJ 
{KK 
ifLL 
(LL "
m_appenderAttachedImplLL 
!=LL !
nullLL" &
)LL& '
{MM "
m_appenderAttachedImplNN 
.NN 
RemoveAllAppendersNN .
(NN. /
)NN/ 0
;NN0 1
}OO 
}PP 
}QQ 
override\\ 

	protected\\ 
void\\ 
Append\\  
(\\  !
LoggingEvent\\! -
loggingEvent\\. :
)\\: ;
{]] 
if__ 
(__ "
m_appenderAttachedImpl__ 
!=__  
null__! %
)__% &
{`` "
m_appenderAttachedImplaa 
.aa !
AppendLoopOnAppendersaa 0
(aa0 1
loggingEventaa1 =
)aa= >
;aa> ?
}bb 
}cc 
overridenn 

	protectednn 
voidnn 
Appendnn  
(nn  !
LoggingEventnn! -
[nn- .
]nn. /
loggingEventsnn0 =
)nn= >
{oo 
ifqq 
(qq "
m_appenderAttachedImplqq 
!=qq  
nullqq! %
)qq% &
{rr "
m_appenderAttachedImplss 
.ss !
AppendLoopOnAppendersss 0
(ss0 1
loggingEventsss1 >
)ss> ?
;ss? @
}tt 
}uu 
virtual
ÜÜ 	
public
ÜÜ
 
void
ÜÜ 
AddAppender
ÜÜ !
(
ÜÜ! "
	IAppender
ÜÜ" +
newAppender
ÜÜ, 7
)
ÜÜ7 8
{
áá 
if
àà 
(
àà 
newAppender
àà 
==
àà 
null
àà 
)
àà 
{
ââ 
throw
ää 	
new
ää
 #
ArgumentNullException
ää #
(
ää# $
$str
ää$ 1
)
ää1 2
;
ää2 3
}
ãã 
lock
åå 
(
åå 
this
åå 
)
åå 
{
çç 
if
éé 
(
éé $
m_appenderAttachedImpl
éé 
==
éé !
null
éé" &
)
éé& '
{
èè $
m_appenderAttachedImpl
êê 
=
êê 
new
êê !
log4net
êê" )
.
êê) *
Util
êê* .
.
êê. /"
AppenderAttachedImpl
êê/ C
(
êêC D
)
êêD E
;
êêE F
}
ëë $
m_appenderAttachedImpl
íí 
.
íí 
AddAppender
íí &
(
íí& '
newAppender
íí' 2
)
íí2 3
;
íí3 4
}
ìì 
}
îî 
virtual
°° 	
public
°°
  
AppenderCollection
°° #
	Appenders
°°$ -
{
¢¢ 
get
££ 
{
§§ 
lock
•• 
(
•• 	
this
••	 
)
•• 
{
¶¶ 
if
ßß 
(
ßß 	$
m_appenderAttachedImpl
ßß	 
==
ßß  "
null
ßß# '
)
ßß' (
{
®® 
return
©©  
AppenderCollection
©© 
.
©©  
EmptyCollection
©©  /
;
©©/ 0
}
™™ 
else
´´ 	
{
¨¨ 
return
≠≠ $
m_appenderAttachedImpl
≠≠ #
.
≠≠# $
	Appenders
≠≠$ -
;
≠≠- .
}
ÆÆ 
}
ØØ 
}
∞∞ 
}
±± 
virtual
øø 	
public
øø
 
	IAppender
øø 
GetAppender
øø &
(
øø& '
string
øø' -
name
øø. 2
)
øø2 3
{
¿¿ 
lock
¡¡ 
(
¡¡ 
this
¡¡ 
)
¡¡ 
{
¬¬ 
if
√√ 
(
√√ $
m_appenderAttachedImpl
√√ 
==
√√ !
null
√√" &
||
√√' )
name
√√* .
==
√√/ 1
null
√√2 6
)
√√6 7
{
ƒƒ 
return
≈≈ 
null
≈≈ 
;
≈≈ 
}
∆∆ 
return
»» 
$
m_appenderAttachedImpl
»» !
.
»»! "
GetAppender
»»" -
(
»»- .
name
»». 2
)
»»2 3
;
»»3 4
}
…… 
}
   
virtual
‘‘ 	
public
‘‘
 
void
‘‘  
RemoveAllAppenders
‘‘ (
(
‘‘( )
)
‘‘) *
{
’’ 
lock
÷÷ 
(
÷÷ 
this
÷÷ 
)
÷÷ 
{
◊◊ 
if
ÿÿ 
(
ÿÿ $
m_appenderAttachedImpl
ÿÿ 
!=
ÿÿ !
null
ÿÿ" &
)
ÿÿ& '
{
ŸŸ $
m_appenderAttachedImpl
⁄⁄ 
.
⁄⁄  
RemoveAllAppenders
⁄⁄ .
(
⁄⁄. /
)
⁄⁄/ 0
;
⁄⁄0 1$
m_appenderAttachedImpl
€€ 
=
€€ 
null
€€ "
;
€€" #
}
‹‹ 
}
›› 
}
ﬁﬁ 
virtual
ÍÍ 	
public
ÍÍ
 
	IAppender
ÍÍ 
RemoveAppender
ÍÍ )
(
ÍÍ) *
	IAppender
ÍÍ* 3
appender
ÍÍ4 <
)
ÍÍ< =
{
ÎÎ 
lock
ÏÏ 
(
ÏÏ 
this
ÏÏ 
)
ÏÏ 
{
ÌÌ 
if
ÓÓ 
(
ÓÓ 
appender
ÓÓ 
!=
ÓÓ 
null
ÓÓ 
&&
ÓÓ $
m_appenderAttachedImpl
ÓÓ 2
!=
ÓÓ3 5
null
ÓÓ6 :
)
ÓÓ: ;
{
ÔÔ 
return
 $
m_appenderAttachedImpl
 "
.
" #
RemoveAppender
# 1
(
1 2
appender
2 :
)
: ;
;
; <
}
ÒÒ 
}
ÚÚ 
return
ÛÛ 	
null
ÛÛ
 
;
ÛÛ 
}
ÙÙ 
virtual
ÄÄ 	
public
ÄÄ
 
	IAppender
ÄÄ 
RemoveAppender
ÄÄ )
(
ÄÄ) *
string
ÄÄ* 0
name
ÄÄ1 5
)
ÄÄ5 6
{
ÅÅ 
lock
ÇÇ 
(
ÇÇ 
this
ÇÇ 
)
ÇÇ 
{
ÉÉ 
if
ÑÑ 
(
ÑÑ 
name
ÑÑ 
!=
ÑÑ 
null
ÑÑ 
&&
ÑÑ $
m_appenderAttachedImpl
ÑÑ .
!=
ÑÑ/ 1
null
ÑÑ2 6
)
ÑÑ6 7
{
ÖÖ 
return
ÜÜ $
m_appenderAttachedImpl
ÜÜ "
.
ÜÜ" #
RemoveAppender
ÜÜ# 1
(
ÜÜ1 2
name
ÜÜ2 6
)
ÜÜ6 7
;
ÜÜ7 8
}
áá 
}
àà 
return
ââ 	
null
ââ
 
;
ââ 
}
ää 
private
ìì 	"
AppenderAttachedImpl
ìì
 $
m_appenderAttachedImpl
ìì 5
;
ìì5 6
}
ññ 
}óó Á
=C:\sonarqube\projects\log4net-2.0.7\src\Appender\IAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public** 
	interface** 
	IAppender** 
{++ 
void88 
Close88 
(88 
)88 
;88 
voidCC 
DoAppendCC 
(CC 
LoggingEventCC 
loggingEventCC )
)CC) *
;CC* +
stringLL 
NameLL	 
{LL 
getLL 
;LL 
setLL 
;LL 
}LL 
}MM 
}NN ﬁ
AC:\sonarqube\projects\log4net-2.0.7\src\Appender\IBulkAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public## 
	interface## 
IBulkAppender## 
:##  !
	IAppender##" +
{$$ 
void.. 
DoAppend.. 
(.. 
LoggingEvent.. 
[.. 
].. 
loggingEvents.. ,
).., -
;..- .
}// 
}00 é
>C:\sonarqube\projects\log4net-2.0.7\src\Appender\IFlushable.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public 

	interface 

IFlushable 
{ 
bool99 
Flush99 
(99 
int99 
millisecondsTimeout99 *
)99* +
;99+ ,
}:: 
};; ”n
GC:\sonarqube\projects\log4net-2.0.7\src\Appender\LocalSyslogAppender.cs
	namespace   	
log4net  
 
.   
Appender   
{!! 
publicCC 
classCC 
LocalSyslogAppenderCC !
:CC" #
AppenderSkeletonCC$ 4
{DD 
publicQQ 
enumQQ	 
SyslogSeverityQQ 
{RR 
	EmergencyVV 
=VV 
$numVV 
,VV 
Alert[[ 
=[[	 

$num[[ 
,[[ 
Critical`` 
=`` 
$num`` 
,`` 
Erroree 
=ee	 

$numee 
,ee 
Warningjj 

=jj 
$numjj 
,jj 
Noticeoo 	
=oo
 
$numoo 
,oo 
Informationaltt 
=tt 
$numtt 
,tt 
Debugyy 
=yy	 

$numyy 
}zz 
;zz 
public
ÖÖ 
enum
ÖÖ	 
SyslogFacility
ÖÖ 
{
ÜÜ 
Kernel
ää 	
=
ää
 
$num
ää 
,
ää 
User
èè 
=
èè 	
$num
èè
 
,
èè 
Mail
îî 
=
îî 	
$num
îî
 
,
îî 
Daemons
ôô 

=
ôô 
$num
ôô 
,
ôô 
Authorization
ûû 
=
ûû 
$num
ûû 
,
ûû 
Syslog
££ 	
=
££
 
$num
££ 
,
££ 
Printer
®® 

=
®® 
$num
®® 
,
®® 
News
≠≠ 
=
≠≠ 	
$num
≠≠
 
,
≠≠ 
Uucp
≤≤ 
=
≤≤ 	
$num
≤≤
 
,
≤≤ 
Clock
∑∑ 
=
∑∑	 

$num
∑∑ 
,
∑∑ 
Authorization2
ºº 
=
ºº 
$num
ºº 
,
ºº 
Ftp
¡¡ 
=
¡¡ 
$num
¡¡	 
,
¡¡ 
Ntp
∆∆ 
=
∆∆ 
$num
∆∆	 
,
∆∆ 
Audit
ÀÀ 
=
ÀÀ	 

$num
ÀÀ 
,
ÀÀ 
Alert
–– 
=
––	 

$num
–– 
,
–– 
Clock2
’’ 	
=
’’
 
$num
’’ 
,
’’ 
Local0
⁄⁄ 	
=
⁄⁄
 
$num
⁄⁄ 
,
⁄⁄ 
Local1
ﬂﬂ 	
=
ﬂﬂ
 
$num
ﬂﬂ 
,
ﬂﬂ 
Local2
‰‰ 	
=
‰‰
 
$num
‰‰ 
,
‰‰ 
Local3
ÈÈ 	
=
ÈÈ
 
$num
ÈÈ 
,
ÈÈ 
Local4
ÓÓ 	
=
ÓÓ
 
$num
ÓÓ 
,
ÓÓ 
Local5
ÛÛ 	
=
ÛÛ
 
$num
ÛÛ 
,
ÛÛ 
Local6
¯¯ 	
=
¯¯
 
$num
¯¯ 
,
¯¯ 
Local7
˝˝ 	
=
˝˝
 
$num
˝˝ 
}
˛˛ 
public
ãã !
LocalSyslogAppender
ãã	 
(
ãã 
)
ãã 
{
åå 
}
çç 
public
ûû 
string
ûû	 
Identity
ûû 
{
üü 
get
†† 
{
†† 
return
††	 

m_identity
†† 
;
†† 
}
†† 
set
°° 
{
°° 

m_identity
°°	 
=
°° 
value
°° 
;
°° 
}
°° 
}
¢¢ 
public
¨¨ 
SyslogFacility
¨¨	 
Facility
¨¨  
{
≠≠ 
get
ÆÆ 
{
ÆÆ 
return
ÆÆ	 

m_facility
ÆÆ 
;
ÆÆ 
}
ÆÆ 
set
ØØ 
{
ØØ 

m_facility
ØØ	 
=
ØØ 
value
ØØ 
;
ØØ 
}
ØØ 
}
∞∞ 
public
ΩΩ 
void
ΩΩ	 

AddMapping
ΩΩ 
(
ΩΩ 
LevelSeverity
ΩΩ &
mapping
ΩΩ' .
)
ΩΩ. /
{
ææ 
m_levelMapping
øø 
.
øø 
Add
øø 
(
øø 
mapping
øø 
)
øø 
;
øø 
}
¿¿ 
[
’’ 	
System
’’	 
.
’’ 
Security
’’ 
.
’’ "
SecuritySafeCritical
’’ -
]
’’- .
public
◊◊ 
override
◊◊ 
void
◊◊ 
ActivateOptions
◊◊ ,
(
◊◊, -
)
◊◊- .
{
ÿÿ 
base
ŸŸ 
.
ŸŸ 
ActivateOptions
ŸŸ 
(
ŸŸ 
)
ŸŸ 
;
ŸŸ 
m_levelMapping
€€ 
.
€€ 
ActivateOptions
€€ !
(
€€! "
)
€€" #
;
€€# $
string
›› 	
identString
››
 
=
›› 

m_identity
›› "
;
››" #
if
ﬁﬁ 
(
ﬁﬁ 
identString
ﬁﬁ 
==
ﬁﬁ 
null
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
identString
·· 
=
·· 

SystemInfo
·· 
.
·· %
ApplicationFriendlyName
·· 4
;
··4 5
}
‚‚  
m_handleToIdentity
ÁÁ 
=
ÁÁ 
Marshal
ÁÁ 
.
ÁÁ  !
StringToHGlobalAnsi
ÁÁ  3
(
ÁÁ3 4
identString
ÁÁ4 ?
)
ÁÁ? @
;
ÁÁ@ A
openlog
ÍÍ 

(
ÍÍ
  
m_handleToIdentity
ÍÍ 
,
ÍÍ 
$num
ÍÍ  
,
ÍÍ  !

m_facility
ÍÍ" ,
)
ÍÍ, -
;
ÍÍ- .
}
ÎÎ 
[
˛˛ 	
System
˛˛	 
.
˛˛ 
Security
˛˛ 
.
˛˛ "
SecuritySafeCritical
˛˛ -
]
˛˛- .
[
ÅÅ 	
System
ÅÅ	 
.
ÅÅ 
Security
ÅÅ 
.
ÅÅ 
Permissions
ÅÅ $
.
ÅÅ$ % 
SecurityPermission
ÅÅ% 7
(
ÅÅ7 8
System
ÅÅ8 >
.
ÅÅ> ?
Security
ÅÅ? G
.
ÅÅG H
Permissions
ÅÅH S
.
ÅÅS T
SecurityAction
ÅÅT b
.
ÅÅb c
Demand
ÅÅc i
,
ÅÅi j
UnmanagedCode
ÅÅk x
=
ÅÅy z
true
ÅÅ{ 
)ÅÅ Ä
]ÅÅÄ Å
	protected
ÉÉ 
override
ÉÉ 
void
ÉÉ 
Append
ÉÉ  &
(
ÉÉ& '
LoggingEvent
ÉÉ' 3
loggingEvent
ÉÉ4 @
)
ÉÉ@ A
{
ÑÑ 
int
ÖÖ 
priority
ÖÖ 
=
ÖÖ 
GeneratePriority
ÖÖ "
(
ÖÖ" #

m_facility
ÖÖ# -
,
ÖÖ- .
GetSeverity
ÖÖ/ :
(
ÖÖ: ;
loggingEvent
ÖÖ; G
.
ÖÖG H
Level
ÖÖH M
)
ÖÖM N
)
ÖÖN O
;
ÖÖO P
string
ÜÜ 	
message
ÜÜ
 
=
ÜÜ  
RenderLoggingEvent
ÜÜ &
(
ÜÜ& '
loggingEvent
ÜÜ' 3
)
ÜÜ3 4
;
ÜÜ4 5
syslog
ää 	
(
ää	 

priority
ää
 
,
ää 
$str
ää 
,
ää 
message
ää !
)
ää! "
;
ää" #
}
ãã 
[
ññ 	
System
ññ	 
.
ññ 
Security
ññ 
.
ññ "
SecuritySafeCritical
ññ -
]
ññ- .
	protected
òò 
override
òò 
void
òò 
OnClose
òò  '
(
òò' (
)
òò( )
{
ôô 
base
öö 
.
öö 
OnClose
öö 
(
öö 
)
öö 
;
öö 
try
úú 
{
ùù 
closelog
üü 
(
üü 
)
üü 
;
üü 
}
†† 
catch
°° 
(
°° 	"
DllNotFoundException
°°	 
)
°° 
{
¢¢ 
}
§§ 
if
¶¶ 
(
¶¶  
m_handleToIdentity
¶¶ 
!=
¶¶ 
IntPtr
¶¶ #
.
¶¶# $
Zero
¶¶$ (
)
¶¶( )
{
ßß 
Marshal
©© 
.
©© 
FreeHGlobal
©© 
(
©©  
m_handleToIdentity
©© *
)
©©* +
;
©©+ ,
}
™™ 
}
´´ 
override
∂∂ 

	protected
∂∂ 
bool
∂∂ 
RequiresLayout
∂∂ (
{
∑∑ 
get
∏∏ 
{
∏∏ 
return
∏∏	 
true
∏∏ 
;
∏∏ 
}
∏∏ 
}
ππ 
virtual
…… 	
	protected
……
 
SyslogSeverity
…… "
GetSeverity
……# .
(
……. /
Level
……/ 4
level
……5 :
)
……: ;
{
   
LevelSeverity
ÀÀ 
levelSeverity
ÀÀ 
=
ÀÀ  
m_levelMapping
ÀÀ! /
.
ÀÀ/ 0
Lookup
ÀÀ0 6
(
ÀÀ6 7
level
ÀÀ7 <
)
ÀÀ< =
as
ÀÀ> @
LevelSeverity
ÀÀA N
;
ÀÀN O
if
ÃÃ 
(
ÃÃ 
levelSeverity
ÃÃ 
!=
ÃÃ 
null
ÃÃ 
)
ÃÃ 
{
ÕÕ 
return
ŒŒ 

levelSeverity
ŒŒ 
.
ŒŒ 
Severity
ŒŒ !
;
ŒŒ! "
}
œœ 
if
’’ 
(
’’ 
level
’’ 
>=
’’ 
Level
’’ 
.
’’ 
Alert
’’ 
)
’’ 
{
÷÷ 
return
◊◊ 

SyslogSeverity
◊◊ 
.
◊◊ 
Alert
◊◊ 
;
◊◊  
}
ÿÿ 
else
ŸŸ 
if
ŸŸ 

(
ŸŸ 
level
ŸŸ 
>=
ŸŸ 
Level
ŸŸ 
.
ŸŸ 
Critical
ŸŸ #
)
ŸŸ# $
{
⁄⁄ 
return
€€ 

SyslogSeverity
€€ 
.
€€ 
Critical
€€ "
;
€€" #
}
‹‹ 
else
›› 
if
›› 

(
›› 
level
›› 
>=
›› 
Level
›› 
.
›› 
Error
››  
)
››  !
{
ﬁﬁ 
return
ﬂﬂ 

SyslogSeverity
ﬂﬂ 
.
ﬂﬂ 
Error
ﬂﬂ 
;
ﬂﬂ  
}
‡‡ 
else
·· 
if
·· 

(
·· 
level
·· 
>=
·· 
Level
·· 
.
·· 
Warn
·· 
)
··  
{
‚‚ 
return
„„ 

SyslogSeverity
„„ 
.
„„ 
Warning
„„ !
;
„„! "
}
‰‰ 
else
ÂÂ 
if
ÂÂ 

(
ÂÂ 
level
ÂÂ 
>=
ÂÂ 
Level
ÂÂ 
.
ÂÂ 
Notice
ÂÂ !
)
ÂÂ! "
{
ÊÊ 
return
ÁÁ 

SyslogSeverity
ÁÁ 
.
ÁÁ 
Notice
ÁÁ  
;
ÁÁ  !
}
ËË 
else
ÈÈ 
if
ÈÈ 

(
ÈÈ 
level
ÈÈ 
>=
ÈÈ 
Level
ÈÈ 
.
ÈÈ 
Info
ÈÈ 
)
ÈÈ  
{
ÍÍ 
return
ÎÎ 

SyslogSeverity
ÎÎ 
.
ÎÎ 
Informational
ÎÎ '
;
ÎÎ' (
}
ÏÏ 
return
ÓÓ 	
SyslogSeverity
ÓÓ
 
.
ÓÓ 
Debug
ÓÓ 
;
ÓÓ 
}
ÔÔ 
private
˚˚ 	
static
˚˚
 
int
˚˚ 
GeneratePriority
˚˚ %
(
˚˚% &
SyslogFacility
˚˚& 4
facility
˚˚5 =
,
˚˚= >
SyslogSeverity
˚˚? M
severity
˚˚N V
)
˚˚V W
{
¸¸ 
return
˝˝ 	
(
˝˝
 
(
˝˝ 
int
˝˝ 
)
˝˝ 
facility
˝˝ 
*
˝˝ 
$num
˝˝ 
)
˝˝ 
+
˝˝ 
(
˝˝  !
int
˝˝! $
)
˝˝$ %
severity
˝˝% -
;
˝˝- .
}
˛˛ 
private
áá 	
SyslogFacility
áá
 

m_facility
áá #
=
áá$ %
SyslogFacility
áá& 4
.
áá4 5
User
áá5 9
;
áá9 :
private
åå 	
string
åå
 

m_identity
åå 
;
åå 
private
ìì 	
IntPtr
ìì
  
m_handleToIdentity
ìì #
=
ìì$ %
IntPtr
ìì& ,
.
ìì, -
Zero
ìì- 1
;
ìì1 2
private
òò 	
LevelMapping
òò
 
m_levelMapping
òò %
=
òò& '
new
òò( +
LevelMapping
òò, 8
(
òò8 9
)
òò9 :
;
òò: ;
[
°° 
	DllImport
°° 
(
°° 
$str
°° 
)
°° 
]
°° 
private
¢¢ 	
static
¢¢
 
extern
¢¢ 
void
¢¢ 
openlog
¢¢ $
(
¢¢$ %
IntPtr
¢¢% +
ident
¢¢, 1
,
¢¢1 2
int
¢¢3 6
option
¢¢7 =
,
¢¢= >
SyslogFacility
¢¢? M
facility
¢¢N V
)
¢¢V W
;
¢¢W X
[
∞∞ 
	DllImport
∞∞ 
(
∞∞ 
$str
∞∞ 
,
∞∞ 
CharSet
∞∞ 
=
∞∞ 
CharSet
∞∞ $
.
∞∞$ %
Ansi
∞∞% )
,
∞∞) *
CallingConvention
∞∞+ <
=
∞∞< =
CallingConvention
∞∞= N
.
∞∞N O
Cdecl
∞∞O T
)
∞∞T U
]
∞∞U V
private
±± 	
static
±±
 
extern
±± 
void
±± 
syslog
±± #
(
±±# $
int
±±$ '
priority
±±( 0
,
±±0 1
string
±±2 8
format
±±9 ?
,
±±? @
string
±±A G
message
±±H O
)
±±O P
;
±±P Q
[
∂∂ 
	DllImport
∂∂ 
(
∂∂ 
$str
∂∂ 
)
∂∂ 
]
∂∂ 
private
∑∑ 	
static
∑∑
 
extern
∑∑ 
void
∑∑ 
closelog
∑∑ %
(
∑∑% &
)
∑∑& '
;
∑∑' (
public
«« 
class
««	 
LevelSeverity
«« 
:
«« 
LevelMappingEntry
«« 0
{
»» 
private
…… 

SyslogSeverity
…… 

m_severity
…… $
;
……$ %
public
‘‘ 	
SyslogSeverity
‘‘
 
Severity
‘‘ !
{
’’ 
get
÷÷ 
{
÷÷ 	
return
÷÷
 

m_severity
÷÷ 
;
÷÷ 
}
÷÷ 
set
◊◊ 
{
◊◊ 	

m_severity
◊◊
 
=
◊◊ 
value
◊◊ 
;
◊◊ 
}
◊◊ 
}
ÿÿ 
}
ŸŸ 
}
‹‹ 
}›› ‰;
QC:\sonarqube\projects\log4net-2.0.7\src\Appender\ManagedColoredConsoleAppender.cs
	namespace11 	
log4net11
 
.11 
Appender11 
{22 
publicee 
classee )
ManagedColoredConsoleAppenderee +
:ee+ ,
AppenderSkeletonee- =
{ff 
publicnn )
ManagedColoredConsoleAppendernn	 &
(nn& '
)nn' (
{oo 
}pp 
virtual
ÅÅ 	
public
ÅÅ
 
string
ÅÅ 
Target
ÅÅ 
{
ÇÇ 
get
ÉÉ 
{
ÉÉ 
return
ÉÉ	 "
m_writeToErrorStream
ÉÉ $
?
ÉÉ% &
ConsoleError
ÉÉ' 3
:
ÉÉ4 5

ConsoleOut
ÉÉ6 @
;
ÉÉ@ A
}
ÉÉB C
set
ÑÑ 
{
ÖÖ 
string
ÜÜ 

v
ÜÜ 
=
ÜÜ 
value
ÜÜ 
.
ÜÜ 
Trim
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
if
àà 
(
àà 

SystemInfo
àà 
.
àà  
EqualsIgnoringCase
àà %
(
àà% &
ConsoleError
àà& 2
,
àà2 3
v
àà4 5
)
àà5 6
)
àà6 7
{
ââ "
m_writeToErrorStream
ää 
=
ää 
true
ää  
;
ää  !
}
ãã 
else
åå 
{
çç "
m_writeToErrorStream
éé 
=
éé 
false
éé !
;
éé! "
}
èè 
}
êê 
}
ëë 
public
ûû 
void
ûû	 

AddMapping
ûû 
(
ûû 
LevelColors
ûû $
mapping
ûû% ,
)
ûû, -
{
üü 
m_levelMapping
†† 
.
†† 
Add
†† 
(
†† 
mapping
†† 
)
†† 
;
†† 
}
°° 
override
±± 

	protected
±± 
void
±± 
Append
±±  
(
±±  !
log4net
±±! (
.
±±( )
Core
±±) -
.
±±- .
LoggingEvent
±±. :
loggingEvent
±±; G
)
±±G H
{
≤≤ 
System
≥≥ 	
.
≥≥	 

IO
≥≥
 
.
≥≥ 

TextWriter
≥≥ 
writer
≥≥ 
;
≥≥ 
if
µµ 
(
µµ "
m_writeToErrorStream
µµ 
)
µµ 
writer
∂∂ 

=
∂∂ 
Console
∂∂ 
.
∂∂ 
Error
∂∂ 
;
∂∂ 
else
∑∑ 
writer
∏∏ 

=
∏∏ 
Console
∏∏ 
.
∏∏ 
Out
∏∏ 
;
∏∏ 
Console
ªª 

.
ªª
 

ResetColor
ªª 
(
ªª 
)
ªª 
;
ªª 
LevelColors
ææ 
levelColors
ææ 
=
ææ 
m_levelMapping
ææ +
.
ææ+ ,
Lookup
ææ, 2
(
ææ2 3
loggingEvent
ææ3 ?
.
ææ? @
Level
ææ@ E
)
ææE F
as
ææG I
LevelColors
ææJ U
;
ææU V
if
øø 
(
øø 
levelColors
øø 
!=
øø 
null
øø 
)
øø 
{
¿¿ 
if
¬¬ 
(
¬¬ 
levelColors
¬¬ 
.
¬¬ 
HasBackColor
¬¬  
)
¬¬  !
Console
√√ 
.
√√ 
BackgroundColor
√√ 
=
√√ 
levelColors
√√ *
.
√√* +
	BackColor
√√+ 4
;
√√4 5
if
≈≈ 
(
≈≈ 
levelColors
≈≈ 
.
≈≈ 
HasForeColor
≈≈  
)
≈≈  !
Console
∆∆ 
.
∆∆ 
ForegroundColor
∆∆ 
=
∆∆ 
levelColors
∆∆ *
.
∆∆* +
	ForeColor
∆∆+ 4
;
∆∆4 5
}
«« 
string
   	
strLoggingMessage
  
 
=
    
RenderLoggingEvent
   0
(
  0 1
loggingEvent
  1 =
)
  = >
;
  > ?
writer
ÃÃ 	
.
ÃÃ	 

Write
ÃÃ
 
(
ÃÃ 
strLoggingMessage
ÃÃ !
)
ÃÃ! "
;
ÃÃ" #
Console
œœ 

.
œœ
 

ResetColor
œœ 
(
œœ 
)
œœ 
;
œœ 
}
–– 
override
€€ 

	protected
€€ 
bool
€€ 
RequiresLayout
€€ (
{
‹‹ 
get
›› 
{
›› 
return
››	 
true
›› 
;
›› 
}
›› 
}
ﬁﬁ 
public
ËË 
override
ËË	 
void
ËË 
ActivateOptions
ËË &
(
ËË& '
)
ËË' (
{
ÈÈ 
base
ÍÍ 
.
ÍÍ 
ActivateOptions
ÍÍ 
(
ÍÍ 
)
ÍÍ 
;
ÍÍ 
m_levelMapping
ÎÎ 
.
ÎÎ 
ActivateOptions
ÎÎ !
(
ÎÎ! "
)
ÎÎ" #
;
ÎÎ# $
}
ÏÏ 
public
˙˙ 
const
˙˙	 
string
˙˙ 

ConsoleOut
˙˙  
=
˙˙! "
$str
˙˙# 0
;
˙˙0 1
public
ÜÜ 
const
ÜÜ	 
string
ÜÜ 
ConsoleError
ÜÜ "
=
ÜÜ# $
$str
ÜÜ% 4
;
ÜÜ4 5
private
çç 	
bool
çç
 "
m_writeToErrorStream
çç #
=
çç$ %
false
çç& +
;
çç+ ,
private
íí 	
LevelMapping
íí
 
m_levelMapping
íí %
=
íí& '
new
íí( +
LevelMapping
íí, 8
(
íí8 9
)
íí9 :
;
íí: ;
public
üü 
class
üü	 
LevelColors
üü 
:
üü 
LevelMappingEntry
üü .
{
†† 
public
™™ 	
ConsoleColor
™™
 
	ForeColor
™™  
{
´´ 
get
¨¨ 
{
¨¨ 	
return
¨¨
 
(
¨¨ 
this
¨¨ 
.
¨¨ 
	foreColor
¨¨  
)
¨¨  !
;
¨¨! "
}
¨¨# $
set
ØØ 
{
ØØ 	
this
ØØ
 
.
ØØ 
	foreColor
ØØ 
=
ØØ 
value
ØØ  
;
ØØ  !
this
ØØ" &
.
ØØ& '
hasForeColor
ØØ' 3
=
ØØ4 5
true
ØØ6 :
;
ØØ: ;
}
ØØ< =
}
∞∞ 
private
±± 

ConsoleColor
±± 
	foreColor
±± !
;
±±! "
private
≤≤ 

bool
≤≤ 
hasForeColor
≤≤ 
;
≤≤ 
internal
≥≥ 
bool
≥≥ 
HasForeColor
≥≥ &
{
≥≥' (
get
¥¥ 
{
¥¥ 
return
µµ 
hasForeColor
µµ '
;
µµ' (
}
∂∂ 
}
∑∑ 
public
¬¬ 	
ConsoleColor
¬¬
 
	BackColor
¬¬  
{
√√ 
get
ƒƒ 
{
ƒƒ 	
return
ƒƒ
 
(
ƒƒ 
this
ƒƒ 
.
ƒƒ 
	backColor
ƒƒ  
)
ƒƒ  !
;
ƒƒ! "
}
ƒƒ# $
set
«« 
{
«« 	
this
««
 
.
«« 
	backColor
«« 
=
«« 
value
««  
;
««  !
this
««" &
.
««& '
hasBackColor
««' 3
=
««4 5
true
««6 :
;
««: ;
}
««< =
}
»» 
private
…… 

ConsoleColor
…… 
	backColor
…… !
;
……! "
private
   
bool
   
hasBackColor
   %
;
  % &
internal
ÀÀ 
bool
ÀÀ 
HasBackColor
ÀÀ &
{
ÀÀ' (
get
ÃÃ 
{
ÃÃ 
return
ÕÕ 
hasBackColor
ÕÕ '
;
ÕÕ' (
}
ŒŒ 
}
œœ 
}
–– 
}
““ 
}”” Ó$
BC:\sonarqube\projects\log4net-2.0.7\src\Appender\MemoryAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public99 
class99 
MemoryAppender99 
:99 
AppenderSkeleton99 /
{:: 
publicEE 
MemoryAppenderEE	 
(EE 
)EE 
:EE 
baseEE  
(EE  !
)EE! "
{FF 
m_eventsListGG 
=GG 
newGG 
	ArrayListGG 
(GG  
)GG  !
;GG! "
}HH 
virtualWW 	
publicWW
 
LoggingEventWW 
[WW 
]WW 
	GetEventsWW  )
(WW) *
)WW* +
{XX 
lockYY 
(YY 
m_eventsListYY 
.YY 
SyncRootYY '
)YY' (
{ZZ 
return[[ 
([[ 
LoggingEvent[[ $
[[[$ %
][[% &
)[[& '
m_eventsList[[( 4
.[[4 5
ToArray[[5 <
([[< =
typeof[[= C
([[C D
LoggingEvent[[D P
)[[P Q
)[[Q R
;[[R S
}\\ 
}]] 
[pp 
Obsoletepp 
(pp 
$strpp 
)pp 
]pp  
virtualqq 	
publicqq
 
boolqq #
OnlyFixPartialEventDataqq -
{rr 
getss 
{ss 
returnss	 
(ss 
Fixss 
==ss 
FixFlagsss  
.ss  !
Partialss! (
)ss( )
;ss) *
}ss+ ,
settt 
{uu 
ifvv 
(vv 
valuevv 
)vv 
{ww 
Fixxx 
=xx	 

FixFlagsxx 
.xx 
Partialxx 
;xx 
}yy 
elsezz 
{{{ 
Fix|| 
=||	 

FixFlags|| 
.|| 
All|| 
;|| 
}}} 
}~~ 
} 
virtual
ãã 	
public
ãã
 
FixFlags
ãã 
Fix
ãã 
{
åå 
get
çç 
{
çç 
return
çç	 

m_fixFlags
çç 
;
çç 
}
çç 
set
éé 
{
éé 

m_fixFlags
éé	 
=
éé 
value
éé 
;
éé 
}
éé 
}
èè 
override
úú 

	protected
úú 
void
úú 
Append
úú  
(
úú  !
LoggingEvent
úú! -
loggingEvent
úú. :
)
úú: ;
{
ùù 
loggingEvent
°° 
.
°° 
Fix
°° 
=
°° 
this
°° 
.
°° 
Fix
°° 
;
°° 
lock
££ 
(
££ 
m_eventsList
££ 
.
££ 
SyncRoot
££ '
)
££' (
{
§§ 
m_eventsList
•• 
.
•• 
Add
••  
(
••  !
loggingEvent
••! -
)
••- .
;
••. /
}
¶¶ 
}
ßß 
virtual
≥≥ 	
public
≥≥
 
void
≥≥ 
Clear
≥≥ 
(
≥≥ 
)
≥≥ 
{
¥¥ 
lock
µµ 
(
µµ 
m_eventsList
µµ 
.
µµ 
SyncRoot
µµ '
)
µµ' (
{
∂∂ 
m_eventsList
∑∑ 
.
∑∑ 
Clear
∑∑ "
(
∑∑" #
)
∑∑# $
;
∑∑$ %
}
∏∏ 
}
ππ 
virtual
ƒƒ 
public
ƒƒ 
LoggingEvent
ƒƒ #
[
ƒƒ# $
]
ƒƒ$ %
PopAllEvents
ƒƒ& 2
(
ƒƒ2 3
)
ƒƒ3 4
{
≈≈ 	
lock
∆∆ 
(
∆∆ 
m_eventsList
∆∆ 
.
∆∆ 
SyncRoot
∆∆ '
)
∆∆' (
{
«« 
LoggingEvent
»» 
[
»» 
]
»» 
tmp
»» "
=
»»# $
(
»»% &
LoggingEvent
»»& 2
[
»»2 3
]
»»3 4
)
»»4 5
m_eventsList
»»6 B
.
»»B C
ToArray
»»C J
(
»»J K
typeof
»»K Q
(
»»R S
LoggingEvent
»»S _
)
»»_ `
)
»»` a
;
»»a b
m_eventsList
…… 
.
…… 
Clear
…… "
(
……" #
)
……# $
;
……$ %
return
   
tmp
   
;
   
}
ÀÀ 
}
ÃÃ 	
	protected
’’ 
	ArrayList
’’ 
m_eventsList
’’ "
;
’’" #
	protected
›› 
FixFlags
›› 

m_fixFlags
›› 
=
››  !
FixFlags
››" *
.
››* +
All
››+ .
;
››. /
}
‡‡ 
}·· º>
CC:\sonarqube\projects\log4net-2.0.7\src\Appender\NetSendAppender.cs
	namespace(( 	
log4net((
 
.(( 
Appender(( 
{)) 
public
èè 
class
èè 
NetSendAppender
èè 
:
èè 
AppenderSkeleton
èè  0
{
êê 
private
ññ 	
string
ññ
 
m_server
ññ 
;
ññ 
private
õõ 	
string
õõ
 
m_sender
õõ 
;
õõ 
private
†† 	
string
††
 
m_recipient
†† 
;
†† 
private
•• 	
SecurityContext
••
 
m_securityContext
•• +
;
••+ ,
public
±± 
NetSendAppender
±±	 
(
±± 
)
±± 
{
≤≤ 
}
≥≥ 
public
¬¬ 
string
¬¬	 
Sender
¬¬ 
{
√√ 
get
ƒƒ 
{
ƒƒ 
return
ƒƒ	 
m_sender
ƒƒ 
;
ƒƒ 
}
ƒƒ 
set
≈≈ 
{
≈≈ 
m_sender
≈≈	 
=
≈≈ 
value
≈≈ 
;
≈≈ 
}
≈≈ 
}
∆∆ 
public
—— 
string
——	 
	Recipient
—— 
{
““ 
get
”” 
{
”” 
return
””	 
m_recipient
”” 
;
”” 
}
”” 
set
‘‘ 
{
‘‘ 
m_recipient
‘‘	 
=
‘‘ 
value
‘‘ 
;
‘‘ 
}
‘‘ 
}
’’ 
public
ÂÂ 
string
ÂÂ	 
Server
ÂÂ 
{
ÊÊ 
get
ÁÁ 
{
ÁÁ 
return
ÁÁ	 
m_server
ÁÁ 
;
ÁÁ 
}
ÁÁ 
set
ËË 
{
ËË 
m_server
ËË	 
=
ËË 
value
ËË 
;
ËË 
}
ËË 
}
ÈÈ 
public
˘˘ 
SecurityContext
˘˘	 
SecurityContext
˘˘ (
{
˙˙ 
get
˚˚ 
{
˚˚ 
return
˚˚	 
m_securityContext
˚˚ !
;
˚˚! "
}
˚˚# $
set
¸¸ 
{
¸¸ 
m_securityContext
¸¸	 
=
¸¸ 
value
¸¸ "
;
¸¸" #
}
¸¸$ %
}
˝˝ 
public
óó 
override
óó	 
void
óó 
ActivateOptions
óó &
(
óó& '
)
óó' (
{
òò 
base
ôô 
.
ôô 
ActivateOptions
ôô 
(
ôô 
)
ôô 
;
ôô 
if
õõ 
(
õõ 
this
õõ 
.
õõ 
	Recipient
õõ 
==
õõ 
null
õõ 
)
õõ 
{
úú 
throw
ùù 	
new
ùù
 #
ArgumentNullException
ùù #
(
ùù# $
$str
ùù$ /
,
ùù/ 0
$str
ùù1 g
)
ùùg h
;
ùùh i
}
ûû 
if
†† 
(
†† 
m_securityContext
†† 
==
†† 
null
††  
)
††  !
{
°° 
m_securityContext
¢¢ 
=
¢¢ %
SecurityContextProvider
¢¢ /
.
¢¢/ 0
DefaultProvider
¢¢0 ?
.
¢¢? @#
CreateSecurityContext
¢¢@ U
(
¢¢U V
this
¢¢V Z
)
¢¢Z [
;
¢¢[ \
}
££ 
}
§§ 
[
¥¥ 	
System
¥¥	 
.
¥¥ 
Security
¥¥ 
.
¥¥ "
SecuritySafeCritical
¥¥ -
]
¥¥- .
[
∑∑ 	
System
∑∑	 
.
∑∑ 
Security
∑∑ 
.
∑∑ 
Permissions
∑∑ $
.
∑∑$ % 
SecurityPermission
∑∑% 7
(
∑∑7 8
System
∑∑8 >
.
∑∑> ?
Security
∑∑? G
.
∑∑G H
Permissions
∑∑H S
.
∑∑S T
SecurityAction
∑∑T b
.
∑∑b c
Demand
∑∑c i
,
∑∑i j
UnmanagedCode
∑∑k x
=
∑∑y z
true
∑∑{ 
)∑∑ Ä
]∑∑Ä Å
	protected
ππ 
override
ππ 
void
ππ 
Append
ππ  &
(
ππ& '
LoggingEvent
ππ' 3
loggingEvent
ππ4 @
)
ππ@ A
{
∫∫ 
NativeError
ªª 
nativeError
ªª 
=
ªª 
null
ªª !
;
ªª! "
string
ææ 	"
renderedLoggingEvent
ææ
 
=
ææ   
RenderLoggingEvent
ææ! 3
(
ææ3 4
loggingEvent
ææ4 @
)
ææ@ A
;
ææA B
using
¿¿ 
(
¿¿ 	
m_securityContext
¿¿	 
.
¿¿ 
Impersonate
¿¿ &
(
¿¿& '
this
¿¿' +
)
¿¿+ ,
)
¿¿, -
{
¡¡ 
int
√√ 
returnValue
√√ 
=
√√ "
NetMessageBufferSend
√√ *
(
√√* +
this
√√+ /
.
√√/ 0
Server
√√0 6
,
√√6 7
this
√√8 <
.
√√< =
	Recipient
√√= F
,
√√F G
this
√√H L
.
√√L M
Sender
√√M S
,
√√S T"
renderedLoggingEvent
√√U i
,
√√i j"
renderedLoggingEvent
√√k 
.√√ Ä
Length√√Ä Ü
*√√á à
Marshal√√â ê
.√√ê ë%
SystemDefaultCharSize√√ë ¶
)√√¶ ß
;√√ß ®
if
∆∆ 
(
∆∆ 
returnValue
∆∆ 
!=
∆∆ 
$num
∆∆ 
)
∆∆ 
{
«« 
nativeError
…… 
=
…… 
NativeError
…… 
.
…… 
GetError
…… '
(
……' (
returnValue
……( 3
)
……3 4
;
……4 5
}
   
}
ÀÀ 
if
ÕÕ 
(
ÕÕ 
nativeError
ÕÕ 
!=
ÕÕ 
null
ÕÕ 
)
ÕÕ 
{
ŒŒ 
ErrorHandler
–– 
.
–– 
Error
–– 
(
–– 
nativeError
–– "
.
––" #
ToString
––# +
(
––+ ,
)
––, -
+
––. /
$str
––0 C
+
––D E
this
––F J
.
––J K
Server
––K Q
+
––R S
$str
––T b
+
––c d
this
––e i
.
––i j
	Recipient
––j s
+
––t u
$str––v Å
+––Ç É
this––Ñ à
.––à â
Sender––â è
+––ê ë
$str––í ï
)––ï ñ
;––ñ ó
}
—— 
}
““ 
override
›› 

	protected
›› 
bool
›› 
RequiresLayout
›› (
{
ﬁﬁ 
get
ﬂﬂ 
{
ﬂﬂ 
return
ﬂﬂ	 
true
ﬂﬂ 
;
ﬂﬂ 
}
ﬂﬂ 
}
‡‡ 
[
úú 
	DllImport
úú 
(
úú 
$str
úú 
,
úú 
SetLastError
úú )
=
úú) *
true
úú* .
)
úú. /
]
úú/ 0
	protected
ùù 
static
ùù 
extern
ùù 
int
ùù "
NetMessageBufferSend
ùù 2
(
ùù2 3
[
ûû 
	MarshalAs
ûû 
(
ûû 
UnmanagedType
ûû 
.
ûû 
LPWStr
ûû "
)
ûû" #
]
ûû# $
string
ûû% +

serverName
ûû, 6
,
ûû6 7
[
üü 
	MarshalAs
üü 
(
üü 
UnmanagedType
üü 
.
üü 
LPWStr
üü "
)
üü" #
]
üü# $
string
üü% +
msgName
üü, 3
,
üü3 4
[
†† 
	MarshalAs
†† 
(
†† 
UnmanagedType
†† 
.
†† 
LPWStr
†† "
)
††" #
]
††# $
string
††% +
fromName
††, 4
,
††4 5
[
°° 
	MarshalAs
°° 
(
°° 
UnmanagedType
°° 
.
°° 
LPWStr
°° "
)
°°" #
]
°°# $
string
°°% +
buffer
°°, 2
,
°°2 3
int
¢¢ 

bufferSize
¢¢ 
)
¢¢ 
;
¢¢ 
}
•• 
}¶¶ √
MC:\sonarqube\projects\log4net-2.0.7\src\Appender\OutputDebugStringAppender.cs
	namespace   	
log4net  
 
.   
Appender   
{!! 
public11 
class11 %
OutputDebugStringAppender11 '
:11( )
AppenderSkeleton11* :
{22 
public== %
OutputDebugStringAppender==	 "
(==" #
)==# $
{>> 
}?? 
[OO 	
SystemOO	 
.OO 
SecurityOO 
.OO  
SecuritySafeCriticalOO -
]OO- .
overrideSS 
	protectedSS 
voidSS 
AppendSS  &
(SS& '
LoggingEventSS' 3
loggingEventSS4 @
)SS@ A
{TT 
OutputDebugString\\ 
(\\ 
RenderLoggingEvent\\ '
(\\' (
loggingEvent\\( 4
)\\4 5
)\\5 6
;\\6 7
}]] 
overridehh 

	protectedhh 
boolhh 
RequiresLayouthh (
{ii 
getjj 
{jj 
returnjj	 
truejj 
;jj 
}jj 
}kk 
[}} 
	DllImport}} 
(}} 
$str}} 
)}} 
]}} 
	protected 
static 
extern 
void 
OutputDebugString 0
(0 1
string1 7
message8 ?
)? @
;@ A
}
ÇÇ 
}ÉÉ ΩÖ
HC:\sonarqube\projects\log4net-2.0.7\src\Appender\RemoteSyslogAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
publicFF 
classFF  
RemoteSyslogAppenderFF "
:FF# $
UdpAppenderFF% 0
{GG 
privateKK 	
constKK
 
intKK 
DefaultSyslogPortKK %
=KK& '
$numKK( +
;KK+ ,
publicWW 
enumWW	 
SyslogSeverityWW 
{XX 
	Emergency\\ 
=\\ 
$num\\ 
,\\ 
Alertaa 
=aa	 

$numaa 
,aa 
Criticalff 
=ff 
$numff 
,ff 
Errorkk 
=kk	 

$numkk 
,kk 
Warningpp 

=pp 
$numpp 
,pp 
Noticeuu 	
=uu
 
$numuu 
,uu 
Informationalzz 
=zz 
$numzz 
,zz 
Debug 
=	 

$num 
}
ÄÄ 
;
ÄÄ 
public
ää 
enum
ää	 
SyslogFacility
ää 
{
ãã 
Kernel
èè 	
=
èè
 
$num
èè 
,
èè 
User
îî 
=
îî 	
$num
îî
 
,
îî 
Mail
ôô 
=
ôô 	
$num
ôô
 
,
ôô 
Daemons
ûû 

=
ûû 
$num
ûû 
,
ûû 
Authorization
££ 
=
££ 
$num
££ 
,
££ 
Syslog
®® 	
=
®®
 
$num
®® 
,
®® 
Printer
≠≠ 

=
≠≠ 
$num
≠≠ 
,
≠≠ 
News
≤≤ 
=
≤≤ 	
$num
≤≤
 
,
≤≤ 
Uucp
∑∑ 
=
∑∑ 	
$num
∑∑
 
,
∑∑ 
Clock
ºº 
=
ºº	 

$num
ºº 
,
ºº 
Authorization2
¡¡ 
=
¡¡ 
$num
¡¡ 
,
¡¡ 
Ftp
∆∆ 
=
∆∆ 
$num
∆∆	 
,
∆∆ 
Ntp
ÀÀ 
=
ÀÀ 
$num
ÀÀ	 
,
ÀÀ 
Audit
–– 
=
––	 

$num
–– 
,
–– 
Alert
’’ 
=
’’	 

$num
’’ 
,
’’ 
Clock2
⁄⁄ 	
=
⁄⁄
 
$num
⁄⁄ 
,
⁄⁄ 
Local0
ﬂﬂ 	
=
ﬂﬂ
 
$num
ﬂﬂ 
,
ﬂﬂ 
Local1
‰‰ 	
=
‰‰
 
$num
‰‰ 
,
‰‰ 
Local2
ÈÈ 	
=
ÈÈ
 
$num
ÈÈ 
,
ÈÈ 
Local3
ÓÓ 	
=
ÓÓ
 
$num
ÓÓ 
,
ÓÓ 
Local4
ÛÛ 	
=
ÛÛ
 
$num
ÛÛ 
,
ÛÛ 
Local5
¯¯ 	
=
¯¯
 
$num
¯¯ 
,
¯¯ 
Local6
˝˝ 	
=
˝˝
 
$num
˝˝ 
,
˝˝ 
Local7
ÇÇ 	
=
ÇÇ
 
$num
ÇÇ 
}
ÉÉ 
public
êê "
RemoteSyslogAppender
êê	 
(
êê 
)
êê 
{
ëë 
this
ìì 
.
ìì 

RemotePort
ìì 
=
ìì 
DefaultSyslogPort
ìì &
;
ìì& '
this
îî 
.
îî 
RemoteAddress
îî 
=
îî 
System
îî 
.
îî 
Net
îî "
.
îî" #
	IPAddress
îî# ,
.
îî, -
Parse
îî- 2
(
îî2 3
$str
îî3 >
)
îî> ?
;
îî? @
this
ïï 
.
ïï 
Encoding
ïï 
=
ïï 
System
ïï 
.
ïï 
Text
ïï 
.
ïï 
Encoding
ïï '
.
ïï' (
ASCII
ïï( -
;
ïï- .
}
ññ 
public
ßß 
PatternLayout
ßß	 
Identity
ßß 
{
®® 
get
©© 
{
©© 
return
©©	 

m_identity
©© 
;
©© 
}
©© 
set
™™ 
{
™™ 

m_identity
™™	 
=
™™ 
value
™™ 
;
™™ 
}
™™ 
}
´´ 
public
µµ 
SyslogFacility
µµ	 
Facility
µµ  
{
∂∂ 
get
∑∑ 
{
∑∑ 
return
∑∑	 

m_facility
∑∑ 
;
∑∑ 
}
∑∑ 
set
∏∏ 
{
∏∏ 

m_facility
∏∏	 
=
∏∏ 
value
∏∏ 
;
∏∏ 
}
∏∏ 
}
ππ 
public
∆∆ 
void
∆∆	 

AddMapping
∆∆ 
(
∆∆ 
LevelSeverity
∆∆ &
mapping
∆∆' .
)
∆∆. /
{
«« 
m_levelMapping
»» 
.
»» 
Add
»» 
(
»» 
mapping
»» 
)
»» 
;
»» 
}
…… 
	protected
ŸŸ 
override
ŸŸ 
void
ŸŸ 
Append
ŸŸ  
(
ŸŸ  !
LoggingEvent
ŸŸ! -
loggingEvent
ŸŸ. :
)
ŸŸ: ;
{
⁄⁄ 
try
€€ 
{
‹‹ 
int
ﬁﬁ 
priority
ﬁﬁ 
=
ﬁﬁ 
GeneratePriority
ﬁﬁ /
(
ﬁﬁ/ 0

m_facility
ﬁﬁ0 :
,
ﬁﬁ: ;
GetSeverity
ﬁﬁ< G
(
ﬁﬁG H
loggingEvent
ﬁﬁH T
.
ﬁﬁT U
Level
ﬁﬁU Z
)
ﬁﬁZ [
)
ﬁﬁ[ \
;
ﬁﬁ\ ]
string
·· 
identity
·· 
;
··  
if
„„ 
(
„„ 

m_identity
„„ 
!=
„„ !
null
„„" &
)
„„& '
{
‰‰ 
identity
ÂÂ 
=
ÂÂ 

m_identity
ÂÂ )
.
ÂÂ) *
Format
ÂÂ* 0
(
ÂÂ0 1
loggingEvent
ÂÂ1 =
)
ÂÂ= >
;
ÂÂ> ?
}
ÊÊ 
else
ÁÁ 
{
ËË 
identity
ÈÈ 
=
ÈÈ 
loggingEvent
ÈÈ +
.
ÈÈ+ ,
Domain
ÈÈ, 2
;
ÈÈ2 3
}
ÍÍ 
string
ÌÌ 
message
ÌÌ 
=
ÌÌ   
RenderLoggingEvent
ÌÌ! 3
(
ÌÌ3 4
loggingEvent
ÌÌ4 @
)
ÌÌ@ A
;
ÌÌA B
Byte
ÔÔ 
[
ÔÔ 
]
ÔÔ 
buffer
ÔÔ 
;
ÔÔ 
int
 
i
 
=
 
$num
 
;
 
char
ÒÒ 
c
ÒÒ 
;
ÒÒ 
StringBuilder
ÛÛ 
builder
ÛÛ %
=
ÛÛ& '
new
ÛÛ( +
StringBuilder
ÛÛ, 9
(
ÛÛ9 :
)
ÛÛ: ;
;
ÛÛ; <
while
ıı 
(
ıı 
i
ıı 
<
ıı 
message
ıı "
.
ıı" #
Length
ıı# )
)
ıı) *
{
ˆˆ 
builder
¯¯ 
.
¯¯ 
Length
¯¯ "
=
¯¯# $
$num
¯¯% &
;
¯¯& '
builder
˚˚ 
.
˚˚ 
Append
˚˚ "
(
˚˚" #
$char
˚˚# &
)
˚˚& '
;
˚˚' (
builder
¸¸ 
.
¸¸ 
Append
¸¸ "
(
¸¸" #
priority
¸¸# +
)
¸¸+ ,
;
¸¸, -
builder
˝˝ 
.
˝˝ 
Append
˝˝ "
(
˝˝" #
$char
˝˝# &
)
˝˝& '
;
˝˝' (
builder
ÄÄ 
.
ÄÄ 
Append
ÄÄ "
(
ÄÄ" #
identity
ÄÄ# +
)
ÄÄ+ ,
;
ÄÄ, -
builder
ÅÅ 
.
ÅÅ 
Append
ÅÅ "
(
ÅÅ" #
$str
ÅÅ# '
)
ÅÅ' (
;
ÅÅ( )
for
ÉÉ 
(
ÉÉ 
;
ÉÉ 
i
ÉÉ 
<
ÉÉ 
message
ÉÉ &
.
ÉÉ& '
Length
ÉÉ' -
;
ÉÉ- .
i
ÉÉ/ 0
++
ÉÉ0 2
)
ÉÉ2 3
{
ÑÑ 
c
ÖÖ 
=
ÖÖ 
message
ÖÖ #
[
ÖÖ# $
i
ÖÖ$ %
]
ÖÖ% &
;
ÖÖ& '
if
àà 
(
àà 
(
àà 
(
àà 
int
àà !
)
àà! "
c
àà" #
>=
àà$ &
$num
àà' )
)
àà) *
&&
àà+ -
(
àà. /
(
àà/ 0
int
àà0 3
)
àà3 4
c
àà4 5
<=
àà6 8
$num
àà9 <
)
àà< =
)
àà= >
{
ââ 
builder
ää #
.
ää# $
Append
ää$ *
(
ää* +
c
ää+ ,
)
ää, -
;
ää- .
}
ãã 
else
çç 
if
çç 
(
çç  !
(
çç! "
c
çç" #
==
çç$ &
$char
çç' +
)
çç+ ,
||
çç- /
(
çç0 1
c
çç1 2
==
çç3 5
$char
çç6 :
)
çç: ;
)
çç; <
{
éé 
if
êê 
(
êê  
(
êê  !
message
êê! (
.
êê( )
Length
êê) /
>
êê0 1
i
êê2 3
+
êê4 5
$num
êê6 7
)
êê7 8
&&
êê9 ;
(
êê< =
(
êê= >
message
êê> E
[
êêE F
i
êêF G
+
êêH I
$num
êêJ K
]
êêK L
==
êêM O
$char
êêP T
)
êêT U
||
êêV X
(
êêY Z
message
êêZ a
[
êêa b
i
êêb c
+
êêd e
$num
êêf g
]
êêg h
==
êêi k
$char
êêl p
)
êêp q
)
êêq r
)
êêr s
{
ëë 
i
íí  !
++
íí! #
;
íí# $
}
ìì 
i
îî 
++
îî 
;
îî  
break
ïï !
;
ïï! "
}
ññ 
}
óó 
buffer
öö 
=
öö 
this
öö !
.
öö! "
Encoding
öö" *
.
öö* +
GetBytes
öö+ 3
(
öö3 4
builder
öö4 ;
.
öö; <
ToString
öö< D
(
ööD E
)
ööE F
)
ööF G
;
ööG H
this
üü 
.
üü 
Client
üü 
.
üü  
Send
üü  $
(
üü$ %
buffer
üü% +
,
üü+ ,
buffer
üü- 3
.
üü3 4
Length
üü4 :
,
üü: ;
this
üü< @
.
üü@ A
RemoteEndPoint
üüA O
)
üüO P
;
üüP Q
}
°° 
}
¢¢ 
catch
££ 
(
££ 
	Exception
££ 
e
££ 
)
££ 
{
§§ 
ErrorHandler
•• 
.
•• 
Error
•• "
(
••" #
$str
¶¶ D
+
¶¶E F
this
ßß 
.
ßß 
RemoteAddress
ßß &
.
ßß& '
ToString
ßß' /
(
ßß/ 0
)
ßß0 1
+
ßß2 3
$str
®® 
+
®®  !
this
©© 
.
©© 

RemotePort
©© #
+
©©$ %
$str
©©& )
,
©©) *
e
™™ 
,
™™ 
	ErrorCode
´´ 
.
´´ 
WriteFailure
´´ *
)
´´* +
;
´´+ ,
}
¨¨ 
}
≠≠ 
public
∑∑ 
override
∑∑	 
void
∑∑ 
ActivateOptions
∑∑ &
(
∑∑& '
)
∑∑' (
{
∏∏ 
base
ππ 
.
ππ 
ActivateOptions
ππ 
(
ππ 
)
ππ 
;
ππ 
m_levelMapping
∫∫ 
.
∫∫ 
ActivateOptions
∫∫ !
(
∫∫! "
)
∫∫" #
;
∫∫# $
}
ªª 
virtual
ÀÀ 	
	protected
ÀÀ
 
SyslogSeverity
ÀÀ "
GetSeverity
ÀÀ# .
(
ÀÀ. /
Level
ÀÀ/ 4
level
ÀÀ5 :
)
ÀÀ: ;
{
ÃÃ 
LevelSeverity
ÕÕ 
levelSeverity
ÕÕ 
=
ÕÕ  
m_levelMapping
ÕÕ! /
.
ÕÕ/ 0
Lookup
ÕÕ0 6
(
ÕÕ6 7
level
ÕÕ7 <
)
ÕÕ< =
as
ÕÕ> @
LevelSeverity
ÕÕA N
;
ÕÕN O
if
ŒŒ 
(
ŒŒ 
levelSeverity
ŒŒ 
!=
ŒŒ 
null
ŒŒ 
)
ŒŒ 
{
œœ 
return
–– 

levelSeverity
–– 
.
–– 
Severity
–– !
;
––! "
}
—— 
if
◊◊ 
(
◊◊ 
level
◊◊ 
>=
◊◊ 
Level
◊◊ 
.
◊◊ 
Alert
◊◊ 
)
◊◊ 
{
ÿÿ 
return
ŸŸ 

SyslogSeverity
ŸŸ 
.
ŸŸ 
Alert
ŸŸ 
;
ŸŸ  
}
⁄⁄ 
else
€€ 
if
€€ 

(
€€ 
level
€€ 
>=
€€ 
Level
€€ 
.
€€ 
Critical
€€ #
)
€€# $
{
‹‹ 
return
›› 

SyslogSeverity
›› 
.
›› 
Critical
›› "
;
››" #
}
ﬁﬁ 
else
ﬂﬂ 
if
ﬂﬂ 

(
ﬂﬂ 
level
ﬂﬂ 
>=
ﬂﬂ 
Level
ﬂﬂ 
.
ﬂﬂ 
Error
ﬂﬂ  
)
ﬂﬂ  !
{
‡‡ 
return
·· 

SyslogSeverity
·· 
.
·· 
Error
·· 
;
··  
}
‚‚ 
else
„„ 
if
„„ 

(
„„ 
level
„„ 
>=
„„ 
Level
„„ 
.
„„ 
Warn
„„ 
)
„„  
{
‰‰ 
return
ÂÂ 

SyslogSeverity
ÂÂ 
.
ÂÂ 
Warning
ÂÂ !
;
ÂÂ! "
}
ÊÊ 
else
ÁÁ 
if
ÁÁ 

(
ÁÁ 
level
ÁÁ 
>=
ÁÁ 
Level
ÁÁ 
.
ÁÁ 
Notice
ÁÁ !
)
ÁÁ! "
{
ËË 
return
ÈÈ 

SyslogSeverity
ÈÈ 
.
ÈÈ 
Notice
ÈÈ  
;
ÈÈ  !
}
ÍÍ 
else
ÎÎ 
if
ÎÎ 

(
ÎÎ 
level
ÎÎ 
>=
ÎÎ 
Level
ÎÎ 
.
ÎÎ 
Info
ÎÎ 
)
ÎÎ  
{
ÏÏ 
return
ÌÌ 

SyslogSeverity
ÌÌ 
.
ÌÌ 
Informational
ÌÌ '
;
ÌÌ' (
}
ÓÓ 
return
 	
SyslogSeverity

 
.
 
Debug
 
;
 
}
ÒÒ 
public
ÇÇ 
static
ÇÇ	 
int
ÇÇ 
GeneratePriority
ÇÇ $
(
ÇÇ$ %
SyslogFacility
ÇÇ% 3
facility
ÇÇ4 <
,
ÇÇ< =
SyslogSeverity
ÇÇ> L
severity
ÇÇM U
)
ÇÇU V
{
ÉÉ 
if
ÑÑ 
(
ÑÑ 
facility
ÑÑ 
<
ÑÑ 
SyslogFacility
ÑÑ  
.
ÑÑ  !
Kernel
ÑÑ! '
||
ÑÑ( *
facility
ÑÑ+ 3
>
ÑÑ4 5
SyslogFacility
ÑÑ6 D
.
ÑÑD E
Local7
ÑÑE K
)
ÑÑK L
{
ÖÖ 
throw
ÜÜ 	
new
ÜÜ
 
ArgumentException
ÜÜ 
(
ÜÜ  
$str
ÜÜ  =
,
ÜÜ= >
$str
ÜÜ? I
)
ÜÜI J
;
ÜÜJ K
}
áá 
if
ââ 
(
ââ 
severity
ââ 
<
ââ 
SyslogSeverity
ââ  
.
ââ  !
	Emergency
ââ! *
||
ââ+ -
severity
ââ. 6
>
ââ7 8
SyslogSeverity
ââ9 G
.
ââG H
Debug
ââH M
)
ââM N
{
ää 
throw
ãã 	
new
ãã
 
ArgumentException
ãã 
(
ãã  
$str
ãã  =
,
ãã= >
$str
ãã? I
)
ããI J
;
ããJ K
}
åå 
	unchecked
éé 
{
èè 
return
êê 

(
êê 
(
êê 
int
êê 
)
êê 
facility
êê 
*
êê 
$num
êê 
)
êê 
+
êê  
(
êê! "
int
êê" %
)
êê% &
severity
êê& .
;
êê. /
}
ëë 
}
íí 
private
õõ 	
SyslogFacility
õõ
 

m_facility
õõ #
=
õõ$ %
SyslogFacility
õõ& 4
.
õõ4 5
User
õõ5 9
;
õõ9 :
private
†† 	
PatternLayout
††
 

m_identity
†† "
;
††" #
private
•• 	
LevelMapping
••
 
m_levelMapping
•• %
=
••& '
new
••( +
LevelMapping
••, 8
(
••8 9
)
••9 :
;
••: ;
private
™™ 	
const
™™
 
int
™™  
c_renderBufferSize
™™ &
=
™™' (
$num
™™) ,
;
™™, -
private
ØØ 	
const
ØØ
 
int
ØØ '
c_renderBufferMaxCapacity
ØØ -
=
ØØ. /
$num
ØØ0 4
;
ØØ4 5
public
ææ 
class
ææ	 
LevelSeverity
ææ 
:
ææ 
LevelMappingEntry
ææ 0
{
øø 
private
¿¿ 

SyslogSeverity
¿¿ 

m_severity
¿¿ $
;
¿¿$ %
public
ÀÀ 	
SyslogSeverity
ÀÀ
 
Severity
ÀÀ !
{
ÃÃ 
get
ÕÕ 
{
ÕÕ 	
return
ÕÕ
 

m_severity
ÕÕ 
;
ÕÕ 
}
ÕÕ 
set
ŒŒ 
{
ŒŒ 	

m_severity
ŒŒ
 
=
ŒŒ 
value
ŒŒ 
;
ŒŒ 
}
ŒŒ 
}
œœ 
}
–– 
}
”” 
}‘‘ Œ7
DC:\sonarqube\projects\log4net-2.0.7\src\Appender\RemotingAppender.cs
	namespace!! 	
log4net!!
 
.!! 
Appender!! 
{"" 
publicQQ 
classQQ 
RemotingAppenderQQ 
:QQ  %
BufferingAppenderSkeletonQQ! :
{RR 
public]] 
RemotingAppender]]	 
(]] 
)]] 
{^^ 
}__ 
publicss 
stringss	 
Sinkss 
{tt 
getuu 
{uu 
returnuu	 
	m_sinkUrluu 
;uu 
}uu 
setvv 
{vv 
	m_sinkUrlvv	 
=vv 
valuevv 
;vv 
}vv 
}ww 
[
éé 	
System
éé	 
.
éé 
Security
éé 
.
éé "
SecuritySafeCritical
éé -
]
éé- .
override
êê 
public
êê 
void
êê 
ActivateOptions
êê ,
(
êê, -
)
êê- .
{
ëë 
base
íí 
.
íí 
ActivateOptions
íí 
(
íí 
)
íí 
;
íí 
IDictionary
îî 
channelProperties
îî  
=
îî! "
new
îî# &
	Hashtable
îî' 0
(
îî0 1
)
îî1 2
;
îî2 3
channelProperties
ïï 
[
ïï 
$str
ïï &
]
ïï& '
=
ïï( )
$str
ïï* 0
;
ïï0 1
	m_sinkObj
óó 
=
óó 
(
óó  
IRemoteLoggingSink
óó "
)
óó" #
	Activator
óó# ,
.
óó, -
	GetObject
óó- 6
(
óó6 7
typeof
óó7 =
(
óó= > 
IRemoteLoggingSink
óó> P
)
óóP Q
,
óóQ R
	m_sinkUrl
óóS \
,
óó\ ]
channelProperties
óó^ o
)
óóo p
;
óóp q
}
òò 
override
∞∞ 

	protected
∞∞ 
void
∞∞ 

SendBuffer
∞∞ $
(
∞∞$ %
LoggingEvent
∞∞% 1
[
∞∞1 2
]
∞∞2 3
events
∞∞4 :
)
∞∞: ;
{
±± 
BeginAsyncSend
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
if
∂∂ 
(
∂∂ 
!
∂∂ 

ThreadPool
∂∂ 
.
∂∂ 
QueueUserWorkItem
∂∂ $
(
∂∂$ %
new
∂∂% (
WaitCallback
∂∂) 5
(
∂∂5 6 
SendBufferCallback
∂∂6 H
)
∂∂H I
,
∂∂I J
events
∂∂K Q
)
∂∂Q R
)
∂∂R S
{
∑∑ 
EndAsyncSend
ππ 
(
ππ 
)
ππ 
;
ππ 
ErrorHandler
ªª 
.
ªª 
Error
ªª 
(
ªª 
$str
ªª +
+
ªª+ ,
Name
ªª, 0
+
ªª0 1
$str
ªª1 y
)
ªªy z
;
ªªz {
}
ºº 
}
ΩΩ 
override
““ 

	protected
““ 
void
““ 
OnClose
““ !
(
““! "
)
““" #
{
”” 
base
‘‘ 
.
‘‘ 
OnClose
‘‘ 
(
‘‘ 
)
‘‘ 
;
‘‘ 
if
◊◊ 
(
◊◊ 
!
◊◊ #
m_workQueueEmptyEvent
◊◊ 
.
◊◊ 
WaitOne
◊◊ %
(
◊◊% &
$num
◊◊& (
*
◊◊) *
$num
◊◊+ /
,
◊◊/ 0
false
◊◊1 6
)
◊◊6 7
)
◊◊7 8
{
ÿÿ 
ErrorHandler
ŸŸ 
.
ŸŸ 
Error
ŸŸ 
(
ŸŸ 
$str
ŸŸ +
+
ŸŸ+ ,
Name
ŸŸ, 0
+
ŸŸ0 1
$str
ŸŸ1 o
)
ŸŸo p
;
ŸŸp q
}
⁄⁄ 
}
€€ 
public
‚‚ 
override
‚‚	 
bool
‚‚ 
Flush
‚‚ 
(
‚‚ 
int
‚‚  !
millisecondsTimeout
‚‚! 4
)
‚‚4 5
{
„„ 
base
‰‰ 
.
‰‰ 
Flush
‰‰ 
(
‰‰ 
)
‰‰ 
;
‰‰ 
return
ÂÂ 	#
m_workQueueEmptyEvent
ÂÂ
 
.
ÂÂ  
WaitOne
ÂÂ  '
(
ÂÂ' (!
millisecondsTimeout
ÂÂ( ;
,
ÂÂ; <
false
ÂÂ= B
)
ÂÂB C
;
ÂÂC D
}
ÊÊ 
private
ÌÌ 	
void
ÌÌ
 
BeginAsyncSend
ÌÌ 
(
ÌÌ 
)
ÌÌ 
{
ÓÓ #
m_workQueueEmptyEvent
 
.
 
Reset
 
(
 
)
  
;
  !
Interlocked
ÛÛ 
.
ÛÛ 
	Increment
ÛÛ 
(
ÛÛ 
ref
ÛÛ #
m_queuedCallbackCount
ÛÛ 2
)
ÛÛ2 3
;
ÛÛ3 4
}
ÙÙ 
private
˘˘ 	
void
˘˘
 
EndAsyncSend
˘˘ 
(
˘˘ 
)
˘˘ 
{
˙˙ 
if
¸¸ 
(
¸¸ 
Interlocked
¸¸ 
.
¸¸ 
	Decrement
¸¸ 
(
¸¸ 
ref
¸¸  #
m_queuedCallbackCount
¸¸! 6
)
¸¸6 7
<=
¸¸8 :
$num
¸¸; <
)
¸¸< =
{
˝˝ #
m_workQueueEmptyEvent
ˇˇ 
.
ˇˇ 
Set
ˇˇ 
(
ˇˇ 
)
ˇˇ 
;
ˇˇ  
}
ÄÄ 
}
ÅÅ 
private
åå 	
void
åå
  
SendBufferCallback
åå !
(
åå! "
object
åå" (
state
åå) .
)
åå. /
{
çç 
try
éé 
{
èè 
LoggingEvent
êê 
[
êê 
]
êê 
events
êê 
=
êê 
(
êê 
LoggingEvent
êê )
[
êê) *
]
êê* +
)
êê+ ,
state
êê, 1
;
êê1 2
	m_sinkObj
ìì 
.
ìì 
	LogEvents
ìì 
(
ìì 
events
ìì 
)
ìì 
;
ìì  
}
îî 
catch
ïï 
(
ïï 	
	Exception
ïï	 
ex
ïï 
)
ïï 
{
ññ 
ErrorHandler
óó 
.
óó 
Error
óó 
(
óó 
$str
óó 5
,
óó5 6
ex
óó7 9
)
óó9 :
;
óó: ;
}
òò 
finally
ôô 

{
öö 
EndAsyncSend
õõ 
(
õõ 
)
õõ 
;
õõ 
}
úú 
}
ùù 
private
§§ 	
string
§§
 
	m_sinkUrl
§§ 
;
§§ 
private
©© 	 
IRemoteLoggingSink
©©
 
	m_sinkObj
©© &
;
©©& '
private
ÆÆ 	
int
ÆÆ
 #
m_queuedCallbackCount
ÆÆ #
=
ÆÆ$ %
$num
ÆÆ& '
;
ÆÆ' (
private
∑∑ 	
ManualResetEvent
∑∑
 #
m_workQueueEmptyEvent
∑∑ 0
=
∑∑1 2
new
∑∑3 6
ManualResetEvent
∑∑7 G
(
∑∑G H
true
∑∑H L
)
∑∑L M
;
∑∑M N
public
√√ 
	interface
√√	  
IRemoteLoggingSink
√√ %
{
ƒƒ 
void
ŒŒ 
	LogEvents
ŒŒ 
(
ŒŒ 
LoggingEvent
ŒŒ 
[
ŒŒ 
]
ŒŒ  
events
ŒŒ! '
)
ŒŒ' (
;
ŒŒ( )
}
œœ 
}
–– 
}—— Á∫
GC:\sonarqube\projects\log4net-2.0.7\src\Appender\RollingFileAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public~~ 
class~~ 
RollingFileAppender~~ !
:~~" #
FileAppender~~$ 0
{ 
public
ää 
enum
ää	 
RollingMode
ää 
{
ãã 
Once
õõ 
=
õõ	 

$num
õõ 
,
õõ 
Size
†† 
=
††	 

$num
†† 
,
†† 
Date
•• 
=
••	 

$num
•• 
,
•• 
	Composite
™™ 
=
™™ 
$num
™™ 
}
´´ 
	protected
ππ 
enum
ππ 
	RollPoint
ππ 
{
∫∫ 
InvalidRollPoint
ææ 
=
ææ 
-
ææ 
$num
ææ 
,
ææ 
TopOfMinute
√√ 
=
√√ 
$num
√√ 
,
√√ 
	TopOfHour
»» 
=
»» 
$num
»» 
,
»» 
HalfDay
ÕÕ 

=
ÕÕ 
$num
ÕÕ 
,
ÕÕ 
TopOfDay
““ 
=
““ 
$num
““ 
,
““ 
	TopOfWeek
◊◊ 
=
◊◊ 
$num
◊◊ 
,
◊◊ 

TopOfMonth
‹‹ 
=
‹‹ 
$num
‹‹ 
}
›› 
public
ÎÎ !
RollingFileAppender
ÎÎ	 
(
ÎÎ 
)
ÎÎ 
{
ÏÏ 
}
ÌÌ 
~
ÚÚ !
RollingFileAppender
ÚÚ 
(
ÚÚ 
)
ÚÚ 
{
ÛÛ 
if
ıı 
(
ıı 
m_mutexForRolling
ıı 
!=
ıı 
null
ıı  
)
ıı  !
{
ˆˆ 
m_mutexForRolling
¯¯ 
.
¯¯ 
Dispose
¯¯ 
(
¯¯ 
)
¯¯ 
;
¯¯  
m_mutexForRolling
¸¸ 
=
¸¸ 
null
¸¸ 
;
¸¸ 
}
˝˝ 
}
ˇˇ 
public
≠≠ 
	IDateTime
≠≠ 
DateTimeStrategy
≠≠ )
{
ÆÆ 
get
ØØ 
{
ØØ 
return
ØØ	 

m_dateTime
ØØ 
;
ØØ 
}
ØØ 
set
∞∞ 
{
∞∞ 

m_dateTime
∞∞	 
=
∞∞ 
value
∞∞ 
;
∞∞ 
}
∞∞ 
}
±± 
public
≈≈ 
string
≈≈	 
DatePattern
≈≈ 
{
∆∆ 
get
«« 
{
«« 
return
««	 
m_datePattern
«« 
;
«« 
}
««  
set
»» 
{
»» 
m_datePattern
»»	 
=
»» 
value
»» 
;
»» 
}
»»  !
}
…… 
public
‚‚ 
int
‚‚	  
MaxSizeRollBackups
‚‚ 
{
„„ 
get
‰‰ 
{
‰‰ 
return
‰‰	 "
m_maxSizeRollBackups
‰‰ $
;
‰‰$ %
}
‰‰& '
set
ÂÂ 
{
ÂÂ "
m_maxSizeRollBackups
ÂÂ	 
=
ÂÂ 
value
ÂÂ  %
;
ÂÂ% &
}
ÂÂ' (
}
ÊÊ 
public
˚˚ 
long
˚˚	 
MaxFileSize
˚˚ 
{
¸¸ 
get
˝˝ 
{
˝˝ 
return
˝˝	 
m_maxFileSize
˝˝ 
;
˝˝ 
}
˝˝  
set
˛˛ 
{
˛˛ 
m_maxFileSize
˛˛	 
=
˛˛ 
value
˛˛ 
;
˛˛ 
}
˛˛  !
}
ˇˇ 
public
õõ 
string
õõ	 
MaximumFileSize
õõ 
{
úú 
get
ùù 
{
ùù 
return
ùù	 
m_maxFileSize
ùù 
.
ùù 
ToString
ùù &
(
ùù& '
NumberFormatInfo
ùù' 7
.
ùù7 8
InvariantInfo
ùù8 E
)
ùùE F
;
ùùF G
}
ùùH I
set
ûû 
{
ûû 
m_maxFileSize
ûû	 
=
ûû 
OptionConverter
ûû (
.
ûû( )

ToFileSize
ûû) 3
(
ûû3 4
value
ûû4 9
,
ûû9 :
m_maxFileSize
ûû; H
+
ûûI J
$num
ûûK L
)
ûûL M
;
ûûM N
}
ûûO P
}
üü 
public
∏∏ 
int
∏∏	 
CountDirection
∏∏ 
{
ππ 
get
∫∫ 
{
∫∫ 
return
∫∫	 
m_countDirection
∫∫  
;
∫∫  !
}
∫∫" #
set
ªª 
{
ªª 
m_countDirection
ªª	 
=
ªª 
value
ªª !
;
ªª! "
}
ªª# $
}
ºº 
public
ÕÕ 
RollingMode
ÕÕ	 
RollingStyle
ÕÕ !
{
ŒŒ 
get
œœ 
{
œœ 
return
œœ	 
m_rollingStyle
œœ 
;
œœ 
}
œœ  !
set
–– 
{
—— 
m_rollingStyle
““ 
=
““ 
value
““ 
;
““ 
switch
”” 

(
”” 
m_rollingStyle
”” 
)
”” 
{
‘‘ 
case
’’ 	
RollingMode
’’
 
.
’’ 
Once
’’ 
:
’’ 

m_rollDate
÷÷ 
=
÷÷ 
false
÷÷ 
;
÷÷ 

m_rollSize
◊◊ 
=
◊◊ 
false
◊◊ 
;
◊◊ 
this
ŸŸ 

.
ŸŸ
 
AppendToFile
ŸŸ 
=
ŸŸ 
false
ŸŸ 
;
ŸŸ  
break
⁄⁄ 
;
⁄⁄ 
case
‹‹ 	
RollingMode
‹‹
 
.
‹‹ 
Size
‹‹ 
:
‹‹ 

m_rollDate
›› 
=
›› 
false
›› 
;
›› 

m_rollSize
ﬁﬁ 
=
ﬁﬁ 
true
ﬁﬁ 
;
ﬁﬁ 
break
ﬂﬂ 
;
ﬂﬂ 
case
·· 	
RollingMode
··
 
.
·· 
Date
·· 
:
·· 

m_rollDate
‚‚ 
=
‚‚ 
true
‚‚ 
;
‚‚ 

m_rollSize
„„ 
=
„„ 
false
„„ 
;
„„ 
break
‰‰ 
;
‰‰ 
case
ÊÊ 	
RollingMode
ÊÊ
 
.
ÊÊ 
	Composite
ÊÊ 
:
ÊÊ  

m_rollDate
ÁÁ 
=
ÁÁ 
true
ÁÁ 
;
ÁÁ 

m_rollSize
ËË 
=
ËË 
true
ËË 
;
ËË 
break
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}
ÎÎ 
}
ÏÏ 
public
¸¸ 
bool
¸¸ *
PreserveLogFileNameExtension
¸¸ 0
{
˝˝ 	
get
˛˛ 
{
˛˛ 
return
˛˛ ,
m_preserveLogFileNameExtension
˛˛ 7
;
˛˛7 8
}
˛˛9 :
set
ˇˇ 
{
ˇˇ ,
m_preserveLogFileNameExtension
ˇˇ 0
=
ˇˇ1 2
value
ˇˇ3 8
;
ˇˇ8 9
}
ˇˇ: ;
}
ÄÄ 	
public
ïï 
bool
ïï	 
StaticLogFileName
ïï 
{
ññ 
get
óó 
{
óó 
return
óó	 !
m_staticLogFileName
óó #
;
óó# $
}
óó% &
set
òò 
{
òò !
m_staticLogFileName
òò	 
=
òò 
value
òò $
;
òò$ %
}
òò& '
}
ôô 
private
¶¶ 
readonly
¶¶ 
static
¶¶ 
Type
¶¶ !
declaringType
¶¶" /
=
¶¶0 1
typeof
¶¶2 8
(
¶¶8 9!
RollingFileAppender
¶¶9 L
)
¶¶L M
;
¶¶M N
override
≥≥ 

	protected
≥≥ 
void
≥≥ 
SetQWForFiles
≥≥ '
(
≥≥' (

TextWriter
≥≥( 2
writer
≥≥3 9
)
≥≥9 :
{
¥¥ 
QuietWriter
µµ 
=
µµ 
new
µµ %
CountingQuietTextWriter
µµ ,
(
µµ, -
writer
µµ- 3
,
µµ3 4
ErrorHandler
µµ5 A
)
µµA B
;
µµB C
}
∂∂ 
override
√√ 

	protected
√√ 
void
√√ 
Append
√√  
(
√√  !
LoggingEvent
√√! -
loggingEvent
√√. :
)
√√: ;
{
ƒƒ $
AdjustFileBeforeAppend
≈≈ 
(
≈≈ 
)
≈≈ 
;
≈≈ 
base
∆∆ 
.
∆∆ 
Append
∆∆ 
(
∆∆ 
loggingEvent
∆∆ 
)
∆∆ 
;
∆∆ 
}
«« 
override
‘‘ 

	protected
‘‘ 
void
‘‘ 
Append
‘‘  
(
‘‘  !
LoggingEvent
‘‘! -
[
‘‘- .
]
‘‘. /
loggingEvents
‘‘0 =
)
‘‘= >
{
’’ $
AdjustFileBeforeAppend
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷ 
base
◊◊ 
.
◊◊ 
Append
◊◊ 
(
◊◊ 
loggingEvents
◊◊ 
)
◊◊ 
;
◊◊ 
}
ÿÿ 
virtual
‰‰ 	
	protected
‰‰
 
void
‰‰ $
AdjustFileBeforeAppend
‰‰ /
(
‰‰/ 0
)
‰‰0 1
{
ÂÂ 
try
ËË 
{
ÈÈ 
if
ÎÎ 
(
ÎÎ 
m_mutexForRolling
ÎÎ 
!=
ÎÎ 
null
ÎÎ !
)
ÎÎ! "
{
ÏÏ 
m_mutexForRolling
ÌÌ 
.
ÌÌ 
WaitOne
ÌÌ 
(
ÌÌ 
)
ÌÌ  
;
ÌÌ  !
}
ÓÓ 
if
 
(
 

m_rollDate
 
)
 
{
ÒÒ 
DateTime
ÚÚ 
n
ÚÚ 
=
ÚÚ 

m_dateTime
ÚÚ 
.
ÚÚ 
Now
ÚÚ  
;
ÚÚ  !
if
ÛÛ 
(
ÛÛ 	
n
ÛÛ	 

>=
ÛÛ 
m_nextCheck
ÛÛ 
)
ÛÛ 
{
ÙÙ 
m_now
ıı 
=
ıı 
n
ıı 
;
ıı 
m_nextCheck
ˆˆ 
=
ˆˆ 
NextCheckDate
ˆˆ !
(
ˆˆ! "
m_now
ˆˆ" '
,
ˆˆ' (
m_rollPoint
ˆˆ) 4
)
ˆˆ4 5
;
ˆˆ5 6
RollOverTime
¯¯ 
(
¯¯ 
true
¯¯ 
)
¯¯ 
;
¯¯ 
}
˘˘ 
}
˙˙ 
if
¸¸ 
(
¸¸ 

m_rollSize
¸¸ 
)
¸¸ 
{
˝˝ 
if
˛˛ 
(
˛˛ 	
(
˛˛	 

File
˛˛
 
!=
˛˛ 
null
˛˛ 
)
˛˛ 
&&
˛˛ 
(
˛˛ 
(
˛˛ %
CountingQuietTextWriter
˛˛ 4
)
˛˛4 5
QuietWriter
˛˛5 @
)
˛˛@ A
.
˛˛A B
Count
˛˛B G
>=
˛˛H J
m_maxFileSize
˛˛K X
)
˛˛X Y
{
ˇˇ 
RollOverSize
ÄÄ 
(
ÄÄ 
)
ÄÄ 
;
ÄÄ 
}
ÅÅ 
}
ÇÇ 
}
ÑÑ 
finally
ÖÖ 

{
ÜÜ 
if
àà 
(
àà 
m_mutexForRolling
àà 
!=
àà 
null
àà !
)
àà! "
{
ââ 
m_mutexForRolling
ää 
.
ää 
ReleaseMutex
ää #
(
ää# $
)
ää$ %
;
ää% &
}
ãã 
}
åå 
}
éé 
override
öö 

	protected
öö 
void
öö 
OpenFile
öö "
(
öö" #
string
öö# )
fileName
öö* 2
,
öö2 3
bool
öö4 8
append
öö9 ?
)
öö? @
{
õõ 
lock
úú 
(
úú 
this
úú 
)
úú 
{
ùù 
fileName
ûû 
=
ûû #
GetNextOutputFileName
ûû $
(
ûû$ %
fileName
ûû% -
)
ûû- .
;
ûû. /
long
°° 
currentCount
°°	 
=
°° 
$num
°° 
;
°° 
if
¢¢ 
(
¢¢ 
append
¢¢ 
)
¢¢ 
{
££ 
using
§§ 

(
§§
 
SecurityContext
§§ 
.
§§ 
Impersonate
§§ &
(
§§& '
this
§§' +
)
§§+ ,
)
§§, -
{
•• 
if
¶¶ 
(
¶¶	 

System
¶¶
 
.
¶¶ 
IO
¶¶ 
.
¶¶ 
File
¶¶ 
.
¶¶ 
Exists
¶¶ 
(
¶¶  
fileName
¶¶  (
)
¶¶( )
)
¶¶) *
{
ßß 
currentCount
®® 
=
®® 
(
®® 
new
®® 
FileInfo
®® #
(
®®# $
fileName
®®$ ,
)
®®, -
)
®®- .
.
®®. /
Length
®®/ 5
;
®®5 6
}
©© 
}
™™ 
}
´´ 
else
¨¨ 
{
≠≠ 
if
ÆÆ 
(
ÆÆ 	
LogLog
ÆÆ	 
.
ÆÆ 
IsErrorEnabled
ÆÆ 
)
ÆÆ 
{
ØØ 
if
¥¥ 
(
¥¥	 
"
m_maxSizeRollBackups
¥¥
 
!=
¥¥ !
$num
¥¥" #
&&
¥¥$ &

FileExists
¥¥' 1
(
¥¥1 2
fileName
¥¥2 :
)
¥¥: ;
)
¥¥; <
{
µµ 
LogLog
∂∂ 
.
∂∂ 
Error
∂∂ 
(
∂∂ 
declaringType
∂∂ !
,
∂∂! "
$str
∂∂# j
+
∂∂j k
fileName
∂∂k s
+
∂∂s t
$str∂∂t á
)∂∂á à
;∂∂à â
}
∑∑ 
}
∏∏ 
}
ππ 
if
ªª 
(
ªª 
!
ªª 	!
m_staticLogFileName
ªª	 
)
ªª 
{
ºº !
m_scheduledFilename
ΩΩ 
=
ΩΩ 
fileName
ΩΩ #
;
ΩΩ# $
}
ææ 
base
¡¡ 
.
¡¡ 	
OpenFile
¡¡	 
(
¡¡ 
fileName
¡¡ 
,
¡¡ 
append
¡¡ "
)
¡¡" #
;
¡¡# $
(
ƒƒ 
(
ƒƒ %
CountingQuietTextWriter
ƒƒ 
)
ƒƒ 
QuietWriter
ƒƒ )
)
ƒƒ) *
.
ƒƒ* +
Count
ƒƒ+ 0
=
ƒƒ1 2
currentCount
ƒƒ3 ?
;
ƒƒ? @
}
≈≈ 
}
∆∆ 
	protected
‘‘ 
string
‘‘ #
GetNextOutputFileName
‘‘ (
(
‘‘( )
string
‘‘) /
fileName
‘‘0 8
)
‘‘8 9
{
’’ 
if
÷÷ 
(
÷÷ 
!
÷÷ !
m_staticLogFileName
÷÷ 
)
÷÷ 
{
◊◊ 
fileName
ÿÿ 
=
ÿÿ 
fileName
ÿÿ 
.
ÿÿ 
Trim
ÿÿ 
(
ÿÿ 
)
ÿÿ 
;
ÿÿ 
if
⁄⁄ 
(
⁄⁄ 

m_rollDate
⁄⁄ 
)
⁄⁄ 
{
€€ 
fileName
‹‹ 
=
‹‹ 
CombinePath
‹‹ *
(
‹‹* +
fileName
‹‹+ 3
,
‹‹3 4
m_now
‹‹5 :
.
‹‹: ;
ToString
‹‹; C
(
‹‹C D
m_datePattern
‹‹D Q
,
‹‹Q R
System
‹‹S Y
.
‹‹Y Z
Globalization
‹‹Z g
.
‹‹g h 
DateTimeFormatInfo
‹‹h z
.
‹‹z {
InvariantInfo‹‹{ à
)‹‹à â
)‹‹â ä
;‹‹ä ã
}
›› 
if
ﬂﬂ 
(
ﬂﬂ 
m_countDirection
ﬂﬂ 
>=
ﬂﬂ 
$num
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
fileName
·· 
=
·· 
CombinePath
·· *
(
··* +
fileName
··+ 3
,
··3 4
$str
··5 8
+
··9 :"
m_curSizeRollBackups
··; O
)
··O P
;
··P Q
}
‚‚ 
}
„„ 
return
ÂÂ 	
fileName
ÂÂ
 
;
ÂÂ 
}
ÊÊ 
private
ÔÔ 	
void
ÔÔ
 )
DetermineCurSizeRollBackups
ÔÔ *
(
ÔÔ* +
)
ÔÔ+ ,
{
 "
m_curSizeRollBackups
ÒÒ 
=
ÒÒ 
$num
ÒÒ 
;
ÒÒ 
string
ÛÛ 	
fullPath
ÛÛ
 
=
ÛÛ 
null
ÛÛ 
;
ÛÛ 
string
ÙÙ 	
fileName
ÙÙ
 
=
ÙÙ 
null
ÙÙ 
;
ÙÙ 
using
ˆˆ 
(
ˆˆ 	
SecurityContext
ˆˆ	 
.
ˆˆ 
Impersonate
ˆˆ $
(
ˆˆ$ %
this
ˆˆ% )
)
ˆˆ) *
)
ˆˆ* +
{
˜˜ 
fullPath
¯¯ 
=
¯¯ 
System
¯¯ 
.
¯¯ 
IO
¯¯ 
.
¯¯ 
Path
¯¯ 
.
¯¯ 
GetFullPath
¯¯ )
(
¯¯) *
m_baseFileName
¯¯* 8
)
¯¯8 9
;
¯¯9 :
fileName
˘˘ 
=
˘˘ 
System
˘˘ 
.
˘˘ 
IO
˘˘ 
.
˘˘ 
Path
˘˘ 
.
˘˘ 
GetFileName
˘˘ )
(
˘˘) *
fullPath
˘˘* 2
)
˘˘2 3
;
˘˘3 4
}
˙˙ 
	ArrayList
¸¸ 

arrayFiles
¸¸ 
=
¸¸ 
GetExistingFiles
¸¸ *
(
¸¸* +
fullPath
¸¸+ 3
)
¸¸3 4
;
¸¸4 5#
InitializeRollBackups
˝˝ 
(
˝˝ 
fileName
˝˝ !
,
˝˝! "

arrayFiles
˝˝# -
)
˝˝- .
;
˝˝. /
LogLog
ˇˇ 	
.
ˇˇ	 

Debug
ˇˇ
 
(
ˇˇ 
declaringType
ˇˇ 
,
ˇˇ 
$str
ˇˇ ?
+
ˇˇ? @"
m_curSizeRollBackups
ˇˇ@ T
+
ˇˇT U
$str
ˇˇU X
)
ˇˇX Y
;
ˇˇY Z
}
ÄÄ 
private
àà 	
string
àà
 '
GetWildcardPatternForFile
àà *
(
àà* +
string
àà+ 1
baseFileName
àà2 >
)
àà> ?
{
ââ 
if
ää 
(
ää ,
m_preserveLogFileNameExtension
ää .
)
ää. /
{
ãã 
return
åå 
Path
åå 
.
åå )
GetFileNameWithoutExtension
åå 7
(
åå7 8
baseFileName
åå8 D
)
ååD E
+
ååF G
$str
ååH K
+
ååL M
Path
ååN R
.
ååR S
GetExtension
ååS _
(
åå_ `
baseFileName
åå` l
)
åål m
;
ååm n
}
çç 
else
éé 
{
èè 
return
êê 
baseFileName
êê #
+
êê$ %
$char
êê& )
;
êê) *
}
ëë 
}
íí 
private
öö 	
	ArrayList
öö
 
GetExistingFiles
öö $
(
öö$ %
string
öö% +
baseFilePath
öö, 8
)
öö8 9
{
õõ 
	ArrayList
úú 
alFiles
úú 
=
úú 
new
úú 
	ArrayList
úú $
(
úú$ %
)
úú% &
;
úú& '
string
ûû 	
	directory
ûû
 
=
ûû 
null
ûû 
;
ûû 
using
†† 
(
†† 	
SecurityContext
††	 
.
†† 
Impersonate
†† $
(
††$ %
this
††% )
)
††) *
)
††* +
{
°° 
string
¢¢ 

fullPath
¢¢ 
=
¢¢ 
Path
¢¢ 
.
¢¢ 
GetFullPath
¢¢ &
(
¢¢& '
baseFilePath
¢¢' 3
)
¢¢3 4
;
¢¢4 5
	directory
§§ 
=
§§ 
Path
§§ 
.
§§ 
GetDirectoryName
§§ %
(
§§% &
fullPath
§§& .
)
§§. /
;
§§/ 0
if
•• 
(
•• 
	Directory
•• 
.
•• 
Exists
•• 
(
•• 
	directory
•• "
)
••" #
)
••# $
{
¶¶ 
string
ßß 
baseFileName
ßß 
=
ßß 
Path
ßß 
.
ßß  
GetFileName
ßß  +
(
ßß+ ,
fullPath
ßß, 4
)
ßß4 5
;
ßß5 6
string
©© 
[
©© 
]
©© 
files
©© 
=
©© 
	Directory
©© 
.
©©  
GetFiles
©©  (
(
©©( )
	directory
©©) 2
,
©©2 3'
GetWildcardPatternForFile
©©4 M
(
©©M N
baseFileName
©©N Z
)
©©Z [
)
©©[ \
;
©©\ ]
if
´´ 
(
´´ 	
files
´´	 
!=
´´ 
null
´´ 
)
´´ 
{
¨¨ 
for
≠≠ 	
(
≠≠
 
int
≠≠ 
i
≠≠ 
=
≠≠ 
$num
≠≠ 
;
≠≠ 
i
≠≠ 
<
≠≠ 
files
≠≠ 
.
≠≠  
Length
≠≠  &
;
≠≠& '
i
≠≠( )
++
≠≠) +
)
≠≠+ ,
{
ÆÆ 
string
ØØ 
curFileName
ØØ 
=
ØØ 
Path
ØØ  
.
ØØ  !
GetFileName
ØØ! ,
(
ØØ, -
files
ØØ- 2
[
ØØ2 3
i
ØØ3 4
]
ØØ4 5
)
ØØ5 6
;
ØØ6 7
if
∞∞ 	
(
∞∞
 
curFileName
∞∞ 
.
∞∞ 

StartsWith
∞∞ !
(
∞∞! "
Path
∞∞" &
.
∞∞& ')
GetFileNameWithoutExtension
∞∞' B
(
∞∞B C
baseFileName
∞∞C O
)
∞∞O P
)
∞∞P Q
)
∞∞Q R
{
±± 
alFiles
≤≤ 
.
≤≤ 
Add
≤≤ 
(
≤≤ 
curFileName
≤≤ 
)
≤≤  
;
≤≤  !
}
≥≥ 
}
¥¥ 
}
µµ 
}
∂∂ 
}
∑∑ 
LogLog
∏∏ 	
.
∏∏	 

Debug
∏∏
 
(
∏∏ 
declaringType
∏∏ 
,
∏∏ 
$str
∏∏ A
+
∏∏A B
	directory
∏∏B K
+
∏∏K L
$str
∏∏L O
)
∏∏O P
;
∏∏P Q
return
ππ 	
alFiles
ππ
 
;
ππ 
}
∫∫ 
private
øø 	
void
øø
 ,
RollOverIfDateBoundaryCrossing
øø -
(
øø- .
)
øø. /
{
¿¿ 
if
¡¡ 
(
¡¡ !
m_staticLogFileName
¡¡ 
&&
¡¡ 

m_rollDate
¡¡ (
)
¡¡( )
{
¬¬ 
if
√√ 
(
√√ 

FileExists
√√ 
(
√√ 
m_baseFileName
√√ !
)
√√! "
)
√√" #
{
ƒƒ 
DateTime
≈≈ 
last
≈≈ 
;
≈≈ 
using
∆∆ 

(
∆∆
 
SecurityContext
∆∆ 
.
∆∆ 
Impersonate
∆∆ &
(
∆∆& '
this
∆∆' +
)
∆∆+ ,
)
∆∆, -
{
∆∆. /
if
»» 
(
»» 
DateTimeStrategy
»» ,
is
»»- /
UniversalDateTime
»»0 A
)
»»A B
{
…… 
last
   
=
   
System
   
.
   
IO
   
.
   
File
   
.
   !
GetLastWriteTimeUtc
   0
(
  0 1
m_baseFileName
  1 ?
)
  ? @
;
  @ A
}
ÀÀ 
else
ÃÃ 

{
ÕÕ 
last
œœ 
=
œœ 
System
œœ 
.
œœ 
IO
œœ 
.
œœ 
File
œœ 
.
œœ 
GetLastWriteTime
œœ -
(
œœ- .
m_baseFileName
œœ. <
)
œœ< =
;
œœ= >
}
—— 
}
”” 
LogLog
‘‘ 
.
‘‘ 
Debug
‘‘ 
(
‘‘ 
declaringType
‘‘ 
,
‘‘  
$str
‘‘! $
+
‘‘$ %
last
‘‘% )
.
‘‘) *
ToString
‘‘* 2
(
‘‘2 3
m_datePattern
‘‘3 @
,
‘‘@ A
System
‘‘A G
.
‘‘G H
Globalization
‘‘H U
.
‘‘U V 
DateTimeFormatInfo
‘‘V h
.
‘‘h i
InvariantInfo
‘‘i v
)
‘‘v w
+
‘‘w x
$str‘‘x Å
+‘‘Å Ç
m_now‘‘Ç á
.‘‘á à
ToString‘‘à ê
(‘‘ê ë
m_datePattern‘‘ë û
,‘‘û ü
System‘‘ü •
.‘‘• ¶
Globalization‘‘¶ ≥
.‘‘≥ ¥"
DateTimeFormatInfo‘‘¥ ∆
.‘‘∆ «
InvariantInfo‘‘« ‘
)‘‘‘ ’
+‘‘’ ÷
$str‘‘÷ Ÿ
)‘‘Ÿ ⁄
;‘‘⁄ €
if
÷÷ 
(
÷÷ 	
!
÷÷	 

(
÷÷
 
last
÷÷ 
.
÷÷ 
ToString
÷÷ 
(
÷÷ 
m_datePattern
÷÷ &
,
÷÷& '
System
÷÷' -
.
÷÷- .
Globalization
÷÷. ;
.
÷÷; < 
DateTimeFormatInfo
÷÷< N
.
÷÷N O
InvariantInfo
÷÷O \
)
÷÷\ ]
.
÷÷] ^
Equals
÷÷^ d
(
÷÷d e
m_now
÷÷e j
.
÷÷j k
ToString
÷÷k s
(
÷÷s t
m_datePattern÷÷t Å
,÷÷Å Ç
System÷÷É â
.÷÷â ä
Globalization÷÷ä ó
.÷÷ó ò"
DateTimeFormatInfo÷÷ò ™
.÷÷™ ´
InvariantInfo÷÷´ ∏
)÷÷∏ π
)÷÷π ∫
)÷÷∫ ª
)÷÷ª º
{
◊◊ !
m_scheduledFilename
ÿÿ 
=
ÿÿ 
CombinePath
ÿÿ '
(
ÿÿ' (
m_baseFileName
ÿÿ( 6
,
ÿÿ6 7
last
ÿÿ8 <
.
ÿÿ< =
ToString
ÿÿ= E
(
ÿÿE F
m_datePattern
ÿÿF S
,
ÿÿS T
System
ÿÿU [
.
ÿÿ[ \
Globalization
ÿÿ\ i
.
ÿÿi j 
DateTimeFormatInfo
ÿÿj |
.
ÿÿ| }
InvariantInfoÿÿ} ä
)ÿÿä ã
)ÿÿã å
;ÿÿå ç
LogLog
ŸŸ 
.
ŸŸ 
Debug
ŸŸ 
(
ŸŸ 
declaringType
ŸŸ  
,
ŸŸ  !
$str
ŸŸ" :
+
ŸŸ: ;!
m_scheduledFilename
ŸŸ; N
+
ŸŸN O
$str
ŸŸO R
)
ŸŸR S
;
ŸŸS T
RollOverTime
⁄⁄ 
(
⁄⁄ 
false
⁄⁄ 
)
⁄⁄ 
;
⁄⁄ 
LogLog
€€ 
.
€€ 
Debug
€€ 
(
€€ 
declaringType
€€  
,
€€  !
$str
€€" J
+
€€J K"
m_curSizeRollBackups
€€K _
+
€€_ `
$str
€€` c
)
€€c d
;
€€d e
}
‹‹ 
}
›› 
}
ﬁﬁ 
}
ﬂﬂ 
	protected
ÓÓ 
void
ÓÓ 
ExistingInit
ÓÓ 
(
ÓÓ 
)
ÓÓ 
{
ÔÔ )
DetermineCurSizeRollBackups
 
(
 
)
  
;
  !,
RollOverIfDateBoundaryCrossing
ÒÒ !
(
ÒÒ! "
)
ÒÒ" #
;
ÒÒ# $
if
ÙÙ 
(
ÙÙ 
AppendToFile
ÙÙ 
==
ÙÙ 
false
ÙÙ 
)
ÙÙ 
{
ıı 
bool
ˆˆ 

fileExists
ˆˆ	 
=
ˆˆ 
false
ˆˆ 
;
ˆˆ 
string
˜˜ 

fileName
˜˜ 
=
˜˜ #
GetNextOutputFileName
˜˜ +
(
˜˜+ ,
m_baseFileName
˜˜, :
)
˜˜: ;
;
˜˜; <
using
˘˘ 	
(
˘˘	 

SecurityContext
˘˘
 
.
˘˘ 
Impersonate
˘˘ %
(
˘˘% &
this
˘˘& *
)
˘˘* +
)
˘˘+ ,
{
˙˙ 

fileExists
˚˚ 
=
˚˚ 
System
˚˚ 
.
˚˚ 
IO
˚˚ 
.
˚˚ 
File
˚˚  
.
˚˚  !
Exists
˚˚! '
(
˚˚' (
fileName
˚˚( 0
)
˚˚0 1
;
˚˚1 2
}
¸¸ 
if
˛˛ 
(
˛˛ 

fileExists
˛˛ 
)
˛˛ 
{
ˇˇ 
if
ÄÄ 
(
ÄÄ 	"
m_maxSizeRollBackups
ÄÄ	 
==
ÄÄ  
$num
ÄÄ! "
)
ÄÄ" #
{
ÅÅ 
LogLog
ÇÇ 
.
ÇÇ 
Debug
ÇÇ 
(
ÇÇ 
declaringType
ÇÇ  
,
ÇÇ  !
$str
ÇÇ" 1
+
ÇÇ1 2
fileName
ÇÇ2 :
+
ÇÇ: ;
$strÇÇ; è
)ÇÇè ê
;ÇÇê ë
}
ÉÉ 
else
ÑÑ 	
{
ÖÖ 
LogLog
ÜÜ 
.
ÜÜ 
Debug
ÜÜ 
(
ÜÜ 
declaringType
ÜÜ  
,
ÜÜ  !
$str
ÜÜ" 1
+
ÜÜ1 2
fileName
ÜÜ2 :
+
ÜÜ: ;
$strÜÜ; ã
)ÜÜã å
;ÜÜå ç!
RollOverRenameFiles
àà 
(
àà 
fileName
àà "
)
àà" #
;
àà# $
}
ââ 
}
ää 
}
ãã 
}
åå 
private
óó 	
void
óó
 #
InitializeFromOneFile
óó $
(
óó$ %
string
óó% +
baseFile
óó, 4
,
óó4 5
string
óó6 <
curFileName
óó= H
)
óóH I
{
òò 
if
ôô 
(
ôô 
curFileName
ôô 
.
ôô 

StartsWith
ôô &
(
ôô& '
Path
ôô' +
.
ôô+ ,)
GetFileNameWithoutExtension
ôô, G
(
ôôG H
baseFile
ôôH P
)
ôôP Q
)
ôôQ R
==
ôôS U
false
ôôV [
)
ôô[ \
{
öö 
return
úú 

;
úú
 
}
ùù 
if
ûû 
(
ûû 
curFileName
ûû 
.
ûû 
Equals
ûû 
(
ûû 
baseFile
ûû "
)
ûû" #
)
ûû# $
{
üü 
return
°° 

;
°°
 
}
¢¢ 
if
±± 
(
±± 

m_rollDate
±± 
&&
±± 
!
±± !
m_staticLogFileName
±± )
)
±±) *
{
≤≤ 
string
≥≥ 

date
≥≥ 
=
≥≥ 

m_dateTime
≥≥ 
.
≥≥ 
Now
≥≥  
.
≥≥  !
ToString
≥≥! )
(
≥≥) *
m_datePattern
≥≥* 7
,
≥≥7 8
System
≥≥9 ?
.
≥≥? @
Globalization
≥≥@ M
.
≥≥M N 
DateTimeFormatInfo
≥≥N `
.
≥≥` a
InvariantInfo
≥≥a n
)
≥≥n o
;
≥≥o p
string
¥¥ 

prefix
¥¥ 
=
¥¥ ,
m_preserveLogFileNameExtension
¥¥ 2
?
¥¥3 4
Path
¥¥5 9
.
¥¥9 :)
GetFileNameWithoutExtension
¥¥: U
(
¥¥U V
baseFile
¥¥V ^
)
¥¥^ _
+
¥¥` a
date
¥¥b f
:
¥¥g h
baseFile
¥¥i q
+
¥¥r s
date
¥¥t x
;
¥¥x y
string
µµ 

suffix
µµ 
=
µµ ,
m_preserveLogFileNameExtension
µµ 2
?
µµ3 4
Path
µµ5 9
.
µµ9 :
GetExtension
µµ: F
(
µµF G
baseFile
µµG O
)
µµO P
:
µµQ R
$str
µµS U
;
µµU V
if
∂∂ 
(
∂∂ 
!
∂∂ 	
curFileName
∂∂	 
.
∂∂ 

StartsWith
∂∂ 
(
∂∂  
prefix
∂∂  &
)
∂∂& '
||
∂∂( *
!
∂∂+ ,
curFileName
∂∂, 7
.
∂∂7 8
EndsWith
∂∂8 @
(
∂∂@ A
suffix
∂∂A G
)
∂∂G H
)
∂∂H I
{
∑∑ 
LogLog
∏∏ 
.
∏∏ 
Debug
∏∏ 
(
∏∏ 
declaringType
∏∏ 
,
∏∏  
$str
∏∏! 2
+
∏∏2 3
curFileName
∏∏3 >
+
∏∏> ?
$str
∏∏? m
)
∏∏m n
;
∏∏n o
return
ππ 
;
ππ 
}
∫∫ 
}
ªª 
try
ΩΩ 
{
ææ 
int
¿¿ 
backup
¿¿ 
=
¿¿ 
GetBackUpIndex
¿¿ +
(
¿¿+ ,
curFileName
¿¿, 7
)
¿¿7 8
;
¿¿8 9
if
∆∆ 
(
∆∆ 
backup
∆∆ 
>
∆∆ "
m_curSizeRollBackups
∆∆ 1
)
∆∆1 2
{
«« 
if
»» 
(
»» 
$num
»» 
==
»» "
m_maxSizeRollBackups
»» 1
)
»»1 2
{
…… 
}
ÀÀ 
else
ÃÃ 
if
ÃÃ 
(
ÃÃ 
-
ÃÃ 
$num
ÃÃ 
==
ÃÃ  ""
m_maxSizeRollBackups
ÃÃ# 7
)
ÃÃ7 8
{
ÕÕ "
m_curSizeRollBackups
œœ ,
=
œœ- .
backup
œœ/ 5
;
œœ5 6
}
–– 
else
—— 
{
““ 
if
‘‘ 
(
‘‘ 
m_countDirection
‘‘ ,
>=
‘‘- /
$num
‘‘0 1
)
‘‘1 2
{
’’ "
m_curSizeRollBackups
◊◊ 0
=
◊◊1 2
backup
◊◊3 9
;
◊◊9 :
}
ÿÿ 
else
ŸŸ 
{
⁄⁄ 
if
‹‹ 
(
‹‹  
backup
‹‹  &
<=
‹‹' )"
m_maxSizeRollBackups
‹‹* >
)
‹‹> ?
{
›› "
m_curSizeRollBackups
ﬁﬁ  4
=
ﬁﬁ5 6
backup
ﬁﬁ7 =
;
ﬁﬁ= >
}
ﬂﬂ 
}
‡‡ 
}
·· 
LogLog
‚‚ 
.
‚‚ 
Debug
‚‚  
(
‚‚  !
declaringType
‚‚! .
,
‚‚. /
$str
‚‚0 =
+
‚‚> ?
curFileName
‚‚@ K
+
‚‚L M
$str
‚‚N j
+
‚‚k l#
m_curSizeRollBackups‚‚m Å
+‚‚Ç É
$str‚‚Ñ á
)‚‚á à
;‚‚à â
}
„„ 
}
‰‰ 
catch
ÂÂ 
(
ÂÂ 	
FormatException
ÂÂ	 
)
ÂÂ 
{
ÊÊ 
LogLog
ÈÈ 

.
ÈÈ
 
Debug
ÈÈ 
(
ÈÈ 
declaringType
ÈÈ 
,
ÈÈ 
$str
ÈÈ  N
+
ÈÈN O
curFileName
ÈÈO Z
+
ÈÈZ [
$str
ÈÈ[ ^
)
ÈÈ^ _
;
ÈÈ_ `
}
ÍÍ 
}
ÎÎ 
private
ˆˆ 
int
ˆˆ 
GetBackUpIndex
ˆˆ 
(
ˆˆ  
string
ˆˆ  &
curFileName
ˆˆ' 2
)
ˆˆ2 3
{
˜˜ 
int
¯¯ 
backUpIndex
¯¯ 
=
¯¯ 
-
¯¯ 
$num
¯¯  
;
¯¯  !
string
˘˘ 
fileName
˘˘ 
=
˘˘ 
curFileName
˘˘ )
;
˘˘) *
if
˚˚ 
(
˚˚ ,
m_preserveLogFileNameExtension
˚˚ .
)
˚˚. /
{
¸¸ 
fileName
˝˝ 
=
˝˝ 
Path
˝˝ 
.
˝˝  )
GetFileNameWithoutExtension
˝˝  ;
(
˝˝; <
fileName
˝˝< D
)
˝˝D E
;
˝˝E F
}
˛˛ 
int
ÄÄ 
index
ÄÄ 
=
ÄÄ 
fileName
ÄÄ  
.
ÄÄ  !
LastIndexOf
ÄÄ! ,
(
ÄÄ, -
$str
ÄÄ- 0
)
ÄÄ0 1
;
ÄÄ1 2
if
ÅÅ 
(
ÅÅ 
index
ÅÅ 
>
ÅÅ 
$num
ÅÅ 
)
ÅÅ 
{
ÇÇ 

SystemInfo
ÖÖ 
.
ÖÖ 
TryParse
ÖÖ #
(
ÖÖ# $
fileName
ÖÖ$ ,
.
ÖÖ, -
	Substring
ÖÖ- 6
(
ÖÖ6 7
index
ÖÖ7 <
+
ÖÖ= >
$num
ÖÖ? @
)
ÖÖ@ A
,
ÖÖA B
out
ÖÖC F
backUpIndex
ÖÖG R
)
ÖÖR S
;
ÖÖS T
}
ÜÜ 
return
àà 
backUpIndex
àà 
;
àà 
}
ââ 
private
íí 	
void
íí
 #
InitializeRollBackups
íí $
(
íí$ %
string
íí% +
baseFile
íí, 4
,
íí4 5
	ArrayList
íí6 ?

arrayFiles
íí@ J
)
ííJ K
{
ìì 
if
îî 
(
îî 
null
îî 
!=
îî 

arrayFiles
îî 
)
îî 
{
ïï 
string
ññ 

baseFileLower
ññ 
=
ññ 
baseFile
ññ #
.
ññ# $
ToLower
ññ$ +
(
ññ+ ,
System
ññ, 2
.
ññ2 3
Globalization
ññ3 @
.
ññ@ A
CultureInfo
ññA L
.
ññL M
InvariantCulture
ññM ]
)
ññ] ^
;
ññ^ _
foreach
òò 
(
òò 
string
òò 
curFileName
òò 
in
òò !

arrayFiles
òò" ,
)
òò, -
{
ôô #
InitializeFromOneFile
öö 
(
öö 
baseFileLower
öö (
,
öö( )
curFileName
öö* 5
.
öö5 6
ToLower
öö6 =
(
öö= >
System
öö> D
.
ööD E
Globalization
ööE R
.
ööR S
CultureInfo
ööS ^
.
öö^ _
InvariantCulture
öö_ o
)
ööo p
)
ööp q
;
ööq r
}
õõ 
}
úú 
}
ùù 
private
¨¨ 	
	RollPoint
¨¨
  
ComputeCheckPeriod
¨¨ &
(
¨¨& '
string
¨¨' -
datePattern
¨¨. 9
)
¨¨9 :
{
≠≠ 
string
≥≥ 	
r0
≥≥
 
=
≥≥ 

s_date1970
≥≥ 
.
≥≥ 
ToString
≥≥ "
(
≥≥" #
datePattern
≥≥# .
,
≥≥. /
System
≥≥0 6
.
≥≥6 7
Globalization
≥≥7 D
.
≥≥D E 
DateTimeFormatInfo
≥≥E W
.
≥≥W X
InvariantInfo
≥≥X e
)
≥≥e f
;
≥≥f g
for
∂∂ 
(
∂∂ 
int
∂∂ 

i
∂∂ 
=
∂∂ 
(
∂∂ 
int
∂∂ 
)
∂∂ 
	RollPoint
∂∂ 
.
∂∂ 
TopOfMinute
∂∂ )
;
∂∂) *
i
∂∂+ ,
<=
∂∂- /
(
∂∂0 1
int
∂∂1 4
)
∂∂4 5
	RollPoint
∂∂5 >
.
∂∂> ?

TopOfMonth
∂∂? I
;
∂∂I J
i
∂∂K L
++
∂∂L N
)
∂∂N O
{
∑∑ 
string
ππ 

r1
ππ 
=
ππ 
NextCheckDate
ππ 
(
ππ 

s_date1970
ππ (
,
ππ( )
(
ππ* +
	RollPoint
ππ+ 4
)
ππ4 5
i
ππ5 6
)
ππ6 7
.
ππ7 8
ToString
ππ8 @
(
ππ@ A
datePattern
ππA L
,
ππL M
System
ππN T
.
ππT U
Globalization
ππU b
.
ππb c 
DateTimeFormatInfo
ππc u
.
ππu v
InvariantInfoππv É
)ππÉ Ñ
;ππÑ Ö
LogLog
ªª 

.
ªª
 
Debug
ªª 
(
ªª 
declaringType
ªª 
,
ªª 
$str
ªª  *
+
ªª* +
i
ªª+ ,
+
ªª, -
$str
ªª- 8
+
ªª8 9
r0
ªª9 ;
+
ªª; <
$str
ªª< G
+
ªªG H
r1
ªªH J
+
ªªJ K
$str
ªªK N
)
ªªN O
;
ªªO P
if
ææ 
(
ææ 
r0
ææ 

!=
ææ 
null
ææ 
&&
ææ 
r1
ææ 
!=
ææ 
null
ææ  
&&
ææ! #
!
ææ$ %
r0
ææ% '
.
ææ' (
Equals
ææ( .
(
ææ. /
r1
ææ/ 1
)
ææ1 2
)
ææ2 3
{
øø 
return
¡¡ 
(
¡¡ 
	RollPoint
¡¡ 
)
¡¡ 
i
¡¡ 
;
¡¡ 
}
¬¬ 
}
√√ 
return
≈≈ 	
	RollPoint
≈≈
 
.
≈≈ 
InvalidRollPoint
≈≈ $
;
≈≈$ %
}
∆∆ 
override
›› 

public
›› 
void
›› 
ActivateOptions
›› &
(
››& '
)
››' (
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 

m_dateTime
ﬂﬂ 
==
ﬂﬂ 
null
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 

m_dateTime
·· 
=
·· 
new
·· 
LocalDateTime
·· "
(
··" #
)
··# $
;
··$ %
}
‚‚ 
if
‰‰ 
(
‰‰ 

m_rollDate
‰‰ 
&&
‰‰ 
m_datePattern
‰‰ "
!=
‰‰# %
null
‰‰& *
)
‰‰* +
{
ÂÂ 
m_now
ÊÊ 	
=
ÊÊ
 

m_dateTime
ÊÊ 
.
ÊÊ 
Now
ÊÊ 
;
ÊÊ 
m_rollPoint
ÁÁ 
=
ÁÁ  
ComputeCheckPeriod
ÁÁ $
(
ÁÁ$ %
m_datePattern
ÁÁ% 2
)
ÁÁ2 3
;
ÁÁ3 4
if
ÈÈ 
(
ÈÈ 
m_rollPoint
ÈÈ 
==
ÈÈ 
	RollPoint
ÈÈ  
.
ÈÈ  !
InvalidRollPoint
ÈÈ! 1
)
ÈÈ1 2
{
ÍÍ 
throw
ÎÎ 

new
ÎÎ 
ArgumentException
ÎÎ  
(
ÎÎ  !
$str
ÎÎ! G
+
ÎÎG H
m_datePattern
ÎÎH U
+
ÎÎU V
$str
ÎÎV Y
)
ÎÎY Z
;
ÎÎZ [
}
ÏÏ 
m_nextCheck
ÔÔ 
=
ÔÔ 
NextCheckDate
ÔÔ 
(
ÔÔ  
m_now
ÔÔ  %
,
ÔÔ% &
m_rollPoint
ÔÔ' 2
)
ÔÔ2 3
;
ÔÔ3 4
}
 
else
ÒÒ 
{
ÚÚ 
if
ÛÛ 
(
ÛÛ 

m_rollDate
ÛÛ 
)
ÛÛ 
{
ÙÙ 
ErrorHandler
ıı 
.
ıı 
Error
ıı 
(
ıı 
$str
ıı V
+
ııV W
Name
ııW [
+
ıı[ \
$str
ıı\ `
)
ıı` a
;
ııa b
}
ˆˆ 
}
˜˜ 
if
˘˘ 
(
˘˘ 
SecurityContext
˘˘ 
==
˘˘ 
null
˘˘ 
)
˘˘ 
{
˙˙ 
SecurityContext
˚˚ 
=
˚˚ %
SecurityContextProvider
˚˚ -
.
˚˚- .
DefaultProvider
˚˚. =
.
˚˚= >#
CreateSecurityContext
˚˚> S
(
˚˚S T
this
˚˚T X
)
˚˚X Y
;
˚˚Y Z
}
¸¸ 
using
˛˛ 
(
˛˛ 	
SecurityContext
˛˛	 
.
˛˛ 
Impersonate
˛˛ $
(
˛˛$ %
this
˛˛% )
)
˛˛) *
)
˛˛* +
{
ˇˇ 
base
É	É	 
.
É	É	 	
File
É	É		 
=
É	É	 
ConvertToFullPath
É	É	 !
(
É	É	! "
base
É	É	" &
.
É	É	& '
File
É	É	' +
.
É	É	+ ,
Trim
É	É	, 0
(
É	É	0 1
)
É	É	1 2
)
É	É	2 3
;
É	É	3 4
m_baseFileName
Ü	Ü	 
=
Ü	Ü	 
base
Ü	Ü	 
.
Ü	Ü	 
File
Ü	Ü	 
;
Ü	Ü	 
}
á	á	 
m_mutexForRolling
ã	ã	 
=
ã	ã	 
new
ã	ã	 
Mutex
ã	ã	  
(
ã	ã	  !
false
ã	ã	! &
,
ã	ã	& '
m_baseFileName
ã	ã	( 6
.
ã	ã	6 7
Replace
ã	ã	7 >
(
ã	ã	> ?
$str
ã	ã	? C
,
ã	ã	C D
$str
ã	ã	E H
)
ã	ã	H I
.
ã	ã	I J
Replace
ã	ã	J Q
(
ã	ã	Q R
$str
ã	ã	R U
,
ã	ã	U V
$str
ã	ã	W Z
)
ã	ã	Z [
.
ã	ã	[ \
Replace
ã	ã	\ c
(
ã	ã	c d
$str
ã	ã	d g
,
ã	ã	g h
$str
ã	ã	i l
)
ã	ã	l m
)
ã	ã	m n
;
ã	ã	n o
if
é	é	 
(
é	é	 

m_rollDate
é	é	 
&&
é	é	 
File
é	é	 
!=
é	é	 
null
é	é	 !
&&
é	é	" $!
m_scheduledFilename
é	é	% 8
==
é	é	9 ;
null
é	é	< @
)
é	é	@ A
{
è	è	 !
m_scheduledFilename
ê	ê	 #
=
ê	ê	$ %
CombinePath
ê	ê	& 1
(
ê	ê	1 2
File
ê	ê	2 6
,
ê	ê	6 7
m_now
ê	ê	8 =
.
ê	ê	= >
ToString
ê	ê	> F
(
ê	ê	F G
m_datePattern
ê	ê	G T
,
ê	ê	T U
System
ê	ê	V \
.
ê	ê	\ ]
Globalization
ê	ê	] j
.
ê	ê	j k 
DateTimeFormatInfo
ê	ê	k }
.
ê	ê	} ~
InvariantInfoê	ê	~ ã
)ê	ê	ã å
)ê	ê	å ç
;ê	ê	ç é
}
ë	ë	 
ExistingInit
ì	ì	 
(
ì	ì	 
)
ì	ì	 
;
ì	ì	 
base
ï	ï	 
.
ï	ï	 
ActivateOptions
ï	ï	 
(
ï	ï	 
)
ï	ï	 
;
ï	ï	 
}
ñ	ñ	 
private
¢	¢	 
string
¢	¢	 
CombinePath
¢	¢	 "
(
¢	¢	" #
string
¢	¢	# )
path1
¢	¢	* /
,
¢	¢	/ 0
string
¢	¢	1 7
path2
¢	¢	8 =
)
¢	¢	= >
{
£	£	 	
string
§	§	 
	extension
§	§	 
=
§	§	 
Path
§	§	 #
.
§	§	# $
GetExtension
§	§	$ 0
(
§	§	0 1
path1
§	§	1 6
)
§	§	6 7
;
§	§	7 8
if
•	•	 
(
•	•	 ,
m_preserveLogFileNameExtension
•	•	 .
&&
•	•	/ 1
	extension
•	•	2 ;
.
•	•	; <
Length
•	•	< B
>
•	•	C D
$num
•	•	E F
)
•	•	F G
{
¶	¶	 
return
ß	ß	 
Path
ß	ß	 
.
ß	ß	 
Combine
ß	ß	 #
(
ß	ß	# $
Path
ß	ß	$ (
.
ß	ß	( )
GetDirectoryName
ß	ß	) 9
(
ß	ß	9 :
path1
ß	ß	: ?
)
ß	ß	? @
,
ß	ß	@ A
Path
ß	ß	B F
.
ß	ß	F G)
GetFileNameWithoutExtension
ß	ß	G b
(
ß	ß	b c
path1
ß	ß	c h
)
ß	ß	h i
+
ß	ß	j k
path2
ß	ß	l q
+
ß	ß	r s
	extension
ß	ß	t }
)
ß	ß	} ~
;
ß	ß	~ 
}
®	®	 
else
©	©	 
{
™	™	 
return
´	´	 
path1
´	´	 
+
´	´	 
path2
´	´	 $
;
´	´	$ %
}
¨	¨	 
}
≠	≠	 	
	protected
∫	∫	 
void
∫	∫	 
RollOverTime
∫	∫	 
(
∫	∫	 
bool
∫	∫	 "

fileIsOpen
∫	∫	# -
)
∫	∫	- .
{
ª	ª	 
if
º	º	 
(
º	º	 !
m_staticLogFileName
º	º	 
)
º	º	 
{
Ω	Ω	 
if
ø	ø	 
(
ø	ø	 
m_datePattern
ø	ø	 
==
ø	ø	 
null
ø	ø	 
)
ø	ø	 
{
¿	¿	 
ErrorHandler
¡	¡	 
.
¡	¡	 
Error
¡	¡	 
(
¡	¡	 
$str
¡	¡	 C
)
¡	¡	C D
;
¡	¡	D E
return
¬	¬	 
;
¬	¬	 
}
√	√	 
string
»	»	 


dateFormat
»	»	 
=
»	»	 
m_now
»	»	 
.
»	»	 
ToString
»	»	 &
(
»	»	& '
m_datePattern
»	»	' 4
,
»	»	4 5
System
»	»	6 <
.
»	»	< =
Globalization
»	»	= J
.
»	»	J K 
DateTimeFormatInfo
»	»	K ]
.
»	»	] ^
InvariantInfo
»	»	^ k
)
»	»	k l
;
»	»	l m
if
…	…	 
(
…	…	 !
m_scheduledFilename
…	…	 '
.
…	…	' (
Equals
…	…	( .
(
…	…	. /
CombinePath
…	…	/ :
(
…	…	: ;
File
…	…	; ?
,
…	…	? @

dateFormat
…	…	A K
)
…	…	K L
)
…	…	L M
)
…	…	M N
{
 	 	 
ErrorHandler
À	À	  
.
À	À	  !
Error
À	À	! &
(
À	À	& '
$str
À	À	' 1
+
À	À	2 3!
m_scheduledFilename
À	À	4 G
+
À	À	H I
$str
À	À	J O
+
À	À	P Q
CombinePath
À	À	R ]
(
À	À	] ^
File
À	À	^ b
,
À	À	b c

dateFormat
À	À	d n
)
À	À	n o
)
À	À	o p
;
À	À	p q
return
Ã	Ã	 
;
Ã	Ã	 
}
Õ	Õ	 
if
œ	œ	 
(
œ	œ	 

fileIsOpen
œ	œ	 
)
œ	œ	 
{
–	–	 
this
“	“	 	
.
“	“		 

	CloseFile
“	“	
 
(
“	“	 
)
“	“	 
;
“	“	 
}
”	”	 
for
÷	÷	 
(
÷	÷	 	
int
÷	÷		 
i
÷	÷	 
=
÷	÷	 
$num
÷	÷	 
;
÷	÷	 
i
÷	÷	 
<=
÷	÷	 "
m_curSizeRollBackups
÷	÷	 -
;
÷	÷	- .
i
÷	÷	/ 0
++
÷	÷	0 2
)
÷	÷	2 3
{
◊	◊	 
string
ÿ	ÿ	 
from
ÿ	ÿ	 
=
ÿ	ÿ	  !
CombinePath
ÿ	ÿ	" -
(
ÿ	ÿ	- .
File
ÿ	ÿ	. 2
,
ÿ	ÿ	2 3
$str
ÿ	ÿ	4 7
+
ÿ	ÿ	8 9
i
ÿ	ÿ	: ;
)
ÿ	ÿ	; <
;
ÿ	ÿ	< =
string
Ÿ	Ÿ	 
to
Ÿ	Ÿ	 
=
Ÿ	Ÿ	 
CombinePath
Ÿ	Ÿ	  +
(
Ÿ	Ÿ	+ ,!
m_scheduledFilename
Ÿ	Ÿ	, ?
,
Ÿ	Ÿ	? @
$str
Ÿ	Ÿ	A D
+
Ÿ	Ÿ	E F
i
Ÿ	Ÿ	G H
)
Ÿ	Ÿ	H I
;
Ÿ	Ÿ	I J
RollFile
⁄	⁄	 
(
⁄	⁄	 
from
⁄	⁄	 
,
⁄	⁄	 
to
⁄	⁄	 
)
⁄	⁄	 
;
⁄	⁄	 
}
€	€	 
RollFile
›	›	 
(
›	›	 
File
›	›	 
,
›	›	 !
m_scheduledFilename
›	›	 &
)
›	›	& '
;
›	›	' (
}
ﬁ	ﬁ	 "
m_curSizeRollBackups
·	·	 
=
·	·	 
$num
·	·	 
;
·	·	 !
m_scheduledFilename
‰	‰	 
=
‰	‰	  !
CombinePath
‰	‰	" -
(
‰	‰	- .
File
‰	‰	. 2
,
‰	‰	2 3
m_now
‰	‰	4 9
.
‰	‰	9 :
ToString
‰	‰	: B
(
‰	‰	B C
m_datePattern
‰	‰	C P
,
‰	‰	P Q
System
‰	‰	R X
.
‰	‰	X Y
Globalization
‰	‰	Y f
.
‰	‰	f g 
DateTimeFormatInfo
‰	‰	g y
.
‰	‰	y z
InvariantInfo‰	‰	z á
)‰	‰	á à
)‰	‰	à â
;‰	‰	â ä
if
Ê	Ê	 
(
Ê	Ê	 

fileIsOpen
Ê	Ê	 
)
Ê	Ê	 
{
Á	Á	 
SafeOpenFile
È	È	 
(
È	È	 
m_baseFileName
È	È	 
,
È	È	  
false
È	È	! &
)
È	È	& '
;
È	È	' (
}
Í	Í	 
}
Î	Î	 
	protected
¯	¯	 
void
¯	¯	 
RollFile
¯	¯	 
(
¯	¯	 
string
¯	¯	  
fromFile
¯	¯	! )
,
¯	¯	) *
string
¯	¯	+ 1
toFile
¯	¯	2 8
)
¯	¯	8 9
{
˘	˘	 
if
˙	˙	 
(
˙	˙	 

FileExists
˙	˙	 
(
˙	˙	 
fromFile
˙	˙	 
)
˙	˙	 
)
˙	˙	 
{
˚	˚	 

DeleteFile
˝	˝	 
(
˝	˝	 
toFile
˝	˝	 
)
˝	˝	 
;
˝	˝	 
try
Ä
Ä
 
{
Å
Å
 
LogLog
Ç
Ç
 
.
Ç
Ç
 
Debug
Ç
Ç
 
(
Ç
Ç
 
declaringType
Ç
Ç
 
,
Ç
Ç
  
$str
Ç
Ç
! +
+
Ç
Ç
, -
fromFile
Ç
Ç
. 6
+
Ç
Ç
7 8
$str
Ç
Ç
9 A
+
Ç
Ç
B C
toFile
Ç
Ç
D J
+
Ç
Ç
K L
$str
Ç
Ç
M P
)
Ç
Ç
P Q
;
Ç
Ç
Q R
using
É
É
 

(
É
É

 
SecurityContext
É
É
 
.
É
É
 
Impersonate
É
É
 &
(
É
É
& '
this
É
É
' +
)
É
É
+ ,
)
É
É
, -
{
Ñ
Ñ
 
System
Ö
Ö
 
.
Ö
Ö
 
IO
Ö
Ö
 
.
Ö
Ö
 
File
Ö
Ö
 
.
Ö
Ö
 
Move
Ö
Ö
 
(
Ö
Ö
 
fromFile
Ö
Ö
 "
,
Ö
Ö
" #
toFile
Ö
Ö
$ *
)
Ö
Ö
* +
;
Ö
Ö
+ ,
}
Ü
Ü
 
}
á
á
 
catch
à
à
 	
(
à
à
	 

	Exception
à
à

 
moveEx
à
à
 
)
à
à
 
{
â
â
 
ErrorHandler
ä
ä
 
.
ä
ä
 
Error
ä
ä
 
(
ä
ä
 
$str
ä
ä
 8
+
ä
ä
9 :
fromFile
ä
ä
; C
+
ä
ä
D E
$str
ä
ä
F N
+
ä
ä
O P
toFile
ä
ä
Q W
+
ä
ä
X Y
$str
ä
ä
Z ]
,
ä
ä
] ^
moveEx
ä
ä
_ e
,
ä
ä
e f
	ErrorCode
ä
ä
g p
.
ä
ä
p q
GenericFailure
ä
ä
q 
)ä
ä
 Ä
;ä
ä
Ä Å
}
ã
ã
 
}
å
å
 
else
ç
ç
 
{
é
é
 
LogLog
è
è
 

.
è
è

 
Warn
è
è
 
(
è
è
 
declaringType
è
è
 
,
è
è
 
$str
è
è
 2
+
è
è
3 4
fromFile
è
è
5 =
+
è
è
> ?
$str
è
è
@ H
+
è
è
I J
toFile
è
è
K Q
+
è
è
R S
$str
è
è
T n
)
è
è
n o
;
è
è
o p
}
ê
ê
 
}
ë
ë
 
	protected
ù
ù
 
bool
ù
ù
 

FileExists
ù
ù
 
(
ù
ù
 
string
ù
ù
 "
path
ù
ù
# '
)
ù
ù
' (
{
û
û
 
using
ü
ü
 
(
ü
ü
 	
SecurityContext
ü
ü
	 
.
ü
ü
 
Impersonate
ü
ü
 $
(
ü
ü
$ %
this
ü
ü
% )
)
ü
ü
) *
)
ü
ü
* +
{
†
†
 
return
°
°
 

System
°
°
 
.
°
°
 
IO
°
°
 
.
°
°
 
File
°
°
 
.
°
°
 
Exists
°
°
  
(
°
°
  !
path
°
°
! %
)
°
°
% &
;
°
°
& '
}
¢
¢
 
}
£
£
 
	protected
±
±
 
void
±
±
 

DeleteFile
±
±
 
(
±
±
 
string
±
±
 "
fileName
±
±
# +
)
±
±
+ ,
{
≤
≤
 
if
≥
≥
 
(
≥
≥
 

FileExists
≥
≥
 
(
≥
≥
 
fileName
≥
≥
 
)
≥
≥
 
)
≥
≥
 
{
¥
¥
 
string
∑
∑
 

fileToDelete
∑
∑
 
=
∑
∑
 
fileName
∑
∑
 "
;
∑
∑
" #
string
ª
ª
 

tempFileName
ª
ª
 
=
ª
ª
 
fileName
ª
ª
 "
+
ª
ª
# $
$str
ª
ª
% (
+
ª
ª
) *
Environment
ª
ª
+ 6
.
ª
ª
6 7
	TickCount
ª
ª
7 @
+
ª
ª
A B
$str
ª
ª
C S
;
ª
ª
S T
try
º
º
 
{
Ω
Ω
 
using
æ
æ
 

(
æ
æ

 
SecurityContext
æ
æ
 
.
æ
æ
 
Impersonate
æ
æ
 &
(
æ
æ
& '
this
æ
æ
' +
)
æ
æ
+ ,
)
æ
æ
, -
{
ø
ø
 
System
¿
¿
 
.
¿
¿
 
IO
¿
¿
 
.
¿
¿
 
File
¿
¿
 
.
¿
¿
 
Move
¿
¿
 
(
¿
¿
 
fileName
¿
¿
 "
,
¿
¿
" #
tempFileName
¿
¿
$ 0
)
¿
¿
0 1
;
¿
¿
1 2
}
¡
¡
 
fileToDelete
¬
¬
 
=
¬
¬
 
tempFileName
¬
¬
  
;
¬
¬
  !
}
√
√
 
catch
ƒ
ƒ
 	
(
ƒ
ƒ
	 

	Exception
ƒ
ƒ

 
moveEx
ƒ
ƒ
 
)
ƒ
ƒ
 
{
≈
≈
 
LogLog
∆
∆
 
.
∆
∆
 
Debug
∆
∆
 
(
∆
∆
 
declaringType
∆
∆
 
,
∆
∆
  
$str
∆
∆
! N
+
∆
∆
O P
fileName
∆
∆
Q Y
+
∆
∆
Z [
$str
∆
∆
\ d
+
∆
∆
e f
tempFileName
∆
∆
g s
+
∆
∆
t u
$str
∆
∆
v y
,
∆
∆
y z
moveEx∆
∆
{ Å
)∆
∆
Å Ç
;∆
∆
Ç É
}
«
«
 
try
 
 
 
{
À
À
 
using
Ã
Ã
 

(
Ã
Ã

 
SecurityContext
Ã
Ã
 
.
Ã
Ã
 
Impersonate
Ã
Ã
 &
(
Ã
Ã
& '
this
Ã
Ã
' +
)
Ã
Ã
+ ,
)
Ã
Ã
, -
{
Õ
Õ
 
System
Œ
Œ
 
.
Œ
Œ
 
IO
Œ
Œ
 
.
Œ
Œ
 
File
Œ
Œ
 
.
Œ
Œ
 
Delete
Œ
Œ
 
(
Œ
Œ
 
fileToDelete
Œ
Œ
 (
)
Œ
Œ
( )
;
Œ
Œ
) *
}
œ
œ
 
LogLog
–
–
 
.
–
–
 
Debug
–
–
 
(
–
–
 
declaringType
–
–
 
,
–
–
  
$str
–
–
! 1
+
–
–
2 3
fileName
–
–
4 <
+
–
–
= >
$str
–
–
? B
)
–
–
B C
;
–
–
C D
}
—
—
 
catch
“
“
 	
(
“
“
	 

	Exception
“
“

 
deleteEx
“
“
 
)
“
“
 
{
”
”
 
if
‘
‘
 
(
‘
‘
 	
fileToDelete
‘
‘
	 
==
‘
‘
 
fileName
‘
‘
 !
)
‘
‘
! "
{
’
’
 
ErrorHandler
◊
◊
 
.
◊
◊
 
Error
◊
◊
 
(
◊
◊
 
$str
◊
◊
 :
+
◊
◊
; <
fileToDelete
◊
◊
= I
+
◊
◊
J K
$str
◊
◊
L O
,
◊
◊
O P
deleteEx
◊
◊
Q Y
,
◊
◊
Y Z
	ErrorCode
◊
◊
[ d
.
◊
◊
d e
GenericFailure
◊
◊
e s
)
◊
◊
s t
;
◊
◊
t u
}
ÿ
ÿ
 
else
Ÿ
Ÿ
 	
{
⁄
⁄
 
LogLog
›
›
 
.
›
›
 
Debug
›
›
 
(
›
›
 
declaringType
›
›
  
,
›
›
  !
$str
›
›
" H
+
›
›
I J
fileToDelete
›
›
K W
+
›
›
X Y
$str
›
›
Z ]
,
›
›
] ^
deleteEx
›
›
_ g
)
›
›
g h
;
›
›
h i
}
ﬁ
ﬁ
 
}
ﬂ
ﬂ
 
}
‡
‡
 
}
·
·
 
	protected
˝
˝
 
void
˝
˝
 
RollOverSize
˝
˝
 
(
˝
˝
 
)
˝
˝
 
{
˛
˛
 
this
ˇ
ˇ
 
.
ˇ
ˇ
 
	CloseFile
ˇ
ˇ
 
(
ˇ
ˇ
 
)
ˇ
ˇ
 
;
ˇ
ˇ
 
LogLog
ÅÅ 	
.
ÅÅ	 

Debug
ÅÅ
 
(
ÅÅ 
declaringType
ÅÅ 
,
ÅÅ 
$str
ÅÅ 5
+
ÅÅ5 6
(
ÅÅ6 7
(
ÅÅ7 8%
CountingQuietTextWriter
ÅÅ8 O
)
ÅÅO P
QuietWriter
ÅÅP [
)
ÅÅ[ \
.
ÅÅ\ ]
Count
ÅÅ] b
+
ÅÅb c
$str
ÅÅc f
)
ÅÅf g
;
ÅÅg h
LogLog
ÇÇ 	
.
ÇÇ	 

Debug
ÇÇ
 
(
ÇÇ 
declaringType
ÇÇ 
,
ÇÇ 
$str
ÇÇ 5
+
ÇÇ5 6"
m_maxSizeRollBackups
ÇÇ6 J
+
ÇÇJ K
$str
ÇÇK N
)
ÇÇN O
;
ÇÇO P
LogLog
ÉÉ 	
.
ÉÉ	 

Debug
ÉÉ
 
(
ÉÉ 
declaringType
ÉÉ 
,
ÉÉ 
$str
ÉÉ 5
+
ÉÉ5 6"
m_curSizeRollBackups
ÉÉ6 J
+
ÉÉJ K
$str
ÉÉK N
)
ÉÉN O
;
ÉÉO P
LogLog
ÑÑ 	
.
ÑÑ	 

Debug
ÑÑ
 
(
ÑÑ 
declaringType
ÑÑ 
,
ÑÑ 
$str
ÑÑ 1
+
ÑÑ1 2
m_countDirection
ÑÑ2 B
+
ÑÑB C
$str
ÑÑC F
)
ÑÑF G
;
ÑÑG H!
RollOverRenameFiles
ÜÜ 
(
ÜÜ 
File
ÜÜ 
)
ÜÜ 
;
ÜÜ 
if
àà 
(
àà 
!
àà !
m_staticLogFileName
àà 
&&
àà 
m_countDirection
àà /
>=
àà0 2
$num
àà3 4
)
àà4 5
{
ââ "
m_curSizeRollBackups
ää 
++
ää 
;
ää 
}
ãã 
SafeOpenFile
éé 
(
éé 
m_baseFileName
éé 
,
éé 
false
éé  %
)
éé% &
;
éé& '
}
èè 
	protected
´´ 
void
´´ !
RollOverRenameFiles
´´ $
(
´´$ %
string
´´% +
baseFileName
´´, 8
)
´´8 9
{
¨¨ 
if
ÆÆ 
(
ÆÆ "
m_maxSizeRollBackups
ÆÆ 
!=
ÆÆ 
$num
ÆÆ  
)
ÆÆ  !
{
ØØ 
if
∞∞ 
(
∞∞ 
m_countDirection
∞∞ 
<
∞∞ 
$num
∞∞ 
)
∞∞ 
{
±± 
if
≥≥ 
(
≥≥ 	"
m_curSizeRollBackups
≥≥	 
==
≥≥  "
m_maxSizeRollBackups
≥≥! 5
)
≥≥5 6
{
¥¥ 

DeleteFile
µµ "
(
µµ" #
CombinePath
µµ# .
(
µµ. /
baseFileName
µµ/ ;
,
µµ; <
$str
µµ= @
+
µµA B"
m_maxSizeRollBackups
µµC W
)
µµW X
)
µµX Y
;
µµY Z"
m_curSizeRollBackups
∂∂ 
--
∂∂ 
;
∂∂ 
}
∑∑ 
for
∫∫ 
(
∫∫	 

int
∫∫
 
i
∫∫ 
=
∫∫ "
m_curSizeRollBackups
∫∫ &
;
∫∫& '
i
∫∫( )
>=
∫∫* ,
$num
∫∫- .
;
∫∫. /
i
∫∫0 1
--
∫∫1 3
)
∫∫3 4
{
ªª 
RollFile
ºº  
(
ºº  !
(
ºº! "
CombinePath
ºº" -
(
ºº- .
baseFileName
ºº. :
,
ºº: ;
$str
ºº< ?
+
ºº@ A
i
ººB C
)
ººC D
)
ººD E
,
ººE F
(
ººG H
CombinePath
ººH S
(
ººS T
baseFileName
ººT `
,
ºº` a
$str
ººb e
+
ººf g
(
ººh i
i
ººi j
+
ººk l
$num
ººm n
)
ººn o
)
ººo p
)
ººp q
)
ººq r
;
ººr s
}
ΩΩ "
m_curSizeRollBackups
øø 
++
øø 
;
øø 
RollFile
¬¬ 
(
¬¬ 
baseFileName
¬¬ )
,
¬¬) *
CombinePath
¬¬+ 6
(
¬¬6 7
baseFileName
¬¬7 C
,
¬¬C D
$str
¬¬E I
)
¬¬I J
)
¬¬J K
;
¬¬K L
}
√√ 
else
ƒƒ 
{
≈≈ 
if
«« 
(
«« 	"
m_curSizeRollBackups
««	 
>=
««  "
m_maxSizeRollBackups
««! 5
&&
««6 8"
m_maxSizeRollBackups
««9 M
>
««N O
$num
««P Q
)
««Q R
{
»» 
int
   	
oldestFileIndex
  
 
=
   "
m_curSizeRollBackups
   0
-
  1 2"
m_maxSizeRollBackups
  3 G
;
  G H
if
ÕÕ 
(
ÕÕ	 
!
m_staticLogFileName
ÕÕ
 
)
ÕÕ 
{
ŒŒ 
oldestFileIndex
œœ 
++
œœ 
;
œœ 
}
–– 
string
’’ !
archiveFileBaseName
’’  
=
’’! "
baseFileName
’’# /
;
’’/ 0
if
÷÷ 
(
÷÷	 

!
÷÷
 !
m_staticLogFileName
÷÷ 
)
÷÷ 
{
◊◊ 
int
ÿÿ 

lastDotIndex
ÿÿ 
=
ÿÿ !
archiveFileBaseName
ÿÿ -
.
ÿÿ- .
LastIndexOf
ÿÿ. 9
(
ÿÿ9 :
$str
ÿÿ: =
)
ÿÿ= >
;
ÿÿ> ?
if
ŸŸ 	
(
ŸŸ
 
lastDotIndex
ŸŸ 
>=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
{
⁄⁄ !
archiveFileBaseName
€€ 
=
€€ !
archiveFileBaseName
€€ 1
.
€€1 2
	Substring
€€2 ;
(
€€; <
$num
€€< =
,
€€= >
lastDotIndex
€€? K
)
€€K L
;
€€L M
}
‹‹ 
}
›› 

DeleteFile
‡‡ "
(
‡‡" #
CombinePath
‡‡# .
(
‡‡. /!
archiveFileBaseName
‡‡/ B
,
‡‡B C
$str
‡‡D G
+
‡‡H I
oldestFileIndex
‡‡J Y
)
‡‡Y Z
)
‡‡Z [
;
‡‡[ \
}
·· 
if
„„ 
(
„„ 	!
m_staticLogFileName
„„	 
)
„„ 
{
‰‰ "
m_curSizeRollBackups
ÂÂ 
++
ÂÂ 
;
ÂÂ 
RollFile
ÊÊ  
(
ÊÊ  !
baseFileName
ÊÊ! -
,
ÊÊ- .
CombinePath
ÊÊ/ :
(
ÊÊ: ;
baseFileName
ÊÊ; G
,
ÊÊG H
$str
ÊÊI L
+
ÊÊM N"
m_curSizeRollBackups
ÊÊO c
)
ÊÊc d
)
ÊÊd e
;
ÊÊe f
}
ÁÁ 
}
ËË 
}
ÈÈ 
}
ÍÍ 
	protected
ÅÅ 
DateTime
ÅÅ 
NextCheckDate
ÅÅ "
(
ÅÅ" #
DateTime
ÅÅ# +
currentDateTime
ÅÅ, ;
,
ÅÅ; <
	RollPoint
ÅÅ= F
	rollPoint
ÅÅG P
)
ÅÅP Q
{
ÇÇ 
DateTime
ÑÑ 
current
ÑÑ 
=
ÑÑ 
currentDateTime
ÑÑ %
;
ÑÑ% &
switch
áá 	
(
áá	 

	rollPoint
áá
 
)
áá 
{
àà 
case
ââ 
	RollPoint
ââ	 
.
ââ 
TopOfMinute
ââ 
:
ââ 
current
ää 
=
ää 
current
ää 
.
ää 
AddMilliseconds
ää &
(
ää& '
-
ää' (
current
ää( /
.
ää/ 0
Millisecond
ää0 ;
)
ää; <
;
ää< =
current
ãã 
=
ãã 
current
ãã 
.
ãã 

AddSeconds
ãã !
(
ãã! "
-
ãã" #
current
ãã# *
.
ãã* +
Second
ãã+ 1
)
ãã1 2
;
ãã2 3
current
åå 
=
åå 
current
åå 
.
åå 

AddMinutes
åå !
(
åå! "
$num
åå" #
)
åå# $
;
åå$ %
break
çç 

;
çç
 
case
èè 
	RollPoint
èè	 
.
èè 
	TopOfHour
èè 
:
èè 
current
êê 
=
êê 
current
êê 
.
êê 
AddMilliseconds
êê &
(
êê& '
-
êê' (
current
êê( /
.
êê/ 0
Millisecond
êê0 ;
)
êê; <
;
êê< =
current
ëë 
=
ëë 
current
ëë 
.
ëë 

AddSeconds
ëë !
(
ëë! "
-
ëë" #
current
ëë# *
.
ëë* +
Second
ëë+ 1
)
ëë1 2
;
ëë2 3
current
íí 
=
íí 
current
íí 
.
íí 

AddMinutes
íí !
(
íí! "
-
íí" #
current
íí# *
.
íí* +
Minute
íí+ 1
)
íí1 2
;
íí2 3
current
ìì 
=
ìì 
current
ìì 
.
ìì 
AddHours
ìì 
(
ìì  
$num
ìì  !
)
ìì! "
;
ìì" #
break
îî 

;
îî
 
case
ññ 
	RollPoint
ññ	 
.
ññ 
HalfDay
ññ 
:
ññ 
current
óó 
=
óó 
current
óó 
.
óó 
AddMilliseconds
óó &
(
óó& '
-
óó' (
current
óó( /
.
óó/ 0
Millisecond
óó0 ;
)
óó; <
;
óó< =
current
òò 
=
òò 
current
òò 
.
òò 

AddSeconds
òò !
(
òò! "
-
òò" #
current
òò# *
.
òò* +
Second
òò+ 1
)
òò1 2
;
òò2 3
current
ôô 
=
ôô 
current
ôô 
.
ôô 

AddMinutes
ôô !
(
ôô! "
-
ôô" #
current
ôô# *
.
ôô* +
Minute
ôô+ 1
)
ôô1 2
;
ôô2 3
if
õõ 
(
õõ 	
current
õõ	 
.
õõ 
Hour
õõ 
<
õõ 
$num
õõ 
)
õõ 
{
úú 
current
ùù 
=
ùù 
current
ùù 
.
ùù 
AddHours
ùù  
(
ùù  !
$num
ùù! #
-
ùù$ %
current
ùù& -
.
ùù- .
Hour
ùù. 2
)
ùù2 3
;
ùù3 4
}
ûû 
else
üü 	
{
†† 
current
°° 
=
°° 
current
°° 
.
°° 
AddHours
°°  
(
°°  !
-
°°! "
current
°°" )
.
°°) *
Hour
°°* .
)
°°. /
;
°°/ 0
current
¢¢ 
=
¢¢ 
current
¢¢ 
.
¢¢ 
AddDays
¢¢ 
(
¢¢  
$num
¢¢  !
)
¢¢! "
;
¢¢" #
}
££ 
break
§§ 

;
§§
 
case
¶¶ 
	RollPoint
¶¶	 
.
¶¶ 
TopOfDay
¶¶ 
:
¶¶ 
current
ßß 
=
ßß 
current
ßß 
.
ßß 
AddMilliseconds
ßß &
(
ßß& '
-
ßß' (
current
ßß( /
.
ßß/ 0
Millisecond
ßß0 ;
)
ßß; <
;
ßß< =
current
®® 
=
®® 
current
®® 
.
®® 

AddSeconds
®® !
(
®®! "
-
®®" #
current
®®# *
.
®®* +
Second
®®+ 1
)
®®1 2
;
®®2 3
current
©© 
=
©© 
current
©© 
.
©© 

AddMinutes
©© !
(
©©! "
-
©©" #
current
©©# *
.
©©* +
Minute
©©+ 1
)
©©1 2
;
©©2 3
current
™™ 
=
™™ 
current
™™ 
.
™™ 
AddHours
™™ 
(
™™  
-
™™  !
current
™™! (
.
™™( )
Hour
™™) -
)
™™- .
;
™™. /
current
´´ 
=
´´ 
current
´´ 
.
´´ 
AddDays
´´ 
(
´´ 
$num
´´  
)
´´  !
;
´´! "
break
¨¨ 

;
¨¨
 
case
ÆÆ 
	RollPoint
ÆÆ	 
.
ÆÆ 
	TopOfWeek
ÆÆ 
:
ÆÆ 
current
ØØ 
=
ØØ 
current
ØØ 
.
ØØ 
AddMilliseconds
ØØ &
(
ØØ& '
-
ØØ' (
current
ØØ( /
.
ØØ/ 0
Millisecond
ØØ0 ;
)
ØØ; <
;
ØØ< =
current
∞∞ 
=
∞∞ 
current
∞∞ 
.
∞∞ 

AddSeconds
∞∞ !
(
∞∞! "
-
∞∞" #
current
∞∞# *
.
∞∞* +
Second
∞∞+ 1
)
∞∞1 2
;
∞∞2 3
current
±± 
=
±± 
current
±± 
.
±± 

AddMinutes
±± !
(
±±! "
-
±±" #
current
±±# *
.
±±* +
Minute
±±+ 1
)
±±1 2
;
±±2 3
current
≤≤ 
=
≤≤ 
current
≤≤ 
.
≤≤ 
AddHours
≤≤ 
(
≤≤  
-
≤≤  !
current
≤≤! (
.
≤≤( )
Hour
≤≤) -
)
≤≤- .
;
≤≤. /
current
≥≥ 
=
≥≥ 
current
≥≥ 
.
≥≥ 
AddDays
≥≥ 
(
≥≥ 
$num
≥≥  
-
≥≥! "
(
≥≥# $
int
≥≥$ '
)
≥≥' (
current
≥≥( /
.
≥≥/ 0
	DayOfWeek
≥≥0 9
)
≥≥9 :
;
≥≥: ;
break
¥¥ 

;
¥¥
 
case
∂∂ 
	RollPoint
∂∂	 
.
∂∂ 

TopOfMonth
∂∂ 
:
∂∂ 
current
∑∑ 
=
∑∑ 
current
∑∑ 
.
∑∑ 
AddMilliseconds
∑∑ &
(
∑∑& '
-
∑∑' (
current
∑∑( /
.
∑∑/ 0
Millisecond
∑∑0 ;
)
∑∑; <
;
∑∑< =
current
∏∏ 
=
∏∏ 
current
∏∏ 
.
∏∏ 

AddSeconds
∏∏ !
(
∏∏! "
-
∏∏" #
current
∏∏# *
.
∏∏* +
Second
∏∏+ 1
)
∏∏1 2
;
∏∏2 3
current
ππ 
=
ππ 
current
ππ 
.
ππ 

AddMinutes
ππ !
(
ππ! "
-
ππ" #
current
ππ# *
.
ππ* +
Minute
ππ+ 1
)
ππ1 2
;
ππ2 3
current
∫∫ 
=
∫∫ 
current
∫∫ 
.
∫∫ 
AddHours
∫∫ 
(
∫∫  
-
∫∫  !
current
∫∫! (
.
∫∫( )
Hour
∫∫) -
)
∫∫- .
;
∫∫. /
current
ªª 
=
ªª 
current
ªª 
.
ªª 
AddDays
ªª 
(
ªª 
$num
ªª  
-
ªª! "
current
ªª# *
.
ªª* +
Day
ªª+ .
)
ªª. /
;
ªª/ 0
current
ºº 
=
ºº 
current
ºº 
.
ºº 
	AddMonths
ºº  
(
ºº  !
$num
ºº! "
)
ºº" #
;
ºº# $
break
ΩΩ 

;
ΩΩ
 
}
ææ 
return
øø 	
current
øø
 
;
øø 
}
¿¿ 
private
ÀÀ 	
	IDateTime
ÀÀ
 

m_dateTime
ÀÀ 
=
ÀÀ  
null
ÀÀ! %
;
ÀÀ% &
private
—— 	
string
——
 
m_datePattern
—— 
=
——  
$str
——! .
;
——. /
private
ÿÿ 	
string
ÿÿ
 !
m_scheduledFilename
ÿÿ $
=
ÿÿ% &
null
ÿÿ' +
;
ÿÿ+ ,
private
›› 	
DateTime
››
 
m_nextCheck
›› 
=
››  
DateTime
››! )
.
››) *
MaxValue
››* 2
;
››2 3
private
‚‚ 	
DateTime
‚‚
 
m_now
‚‚ 
;
‚‚ 
private
ÁÁ 	
	RollPoint
ÁÁ
 
m_rollPoint
ÁÁ 
;
ÁÁ  
private
ÏÏ 	
long
ÏÏ
 
m_maxFileSize
ÏÏ 
=
ÏÏ 
$num
ÏÏ !
*
ÏÏ! "
$num
ÏÏ" &
*
ÏÏ& '
$num
ÏÏ' +
;
ÏÏ+ ,
private
ÒÒ 	
int
ÒÒ
 "
m_maxSizeRollBackups
ÒÒ "
=
ÒÒ$ %
$num
ÒÒ& '
;
ÒÒ' (
private
ˆˆ 	
int
ˆˆ
 "
m_curSizeRollBackups
ˆˆ "
=
ˆˆ# $
$num
ˆˆ% &
;
ˆˆ& '
private
˚˚ 	
int
˚˚
 
m_countDirection
˚˚ 
=
˚˚  
-
˚˚! "
$num
˚˚" #
;
˚˚# $
private
ÄÄ 	
RollingMode
ÄÄ
 
m_rollingStyle
ÄÄ $
=
ÄÄ% &
RollingMode
ÄÄ' 2
.
ÄÄ2 3
	Composite
ÄÄ3 <
;
ÄÄ< =
private
ÖÖ 	
bool
ÖÖ
 

m_rollDate
ÖÖ 
=
ÖÖ 
true
ÖÖ  
;
ÖÖ  !
private
ää 	
bool
ää
 

m_rollSize
ää 
=
ää 
true
ää  
;
ää  !
private
èè 	
bool
èè
 !
m_staticLogFileName
èè "
=
èè# $
true
èè% )
;
èè) *
private
îî 	
bool
îî
 ,
m_preserveLogFileNameExtension
îî -
=
îî. /
false
îî0 5
;
îî5 6
private
öö 	
string
öö
 
m_baseFileName
öö 
;
öö  
private
†† 	
Mutex
††
 
m_mutexForRolling
†† !
;
††! "
private
™™ 	
static
™™
 
readonly
™™ 
DateTime
™™ "

s_date1970
™™# -
=
™™. /
new
™™0 3
DateTime
™™4 <
(
™™< =
$num
™™= A
,
™™A B
$num
™™C D
,
™™D E
$num
™™F G
)
™™G H
;
™™H I
public
∏∏ 
	interface
∏∏	 
	IDateTime
∏∏ 
{
ππ 
DateTime
√√ 
Now
√√ 
{
√√ 
get
√√ 
;
√√ 
}
√√ 
}
ƒƒ 
private
…… 	
class
……
 
LocalDateTime
…… 
:
…… 
	IDateTime
……  )
{
   
public
‘‘ 	
DateTime
‘‘
 
Now
‘‘ 
{
’’ 
get
÷÷ 
{
÷÷ 	
return
÷÷
 
DateTime
÷÷ 
.
÷÷ 
Now
÷÷ 
;
÷÷ 
}
÷÷  
}
◊◊ 
}
ÿÿ 
private
ﬁﬁ 	
class
ﬁﬁ
 
UniversalDateTime
ﬁﬁ !
:
ﬁﬁ" #
	IDateTime
ﬁﬁ$ -
{
ﬂﬂ 
public
ÈÈ 	
DateTime
ÈÈ
 
Now
ÈÈ 
{
ÍÍ 
get
ÎÎ 
{
ÎÎ 	
return
ÎÎ
 
DateTime
ÎÎ 
.
ÎÎ 
UtcNow
ÎÎ  
;
ÎÎ  !
}
ÎÎ" #
}
ÏÏ 
}
ÌÌ 
}
ÒÒ 
}ÚÚ ®Ç
@C:\sonarqube\projects\log4net-2.0.7\src\Appender\SmtpAppender.cs
	namespace&& 	
log4net&&
 
.&& 
Appender&& 
{'' 
publicHH 
classHH 
SmtpAppenderHH 
:HH %
BufferingAppenderSkeletonHH 6
{II 
publicTT 
SmtpAppenderTT	 
(TT 
)TT 
{UU 
}VV 
publicoo 
stringoo	 
Tooo 
{pp 
getqq 
{qq 
returnqq	 
m_toqq 
;qq 
}qq 
setrr 
{rr 
m_torr	 
=rr 
MaybeTrimSeparatorsrr #
(rr# $
valuerr$ )
)rr) *
;rr* +
}rr, -
}ss 
public
ââ 
string
ââ 
Cc
ââ 
{
ää 	
get
ãã 
{
ãã 
return
ãã 
m_cc
ãã 
;
ãã 
}
ãã  
set
åå 
{
åå 
m_cc
åå 
=
åå !
MaybeTrimSeparators
åå ,
(
åå, -
value
åå- 2
)
åå2 3
;
åå3 4
}
åå5 6
}
çç 	
public
õõ 
string
õõ 
Bcc
õõ 
{
úú 	
get
ùù 
{
ùù 
return
ùù 
m_bcc
ùù 
;
ùù 
}
ùù  !
set
ûû 
{
ûû 
m_bcc
ûû 
=
ûû !
MaybeTrimSeparators
ûû -
(
ûû- .
value
ûû. 3
)
ûû3 4
;
ûû4 5
}
ûû6 7
}
üü 	
public
¨¨ 
string
¨¨	 
From
¨¨ 
{
≠≠ 
get
ÆÆ 
{
ÆÆ 
return
ÆÆ	 
m_from
ÆÆ 
;
ÆÆ 
}
ÆÆ 
set
ØØ 
{
ØØ 
m_from
ØØ	 
=
ØØ 
value
ØØ 
;
ØØ 
}
ØØ 
}
∞∞ 
public
ΩΩ 
string
ΩΩ	 
Subject
ΩΩ 
{
ææ 
get
øø 
{
øø 
return
øø	 
	m_subject
øø 
;
øø 
}
øø 
set
¿¿ 
{
¿¿ 
	m_subject
¿¿	 
=
¿¿ 
value
¿¿ 
;
¿¿ 
}
¿¿ 
}
¡¡ 
public
—— 
string
——	 
SmtpHost
—— 
{
““ 
get
”” 
{
”” 
return
””	 

m_smtpHost
”” 
;
”” 
}
”” 
set
‘‘ 
{
‘‘ 

m_smtpHost
‘‘	 
=
‘‘ 
value
‘‘ 
;
‘‘ 
}
‘‘ 
}
’’ 
[
‚‚ 
Obsolete
‚‚ 
(
‚‚ 
$str
‚‚ ;
)
‚‚; <
]
‚‚< =
public
„„ 
bool
„„	 
LocationInfo
„„ 
{
‰‰ 
get
ÂÂ 
{
ÂÂ 
return
ÂÂ	 
false
ÂÂ 
;
ÂÂ 
}
ÂÂ 
set
ÊÊ 
{
ÊÊ 
;
ÊÊ	 

}
ÊÊ 
}
ÁÁ 
public
¯¯  
SmtpAuthentication
¯¯	 
Authentication
¯¯ *
{
˘˘ 
get
˙˙ 
{
˙˙ 
return
˙˙	 
m_authentication
˙˙  
;
˙˙  !
}
˙˙" #
set
˚˚ 
{
˚˚ 
m_authentication
˚˚	 
=
˚˚ 
value
˚˚ !
;
˚˚! "
}
˚˚# $
}
¸¸ 
public
ââ 
string
ââ	 
Username
ââ 
{
ää 
get
ãã 
{
ãã 
return
ãã	 

m_username
ãã 
;
ãã 
}
ãã 
set
åå 
{
åå 

m_username
åå	 
=
åå 
value
åå 
;
åå 
}
åå 
}
çç 
public
öö 
string
öö	 
Password
öö 
{
õõ 
get
úú 
{
úú 
return
úú	 

m_password
úú 
;
úú 
}
úú 
set
ùù 
{
ùù 

m_password
ùù	 
=
ùù 
value
ùù 
;
ùù 
}
ùù 
}
ûû 
public
´´ 
int
´´	 
Port
´´ 
{
¨¨ 
get
≠≠ 
{
≠≠ 
return
≠≠	 
m_port
≠≠ 
;
≠≠ 
}
≠≠ 
set
ÆÆ 
{
ÆÆ 
m_port
ÆÆ	 
=
ÆÆ 
value
ÆÆ 
;
ÆÆ 
}
ÆÆ 
}
ØØ 
public
¡¡ 
MailPriority
¡¡	 
Priority
¡¡ 
{
¬¬ 
get
√√ 
{
√√ 
return
√√	 
m_mailPriority
√√ 
;
√√ 
}
√√  !
set
ƒƒ 
{
ƒƒ 
m_mailPriority
ƒƒ	 
=
ƒƒ 
value
ƒƒ 
;
ƒƒ  
}
ƒƒ! "
}
≈≈ 
public
ŒŒ 
bool
ŒŒ 
	EnableSsl
ŒŒ 
{
œœ 	
get
–– 
{
–– 
return
–– 
m_enableSsl
–– $
;
––$ %
}
––& '
set
—— 
{
—— 
m_enableSsl
—— 
=
—— 
value
——  %
;
——% &
}
——' (
}
““ 	
public
⁄⁄ 
string
⁄⁄ 
ReplyTo
⁄⁄ 
{
€€ 	
get
‹‹ 
{
‹‹ 
return
‹‹ 
	m_replyTo
‹‹ "
;
‹‹" #
}
‹‹$ %
set
›› 
{
›› 
	m_replyTo
›› 
=
›› 
value
›› #
;
››# $
}
››% &
}
ﬁﬁ 	
public
ÁÁ 
Encoding
ÁÁ	 
SubjectEncoding
ÁÁ !
{
ËË 
get
ÈÈ 
{
ÈÈ 
return
ÈÈ	 
m_subjectEncoding
ÈÈ !
;
ÈÈ! "
}
ÈÈ# $
set
ÍÍ 
{
ÍÍ 
m_subjectEncoding
ÍÍ	 
=
ÍÍ 
value
ÍÍ "
;
ÍÍ" #
}
ÍÍ$ %
}
ÎÎ 
public
ÛÛ 
Encoding
ÛÛ	 
BodyEncoding
ÛÛ 
{
ÙÙ 
get
ıı 
{
ıı 
return
ıı	 
m_bodyEncoding
ıı 
;
ıı 
}
ıı  !
set
ˆˆ 
{
ˆˆ 
m_bodyEncoding
ˆˆ	 
=
ˆˆ 
value
ˆˆ 
;
ˆˆ  
}
ˆˆ! "
}
˜˜ 
override
ÅÅ 

	protected
ÅÅ 
void
ÅÅ 

SendBuffer
ÅÅ $
(
ÅÅ$ %
LoggingEvent
ÅÅ% 1
[
ÅÅ1 2
]
ÅÅ2 3
events
ÅÅ4 :
)
ÅÅ: ;
{
ÇÇ 
try
ÖÖ 
{
ÜÜ 
StringWriter
áá 
writer
áá 
=
áá 
new
áá 
StringWriter
áá *
(
áá* +
System
áá+ 1
.
áá1 2
Globalization
áá2 ?
.
áá? @
CultureInfo
áá@ K
.
ááK L
InvariantCulture
ááL \
)
áá\ ]
;
áá] ^
string
ââ 

t
ââ 
=
ââ 
Layout
ââ 
.
ââ 
Header
ââ 
;
ââ 
if
ää 
(
ää 
t
ää 	
!=
ää
 
null
ää 
)
ää 
{
ãã 
writer
åå 
.
åå 
Write
åå 
(
åå 
t
åå 
)
åå 
;
åå 
}
çç 
for
èè 
(
èè 
int
èè 
i
èè 
=
èè 
$num
èè 
;
èè 
i
èè 
<
èè 
events
èè 
.
èè 
Length
èè $
;
èè$ %
i
èè& '
++
èè' )
)
èè) *
{
êê  
RenderLoggingEvent
íí 
(
íí 
writer
íí 
,
íí 
events
íí  &
[
íí& '
i
íí' (
]
íí( )
)
íí) *
;
íí* +
}
ìì 
t
ïï 
=
ïï 
Layout
ïï 
.
ïï 
Footer
ïï 
;
ïï 
if
ññ 
(
ññ 
t
ññ 	
!=
ññ
 
null
ññ 
)
ññ 
{
óó 
writer
òò 
.
òò 
Write
òò 
(
òò 
t
òò 
)
òò 
;
òò 
}
ôô 
	SendEmail
õõ 
(
õõ 
writer
õõ 
.
õõ 
ToString
õõ 
(
õõ 
)
õõ 
)
õõ  
;
õõ  !
}
úú 
catch
ùù 
(
ùù 	
	Exception
ùù	 
e
ùù 
)
ùù 
{
ûû 
ErrorHandler
üü 
.
üü 
Error
üü 
(
üü 
$str
üü J
,
üüJ K
e
üüL M
)
üüM N
;
üüN O
}
†† 
}
°° 
override
∞∞ 

	protected
∞∞ 
bool
∞∞ 
RequiresLayout
∞∞ (
{
±± 
get
≤≤ 
{
≤≤ 
return
≤≤	 
true
≤≤ 
;
≤≤ 
}
≤≤ 
}
≥≥ 
virtual
ΩΩ 	
	protected
ΩΩ
 
void
ΩΩ 
	SendEmail
ΩΩ "
(
ΩΩ" #
string
ΩΩ# )
messageBody
ΩΩ* 5
)
ΩΩ5 6
{
ææ 

SmtpClient
≈≈ 

smtpClient
≈≈ 
=
≈≈ 
new
≈≈ 

SmtpClient
≈≈ )
(
≈≈) *
)
≈≈* +
;
≈≈+ ,
if
∆∆ 
(
∆∆ 
!
∆∆ 
String
∆∆ 
.
∆∆ 
IsNullOrEmpty
∆∆ 
(
∆∆ 

m_smtpHost
∆∆ '
)
∆∆' (
)
∆∆( )
{
«« 

smtpClient
»» 
.
»» 
Host
»» 
=
»» 

m_smtpHost
»»  
;
»»  !
}
…… 

smtpClient
   
.
   
Port
   
=
   
m_port
   
;
   

smtpClient
ÀÀ 
.
ÀÀ 
DeliveryMethod
ÀÀ 
=
ÀÀ  
SmtpDeliveryMethod
ÀÀ 1
.
ÀÀ1 2
Network
ÀÀ2 9
;
ÀÀ9 :

smtpClient
ÃÃ 
.
ÃÃ 
	EnableSsl
ÃÃ  
=
ÃÃ! "
m_enableSsl
ÃÃ# .
;
ÃÃ. /
if
ŒŒ 
(
ŒŒ 
m_authentication
ŒŒ 
==
ŒŒ  
SmtpAuthentication
ŒŒ -
.
ŒŒ- .
Basic
ŒŒ. 3
)
ŒŒ3 4
{
œœ 

smtpClient
—— 
.
—— 
Credentials
—— 
=
—— 
new
——  
System
——! '
.
——' (
Net
——( +
.
——+ ,
NetworkCredential
——, =
(
——= >

m_username
——> H
,
——H I

m_password
——J T
)
——T U
;
——U V
}
““ 
else
”” 
if
”” 

(
”” 
m_authentication
”” 
==
””  
SmtpAuthentication
””  2
.
””2 3
Ntlm
””3 7
)
””7 8
{
‘‘ 

smtpClient
÷÷ 
.
÷÷ 
Credentials
÷÷ 
=
÷÷ 
System
÷÷ #
.
÷÷# $
Net
÷÷$ '
.
÷÷' (
CredentialCache
÷÷( 7
.
÷÷7 8'
DefaultNetworkCredentials
÷÷8 Q
;
÷÷Q R
}
◊◊ 
using
ŸŸ 
(
ŸŸ 
MailMessage
ŸŸ 
mailMessage
ŸŸ *
=
ŸŸ+ ,
new
ŸŸ- 0
MailMessage
ŸŸ1 <
(
ŸŸ< =
)
ŸŸ= >
)
ŸŸ> ?
{
⁄⁄ 
mailMessage
€€ 
.
€€ 
Body
€€  
=
€€! "
messageBody
€€# .
;
€€. /
mailMessage
‹‹ 
.
‹‹ 
BodyEncoding
‹‹ 
=
‹‹ 
m_bodyEncoding
‹‹ -
;
‹‹- .
mailMessage
›› 
.
›› 
From
››  
=
››! "
new
››# &
MailAddress
››' 2
(
››2 3
m_from
››3 9
)
››9 :
;
››: ;
mailMessage
ﬁﬁ 
.
ﬁﬁ 
To
ﬁﬁ 
.
ﬁﬁ 
Add
ﬁﬁ "
(
ﬁﬁ" #
m_to
ﬁﬁ# '
)
ﬁﬁ' (
;
ﬁﬁ( )
if
ﬂﬂ 
(
ﬂﬂ 
!
ﬂﬂ 
String
ﬂﬂ 
.
ﬂﬂ 
IsNullOrEmpty
ﬂﬂ )
(
ﬂﬂ) *
m_cc
ﬂﬂ* .
)
ﬂﬂ. /
)
ﬂﬂ/ 0
{
‡‡ 
mailMessage
·· 
.
··  
CC
··  "
.
··" #
Add
··# &
(
··& '
m_cc
··' +
)
··+ ,
;
··, -
}
‚‚ 
if
„„ 
(
„„ 
!
„„ 
String
„„ 
.
„„ 
IsNullOrEmpty
„„ )
(
„„) *
m_bcc
„„* /
)
„„/ 0
)
„„0 1
{
‰‰ 
mailMessage
ÂÂ 
.
ÂÂ  
Bcc
ÂÂ  #
.
ÂÂ# $
Add
ÂÂ$ '
(
ÂÂ' (
m_bcc
ÂÂ( -
)
ÂÂ- .
;
ÂÂ. /
}
ÊÊ 
if
ÁÁ 
(
ÁÁ 
!
ÁÁ 
String
ÁÁ 
.
ÁÁ 
IsNullOrEmpty
ÁÁ )
(
ÁÁ) *
	m_replyTo
ÁÁ* 3
)
ÁÁ3 4
)
ÁÁ4 5
{
ËË 
mailMessage
ÓÓ 
.
ÓÓ  
ReplyToList
ÓÓ  +
.
ÓÓ+ ,
Add
ÓÓ, /
(
ÓÓ/ 0
new
ÓÓ0 3
MailAddress
ÓÓ4 ?
(
ÓÓ? @
	m_replyTo
ÓÓ@ I
)
ÓÓI J
)
ÓÓJ K
;
ÓÓK L
}
 
mailMessage
ÒÒ 
.
ÒÒ 
Subject
ÒÒ #
=
ÒÒ$ %
	m_subject
ÒÒ& /
;
ÒÒ/ 0
mailMessage
ÚÚ 
.
ÚÚ 
SubjectEncoding
ÚÚ 
=
ÚÚ  !
m_subjectEncoding
ÚÚ" 3
;
ÚÚ3 4
mailMessage
ÛÛ 
.
ÛÛ 
Priority
ÛÛ $
=
ÛÛ% &
m_mailPriority
ÛÛ' 5
;
ÛÛ5 6

smtpClient
˜˜ 
.
˜˜ 
Send
˜˜ 
(
˜˜  
mailMessage
˜˜  +
)
˜˜+ ,
;
˜˜, -
}
¯¯ 
}
∆∆ 
private
ÃÃ 	
string
ÃÃ
 
m_to
ÃÃ 
;
ÃÃ 
private
ÕÕ 
string
ÕÕ 
m_cc
ÕÕ 
;
ÕÕ 
private
ŒŒ 
string
ŒŒ 
m_bcc
ŒŒ 
;
ŒŒ 
private
œœ 	
string
œœ
 
m_from
œœ 
;
œœ 
private
–– 	
string
––
 
	m_subject
–– 
;
–– 
private
—— 	
string
——
 

m_smtpHost
—— 
;
—— 
private
““ 	
Encoding
““
 
m_subjectEncoding
““ $
=
““% &
Encoding
““' /
.
““/ 0
UTF8
““0 4
;
““4 5
private
”” 	
Encoding
””
 
m_bodyEncoding
”” !
=
””" #
Encoding
””$ ,
.
””, -
UTF8
””- 1
;
””1 2
private
÷÷ 	 
SmtpAuthentication
÷÷
 
m_authentication
÷÷ -
=
÷÷. / 
SmtpAuthentication
÷÷0 B
.
÷÷B C
None
÷÷C G
;
÷÷G H
private
◊◊ 	
string
◊◊
 

m_username
◊◊ 
;
◊◊ 
private
ÿÿ 	
string
ÿÿ
 

m_password
ÿÿ 
;
ÿÿ 
private
€€ 	
int
€€
 
m_port
€€ 
=
€€ 
$num
€€ 
;
€€ 
private
›› 	
MailPriority
››
 
m_mailPriority
›› %
=
››& '
MailPriority
››( 4
.
››4 5
Normal
››5 ;
;
››; <
private
‡‡ 
bool
‡‡ 
m_enableSsl
‡‡  
=
‡‡! "
false
‡‡# (
;
‡‡( )
private
·· 
string
·· 
	m_replyTo
··  
;
··  !
public
 
enum
	  
SmtpAuthentication
  
{
ÒÒ 
None
ıı 
,
ıı 
Basic
˝˝ 
,
˝˝ 	
Ntlm
ÖÖ 
}
ÜÜ 
private
ää 
static
ää 
readonly
ää #
char
ää$ (
[
ää( )
]
ää) * 
ADDRESS_DELIMITERS
ää+ =
=
ää> ?
new
ää@ C
char
ääD H
[
ääH I
]
ääI J
{
ääK L
$char
ääM P
,
ääP Q
$char
ääR U
}
ääV W
;
ääW X
private
èè 
static
èè 
string
èè !!
MaybeTrimSeparators
èè" 5
(
èè5 6
string
èè6 <
s
èè= >
)
èè> ?
{
èè@ A
return
ëë 
string
ëë 
.
ëë 
IsNullOrEmpty
ëë +
(
ëë+ ,
s
ëë, -
)
ëë- .
?
ëë/ 0
s
ëë1 2
:
ëë3 4
s
ëë5 6
.
ëë6 7
Trim
ëë7 ;
(
ëë; < 
ADDRESS_DELIMITERS
ëë< N
)
ëëN O
;
ëëO P
}
ïï 
}
ññ 	
}óó ¡R
IC:\sonarqube\projects\log4net-2.0.7\src\Appender\SmtpPickupDirAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public55 
class55 !
SmtpPickupDirAppender55 #
:55$ %%
BufferingAppenderSkeleton55& ?
{66 
publicAA !
SmtpPickupDirAppenderAA	 
(AA 
)AA  
{BB 
m_fileExtensionCC 
=CC 
stringCC 
.CC 
EmptyCC !
;CC! "
}DD 
publicUU 
stringUU	 
ToUU 
{VV 
getWW 
{WW 
returnWW	 
m_toWW 
;WW 
}WW 
setXX 
{XX 
m_toXX	 
=XX 
valueXX 
;XX 
}XX 
}YY 
publicff 
stringff	 
Fromff 
{gg 
gethh 
{hh 
returnhh	 
m_fromhh 
;hh 
}hh 
setii 
{ii 
m_fromii	 
=ii 
valueii 
;ii 
}ii 
}jj 
publicww 
stringww	 
Subjectww 
{xx 
getyy 
{yy 
returnyy	 
	m_subjectyy 
;yy 
}yy 
setzz 
{zz 
	m_subjectzz	 
=zz 
valuezz 
;zz 
}zz 
}{{ 
public
ÜÜ 
string
ÜÜ	 
	PickupDir
ÜÜ 
{
áá 
get
àà 
{
àà 
return
àà	 
m_pickupDir
àà 
;
àà 
}
àà 
set
ââ 
{
ââ 
m_pickupDir
ââ	 
=
ââ 
value
ââ 
;
ââ 
}
ââ 
}
ää 
public
óó 
string
óó	 
FileExtension
óó 
{
òò 
get
ôô 
{
ôô 
return
ôô	 
m_fileExtension
ôô 
;
ôô  
}
ôô! "
set
öö 
{
õõ 
m_fileExtension
úú 
=
úú 
value
úú 
;
úú 
if
ùù 
(
ùù 
m_fileExtension
ùù 
==
ùù 
null
ùù 
)
ùù  
{
ûû 
m_fileExtension
üü 
=
üü 
string
üü 
.
üü 
Empty
üü #
;
üü# $
}
†† 
if
££ 
(
££ 
!
££ 	
string
££	 
.
££ 
IsNullOrEmpty
££ 
(
££ 
m_fileExtension
££ -
)
££- .
&&
££/ 1
!
££2 3
m_fileExtension
££3 B
.
££B C

StartsWith
££C M
(
££M N
$str
££N Q
)
££Q R
)
££R S
{
ßß 
m_fileExtension
®® 
=
®® 
$str
®® 
+
®® 
m_fileExtension
®® ,
;
®®, -
}
©© 
}
™™ 
}
´´ 
public
ªª 
SecurityContext
ªª	 
SecurityContext
ªª (
{
ºº 
get
ΩΩ 
{
ΩΩ 
return
ΩΩ	 
m_securityContext
ΩΩ !
;
ΩΩ! "
}
ΩΩ# $
set
ææ 
{
ææ 
m_securityContext
ææ	 
=
ææ 
value
ææ "
;
ææ" #
}
ææ$ %
}
øø 
override
ŒŒ 

	protected
ŒŒ 
void
ŒŒ 

SendBuffer
ŒŒ $
(
ŒŒ$ %
LoggingEvent
ŒŒ% 1
[
ŒŒ1 2
]
ŒŒ2 3
events
ŒŒ4 :
)
ŒŒ: ;
{
œœ 
try
““ 
{
”” 
string
‘‘ 

filePath
‘‘ 
=
‘‘ 
null
‘‘ 
;
‘‘ 
StreamWriter
’’ 
writer
’’ 
=
’’ 
null
’’ 
;
’’ 
using
ÿÿ 	
(
ÿÿ	 

SecurityContext
ÿÿ
 
.
ÿÿ 
Impersonate
ÿÿ %
(
ÿÿ% &
this
ÿÿ& *
)
ÿÿ* +
)
ÿÿ+ ,
{
ŸŸ 
filePath
⁄⁄ 
=
⁄⁄ 
Path
⁄⁄ 
.
⁄⁄ 
Combine
⁄⁄ 
(
⁄⁄ 
m_pickupDir
⁄⁄ (
,
⁄⁄( )

SystemInfo
⁄⁄* 4
.
⁄⁄4 5
NewGuid
⁄⁄5 <
(
⁄⁄< =
)
⁄⁄= >
.
⁄⁄> ?
ToString
⁄⁄? G
(
⁄⁄G H
$str
⁄⁄H K
)
⁄⁄K L
+
⁄⁄M N
m_fileExtension
⁄⁄O ^
)
⁄⁄^ _
;
⁄⁄_ `
writer
€€ 
=
€€ 
File
€€ 
.
€€ 

CreateText
€€ 
(
€€ 
filePath
€€ &
)
€€& '
;
€€' (
}
‹‹ 
if
ﬁﬁ 
(
ﬁﬁ 
writer
ﬁﬁ 
==
ﬁﬁ 
null
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
ErrorHandler
‡‡ 
.
‡‡ 
Error
‡‡ 
(
‡‡ 
$str
‡‡ D
+
‡‡D E
filePath
‡‡E M
+
‡‡M N
$str
‡‡N Q
,
‡‡Q R
null
‡‡S W
,
‡‡W X
	ErrorCode
‡‡Y b
.
‡‡b c
FileOpenFailure
‡‡c r
)
‡‡r s
;
‡‡s t
}
·· 
else
‚‚ 
{
„„ 
using
‰‰ 

(
‰‰
 
writer
‰‰ 
)
‰‰ 
{
ÂÂ 
writer
ÊÊ 
.
ÊÊ 
	WriteLine
ÊÊ 
(
ÊÊ 
$str
ÊÊ 
+
ÊÊ 
m_to
ÊÊ  $
)
ÊÊ$ %
;
ÊÊ% &
writer
ÁÁ 
.
ÁÁ 
	WriteLine
ÁÁ 
(
ÁÁ 
$str
ÁÁ 
+
ÁÁ  !
m_from
ÁÁ" (
)
ÁÁ( )
;
ÁÁ) *
writer
ËË 
.
ËË 
	WriteLine
ËË 
(
ËË 
$str
ËË "
+
ËË# $
	m_subject
ËË% .
)
ËË. /
;
ËË/ 0
writer
ÈÈ 
.
ÈÈ 
	WriteLine
ÈÈ 
(
ÈÈ 
$str
ÈÈ 
+
ÈÈ  !
DateTime
ÈÈ" *
.
ÈÈ* +
UtcNow
ÈÈ+ 1
.
ÈÈ1 2
ToString
ÈÈ2 :
(
ÈÈ: ;
$str
ÈÈ; >
)
ÈÈ> ?
)
ÈÈ? @
;
ÈÈ@ A
writer
ÍÍ 
.
ÍÍ 
	WriteLine
ÍÍ 
(
ÍÍ 
$str
ÍÍ 
)
ÍÍ 
;
ÍÍ 
string
ÏÏ 
t
ÏÏ 
=
ÏÏ 
Layout
ÏÏ 
.
ÏÏ 
Header
ÏÏ 
;
ÏÏ 
if
ÌÌ 
(
ÌÌ	 

t
ÌÌ
 
!=
ÌÌ 
null
ÌÌ 
)
ÌÌ 
{
ÓÓ 
writer
ÔÔ 
.
ÔÔ 
Write
ÔÔ 
(
ÔÔ 
t
ÔÔ 
)
ÔÔ 
;
ÔÔ 
}
 
for
ÚÚ 	
(
ÚÚ	 

int
ÚÚ
 
i
ÚÚ 
=
ÚÚ 
$num
ÚÚ 
;
ÚÚ 
i
ÚÚ 
<
ÚÚ 
events
ÚÚ 
.
ÚÚ  
Length
ÚÚ  &
;
ÚÚ& '
i
ÚÚ( )
++
ÚÚ) +
)
ÚÚ+ ,
{
ÛÛ  
RenderLoggingEvent
ıı 
(
ıı 
writer
ıı  
,
ıı  !
events
ıı" (
[
ıı( )
i
ıı) *
]
ıı* +
)
ıı+ ,
;
ıı, -
}
ˆˆ 
t
¯¯ 
=
¯¯ 	
Layout
¯¯
 
.
¯¯ 
Footer
¯¯ 
;
¯¯ 
if
˘˘ 
(
˘˘	 

t
˘˘
 
!=
˘˘ 
null
˘˘ 
)
˘˘ 
{
˙˙ 
writer
˚˚ 
.
˚˚ 
Write
˚˚ 
(
˚˚ 
t
˚˚ 
)
˚˚ 
;
˚˚ 
}
¸¸ 
writer
˛˛ 
.
˛˛ 
	WriteLine
˛˛ 
(
˛˛ 
$str
˛˛ 
)
˛˛ 
;
˛˛ 
writer
ˇˇ 
.
ˇˇ 
	WriteLine
ˇˇ 
(
ˇˇ 
$str
ˇˇ 
)
ˇˇ 
;
ˇˇ 
}
ÄÄ 
}
ÅÅ 
}
ÇÇ 
catch
ÉÉ 
(
ÉÉ 	
	Exception
ÉÉ	 
e
ÉÉ 
)
ÉÉ 
{
ÑÑ 
ErrorHandler
ÖÖ 
.
ÖÖ 
Error
ÖÖ 
(
ÖÖ 
$str
ÖÖ J
,
ÖÖJ K
e
ÖÖL M
)
ÖÖM N
;
ÖÖN O
}
ÜÜ 
}
áá 
override
ùù 

public
ùù 
void
ùù 
ActivateOptions
ùù &
(
ùù& '
)
ùù' (
{
ûû 
base
üü 
.
üü 
ActivateOptions
üü 
(
üü 
)
üü 
;
üü 
if
°° 
(
°° 
m_securityContext
°° 
==
°° 
null
°°  
)
°°  !
{
¢¢ 
m_securityContext
££ 
=
££ %
SecurityContextProvider
££ /
.
££/ 0
DefaultProvider
££0 ?
.
££? @#
CreateSecurityContext
££@ U
(
££U V
this
££V Z
)
££Z [
;
££[ \
}
§§ 
using
¶¶ 
(
¶¶ 	
SecurityContext
¶¶	 
.
¶¶ 
Impersonate
¶¶ $
(
¶¶$ %
this
¶¶% )
)
¶¶) *
)
¶¶* +
{
ßß 
m_pickupDir
®® 
=
®® 
ConvertToFullPath
®® #
(
®®# $
m_pickupDir
®®$ /
.
®®/ 0
Trim
®®0 4
(
®®4 5
)
®®5 6
)
®®6 7
;
®®7 8
}
©© 
}
™™ 
override
µµ 

	protected
µµ 
bool
µµ 
RequiresLayout
µµ (
{
∂∂ 
get
∑∑ 
{
∑∑ 
return
∑∑	 
true
∑∑ 
;
∑∑ 
}
∑∑ 
}
∏∏ 
	protected
ÀÀ 
static
ÀÀ 
string
ÀÀ 
ConvertToFullPath
ÀÀ +
(
ÀÀ+ ,
string
ÀÀ, 2
path
ÀÀ3 7
)
ÀÀ7 8
{
ÃÃ 
return
ÕÕ 	

SystemInfo
ÕÕ
 
.
ÕÕ 
ConvertToFullPath
ÕÕ &
(
ÕÕ& '
path
ÕÕ' +
)
ÕÕ+ ,
;
ÕÕ, -
}
ŒŒ 
private
‘‘ 	
string
‘‘
 
m_to
‘‘ 
;
‘‘ 
private
’’ 	
string
’’
 
m_from
’’ 
;
’’ 
private
÷÷ 	
string
÷÷
 
	m_subject
÷÷ 
;
÷÷ 
private
◊◊ 	
string
◊◊
 
m_pickupDir
◊◊ 
;
◊◊ 
private
ÿÿ 	
string
ÿÿ
 
m_fileExtension
ÿÿ  
;
ÿÿ  !
private
›› 	
SecurityContext
››
 
m_securityContext
›› +
;
››+ ,
}
‡‡ 
}·· ÈÉ
BC:\sonarqube\projects\log4net-2.0.7\src\Appender\TelnetAppender.cs
	namespace## 	
log4net##
 
.## 
Appender## 
{$$ 
public66 
class66 
TelnetAppender66 
:66 
AppenderSkeleton66 /
{77 
private88 	
SocketHandler88
 
	m_handler88 !
;88! "
private99 	
int99
 
m_listeningPort99 
=99 
$num99  "
;99" #
publicEE 
TelnetAppenderEE	 
(EE 
)EE 
{FF 
}GG 
privateTT 
readonlyTT 
staticTT 
TypeTT !
declaringTypeTT" /
=TT0 1
typeofTT2 8
(TT8 9
TelnetAppenderTT9 G
)TTG H
;TTH I
publicff 
intff	 
Portff 
{gg 
gethh 
{ii 
returnjj 

m_listeningPortjj 
;jj 
}kk 
setll 
{mm 
ifnn 
(nn 
valuenn 
<nn 

IPEndPointnn 
.nn 
MinPortnn "
||nn# %
valuenn& +
>nn, -

IPEndPointnn. 8
.nn8 9
MaxPortnn9 @
)nn@ A
{oo 
throwpp 

log4netpp 
.pp 
Utilpp 
.pp 

SystemInfopp "
.pp" #-
!CreateArgumentOutOfRangeExceptionpp# D
(ppD E
$strppE L
,ppL M
(ppN O
objectppO U
)ppU V
valueppV [
,pp[ \
$strqq 2
+qq3 4

IPEndPointrr 
.rr 
MinPortrr 
.rr 
ToStringrr !
(rr! "
NumberFormatInforr" 2
.rr2 3
InvariantInforr3 @
)rr@ A
+rrB C
$strss 
+ss 

IPEndPointtt 
.tt 
MaxPorttt 
.tt 
ToStringtt !
(tt! "
NumberFormatInfott" 2
.tt2 3
InvariantInfott3 @
)tt@ A
+ttB C
$strttD G
)ttG H
;ttH I
}uu 
elsevv 
{ww 
m_listeningPortxx 
=xx 
valuexx 
;xx 
}yy 
}zz 
}{{ 
	protected
áá 
override
áá 
void
áá 
OnClose
áá !
(
áá! "
)
áá" #
{
àà 
base
ââ 
.
ââ 
OnClose
ââ 
(
ââ 
)
ââ 
;
ââ 
if
ãã 
(
ãã 
	m_handler
ãã 
!=
ãã 
null
ãã 
)
ãã 
{
åå 
	m_handler
çç 
.
çç 
Dispose
çç 
(
çç 
)
çç 
;
çç 
	m_handler
éé 
=
éé 
null
éé 
;
éé 
}
èè 
}
êê 
	protected
õõ 
override
õõ 
bool
õõ 
RequiresLayout
õõ (
{
úú 
get
ùù 
{
ùù 
return
ùù	 
true
ùù 
;
ùù 
}
ùù 
}
ûû 
public
≥≥ 
override
≥≥	 
void
≥≥ 
ActivateOptions
≥≥ &
(
≥≥& '
)
≥≥' (
{
¥¥ 
base
µµ 
.
µµ 
ActivateOptions
µµ 
(
µµ 
)
µµ 
;
µµ 
try
∂∂ 
{
∑∑ 
LogLog
∏∏ 

.
∏∏
 
Debug
∏∏ 
(
∏∏ 
declaringType
∏∏ 
,
∏∏ 
$str
∏∏  L
+
∏∏L M
m_listeningPort
∏∏M \
+
∏∏\ ]
$str
∏∏] `
)
∏∏` a
;
∏∏a b
	m_handler
ππ 
=
ππ 
new
ππ 
SocketHandler
ππ !
(
ππ! "
m_listeningPort
ππ" 1
)
ππ1 2
;
ππ2 3
}
∫∫ 
catch
ªª 
(
ªª 	
	Exception
ªª	 
ex
ªª 
)
ªª 
{
ºº 
LogLog
ΩΩ 

.
ΩΩ
 
Error
ΩΩ 
(
ΩΩ 
declaringType
ΩΩ 
,
ΩΩ 
$str
ΩΩ  @
,
ΩΩ@ A
ex
ΩΩB D
)
ΩΩD E
;
ΩΩE F
throw
ææ 	
;
ææ	 

}
øø 
}
¿¿ 
	protected
ÀÀ 
override
ÀÀ 
void
ÀÀ 
Append
ÀÀ  
(
ÀÀ  !
LoggingEvent
ÀÀ! -
loggingEvent
ÀÀ. :
)
ÀÀ: ;
{
ÃÃ 
if
ÕÕ 
(
ÕÕ 
	m_handler
ÕÕ 
!=
ÕÕ 
null
ÕÕ 
&&
ÕÕ 
	m_handler
ÕÕ %
.
ÕÕ% &
HasConnections
ÕÕ& 4
)
ÕÕ4 5
{
ŒŒ 
	m_handler
œœ 
.
œœ 
Send
œœ 
(
œœ  
RenderLoggingEvent
œœ %
(
œœ% &
loggingEvent
œœ& 2
)
œœ2 3
)
œœ3 4
;
œœ4 5
}
–– 
}
—— 
	protected
·· 
class
·· 
SocketHandler
·· 
:
··  !
IDisposable
··" -
{
‚‚ 
private
„„ 

const
„„ 
int
„„ 
MAX_CONNECTIONS
„„ $
=
„„% &
$num
„„' )
;
„„) *
private
ÂÂ 

Socket
ÂÂ 
m_serverSocket
ÂÂ  
;
ÂÂ  !
private
ÊÊ 

	ArrayList
ÊÊ 
	m_clients
ÊÊ 
=
ÊÊ  
new
ÊÊ! $
	ArrayList
ÊÊ% .
(
ÊÊ. /
)
ÊÊ/ 0
;
ÊÊ0 1
	protected
 
class
 
SocketClient
 
:
  !
IDisposable
" -
{
ÒÒ 
private
ÚÚ 
Socket
ÚÚ 
m_socket
ÚÚ 
;
ÚÚ 
private
ÛÛ 
StreamWriter
ÛÛ 
m_writer
ÛÛ !
;
ÛÛ! "
public
˛˛ 

SocketClient
˛˛ 
(
˛˛ 
Socket
˛˛ 
socket
˛˛ %
)
˛˛% &
{
ˇˇ 
m_socket
ÄÄ 
=
ÄÄ 
socket
ÄÄ 
;
ÄÄ 
try
ÇÇ 
{
ÉÉ 
m_writer
ÑÑ 
=
ÑÑ 
new
ÑÑ 
StreamWriter
ÑÑ !
(
ÑÑ! "
new
ÑÑ" %
NetworkStream
ÑÑ& 3
(
ÑÑ3 4
socket
ÑÑ4 :
)
ÑÑ: ;
)
ÑÑ; <
;
ÑÑ< =
}
ÖÖ 
catch
ÜÜ 

{
áá 
Dispose
àà 
(
àà 
)
àà 
;
àà 
throw
ââ 
;
ââ 
}
ää 
}
ãã 
public
ññ 

void
ññ 
Send
ññ 
(
ññ 
String
ññ 
message
ññ #
)
ññ# $
{
óó 
m_writer
òò 
.
òò 
Write
òò 
(
òò 
message
òò 
)
òò 
;
òò 
m_writer
ôô 
.
ôô 
Flush
ôô 
(
ôô 
)
ôô 
;
ôô 
}
öö 
public
¶¶ 

void
¶¶ 
Dispose
¶¶ 
(
¶¶ 
)
¶¶ 
{
ßß 
try
®® 
{
©© 
if
™™ 
(
™™	 

m_writer
™™
 
!=
™™ 
null
™™ 
)
™™ 
{
´´ 
m_writer
¨¨ 
.
¨¨ 
Close
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
m_writer
≠≠ 
=
≠≠ 
null
≠≠ 
;
≠≠ 
}
ÆÆ 
}
ØØ 
catch
∞∞ 

{
∞∞ 
}
∞∞ 
if
≤≤ 
(
≤≤ 	
m_socket
≤≤	 
!=
≤≤ 
null
≤≤ 
)
≤≤ 
{
≥≥ 
try
¥¥ 	
{
µµ 
m_socket
∂∂ 
.
∂∂ 
Shutdown
∂∂ 
(
∂∂ 
SocketShutdown
∂∂ '
.
∂∂' (
Both
∂∂( ,
)
∂∂, -
;
∂∂- .
}
∑∑ 
catch
∏∏ 
{
∏∏ 
}
∏∏ 
try
∫∫ 	
{
ªª 
m_socket
ºº 
.
ºº 
Close
ºº 
(
ºº 
)
ºº 
;
ºº 
}
ΩΩ 
catch
ææ 
{
ææ 
}
ææ 
m_socket
¿¿ 
=
¿¿ 
null
¿¿ 
;
¿¿ 
}
¡¡ 
}
¬¬ 
}
≈≈ 
public
–– 	
SocketHandler
––
 
(
–– 
int
–– 
port
––  
)
––  !
{
—— 
m_serverSocket
““ 
=
““ 
new
““ 
Socket
““ 
(
““  
AddressFamily
““  -
.
““- .
InterNetwork
““. :
,
““: ;

SocketType
““< F
.
““F G
Stream
““G M
,
““M N
ProtocolType
““O [
.
““[ \
Tcp
““\ _
)
““_ `
;
““` a
m_serverSocket
‘‘ 
.
‘‘ 
Bind
‘‘ 
(
‘‘ 
new
‘‘ 

IPEndPoint
‘‘ &
(
‘‘& '
	IPAddress
‘‘' 0
.
‘‘0 1
Any
‘‘1 4
,
‘‘4 5
port
‘‘6 :
)
‘‘: ;
)
‘‘; <
;
‘‘< =
m_serverSocket
’’ 
.
’’ 
Listen
’’ 
(
’’ 
$num
’’ 
)
’’ 
;
’’ 
AcceptConnection
÷÷ 
(
÷÷ 
)
÷÷ 
;
÷÷ 
}
◊◊ 
private
ŸŸ 

void
ŸŸ 
AcceptConnection
ŸŸ  
(
ŸŸ  !
)
ŸŸ! "
{
⁄⁄ 
m_serverSocket
ﬁﬁ 
.
ﬁﬁ 
BeginAccept
ﬁﬁ 
(
ﬁﬁ 
new
ﬁﬁ "
AsyncCallback
ﬁﬁ# 0
(
ﬁﬁ0 1
	OnConnect
ﬁﬁ1 :
)
ﬁﬁ: ;
,
ﬁﬁ; <
null
ﬁﬁ= A
)
ﬁﬁA B
;
ﬁﬁB C
}
‡‡ 
public
ÎÎ 	
void
ÎÎ
 
Send
ÎÎ 
(
ÎÎ 
String
ÎÎ 
message
ÎÎ "
)
ÎÎ" #
{
ÏÏ 
	ArrayList
ÌÌ 
localClients
ÌÌ 
=
ÌÌ 
	m_clients
ÌÌ &
;
ÌÌ& '
foreach
ÔÔ 
(
ÔÔ 
SocketClient
ÔÔ 
client
ÔÔ  
in
ÔÔ! #
localClients
ÔÔ$ 0
)
ÔÔ0 1
{
 
try
ÒÒ 
{
ÚÚ 
client
ÛÛ 
.
ÛÛ 
Send
ÛÛ 
(
ÛÛ 
message
ÛÛ 
)
ÛÛ 
;
ÛÛ 
}
ÙÙ 
catch
ıı 

(
ıı 
	Exception
ıı 
)
ıı 
{
ˆˆ 
client
¯¯ 
.
¯¯ 
Dispose
¯¯ 
(
¯¯ 
)
¯¯ 
;
¯¯ 
RemoveClient
˘˘ 
(
˘˘ 
client
˘˘ 
)
˘˘ 
;
˘˘ 
}
˙˙ 
}
˚˚ 
}
¸¸ 
private
ÇÇ 

void
ÇÇ 
	AddClient
ÇÇ 
(
ÇÇ 
SocketClient
ÇÇ &
client
ÇÇ' -
)
ÇÇ- .
{
ÉÉ 
lock
ÑÑ 
(
ÑÑ 	
this
ÑÑ	 
)
ÑÑ 
{
ÖÖ 
	ArrayList
ÜÜ 
clientsCopy
ÜÜ 
=
ÜÜ 
(
ÜÜ 
	ArrayList
ÜÜ '
)
ÜÜ' (
	m_clients
ÜÜ( 1
.
ÜÜ1 2
Clone
ÜÜ2 7
(
ÜÜ7 8
)
ÜÜ8 9
;
ÜÜ9 :
clientsCopy
áá 
.
áá 
Add
áá 
(
áá 
client
áá 
)
áá 
;
áá 
	m_clients
àà 
=
àà 
clientsCopy
àà 
;
àà 
}
ââ 
}
ää 
private
êê 

void
êê 
RemoveClient
êê 
(
êê 
SocketClient
êê )
client
êê* 0
)
êê0 1
{
ëë 
lock
íí 
(
íí 	
this
íí	 
)
íí 
{
ìì 
	ArrayList
îî 
clientsCopy
îî 
=
îî 
(
îî 
	ArrayList
îî '
)
îî' (
	m_clients
îî( 1
.
îî1 2
Clone
îî2 7
(
îî7 8
)
îî8 9
;
îî9 :
clientsCopy
ïï 
.
ïï 
Remove
ïï 
(
ïï 
client
ïï 
)
ïï 
;
ïï  
	m_clients
ññ 
=
ññ 
clientsCopy
ññ 
;
ññ 
}
óó 
}
òò 
public
ßß 	
bool
ßß
 
HasConnections
ßß 
{
®® 
get
©© 
{
™™ 
	ArrayList
´´ 
localClients
´´ 
=
´´ 
	m_clients
´´ '
;
´´' (
return
≠≠ 
(
≠≠ 
localClients
≠≠ 
!=
≠≠ 
null
≠≠ !
&&
≠≠" $
localClients
≠≠% 1
.
≠≠1 2
Count
≠≠2 7
>
≠≠8 9
$num
≠≠: ;
)
≠≠; <
;
≠≠< =
}
ÆÆ 
}
ØØ 
private
øø 

void
øø 
	OnConnect
øø 
(
øø 
IAsyncResult
øø &
asyncResult
øø' 2
)
øø2 3
{
¡¡ 
try
¬¬ 
{
√√ 
Socket
»» 
socket
»» 
=
»» 
m_serverSocket
»» #
.
»»# $
	EndAccept
»»$ -
(
»»- .
asyncResult
»». 9
)
»»9 :
;
»»: ;
LogLog
   
.
   
Debug
   
(
   
declaringType
   
,
    
$str
  ! >
+
  > ?
socket
  ? E
.
  E F
RemoteEndPoint
  F T
.
  T U
ToString
  U ]
(
  ] ^
)
  ^ _
+
  _ `
$str
  ` c
)
  c d
;
  d e
SocketClient
ÀÀ 
client
ÀÀ 
=
ÀÀ 
new
ÀÀ 
SocketClient
ÀÀ +
(
ÀÀ+ ,
socket
ÀÀ, 2
)
ÀÀ2 3
;
ÀÀ3 4
int
ÕÕ +
currentActiveConnectionsCount
ÕÕ	 &
=
ÕÕ' (
	m_clients
ÕÕ) 2
.
ÕÕ2 3
Count
ÕÕ3 8
;
ÕÕ8 9
if
ŒŒ 
(
ŒŒ 	+
currentActiveConnectionsCount
ŒŒ	 &
<
ŒŒ' (
MAX_CONNECTIONS
ŒŒ) 8
)
ŒŒ8 9
{
œœ 
try
–– 	
{
—— 
client
““ 
.
““ 
Send
““ 
(
““ 
$str
““ *
+
““+ ,
(
““- .+
currentActiveConnectionsCount
““. K
+
““L M
$num
““N O
)
““O P
+
““Q R
$str
““S q
)
““q r
;
““r s
	AddClient
”” 
(
”” 
client
”” 
)
”” 
;
”” 
}
‘‘ 
catch
’’ 
{
÷÷ 
client
◊◊ 
.
◊◊ 
Dispose
◊◊ 
(
◊◊ 
)
◊◊ 
;
◊◊ 
}
ÿÿ 
}
ŸŸ 
else
⁄⁄ 	
{
€€ 
client
‹‹ 
.
‹‹ 
Send
‹‹ 
(
‹‹ 
$str
‹‹ 5
)
‹‹5 6
;
‹‹6 7
client
›› 
.
›› 
Dispose
›› 
(
›› 
)
›› 
;
›› 
}
ﬁﬁ 
}
ﬂﬂ 
catch
‡‡ 	
{
·· 
}
‚‚ 
finally
„„ 
{
‰‰ 
if
ÂÂ 
(
ÂÂ 	
m_serverSocket
ÂÂ	 
!=
ÂÂ 
null
ÂÂ 
)
ÂÂ  
{
ÊÊ 
AcceptConnection
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
}
ËË 
}
ÈÈ 
}
ÍÍ 
public
ˆˆ 	
void
ˆˆ
 
Dispose
ˆˆ 
(
ˆˆ 
)
ˆˆ 
{
˜˜ 
	ArrayList
¯¯ 
localClients
¯¯ 
=
¯¯ 
	m_clients
¯¯ &
;
¯¯& '
foreach
˙˙ 
(
˙˙ 
SocketClient
˙˙ 
client
˙˙  
in
˙˙! #
localClients
˙˙$ 0
)
˙˙0 1
{
˚˚ 
client
¸¸ 
.
¸¸ 
Dispose
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸ 
}
˝˝ 
	m_clients
˛˛ 
.
˛˛ 
Clear
˛˛ 
(
˛˛ 
)
˛˛ 
;
˛˛ 
Socket
ÄÄ 

localSocket
ÄÄ 
=
ÄÄ 
m_serverSocket
ÄÄ '
;
ÄÄ' (
m_serverSocket
ÅÅ 
=
ÅÅ 
null
ÅÅ 
;
ÅÅ 
try
ÇÇ 
{
ÉÉ 
localSocket
ÑÑ 
.
ÑÑ 
Shutdown
ÑÑ 
(
ÑÑ 
SocketShutdown
ÑÑ (
.
ÑÑ( )
Both
ÑÑ) -
)
ÑÑ- .
;
ÑÑ. /
}
ÖÖ 
catch
ÜÜ 	
{
áá 
}
àà 
try
ää 
{
ãã 
localSocket
åå 
.
åå 
Close
åå 
(
åå 
)
åå 
;
åå 
}
çç 
catch
éé 	
{
èè 
}
êê 
}
ëë 
}
îî 
}
óó 
}òò ä`
FC:\sonarqube\projects\log4net-2.0.7\src\Appender\TextWriterAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public-- 

class-- 
TextWriterAppender-- #
:--$ %
AppenderSkeleton--& 6
{.. 
public99 
TextWriterAppender99	 
(99 
)99 
{:: 
};; 
[II 
ObsoleteII 
(II 
$strII X
)IIX Y
]IIY Z
publicJJ 
TextWriterAppenderJJ	 
(JJ 
ILayoutJJ #
layoutJJ$ *
,JJ* +
StreamJJ, 2
osJJ3 5
)JJ5 6
:JJ7 8
thisJJ9 =
(JJ= >
layoutJJ> D
,JJD E
newJJF I
StreamWriterJJJ V
(JJV W
osJJW Y
)JJY Z
)JJZ [
{KK 
}LL 
[\\ 
Obsolete\\ 
(\\ 
$str\\ X
)\\X Y
]\\Y Z
public]] 
TextWriterAppender]]	 
(]] 
ILayout]] #
layout]]$ *
,]]* +

TextWriter]], 6
writer]]7 =
)]]= >
{^^ 
Layout__ 	
=__
 
layout__ 
;__ 
Writer`` 	
=``
 
writer`` 
;`` 
}aa 
public~~ 
bool~~	 
ImmediateFlush~~ 
{ 
get
ÄÄ 
{
ÄÄ 
return
ÄÄ	 
m_immediateFlush
ÄÄ  
;
ÄÄ  !
}
ÄÄ" #
set
ÅÅ 
{
ÅÅ 
m_immediateFlush
ÅÅ	 
=
ÅÅ 
value
ÅÅ !
;
ÅÅ! "
}
ÅÅ# $
}
ÇÇ 
virtual
ìì 	
public
ìì
 

TextWriter
ìì 
Writer
ìì "
{
îî 
get
ïï 
{
ïï 
return
ïï	 
m_qtw
ïï 
;
ïï 
}
ïï 
set
ññ 
{
óó 
lock
òò 
(
òò 	
this
òò	 
)
òò 
{
ôô 
Reset
öö 

(
öö
 
)
öö 
;
öö 
if
õõ 
(
õõ 	
value
õõ	 
!=
õõ 
null
õõ 
)
õõ 
{
úú 
m_qtw
ùù 
=
ùù 
new
ùù 
QuietTextWriter
ùù !
(
ùù! "
value
ùù" '
,
ùù' (
ErrorHandler
ùù) 5
)
ùù5 6
;
ùù6 7
WriteHeader
ûû 
(
ûû 
)
ûû 
;
ûû 
}
üü 
}
†† 
}
°° 
}
¢¢ 
override
≤≤ 

	protected
≤≤ 
bool
≤≤ 
PreAppendCheck
≤≤ (
(
≤≤( )
)
≤≤) *
{
≥≥ 
if
¥¥ 
(
¥¥ 
!
¥¥ 
base
¥¥ 
.
¥¥ 
PreAppendCheck
¥¥ 
(
¥¥ 
)
¥¥ 
)
¥¥ 
{
µµ 
return
∂∂ 

false
∂∂ 
;
∂∂ 
}
∑∑ 
if
ππ 
(
ππ 
m_qtw
ππ 
==
ππ 
null
ππ 
)
ππ 
{
∫∫ 
PrepareWriter
ºº 
(
ºº 
)
ºº 
;
ºº 
if
ææ 
(
ææ 
m_qtw
ææ 
==
ææ 
null
ææ 
)
ææ 
{
øø 
ErrorHandler
¿¿ 
.
¿¿ 
Error
¿¿ 
(
¿¿ 
$str
¿¿ O
+
¿¿O P
Name
¿¿Q U
+
¿¿V W
$str
¿¿W [
)
¿¿[ \
;
¿¿\ ]
return
¡¡ 
false
¡¡ 
;
¡¡ 
}
¬¬ 
}
√√ 
if
ƒƒ 
(
ƒƒ 
m_qtw
ƒƒ 
.
ƒƒ 
Closed
ƒƒ 
)
ƒƒ 
{
≈≈ 
ErrorHandler
∆∆ 
.
∆∆ 
Error
∆∆ 
(
∆∆ 
$str
∆∆ ;
+
∆∆; <
Name
∆∆= A
+
∆∆B C
$str
∆∆C W
)
∆∆W X
;
∆∆X Y
return
«« 

false
«« 
;
«« 
}
»» 
return
   	
true
  
 
;
   
}
ÀÀ 
override
€€ 

	protected
€€ 
void
€€ 
Append
€€  
(
€€  !
LoggingEvent
€€! -
loggingEvent
€€. :
)
€€: ;
{
‹‹  
RenderLoggingEvent
›› 
(
›› 
m_qtw
›› 
,
›› 
loggingEvent
›› )
)
››) *
;
››* +
if
ﬂﬂ 
(
ﬂﬂ 
m_immediateFlush
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
m_qtw
·· 	
.
··	 

Flush
··
 
(
·· 
)
·· 
;
·· 
}
‚‚ 
}
„„ 
override
 

	protected
 
void
 
Append
  
(
  !
LoggingEvent
! -
[
- .
]
. /
loggingEvents
0 =
)
= >
{
ÒÒ 
foreach
ÚÚ 

(
ÚÚ
 
LoggingEvent
ÚÚ 
loggingEvent
ÚÚ $
in
ÚÚ% '
loggingEvents
ÚÚ( 5
)
ÚÚ5 6
{
ÛÛ  
RenderLoggingEvent
ÙÙ 
(
ÙÙ 
m_qtw
ÙÙ 
,
ÙÙ 
loggingEvent
ÙÙ *
)
ÙÙ* +
;
ÙÙ+ ,
}
ıı 
if
˜˜ 
(
˜˜ 
m_immediateFlush
˜˜ 
)
˜˜ 
{
¯¯ 
m_qtw
˘˘ 	
.
˘˘	 

Flush
˘˘
 
(
˘˘ 
)
˘˘ 
;
˘˘ 
}
˙˙ 
}
˚˚ 
override
ÉÉ 

	protected
ÉÉ 
void
ÉÉ 
OnClose
ÉÉ !
(
ÉÉ! "
)
ÉÉ" #
{
ÑÑ 
lock
ÖÖ 
(
ÖÖ 
this
ÖÖ 
)
ÖÖ 
{
ÜÜ 
Reset
áá 	
(
áá	 

)
áá
 
;
áá 
}
àà 
}
ââ 
override
íí 

public
íí 
IErrorHandler
íí 
ErrorHandler
íí  ,
{
ìì 
get
îî 
{
îî 
return
îî	 
base
îî 
.
îî 
ErrorHandler
îî !
;
îî! "
}
îî# $
set
ïï 
{
ññ 
lock
óó 
(
óó 	
this
óó	 
)
óó 
{
òò 
if
ôô 
(
ôô 	
value
ôô	 
==
ôô 
null
ôô 
)
ôô 
{
öö 
LogLog
õõ 
.
õõ 
Warn
õõ 
(
õõ 
declaringType
õõ 
,
õõ  
$str
õõ! b
)
õõb c
;
õõc d
}
úú 
else
ùù 	
{
ûû 
base
üü 

.
üü
 
ErrorHandler
üü 
=
üü 
value
üü 
;
üü  
if
†† 
(
††	 

m_qtw
††
 
!=
†† 
null
†† 
)
†† 
{
°° 
m_qtw
¢¢ 
.
¢¢ 
ErrorHandler
¢¢ 
=
¢¢ 
value
¢¢ !
;
¢¢! "
}
££ 
}
§§ 
}
•• 
}
¶¶ 
}
ßß 
override
≤≤ 

	protected
≤≤ 
bool
≤≤ 
RequiresLayout
≤≤ (
{
≥≥ 
get
¥¥ 
{
¥¥ 
return
¥¥	 
true
¥¥ 
;
¥¥ 
}
¥¥ 
}
µµ 
virtual
√√ 	
	protected
√√
 
void
√√ '
WriteFooterAndCloseWriter
√√ 2
(
√√2 3
)
√√3 4
{
ƒƒ 
WriteFooter
≈≈ 
(
≈≈ 
)
≈≈ 
;
≈≈ 
CloseWriter
∆∆ 
(
∆∆ 
)
∆∆ 
;
∆∆ 
}
«« 
virtual
—— 	
	protected
——
 
void
—— 
CloseWriter
—— $
(
——$ %
)
——% &
{
““ 
if
”” 
(
”” 
m_qtw
”” 
!=
”” 
null
”” 
)
”” 
{
‘‘ 
try
’’ 
{
÷÷ 
m_qtw
◊◊ 

.
◊◊
 
Close
◊◊ 
(
◊◊ 
)
◊◊ 
;
◊◊ 
}
ÿÿ 
catch
ŸŸ 	
(
ŸŸ	 

	Exception
ŸŸ
 
e
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
ErrorHandler
€€ 
.
€€ 
Error
€€ 
(
€€ 
$str
€€ 2
+
€€2 3
m_qtw
€€3 8
+
€€8 9
$str
€€9 <
,
€€< =
e
€€> ?
)
€€? @
;
€€@ A
}
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 
virtual
ÎÎ 	
	protected
ÎÎ
 
void
ÎÎ 
Reset
ÎÎ 
(
ÎÎ 
)
ÎÎ  
{
ÏÏ '
WriteFooterAndCloseWriter
ÌÌ 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
m_qtw
ÓÓ 
=
ÓÓ	 

null
ÓÓ 
;
ÓÓ 
}
ÔÔ 
virtual
˘˘ 	
	protected
˘˘
 
void
˘˘ 
WriteFooter
˘˘ $
(
˘˘$ %
)
˘˘% &
{
˙˙ 
if
˚˚ 
(
˚˚ 
Layout
˚˚ 
!=
˚˚ 
null
˚˚ 
&&
˚˚ 
m_qtw
˚˚ 
!=
˚˚ !
null
˚˚" &
&&
˚˚' )
!
˚˚* +
m_qtw
˚˚+ 0
.
˚˚0 1
Closed
˚˚1 7
)
˚˚7 8
{
¸¸ 
string
˝˝ 

f
˝˝ 
=
˝˝ 
Layout
˝˝ 
.
˝˝ 
Footer
˝˝ 
;
˝˝ 
if
˛˛ 
(
˛˛ 
f
˛˛ 	
!=
˛˛
 
null
˛˛ 
)
˛˛ 
{
ˇˇ 
m_qtw
ÄÄ 

.
ÄÄ
 
Write
ÄÄ 
(
ÄÄ 
f
ÄÄ 
)
ÄÄ 
;
ÄÄ 
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 
virtual
çç 	
	protected
çç
 
void
çç 
WriteHeader
çç $
(
çç$ %
)
çç% &
{
éé 
if
èè 
(
èè 
Layout
èè 
!=
èè 
null
èè 
&&
èè 
m_qtw
èè 
!=
èè !
null
èè" &
&&
èè' )
!
èè* +
m_qtw
èè+ 0
.
èè0 1
Closed
èè1 7
)
èè7 8
{
êê 
string
ëë 

h
ëë 
=
ëë 
Layout
ëë 
.
ëë 
Header
ëë 
;
ëë 
if
íí 
(
íí 
h
íí 	
!=
íí
 
null
íí 
)
íí 
{
ìì 
m_qtw
îî 

.
îî
 
Write
îî 
(
îî 
h
îî 
)
îî 
;
îî 
}
ïï 
}
ññ 
}
óó 
virtual
££ 	
	protected
££
 
void
££ 
PrepareWriter
££ &
(
££& '
)
££' (
{
§§ 
}
•• 
	protected
¥¥ 
QuietTextWriter
¥¥ 
QuietWriter
¥¥ '
{
µµ 
get
∂∂ 
{
∂∂ 
return
∂∂	 
m_qtw
∂∂ 
;
∂∂ 
}
∂∂ 
set
∑∑ 
{
∑∑ 
m_qtw
∑∑	 
=
∑∑ 
value
∑∑ 
;
∑∑ 
}
∑∑ 
}
∏∏ 	
private
¬¬ 	
QuietTextWriter
¬¬
 
m_qtw
¬¬ 
;
¬¬  
private
‘‘ 	
bool
‘‘
 
m_immediateFlush
‘‘ 
=
‘‘  !
true
‘‘" &
;
‘‘& '
private
·· 
readonly
·· 
static
·· 
Type
·· !
declaringType
··" /
=
··0 1
typeof
··2 8
(
··8 9 
TextWriterAppender
··9 K
)
··K L
;
··L M
public
ÍÍ 
override
ÍÍ 
bool
ÍÍ  
Flush
ÍÍ! &
(
ÍÍ& '
int
ÍÍ' *!
millisecondsTimeout
ÍÍ+ >
)
ÍÍ> ?
{
ÎÎ 
if
ÌÌ 
(
ÌÌ 
m_immediateFlush
ÌÌ $
)
ÌÌ$ %
return
ÌÌ& ,
true
ÌÌ- 1
;
ÌÌ1 2
lock
 
(
 
this
 
)
 
{
ÒÒ 
m_qtw
ÚÚ 
.
ÚÚ 
Flush
ÚÚ 
(
ÚÚ  
)
ÚÚ  !
;
ÚÚ! "
}
ÛÛ 
return
ıı 
true
ıı 
;
ıı 
}
ˆˆ 
}
˜˜ 
}¯¯ ì
AC:\sonarqube\projects\log4net-2.0.7\src\Appender\TraceAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
public66 
class66 
TraceAppender66 
:66 
AppenderSkeleton66 .
{77 
publicBB 
TraceAppenderBB	 
(BB 
)BB 
{CC 
}DD 
[PP 
SystemPP 	
.PP	 

ObsoletePP
 
(PP 
$strPP T
)PPT U
]PPU V
publicQQ 
TraceAppenderQQ	 
(QQ 
ILayoutQQ 
layoutQQ %
)QQ% &
{RR 
LayoutSS 	
=SS
 
layoutSS 
;SS 
}TT 
publicll 
boolll	 
ImmediateFlushll 
{mm 
getnn 
{nn 
returnnn	 
m_immediateFlushnn  
;nn  !
}nn" #
setoo 
{oo 
m_immediateFlushoo	 
=oo 
valueoo !
;oo! "
}oo# $
}pp 
public}} 
PatternLayout}} 
Category}} "
{~~ 
get	 
{ 
return 

m_category  
;  !
}" #
set
ÄÄ	 
{
ÄÄ 

m_category
ÄÄ 
=
ÄÄ 
value
ÄÄ !
;
ÄÄ! "
}
ÄÄ# $
}
ÅÅ 
override
êê 

	protected
êê 
void
êê 
Append
êê  
(
êê  !
LoggingEvent
êê! -
loggingEvent
êê. :
)
êê: ;
{
ëë 
System
òò 
.
òò 
Diagnostics
òò 
.
òò 
Trace
òò $
.
òò$ %
Write
òò% *
(
òò* + 
RenderLoggingEvent
òò+ =
(
òò= >
loggingEvent
òò> J
)
òòJ K
,
òòK L

m_category
òòM W
.
òòW X
Format
òòX ^
(
òò^ _
loggingEvent
òò_ k
)
òòk l
)
òòl m
;
òòm n
if
ûû 
(
ûû 
m_immediateFlush
ûû 
)
ûû 
{
üü 
System
££ 

.
££
 
Diagnostics
££ 
.
££ 
Trace
££ 
.
££ 
Flush
££ "
(
££" #
)
££# $
;
££$ %
}
•• 
}
¶¶ 
override
±± 

	protected
±± 
bool
±± 
RequiresLayout
±± (
{
≤≤ 
get
≥≥ 
{
≥≥ 
return
≥≥	 
true
≥≥ 
;
≥≥ 
}
≥≥ 
}
¥¥ 
private
…… 	
bool
……
 
m_immediateFlush
…… 
=
……  !
true
……" &
;
……& '
private
ŒŒ 
PatternLayout
ŒŒ 

m_category
ŒŒ (
=
ŒŒ) *
new
ŒŒ+ .
PatternLayout
ŒŒ/ <
(
ŒŒ< =
$str
ŒŒ= F
)
ŒŒF G
;
ŒŒG H
public
◊◊ 
override
◊◊ 
bool
◊◊ 
Flush
◊◊ "
(
◊◊" #
int
◊◊# &!
millisecondsTimeout
◊◊' :
)
◊◊: ;
{
ÿÿ 	
if
⁄⁄ 
(
⁄⁄ 
m_immediateFlush
⁄⁄  
)
⁄⁄  !
return
⁄⁄" (
true
⁄⁄) -
;
⁄⁄- .
System
‡‡ 
.
‡‡ 
Diagnostics
‡‡ 
.
‡‡ 
Trace
‡‡ $
.
‡‡$ %
Flush
‡‡% *
(
‡‡* +
)
‡‡+ ,
;
‡‡, -
return
‚‚ 
true
‚‚ 
;
‚‚ 
}
„„ 	
}
‰‰ 
}ÂÂ ùr
?C:\sonarqube\projects\log4net-2.0.7\src\Appender\UdpAppender.cs
	namespace 	
log4net
 
. 
Appender 
{ 
publicmm 
classmm 
UdpAppendermm 
:mm 
AppenderSkeletonmm ,
{nn 
publicww 
UdpAppenderww	 
(ww 
)ww 
{xx 
}yy 
public
¬¬ 
	IPAddress
¬¬	 
RemoteAddress
¬¬  
{
√√ 
get
ƒƒ 
{
ƒƒ 
return
ƒƒ	 
m_remoteAddress
ƒƒ 
;
ƒƒ  
}
ƒƒ! "
set
≈≈ 
{
≈≈ 
m_remoteAddress
≈≈	 
=
≈≈ 
value
≈≈  
;
≈≈  !
}
≈≈" #
}
∆∆ 
public
÷÷ 
int
÷÷	 

RemotePort
÷÷ 
{
◊◊ 
get
ÿÿ 
{
ÿÿ 
return
ÿÿ	 
m_remotePort
ÿÿ 
;
ÿÿ 
}
ÿÿ 
set
ŸŸ 
{
⁄⁄ 
if
€€ 
(
€€ 
value
€€ 
<
€€ 

IPEndPoint
€€ 
.
€€ 
MinPort
€€ "
||
€€# %
value
€€& +
>
€€, -

IPEndPoint
€€. 8
.
€€8 9
MaxPort
€€9 @
)
€€@ A
{
‹‹ 
throw
›› 

log4net
›› 
.
›› 
Util
›› 
.
›› 

SystemInfo
›› "
.
››" #/
!CreateArgumentOutOfRangeException
››# D
(
››D E
$str
››E L
,
››L M
(
››N O
object
››O U
)
››U V
value
››V [
,
››[ \
$str
ﬁﬁ )
+
ﬁﬁ* +

IPEndPoint
ﬂﬂ 
.
ﬂﬂ 
MinPort
ﬂﬂ 
.
ﬂﬂ 
ToString
ﬂﬂ !
(
ﬂﬂ! "
NumberFormatInfo
ﬂﬂ" 2
.
ﬂﬂ2 3
InvariantInfo
ﬂﬂ3 @
)
ﬂﬂ@ A
+
ﬂﬂB C
$str
‡‡ 
+
‡‡ 

IPEndPoint
·· 
.
·· 
MaxPort
·· 
.
·· 
ToString
·· !
(
··! "
NumberFormatInfo
··" 2
.
··2 3
InvariantInfo
··3 @
)
··@ A
+
··B C
$str
··D G
)
··G H
;
··H I
}
‚‚ 
else
„„ 
{
‰‰ 
m_remotePort
ÂÂ 
=
ÂÂ 
value
ÂÂ 
;
ÂÂ 
}
ÊÊ 
}
ÁÁ 
}
ËË 
public
˚˚ 
int
˚˚	 
	LocalPort
˚˚ 
{
¸¸ 
get
˝˝ 
{
˝˝ 
return
˝˝	 
m_localPort
˝˝ 
;
˝˝ 
}
˝˝ 
set
˛˛ 
{
ˇˇ 
if
ÄÄ 
(
ÄÄ 
value
ÄÄ 
!=
ÄÄ 
$num
ÄÄ 
&&
ÄÄ 
(
ÄÄ 
value
ÄÄ 
<
ÄÄ 

IPEndPoint
ÄÄ )
.
ÄÄ) *
MinPort
ÄÄ* 1
||
ÄÄ2 4
value
ÄÄ5 :
>
ÄÄ; <

IPEndPoint
ÄÄ= G
.
ÄÄG H
MaxPort
ÄÄH O
)
ÄÄO P
)
ÄÄP Q
{
ÅÅ 
throw
ÇÇ 

log4net
ÇÇ 
.
ÇÇ 
Util
ÇÇ 
.
ÇÇ 

SystemInfo
ÇÇ "
.
ÇÇ" #/
!CreateArgumentOutOfRangeException
ÇÇ# D
(
ÇÇD E
$str
ÇÇE L
,
ÇÇL M
(
ÇÇN O
object
ÇÇO U
)
ÇÇU V
value
ÇÇV [
,
ÇÇ[ \
$str
ÉÉ )
+
ÉÉ* +

IPEndPoint
ÑÑ 
.
ÑÑ 
MinPort
ÑÑ 
.
ÑÑ 
ToString
ÑÑ !
(
ÑÑ! "
NumberFormatInfo
ÑÑ" 2
.
ÑÑ2 3
InvariantInfo
ÑÑ3 @
)
ÑÑ@ A
+
ÑÑB C
$str
ÖÖ 
+
ÖÖ 

IPEndPoint
ÜÜ 
.
ÜÜ 
MaxPort
ÜÜ 
.
ÜÜ 
ToString
ÜÜ !
(
ÜÜ! "
NumberFormatInfo
ÜÜ" 2
.
ÜÜ2 3
InvariantInfo
ÜÜ3 @
)
ÜÜ@ A
+
ÜÜB C
$str
ÜÜD G
)
ÜÜG H
;
ÜÜH I
}
áá 
else
àà 
{
ââ 
m_localPort
ää 
=
ää 
value
ää 
;
ää 
}
ãã 
}
åå 
}
çç 
public
öö 
Encoding
öö	 
Encoding
öö 
{
õõ 
get
úú 
{
úú 
return
úú	 

m_encoding
úú 
;
úú 
}
úú 
set
ùù 
{
ùù 

m_encoding
ùù	 
=
ùù 
value
ùù 
;
ùù 
}
ùù 
}
ûû 
	protected
±± 
	UdpClient
±± 
Client
±± 
{
≤≤ 
get
≥≥ 
{
≥≥ 
return
≥≥	 
this
≥≥ 
.
≥≥ 
m_client
≥≥ 
;
≥≥ 
}
≥≥  
set
¥¥ 
{
¥¥ 
this
¥¥	 
.
¥¥ 
m_client
¥¥ 
=
¥¥ 
value
¥¥ 
;
¥¥ 
}
¥¥  !
}
µµ 
	protected
¬¬ 

IPEndPoint
¬¬ 
RemoteEndPoint
¬¬ %
{
√√ 
get
ƒƒ 
{
ƒƒ 
return
ƒƒ	 
this
ƒƒ 
.
ƒƒ 
m_remoteEndPoint
ƒƒ %
;
ƒƒ% &
}
ƒƒ' (
set
≈≈ 
{
≈≈ 
this
≈≈	 
.
≈≈ 
m_remoteEndPoint
≈≈ 
=
≈≈  
value
≈≈! &
;
≈≈& '
}
≈≈( )
}
∆∆ 
public
‚‚ 
override
‚‚	 
void
‚‚ 
ActivateOptions
‚‚ &
(
‚‚& '
)
‚‚' (
{
„„ 
base
‰‰ 
.
‰‰ 
ActivateOptions
‰‰ 
(
‰‰ 
)
‰‰ 
;
‰‰ 
if
ÊÊ 
(
ÊÊ 
this
ÊÊ 
.
ÊÊ 
RemoteAddress
ÊÊ 
==
ÊÊ 
null
ÊÊ !
)
ÊÊ! "
{
ÁÁ 
throw
ËË 	
new
ËË
 #
ArgumentNullException
ËË #
(
ËË# $
$str
ËË$ X
)
ËËX Y
;
ËËY Z
}
ÈÈ 
else
ÍÍ 
if
ÍÍ 

(
ÍÍ 
this
ÍÍ 
.
ÍÍ 

RemotePort
ÍÍ 
<
ÍÍ 

IPEndPoint
ÍÍ (
.
ÍÍ( )
MinPort
ÍÍ) 0
||
ÍÍ1 3
this
ÍÍ4 8
.
ÍÍ8 9

RemotePort
ÍÍ9 C
>
ÍÍD E

IPEndPoint
ÍÍF P
.
ÍÍP Q
MaxPort
ÍÍQ X
)
ÍÍX Y
{
ÎÎ 
throw
ÏÏ 	
log4net
ÏÏ
 
.
ÏÏ 
Util
ÏÏ 
.
ÏÏ 

SystemInfo
ÏÏ !
.
ÏÏ! "/
!CreateArgumentOutOfRangeException
ÏÏ" C
(
ÏÏC D
$str
ÏÏD U
,
ÏÏU V
(
ÏÏW X
object
ÏÏX ^
)
ÏÏ^ _
this
ÏÏ_ c
.
ÏÏc d

RemotePort
ÏÏd n
,
ÏÏn o
$str
ÌÌ #
+
ÌÌ$ %

IPEndPoint
ÓÓ 
.
ÓÓ 
MinPort
ÓÓ 
.
ÓÓ 
ToString
ÓÓ  
(
ÓÓ  !
NumberFormatInfo
ÓÓ! 1
.
ÓÓ1 2
InvariantInfo
ÓÓ2 ?
)
ÓÓ? @
+
ÓÓA B
$str
ÔÔ 
+
ÔÔ 

IPEndPoint
 
.
 
MaxPort
 
.
 
ToString
  
(
  !
NumberFormatInfo
! 1
.
1 2
InvariantInfo
2 ?
)
? @
+
A B
$str
C F
)
F G
;
G H
}
ÒÒ 
else
ÚÚ 
if
ÚÚ 

(
ÚÚ 
this
ÚÚ 
.
ÚÚ 
	LocalPort
ÚÚ 
!=
ÚÚ 
$num
ÚÚ 
&&
ÚÚ  "
(
ÚÚ# $
this
ÚÚ$ (
.
ÚÚ( )
	LocalPort
ÚÚ) 2
<
ÚÚ3 4

IPEndPoint
ÚÚ5 ?
.
ÚÚ? @
MinPort
ÚÚ@ G
||
ÚÚH J
this
ÚÚK O
.
ÚÚO P
	LocalPort
ÚÚP Y
>
ÚÚZ [

IPEndPoint
ÚÚ\ f
.
ÚÚf g
MaxPort
ÚÚg n
)
ÚÚn o
)
ÚÚo p
{
ÛÛ 
throw
ÙÙ 	
log4net
ÙÙ
 
.
ÙÙ 
Util
ÙÙ 
.
ÙÙ 

SystemInfo
ÙÙ !
.
ÙÙ! "/
!CreateArgumentOutOfRangeException
ÙÙ" C
(
ÙÙC D
$str
ÙÙD T
,
ÙÙT U
(
ÙÙV W
object
ÙÙW ]
)
ÙÙ] ^
this
ÙÙ^ b
.
ÙÙb c
	LocalPort
ÙÙc l
,
ÙÙl m
$str
ıı "
+
ıı# $

IPEndPoint
ˆˆ 
.
ˆˆ 
MinPort
ˆˆ 
.
ˆˆ 
ToString
ˆˆ  
(
ˆˆ  !
NumberFormatInfo
ˆˆ! 1
.
ˆˆ1 2
InvariantInfo
ˆˆ2 ?
)
ˆˆ? @
+
ˆˆA B
$str
˜˜ 
+
˜˜ 

IPEndPoint
¯¯ 
.
¯¯ 
MaxPort
¯¯ 
.
¯¯ 
ToString
¯¯  
(
¯¯  !
NumberFormatInfo
¯¯! 1
.
¯¯1 2
InvariantInfo
¯¯2 ?
)
¯¯? @
+
¯¯A B
$str
¯¯C F
)
¯¯F G
;
¯¯G H
}
˘˘ 
else
˙˙ 
{
˚˚ 
this
¸¸ 
.
¸¸ 	
RemoteEndPoint
¸¸	 
=
¸¸ 
new
¸¸ 

IPEndPoint
¸¸ (
(
¸¸( )
this
¸¸) -
.
¸¸- .
RemoteAddress
¸¸. ;
,
¸¸; <
this
¸¸= A
.
¸¸A B

RemotePort
¸¸B L
)
¸¸L M
;
¸¸M N
this
˝˝ 
.
˝˝ 	(
InitializeClientConnection
˝˝	 #
(
˝˝# $
)
˝˝$ %
;
˝˝% &
}
˛˛ 
}
ˇˇ 
	protected
ëë 
override
ëë 
void
ëë 
Append
ëë  
(
ëë  !
LoggingEvent
ëë! -
loggingEvent
ëë. :
)
ëë: ;
{
íí 
try
ìì 
{
îî 
Byte
ïï 
[
ïï	 

]
ïï
 
buffer
ïï 
=
ïï 

m_encoding
ïï 
.
ïï  
GetBytes
ïï  (
(
ïï( ) 
RenderLoggingEvent
ïï) ;
(
ïï; <
loggingEvent
ïï< H
)
ïïH I
.
ïïI J
ToCharArray
ïïJ U
(
ïïU V
)
ïïV W
)
ïïW X
;
ïïX Y
this
ôô 
.
ôô 	
Client
ôô	 
.
ôô 
Send
ôô 
(
ôô 
buffer
ôô 
,
ôô 
buffer
ôô #
.
ôô# $
Length
ôô$ *
,
ôô* +
this
ôô, 0
.
ôô0 1
RemoteEndPoint
ôô1 ?
)
ôô? @
;
ôô@ A
}
õõ 
catch
úú 
(
úú	 

	Exception
úú
 
ex
úú 
)
úú 
{
ùù 
ErrorHandler
ûû 
.
ûû 
Error
ûû 
(
ûû 
$str
üü 3
+
üü4 5
this
†† 	
.
††	 

RemoteAddress
††
 
.
†† 
ToString
††  
(
††  !
)
††! "
+
††# $
$str
°° 
+
°° 
this
¢¢ 	
.
¢¢	 


RemotePort
¢¢
 
+
¢¢ 
$str
¢¢ 
,
¢¢ 
ex
££ 
,
££ 
	ErrorCode
§§ 
.
§§ 
WriteFailure
§§ 
)
§§ 
;
§§ 
}
•• 
}
¶¶ 
override
±± 

	protected
±± 
bool
±± 
RequiresLayout
±± (
{
≤≤ 
get
≥≥ 
{
≥≥ 
return
≥≥	 
true
≥≥ 
;
≥≥ 
}
≥≥ 
}
¥¥ 
override
¿¿ 

	protected
¿¿ 
void
¿¿ 
OnClose
¿¿ !
(
¿¿! "
)
¿¿" #
{
¡¡ 
base
¬¬ 
.
¬¬ 
OnClose
¬¬ 
(
¬¬ 
)
¬¬ 
;
¬¬ 
if
ƒƒ 
(
ƒƒ 
this
ƒƒ 
.
ƒƒ 
Client
ƒƒ 
!=
ƒƒ 
null
ƒƒ 
)
ƒƒ 
{
≈≈ 
this
∆∆ 
.
∆∆ 	
Client
∆∆	 
.
∆∆ 
Close
∆∆ 
(
∆∆ 
)
∆∆ 
;
∆∆ 
this
«« 
.
«« 	
Client
««	 
=
«« 
null
«« 
;
«« 
}
»» 
}
…… 
	protected
€€ 
virtual
€€ 
void
€€ (
InitializeClientConnection
€€ 3
(
€€3 4
)
€€4 5
{
‹‹ 
try
›› 
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
this
ﬂﬂ 
.
ﬂﬂ 
	LocalPort
ﬂﬂ 
==
ﬂﬂ 
$num
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
this
‰‰ 	
.
‰‰	 

Client
‰‰
 
=
‰‰ 
new
‰‰ 
	UdpClient
‰‰  
(
‰‰  !
RemoteAddress
‰‰! .
.
‰‰. /
AddressFamily
‰‰/ <
)
‰‰< =
;
‰‰= >
}
ÊÊ 
else
ÁÁ 
{
ËË 
this
ÏÏ 	
.
ÏÏ	 

Client
ÏÏ
 
=
ÏÏ 
new
ÏÏ 
	UdpClient
ÏÏ  
(
ÏÏ  !
this
ÏÏ! %
.
ÏÏ% &
	LocalPort
ÏÏ& /
,
ÏÏ/ 0
RemoteAddress
ÏÏ1 >
.
ÏÏ> ?
AddressFamily
ÏÏ? L
)
ÏÏL M
;
ÏÏM N
}
ÓÓ 
}
ÔÔ 
catch
 
(
	 

	Exception

 
ex
 
)
 
{
ÒÒ 
ErrorHandler
ÚÚ 
.
ÚÚ 
Error
ÚÚ 
(
ÚÚ 
$str
ÛÛ =
+
ÛÛ> ?
this
ÙÙ 	
.
ÙÙ	 

	LocalPort
ÙÙ
 
.
ÙÙ 
ToString
ÙÙ 
(
ÙÙ 
NumberFormatInfo
ÙÙ -
.
ÙÙ- .
InvariantInfo
ÙÙ. ;
)
ÙÙ; <
+
ÙÙ= >
$str
ÙÙ? B
,
ÙÙB C
ex
ıı 
,
ıı 
	ErrorCode
ˆˆ 
.
ˆˆ 
GenericFailure
ˆˆ 
)
ˆˆ 
;
ˆˆ 
this
¯¯ 
.
¯¯ 	
Client
¯¯	 
=
¯¯ 
null
¯¯ 
;
¯¯ 
}
˘˘ 
}
˙˙ 
private
ÑÑ 	
	IPAddress
ÑÑ
 
m_remoteAddress
ÑÑ #
;
ÑÑ# $
private
ää 	
int
ää
 
m_remotePort
ää 
;
ää 
private
èè 	

IPEndPoint
èè
 
m_remoteEndPoint
èè %
;
èè% &
private
îî 	
int
îî
 
m_localPort
îî 
;
îî 
private
öö 	
	UdpClient
öö
 
m_client
öö 
;
öö 
private
¢¢ 	
Encoding
¢¢
 

m_encoding
¢¢ 
=
¢¢ 
Encoding
¢¢  (
.
¢¢( )
Default
¢¢) 0
;
¢¢0 1
}
¶¶ 
}ßß Ñ
7C:\sonarqube\projects\log4net-2.0.7\src\AssemblyInfo.cs
[ 
assembly 	
:	 

System 
. 
Runtime 
. 
InteropServices )
.) *

ComVisible* 4
(4 5
false5 :
): ;
]; <
[!! 
assembly!! 	
:!!	 

System!! 
.!! 
CLSCompliant!! 
(!! 
true!! #
)!!# $
]!!$ %
['' 
assembly'' 	
:''	 

System'' 
.'' 
Security'' 
.'' (
AllowPartiallyTrustedCallers'' 7
]''7 8
[// 
assembly// 	
://	 

System// 
.// 
Security// 
.// 
SecurityRules// (
(//( )
System//) /
./// 0
Security//0 8
.//8 9
SecurityRuleSet//9 H
.//H I
Level1//I O
)//O P
]//P Q
[BB 
assemblyBB 	
:BB	 
1
%AssemblyInformationalVersionAttributeBB 0
(BB0 1
$strBB1 C
)BBC D
]BBD E
[CC 
assemblyCC 	
:CC	 

AssemblyTitleCC 
(CC 
$strCC @
)CC@ A
]CCA B
[~~ 
assembly~~ 	
:~~	 
!
AssemblyConfiguration~~  
(~~  !
$str~~! (
)~~( )
]~~) *
[ÉÉ 
assembly
ÉÉ 	
:
ÉÉ	 

AssemblyProduct
ÉÉ 
(
ÉÉ 
$str
ÉÉ $
)
ÉÉ$ %
]
ÉÉ% &
[ÑÑ 
assembly
ÑÑ 	
:
ÑÑ	 
"
AssemblyDefaultAlias
ÑÑ 
(
ÑÑ  
$str
ÑÑ  )
)
ÑÑ) *
]
ÑÑ* +
[ÖÖ 
assembly
ÖÖ 	
:
ÖÖ	 

AssemblyCulture
ÖÖ 
(
ÖÖ 
$str
ÖÖ 
)
ÖÖ 
]
ÖÖ Ä	
>C:\sonarqube\projects\log4net-2.0.7\src\AssemblyVersionInfo.cs
[ 
assembly 	
:	 

System 
. 

Reflection 
. 
AssemblyVersion ,
(, -
$str- 6
)6 7
]7 8
[## 
assembly## 	
:##	 

System## 
.## 

Reflection## 
.## 
AssemblyFileVersion## 0
(##0 1
$str##1 :
)##: ;
]##; <
[++ 
assembly++ 	
:++	 

System++ 
.++ 

Reflection++ 
.++ 
AssemblyCompany++ ,
(++, -
$str++- M
)++M N
]++N O
[,, 
assembly,, 	
:,,	 

System,, 
.,, 

Reflection,, 
.,, 
AssemblyCopyright,, .
(,,. /
$str,,/ d
),,d e
],,e f
[-- 
assembly-- 	
:--	 

System-- 
.-- 

Reflection-- 
.-- 
AssemblyTrademark-- .
(--. /
$str--/ {
)--{ |
]--| } 
FC:\sonarqube\projects\log4net-2.0.7\src\Config\AliasDomainAttribute.cs
	namespace 	
log4net
 
. 
Config 
{ 
[11 
AttributeUsage11 
(11 
AttributeTargets11 !
.11! "
Assembly11" *
,11* +
AllowMultiple11+ 8
=118 9
true119 =
)11= >
]11> ?
[22 
Serializable22 
]22 
[33 
Obsolete33 

(33
 
$str33 I
)33I J
]33J K
public44 
sealed44 
class44  
AliasDomainAttribute44 )
:44* +$
AliasRepositoryAttribute44, D
{55 
publicBB  
AliasDomainAttributeBB	 
(BB 
stringBB $
nameBB% )
)BB) *
:BB+ ,
baseBB- 1
(BB1 2
nameBB2 6
)BB6 7
{CC 
}DD 
}GG 
}HH ﬂ	
JC:\sonarqube\projects\log4net-2.0.7\src\Config\AliasRepositoryAttribute.cs
	namespace 	
log4net
 
. 
Config 
{ 
[.. 
AttributeUsage.. 
(.. 
AttributeTargets.. !
...! "
Assembly.." *
,..* +
AllowMultiple..+ 8
=..8 9
true..9 =
)..= >
]..> ?
[// 
Serializable// 
]// 
public00 
class00 $
AliasRepositoryAttribute00 1
:002 3
	Attribute004 =
{11 
publicCC $
AliasRepositoryAttributeCC	 !
(CC! "
stringCC" (
nameCC) -
)CC- .
{DD 
NameEE 
=EE 	
nameEE
 
;EE 
}FF 
publicWW 
stringWW	 
NameWW 
{XX 
getYY 
{YY 
returnYY	 
m_nameYY 
;YY 
}YY 
setZZ 
{ZZ 
m_nameZZ	 
=ZZ 
valueZZ 
;ZZ 
}ZZ 
}[[ 
privateaa 	
stringaa
 
m_nameaa 
=aa 
nullaa 
;aa 
}dd 
}ee œ;
CC:\sonarqube\projects\log4net-2.0.7\src\Config\BasicConfigurator.cs
	namespace 	
log4net
 
. 
Config 
{ 
public44 
sealed44 
class44 
BasicConfigurator44 &
{55 
private?? 
readonly?? 
static?? 
Type?? !
declaringType??" /
=??0 1
typeof??2 8
(??8 9
BasicConfigurator??9 J
)??J K
;??K L
privateMM 	
BasicConfiguratorMM
 
(MM 
)MM 
{NN 
}OO 
staticbb 
publicbb 
ICollectionbb !
	Configurebb" +
(bb+ ,
)bb, -
{cc 
returndd 
BasicConfiguratordd $
.dd$ %
	Configuredd% .
(dd. /

LogManagerdd/ 9
.dd9 :
GetRepositorydd: G
(ddG H
AssemblyddH P
.ddP Q
GetCallingAssemblyddQ c
(ddc d
)ddd e
)dde f
)ddf g
;ddg h
}ee 	
staticpp 
publicpp 
ICollectionpp !
	Configurepp" +
(pp+ ,
paramspp, 2
	IAppenderpp3 <
[pp< =
]pp= >
	appenderspp? H
)ppH I
{qq 	
	ArrayListrr !
configurationMessagesrr +
=rr, -
newrr. 1
	ArrayListrr2 ;
(rr; <
)rr< =
;rr= >
ILoggerRepositorytt 

repositorytt (
=tt) *

LogManagertt+ 5
.tt5 6
GetRepositorytt6 C
(ttC D
AssemblyttD L
.ttL M
GetCallingAssemblyttM _
(tt_ `
)tt` a
)tta b
;ttb c
usingvv 
(vv 
newvv 
LogLogvv 
.vv 
LogReceivedAdaptervv 0
(vv0 1!
configurationMessagesvv1 F
)vvF G
)vvG H
{ww 
InternalConfigurexx !
(xx! "

repositoryxx" ,
,xx, -
	appendersxx. 7
)xx7 8
;xx8 9
}yy 

repository{{ 
.{{ !
ConfigurationMessages{{ ,
={{- .!
configurationMessages{{/ D
;{{D E
return}} !
configurationMessages}} (
;}}( )
}~~ 	
static
ââ 
public
ââ	 
ICollection
ââ 
	Configure
ââ %
(
ââ% &
	IAppender
ââ& /
appender
ââ0 8
)
ââ8 9
{
ää 
return
ãã 
	Configure
ãã 
(
ãã 
new
ãã  
	IAppender
ãã! *
[
ãã* +
]
ãã+ ,
{
ãã- .
appender
ãã/ 7
}
ãã8 9
)
ãã9 :
;
ãã: ;
}
åå 
static
úú 
public
úú 
ICollection
úú !
	Configure
úú" +
(
úú+ ,
ILoggerRepository
úú, =

repository
úú> H
)
úúH I
{
ùù 
	ArrayList
ûû #
configurationMessages
ûû +
=
ûû, -
new
ûû. 1
	ArrayList
ûû2 ;
(
ûû; <
)
ûû< =
;
ûû= >
using
†† 
(
†† 
new
†† 
LogLog
†† 
.
††  
LogReceivedAdapter
†† 0
(
††0 1#
configurationMessages
††1 F
)
††F G
)
††G H
{
°° 
PatternLayout
££ 
layout
££ $
=
££% &
new
££' *
PatternLayout
££+ 8
(
££8 9
)
££9 :
;
££: ;
layout
§§ 
.
§§ 
ConversionPattern
§§ (
=
§§) *
PatternLayout
§§+ 8
.
§§8 9%
DetailConversionPattern
§§9 P
;
§§P Q
layout
•• 
.
•• 
ActivateOptions
•• &
(
••& '
)
••' (
;
••( )
ConsoleAppender
®® 
appender
®®  (
=
®®) *
new
®®+ .
ConsoleAppender
®®/ >
(
®®> ?
)
®®? @
;
®®@ A
appender
©© 
.
©© 
Layout
©© 
=
©©  !
layout
©©" (
;
©©( )
appender
™™ 
.
™™ 
ActivateOptions
™™ (
(
™™( )
)
™™) *
;
™™* +
InternalConfigure
¨¨ !
(
¨¨! "

repository
¨¨" ,
,
¨¨, -
appender
¨¨. 6
)
¨¨6 7
;
¨¨7 8
}
≠≠ 

repository
ØØ 
.
ØØ #
ConfigurationMessages
ØØ ,
=
ØØ- .#
configurationMessages
ØØ/ D
;
ØØD E
return
±± #
configurationMessages
±± (
;
±±( )
}
≤≤ 
static
ææ 
public
ææ 
ICollection
ææ !
	Configure
ææ" +
(
ææ+ ,
ILoggerRepository
ææ, =

repository
ææ> H
,
ææH I
	IAppender
ææJ S
appender
ææT \
)
ææ\ ]
{
øø 	
return
¿¿ 
	Configure
¿¿ 
(
¿¿ 

repository
¿¿ '
,
¿¿' (
new
¿¿) ,
	IAppender
¿¿- 6
[
¿¿6 7
]
¿¿7 8
{
¿¿9 :
appender
¿¿; C
}
¿¿D E
)
¿¿E F
;
¿¿F G
}
¡¡ 	
static
ÕÕ 
public
ÕÕ 
ICollection
ÕÕ !
	Configure
ÕÕ" +
(
ÕÕ+ ,
ILoggerRepository
ÕÕ, =

repository
ÕÕ> H
,
ÕÕH I
params
ÕÕJ P
	IAppender
ÕÕQ Z
[
ÕÕZ [
]
ÕÕ[ \
	appenders
ÕÕ] f
)
ÕÕf g
{
ŒŒ 	
	ArrayList
œœ #
configurationMessages
œœ +
=
œœ, -
new
œœ. 1
	ArrayList
œœ2 ;
(
œœ; <
)
œœ< =
;
œœ= >
using
—— 
(
—— 
new
—— 
LogLog
—— 
.
——  
LogReceivedAdapter
—— 0
(
——0 1#
configurationMessages
——1 F
)
——F G
)
——G H
{
““ 
InternalConfigure
”” !
(
””! "

repository
””" ,
,
””, -
	appenders
””. 7
)
””7 8
;
””8 9
}
‘‘ 

repository
÷÷ 
.
÷÷ #
ConfigurationMessages
÷÷ ,
=
÷÷- .#
configurationMessages
÷÷/ D
;
÷÷D E
return
ÿÿ #
configurationMessages
ÿÿ (
;
ÿÿ( )
}
ŸŸ 	
static
€€ 
private
€€	 
void
€€ 
InternalConfigure
€€ '
(
€€' (
ILoggerRepository
€€( 9

repository
€€: D
,
€€D E
params
€€F L
	IAppender
€€M V
[
€€V W
]
€€W X
	appenders
€€Y b
)
€€b c
{
‹‹ *
IBasicRepositoryConfigurator
›› ($
configurableRepository
››) ?
=
››@ A

repository
››B L
as
››M O*
IBasicRepositoryConfigurator
››P l
;
››l m
if
ﬁﬁ 
(
ﬁﬁ $
configurableRepository
ﬁﬁ &
!=
ﬁﬁ' )
null
ﬁﬁ* .
)
ﬁﬁ. /
{
ﬂﬂ $
configurableRepository
‡‡ &
.
‡‡& '
	Configure
‡‡' 0
(
‡‡0 1
	appenders
‡‡1 :
)
‡‡: ;
;
‡‡; <
}
·· 
else
‚‚ 
{
„„ 
LogLog
‰‰ 
.
‰‰ 
Warn
‰‰ 
(
‰‰ 
declaringType
‰‰ )
,
‰‰) *
$str
‰‰+ L
+
‰‰M N

repository
‰‰O Y
+
‰‰Z [
$str‰‰\ Ü
)‰‰Ü á
;‰‰á à
}
ÂÂ 
}
ÊÊ 
}
ÈÈ 
}ÍÍ √
GC:\sonarqube\projects\log4net-2.0.7\src\Config\ConfiguratorAttribute.cs
	namespace 	
log4net
 
. 
Config 
{ 
[)) 
AttributeUsage)) 
()) 
AttributeTargets)) !
.))! "
Assembly))" *
)))* +
]))+ ,
public** 
abstract** 
class** !
ConfiguratorAttribute** ,
:**- .
	Attribute**/ 8
,**8 9
IComparable**: E
{++ 
private,, 	
int,,
 

m_priority,, 
=,, 
$num,, 
;,, 
	protected99 !
ConfiguratorAttribute99 !
(99! "
int99" %
priority99& .
)99. /
{:: 

m_priority;; 
=;; 
priority;; 
;;; 
}<< 
publicII 
abstractII	 
voidII 
	ConfigureII  
(II  !
AssemblyII! )
sourceAssemblyII* 8
,II8 9
ILoggerRepositoryII: K
targetRepositoryIIL \
)II\ ]
;II] ^
publicWW 
intWW	 
	CompareToWW 
(WW 
objectWW 
objWW !
)WW! "
{XX 
ifZZ 
(ZZ 
(ZZ 
objectZZ 
)ZZ 
thisZZ 
==ZZ 
objZZ 
)ZZ 
{[[ 
return\\ 

$num\\ 
;\\ 
}]] 
int__ 
result__ 
=__ 
-__ 
$num__ 
;__ !
ConfiguratorAttributeaa 
targetaa 
=aa  !
objaa" %
asaa& (!
ConfiguratorAttributeaa) >
;aa> ?
ifbb 
(bb 
targetbb 
!=bb 
nullbb 
)bb 
{cc 
resultee 

=ee 
targetee 
.ee 

m_priorityee 
.ee 
	CompareToee (
(ee( )

m_priorityee) 3
)ee3 4
;ee4 5
ifff 
(ff 
resultff 
==ff 
$numff 
)ff 
{gg 
resultii 
=ii 
-ii 
$numii 
;ii 
}jj 
}kk 
returnll 	
resultll
 
;ll 
}mm 
}nn 
}oo ó
AC:\sonarqube\projects\log4net-2.0.7\src\Config\DomainAttribute.cs
	namespace 	
log4net
 
. 
Config 
{ 
[22 
AttributeUsage22 
(22 
AttributeTargets22 !
.22! "
Assembly22" *
)22* +
]22+ ,
[33 
Serializable33 
]33 
[44 
Obsolete44 

(44
 
$str44 ?
)44? @
]44@ A
public55 
sealed55 
class55 
DomainAttribute55 $
:55% &
RepositoryAttribute55' :
{66 
publicAA 
DomainAttributeAA	 
(AA 
)AA 
:AA 
baseAA !
(AA! "
)AA" #
{BB 
}CC 
publicOO 
DomainAttributeOO	 
(OO 
stringOO 
nameOO  $
)OO$ %
:OO& '
baseOO( ,
(OO, -
nameOO- 1
)OO1 2
{PP 
}QQ 
}TT 
}UU ∆3
AC:\sonarqube\projects\log4net-2.0.7\src\Config\DOMConfigurator.cs
	namespace 	
log4net
 
. 
Config 
{   
[.. 
Obsolete.. 

(..
 
$str.. ;
)..; <
]..< =
public// 
sealed// 
class// 
DOMConfigurator// $
{00 
private66 	
DOMConfigurator66
 
(66 
)66 
{77 
}88 
[LL 
ObsoleteLL 
(LL 
$strLL P
)LLP Q
]LLQ R
staticMM 
publicMM	 
voidMM 
	ConfigureMM 
(MM 
)MM  
{NN 
XmlConfiguratorOO 
.OO 
	ConfigureOO 
(OO 

LogManagerOO '
.OO' (
GetRepositoryOO( 5
(OO5 6
AssemblyOO6 >
.OO> ?
GetCallingAssemblyOO? Q
(OOQ R
)OOR S
)OOS T
)OOT U
;OOU V
}PP 
[aa 
Obsoleteaa 
(aa 
$straa P
)aaP Q
]aaQ R
staticbb 
publicbb	 
voidbb 
	Configurebb 
(bb 
ILoggerRepositorybb 0

repositorybb1 ;
)bb; <
{cc 
XmlConfiguratordd 
.dd 
	Configuredd 
(dd 

repositorydd '
)dd' (
;dd( )
}ee 
[rr 
Obsoleterr 
(rr 
$strrr P
)rrP Q
]rrQ R
staticss 
publicss	 
voidss 
	Configuress 
(ss 

XmlElementss )
elementss* 1
)ss1 2
{tt 
XmlConfiguratoruu 
.uu 
	Configureuu 
(uu 

LogManageruu '
.uu' (
GetRepositoryuu( 5
(uu5 6
Assemblyuu6 >
.uu> ?
GetCallingAssemblyuu? Q
(uuQ R
)uuR S
)uuS T
,uuT U
elementuuV ]
)uu] ^
;uu^ _
}vv 
[
ÖÖ 
Obsolete
ÖÖ 
(
ÖÖ 
$str
ÖÖ P
)
ÖÖP Q
]
ÖÖQ R
static
ÜÜ 
public
ÜÜ	 
void
ÜÜ 
	Configure
ÜÜ 
(
ÜÜ 
ILoggerRepository
ÜÜ 0

repository
ÜÜ1 ;
,
ÜÜ; <

XmlElement
ÜÜ= G
element
ÜÜH O
)
ÜÜO P
{
áá 
XmlConfigurator
àà 
.
àà 
	Configure
àà 
(
àà 

repository
àà '
,
àà' (
element
àà) 0
)
àà0 1
;
àà1 2
}
ââ 
[
µµ 
Obsolete
µµ 
(
µµ 
$str
µµ P
)
µµP Q
]
µµQ R
static
∂∂ 
public
∂∂	 
void
∂∂ 
	Configure
∂∂ 
(
∂∂ 
FileInfo
∂∂ '

configFile
∂∂( 2
)
∂∂2 3
{
∑∑ 
XmlConfigurator
∏∏ 
.
∏∏ 
	Configure
∏∏ 
(
∏∏ 

LogManager
∏∏ '
.
∏∏' (
GetRepository
∏∏( 5
(
∏∏5 6
Assembly
∏∏6 >
.
∏∏> ? 
GetCallingAssembly
∏∏? Q
(
∏∏Q R
)
∏∏R S
)
∏∏S T
,
∏∏T U

configFile
∏∏V `
)
∏∏` a
;
∏∏a b
}
ππ 
[
ÃÃ 
Obsolete
ÃÃ 
(
ÃÃ 
$str
ÃÃ P
)
ÃÃP Q
]
ÃÃQ R
static
ÕÕ 
public
ÕÕ	 
void
ÕÕ 
	Configure
ÕÕ 
(
ÕÕ 
Stream
ÕÕ %
configStream
ÕÕ& 2
)
ÕÕ2 3
{
ŒŒ 
XmlConfigurator
œœ 
.
œœ 
	Configure
œœ 
(
œœ 

LogManager
œœ '
.
œœ' (
GetRepository
œœ( 5
(
œœ5 6
Assembly
œœ6 >
.
œœ> ? 
GetCallingAssembly
œœ? Q
(
œœQ R
)
œœR S
)
œœS T
,
œœT U
configStream
œœV b
)
œœb c
;
œœc d
}
–– 
[
˛˛ 
Obsolete
˛˛ 
(
˛˛ 
$str
˛˛ P
)
˛˛P Q
]
˛˛Q R
static
ˇˇ 
public
ˇˇ	 
void
ˇˇ 
	Configure
ˇˇ 
(
ˇˇ 
ILoggerRepository
ˇˇ 0

repository
ˇˇ1 ;
,
ˇˇ; <
FileInfo
ˇˇ= E

configFile
ˇˇF P
)
ˇˇP Q
{
ÄÄ 
XmlConfigurator
ÅÅ 
.
ÅÅ 
	Configure
ÅÅ 
(
ÅÅ 

repository
ÅÅ '
,
ÅÅ' (

configFile
ÅÅ) 3
)
ÅÅ3 4
;
ÅÅ4 5
}
ÇÇ 
[
òò 
Obsolete
òò 
(
òò 
$str
òò P
)
òòP Q
]
òòQ R
static
ôô 
public
ôô	 
void
ôô 
	Configure
ôô 
(
ôô 
ILoggerRepository
ôô 0

repository
ôô1 ;
,
ôô; <
Stream
ôô= C
configStream
ôôD P
)
ôôP Q
{
öö 
XmlConfigurator
õõ 
.
õõ 
	Configure
õõ 
(
õõ 

repository
õõ '
,
õõ' (
configStream
õõ) 5
)
õõ5 6
;
õõ6 7
}
úú 
[
ºº 
Obsolete
ºº 
(
ºº 
$str
ºº `
)
ºº` a
]
ººa b
static
ΩΩ 
public
ΩΩ	 
void
ΩΩ 
ConfigureAndWatch
ΩΩ &
(
ΩΩ& '
FileInfo
ΩΩ' /

configFile
ΩΩ0 :
)
ΩΩ: ;
{
ææ 
XmlConfigurator
øø 
.
øø 
ConfigureAndWatch
øø $
(
øø$ %

LogManager
øø% /
.
øø/ 0
GetRepository
øø0 =
(
øø= >
Assembly
øø> F
.
øøF G 
GetCallingAssembly
øøG Y
(
øøY Z
)
øøZ [
)
øø[ \
,
øø\ ]

configFile
øø^ h
)
øøh i
;
øøi j
}
¿¿ 
[
‹‹ 
Obsolete
‹‹ 
(
‹‹ 
$str
‹‹ `
)
‹‹` a
]
‹‹a b
static
›› 
public
››	 
void
›› 
ConfigureAndWatch
›› &
(
››& '
ILoggerRepository
››' 8

repository
››9 C
,
››C D
FileInfo
››E M

configFile
››N X
)
››X Y
{
ﬁﬁ 
XmlConfigurator
ﬂﬂ 
.
ﬂﬂ 
ConfigureAndWatch
ﬂﬂ $
(
ﬂﬂ$ %

repository
ﬂﬂ% /
,
ﬂﬂ/ 0

configFile
ﬂﬂ1 ;
)
ﬂﬂ; <
;
ﬂﬂ< =
}
‡‡ 
}
‰‰ 
}ÂÂ û
JC:\sonarqube\projects\log4net-2.0.7\src\Config\DOMConfiguratorAttribute.cs
	namespace 	
log4net
 
. 
Config 
{   
[44 
AttributeUsage44 
(44 
AttributeTargets44 !
.44! "
Assembly44" *
)44* +
]44+ ,
[55 
Serializable55 
]55 
[66 
Obsolete66 

(66
 
$str66 M
)66M N
]66N O
public77 
sealed77 
class77 $
DOMConfiguratorAttribute77 -
:77. /$
XmlConfiguratorAttribute770 H
{88 
}99 
}:: ∫
TC:\sonarqube\projects\log4net-2.0.7\src\Config\Log4NetConfigurationSectionHandler.cs
	namespace 	
log4net
 
. 
Config 
{ 
public33 
class33 .
"Log4NetConfigurationSectionHandler33 0
:331 2(
IConfigurationSectionHandler333 O
{44 
public?? .
"Log4NetConfigurationSectionHandler??	 +
(??+ ,
)??, -
{@@ 
}AA 
publicSS 
objectSS	 
CreateSS 
(SS 
objectSS 
parentSS $
,SS$ %
objectSS& ,
configContextSS- :
,SS: ;
XmlNodeSS< C
sectionSSD K
)SSK L
{TT 
returnUU 	
sectionUU
 
;UU 
}VV 
}YY 
}ZZ ø 
AC:\sonarqube\projects\log4net-2.0.7\src\Config\PluginAttribute.cs
	namespace 	
log4net
 
. 
Config 
{   
[.. 
AttributeUsage.. 
(.. 
AttributeTargets.. !
...! "
Assembly.." *
,..* +
AllowMultiple..+ 8
=..8 9
true..9 =
)..= >
]..> ?
[// 
Serializable// 
]// 
public00 
sealed00 
class00 
PluginAttribute00 $
:00% &
	Attribute00' 0
,000 1
IPluginFactory002 @
{11 
publicBB 
PluginAttributeBB	 
(BB 
stringBB 
typeNameBB  (
)BB( )
{CC 

m_typeNameDD 
=DD 
typeNameDD 
;DD 
}EE 
publicRR 
PluginAttributeRR	 
(RR 
TypeRR 
typeRR "
)RR" #
{SS 
m_typeTT 	
=TT
 
typeTT 
;TT 
}UU 
publicff 
Typeff	 
Typeff 
{gg 
gethh 
{hh 
returnhh	 
m_typehh 
;hh 
}hh 
setii 
{ii 
m_typeii	 
=ii 
valueii 
;ii 
}ii 
}jj 
publiczz 
stringzz	 
TypeNamezz 
{{{ 
get|| 
{|| 
return||	 

m_typeName|| 
;|| 
}|| 
set}} 
{}} 

m_typeName}}	 
=}} 
value}} 
;}} 
}}} 
}~~ 
public
éé 
IPlugin
éé	 
CreatePlugin
éé 
(
éé 
)
éé 
{
èè 
Type
êê 

pluginType
êê 
=
êê 
m_type
êê 
;
êê 
if
íí 
(
íí 
m_type
íí 
==
íí 
null
íí 
)
íí 
{
ìì 

pluginType
ïï 
=
ïï 

SystemInfo
ïï 
.
ïï 
GetTypeFromString
ïï -
(
ïï- .

m_typeName
ïï. 8
,
ïï8 9
true
ïï: >
,
ïï> ?
true
ïï@ D
)
ïïD E
;
ïïE F
}
ññ 
if
ôô 
(
ôô 
!
ôô 
(
ôô 	
typeof
ôô	 
(
ôô 
IPlugin
ôô 
)
ôô 
.
ôô 
IsAssignableFrom
ôô )
(
ôô) *

pluginType
ôô* 4
)
ôô4 5
)
ôô5 6
)
ôô6 7
{
öö 
throw
õõ 	
new
õõ
 
LogException
õõ 
(
õõ 
$str
õõ *
+
õõ+ ,

pluginType
õõ- 7
.
õõ7 8
FullName
õõ8 @
+
õõA B
$str
õõC w
)
õõw x
;
õõx y
}
úú 
IPlugin
üü 

plugin
üü 
=
üü 
(
üü 
IPlugin
üü 
)
üü 
	Activator
üü &
.
üü& '
CreateInstance
üü' 5
(
üü5 6

pluginType
üü6 @
)
üü@ A
;
üüA B
return
°° 	
plugin
°°
 
;
°° 
}
¢¢ 
override
≤≤ 

public
≤≤ 
string
≤≤ 
ToString
≤≤ !
(
≤≤! "
)
≤≤" #
{
≥≥ 
if
¥¥ 
(
¥¥ 
m_type
¥¥ 
!=
¥¥ 
null
¥¥ 
)
¥¥ 
{
µµ 
return
∂∂ 

$str
∂∂ "
+
∂∂# $
m_type
∂∂% +
.
∂∂+ ,
FullName
∂∂, 4
+
∂∂5 6
$str
∂∂7 :
;
∂∂: ;
}
∑∑ 
return
∏∏ 	
$str
∏∏
 !
+
∏∏" #

m_typeName
∏∏$ .
+
∏∏/ 0
$str
∏∏1 4
;
∏∏4 5
}
ππ 
private
øø 	
string
øø
 

m_typeName
øø 
=
øø 
null
øø "
;
øø" #
private
¿¿ 	
Type
¿¿
 
m_type
¿¿ 
=
¿¿ 
null
¿¿ 
;
¿¿ 
}
√√ 
}ƒƒ ı
EC:\sonarqube\projects\log4net-2.0.7\src\Config\RepositoryAttribute.cs
	namespace 	
log4net
 
. 
Config 
{ 
[// 
AttributeUsage// 
(// 
AttributeTargets// !
.//! "
Assembly//" *
)//* +
]//+ ,
[00 
Serializable00 
]00 
public11 
class11 
RepositoryAttribute11 ,
:11- .
	Attribute11/ 8
{22 
publicAA 
RepositoryAttributeAA	 
(AA 
)AA 
{BB 
}CC 
publicOO 
RepositoryAttributeOO	 
(OO 
stringOO #
nameOO$ (
)OO( )
{PP 
m_nameQQ 	
=QQ
 
nameQQ 
;QQ 
}RR 
publicee 
stringee	 
Nameee 
{ff 
getgg 
{gg 
returngg	 
m_namegg 
;gg 
}gg 
sethh 
{hh 
m_namehh	 
=hh 
valuehh 
;hh 
}hh 
}ii 
public 
Type	 
RepositoryType 
{
ÄÄ 
get
ÅÅ 
{
ÅÅ 
return
ÅÅ	 
m_repositoryType
ÅÅ  
;
ÅÅ  !
}
ÅÅ" #
set
ÇÇ 
{
ÇÇ 
m_repositoryType
ÇÇ	 
=
ÇÇ 
value
ÇÇ !
;
ÇÇ" #
}
ÇÇ$ %
}
ÉÉ 
private
ââ 	
string
ââ
 
m_name
ââ 
=
ââ 
null
ââ 
;
ââ 
private
ää 	
Type
ää
 
m_repositoryType
ää 
=
ää  !
null
ää" &
;
ää& '
}
çç 
}éé ó
RC:\sonarqube\projects\log4net-2.0.7\src\Config\SecurityContextProviderAttribute.cs
	namespace 	
log4net
 
. 
Config 
{ 
[// 
AttributeUsage// 
(// 
AttributeTargets// !
.//! "
Assembly//" *
)//* +
]//+ ,
[00 
Serializable00 
]00 
public11 
sealed11 
class11 ,
 SecurityContextProviderAttribute11 5
:116 7!
ConfiguratorAttribute118 M
{22 
public?? ,
 SecurityContextProviderAttribute??	 )
(??) *
Type??* .
providerType??/ ;
)??; <
:??= >
base??? C
(??C D
$num??D G
)??G H
{@@ 
m_providerTypeAA 
=AA 
providerTypeAA  
;AA  !
}BB 
publicTT 
TypeTT	 
ProviderTypeTT 
{UU 
getVV 
{VV 
returnVV	 
m_providerTypeVV 
;VV 
}VV  !
setWW 
{WW 
m_providerTypeWW	 
=WW 
valueWW 
;WW  
}WW! "
}XX 
overrideii 

publicii 
voidii 
	Configureii  
(ii  !
Assemblyii! )
sourceAssemblyii* 8
,ii8 9
ILoggerRepositoryii: K
targetRepositoryiiL \
)ii\ ]
{jj 
ifkk 
(kk 
m_providerTypekk 
==kk 
nullkk 
)kk 
{ll 
LogLogmm 

.mm
 
Errormm 
(mm 
declaringTypemm 
,mm 
$strmm  C
+mmC D
sourceAssemblymmD R
.mmR S
FullNamemmS [
+mm[ \
$strmm\ w
)mmw x
;mmx y
}nn 
elseoo 
{pp 
LogLogqq 

.qq
 
Debugqq 
(qq 
declaringTypeqq 
,qq 
$strqq  =
+qq= >
m_providerTypeqq? M
.qqM N
FullNameqqN V
+qqW X
$strqqX [
)qq[ \
;qq\ ]#
SecurityContextProviderss 
providerss $
=ss% &
	Activatorss' 0
.ss0 1
CreateInstancess1 ?
(ss? @
m_providerTypess@ N
)ssN O
asssP R#
SecurityContextProviderssS j
;ssj k
ifuu 
(uu 
provideruu 
==uu 
nulluu 
)uu 
{vv 
LogLogww 
.ww 
Errorww 
(ww 
declaringTypeww 
,ww  
$strww! ^
+ww^ _
m_providerTypeww_ m
.wwm n
Namewwn r
+wwr s
$strwws w
)www x
;wwx y
}xx 
elseyy 
{zz #
SecurityContextProvider{{ 
.{{ 
DefaultProvider{{ ,
={{- .
provider{{/ 7
;{{7 8
}|| 
}}} 
}~~ 
private
ÑÑ 	
Type
ÑÑ
 
m_providerType
ÑÑ 
=
ÑÑ 
null
ÑÑ  $
;
ÑÑ$ %
private
ëë 
readonly
ëë 
static
ëë 
Type
ëë !
declaringType
ëë" /
=
ëë0 1
typeof
ëë2 8
(
ëë8 9.
 SecurityContextProviderAttribute
ëë9 Y
)
ëëY Z
;
ëëZ [
}
îî 
}ïï Ò 
AC:\sonarqube\projects\log4net-2.0.7\src\Config\XmlConfigurator.cs
	namespace   	
log4net  
 
.   
Config   
{!! 
public,, 
sealed,, 
class,, 
XmlConfigurator,, $
{-- 
private33 	
XmlConfigurator33
 
(33 
)33 
{44 
}55 
static`` 
public`` 
ICollection`` !
	Configure``" +
(``+ ,
ILoggerRepository``, =

repository``> H
)``H I
{aa 	
	ArrayListbb !
configurationMessagesbb +
=bb, -
newbb. 1
	ArrayListbb2 ;
(bb; <
)bb< =
;bb= >
usingdd 
(dd 
newdd 
LogLogdd 
.dd 
LogReceivedAdapterdd 0
(dd0 1!
configurationMessagesdd1 F
)ddF G
)ddG H
{ee 
InternalConfigureff !
(ff! "

repositoryff" ,
)ff, -
;ff- .
}gg 

repositoryii 
.ii !
ConfigurationMessagesii ,
=ii- .!
configurationMessagesii/ D
;iiD E
returnkk !
configurationMessageskk (
;kk( )
}ll 	
staticnn 
privatenn 
voidnn 
InternalConfigurenn *
(nn* +
ILoggerRepositorynn+ <

repositorynn= G
)nnG H
{oo 
LogLogpp 	
.pp	 

Debugpp
 
(pp 
declaringTypepp 
,pp 
$strpp 9
+pp: ;

repositorypp< F
.ppF G
NameppG K
+ppL M
$strppN l
)ppl m
;ppm n
tryrr 
{ss 
LogLogtt 

.tt
 
Debugtt 
(tt 
declaringTypett 
,tt 
$strtt  >
+tt? @

SystemInfottA K
.ttK L%
ConfigurationFileLocationttL e
+ttf g
$strtth k
)ttk l
;ttl m
}uu 
catchvv 
{ww 
LogLogyy 

.yy
 
Debugyy 
(yy 
declaringTypeyy 
,yy 
$stryy  J
)yyJ K
;yyK L
}zz 
try
ÄÄ 
{
ÅÅ 

XmlElement
ÇÇ 
configElement
ÇÇ 
=
ÇÇ 
null
ÇÇ #
;
ÇÇ# $
configElement
ÑÑ 
=
ÑÑ 
System
ÑÑ 
.
ÑÑ 
Configuration
ÑÑ (
.
ÑÑ( )"
ConfigurationManager
ÑÑ) =
.
ÑÑ= >

GetSection
ÑÑ> H
(
ÑÑH I
$str
ÑÑI R
)
ÑÑR S
as
ÑÑT V

XmlElement
ÑÑW a
;
ÑÑa b
if
àà 
(
àà 
configElement
àà 
==
àà 
null
àà 
)
àà 
{
ââ 
LogLog
ãã 
.
ãã 
Error
ãã 
(
ãã 
declaringType
ãã 
,
ãã  
$strãã! …
)ãã…  
;ãã  À
}
åå 
else
çç 
{
éé &
InternalConfigureFromXml
êê 
(
êê 

repository
êê (
,
êê( )
configElement
êê* 7
)
êê7 8
;
êê8 9
}
ëë 
}
íí 
catch
ìì 
(
ìì 	
System
ìì	 
.
ìì 
Configuration
ìì 
.
ìì $
ConfigurationException
ìì 4
confEx
ìì5 ;
)
ìì; <
{
îî 
if
ïï 
(
ïï 
confEx
ïï 
.
ïï 
BareMessage
ïï 
.
ïï 
IndexOf
ïï "
(
ïï" #
$str
ïï# 9
)
ïï9 :
>=
ïï; =
$num
ïï> ?
)
ïï? @
{
ññ 
LogLog
òò 
.
òò 
Error
òò 
(
òò 
declaringType
òò 
,
òò  
$str
òò! k
,
òòk l
confEx
òòm s
)
òòs t
;
òòt u
}
ôô 
else
öö 
{
õõ 
string
ùù 
configSectionStr
ùù 
=
ùù 
$str
ùù t
+
ùùu v
Assembly
ùùw 
.ùù Ä$
GetExecutingAssemblyùùÄ î
(ùùî ï
)ùùï ñ
.ùùñ ó
FullNameùùó ü
+ùù† °
$strùù¢ ©
;ùù© ™
LogLog
ûû 
.
ûû 
Error
ûû 
(
ûû 
declaringType
ûû 
,
ûû  
$str
ûû! f
+
ûûg h
configSectionStr
ûûi y
,
ûûy z
confExûû{ Å
)ûûÅ Ç
;ûûÇ É
}
üü 
}
†† 
}
¢¢ 
static
…… 
public
…… 
ICollection
…… !
	Configure
……" +
(
……+ ,
)
……, -
{
   	
return
ÀÀ 
	Configure
ÀÀ 
(
ÀÀ 

LogManager
ÀÀ '
.
ÀÀ' (
GetRepository
ÀÀ( 5
(
ÀÀ5 6
Assembly
ÀÀ6 >
.
ÀÀ> ? 
GetCallingAssembly
ÀÀ? Q
(
ÀÀQ R
)
ÀÀR S
)
ÀÀS T
)
ÀÀT U
;
ÀÀU V
}
ÃÃ 	
static
ÿÿ 
public
ÿÿ	 
ICollection
ÿÿ 
	Configure
ÿÿ %
(
ÿÿ% &

XmlElement
ÿÿ& 0
element
ÿÿ1 8
)
ÿÿ8 9
{
ŸŸ 
	ArrayList
⁄⁄ #
configurationMessages
⁄⁄ +
=
⁄⁄, -
new
⁄⁄. 1
	ArrayList
⁄⁄2 ;
(
⁄⁄; <
)
⁄⁄< =
;
⁄⁄= >
ILoggerRepository
‹‹ 

repository
‹‹ (
=
‹‹) *

LogManager
‹‹+ 5
.
‹‹5 6
GetRepository
‹‹6 C
(
‹‹C D
Assembly
‹‹D L
.
‹‹L M 
GetCallingAssembly
‹‹M _
(
‹‹_ `
)
‹‹` a
)
‹‹a b
;
‹‹b c
using
ﬁﬁ 
(
ﬁﬁ 
new
ﬁﬁ 
LogLog
ﬁﬁ 
.
ﬁﬁ  
LogReceivedAdapter
ﬁﬁ 0
(
ﬁﬁ0 1#
configurationMessages
ﬁﬁ1 F
)
ﬁﬁF G
)
ﬁﬁG H
{
ﬂﬂ &
InternalConfigureFromXml
‡‡ (
(
‡‡( )

repository
‡‡) 3
,
‡‡3 4
element
‡‡5 <
)
‡‡< =
;
‡‡= >
}
·· 

repository
„„ 
.
„„ #
ConfigurationMessages
„„ ,
=
„„- .#
configurationMessages
„„/ D
;
„„D E
return
ÂÂ #
configurationMessages
ÂÂ (
;
ÂÂ( )
}
ÊÊ 
static
øø 
public
øø	 
ICollection
øø 
	Configure
øø %
(
øø% &
FileInfo
øø& .

configFile
øø/ 9
)
øø9 :
{
¿¿ 
	ArrayList
¡¡ #
configurationMessages
¡¡ +
=
¡¡, -
new
¡¡. 1
	ArrayList
¡¡2 ;
(
¡¡; <
)
¡¡< =
;
¡¡= >
using
√√ 
(
√√ 
new
√√ 
LogLog
√√ 
.
√√  
LogReceivedAdapter
√√ 0
(
√√0 1#
configurationMessages
√√1 F
)
√√F G
)
√√G H
{
ƒƒ 
InternalConfigure
≈≈ !
(
≈≈! "

LogManager
≈≈" ,
.
≈≈, -
GetRepository
≈≈- :
(
≈≈: ;
Assembly
≈≈; C
.
≈≈C D 
GetCallingAssembly
≈≈D V
(
≈≈V W
)
≈≈W X
)
≈≈X Y
,
≈≈Y Z

configFile
≈≈[ e
)
≈≈e f
;
≈≈f g
}
∆∆ 
return
»» #
configurationMessages
»» (
;
»»( )
}
…… 
static
ŸŸ 
public
ŸŸ	 
ICollection
ŸŸ 
	Configure
ŸŸ %
(
ŸŸ% &
Uri
ŸŸ& )
	configUri
ŸŸ* 3
)
ŸŸ3 4
{
⁄⁄ 
	ArrayList
€€ #
configurationMessages
€€ +
=
€€, -
new
€€. 1
	ArrayList
€€2 ;
(
€€; <
)
€€< =
;
€€= >
ILoggerRepository
›› 

repository
›› (
=
››) *

LogManager
››+ 5
.
››5 6
GetRepository
››6 C
(
››C D
Assembly
››D L
.
››L M 
GetCallingAssembly
››M _
(
››_ `
)
››` a
)
››a b
;
››b c
using
ﬁﬁ 
(
ﬁﬁ 
new
ﬁﬁ 
LogLog
ﬁﬁ 
.
ﬁﬁ  
LogReceivedAdapter
ﬁﬁ 0
(
ﬁﬁ0 1#
configurationMessages
ﬁﬁ1 F
)
ﬁﬁF G
)
ﬁﬁG H
{
ﬂﬂ 
InternalConfigure
‡‡ !
(
‡‡! "

repository
‡‡" ,
,
‡‡, -
	configUri
‡‡. 7
)
‡‡7 8
;
‡‡8 9
}
·· 

repository
„„ 
.
„„ #
ConfigurationMessages
„„ ,
=
„„- .#
configurationMessages
„„/ D
;
„„D E
return
ÂÂ #
configurationMessages
ÂÂ (
;
ÂÂ( )
}
ÊÊ 
static
ˆˆ 
public
ˆˆ	 
ICollection
ˆˆ 
	Configure
ˆˆ %
(
ˆˆ% &
Stream
ˆˆ& ,
configStream
ˆˆ- 9
)
ˆˆ9 :
{
˜˜ 
	ArrayList
¯¯ #
configurationMessages
¯¯ +
=
¯¯, -
new
¯¯. 1
	ArrayList
¯¯2 ;
(
¯¯; <
)
¯¯< =
;
¯¯= >
ILoggerRepository
˙˙ 

repository
˙˙ (
=
˙˙) *

LogManager
˙˙+ 5
.
˙˙5 6
GetRepository
˙˙6 C
(
˙˙C D
Assembly
˙˙D L
.
˙˙L M 
GetCallingAssembly
˙˙M _
(
˙˙_ `
)
˙˙` a
)
˙˙a b
;
˙˙b c
using
˚˚ 
(
˚˚ 
new
˚˚ 
LogLog
˚˚ 
.
˚˚  
LogReceivedAdapter
˚˚ 0
(
˚˚0 1#
configurationMessages
˚˚1 F
)
˚˚F G
)
˚˚G H
{
¸¸ 
InternalConfigure
˝˝ !
(
˝˝! "

repository
˝˝" ,
,
˝˝, -
configStream
˝˝. :
)
˝˝: ;
;
˝˝; <
}
˛˛ 

repository
ÄÄ 
.
ÄÄ #
ConfigurationMessages
ÄÄ ,
=
ÄÄ- .#
configurationMessages
ÄÄ/ D
;
ÄÄD E
return
ÇÇ #
configurationMessages
ÇÇ (
;
ÇÇ( )
}
ÉÉ 
static
êê 
public
êê 
ICollection
êê !
	Configure
êê" +
(
êê+ ,
ILoggerRepository
êê, =

repository
êê> H
,
êêH I

XmlElement
êêJ T
element
êêU \
)
êê\ ]
{
ëë 	
	ArrayList
íí #
configurationMessages
íí +
=
íí, -
new
íí. 1
	ArrayList
íí2 ;
(
íí; <
)
íí< =
;
íí= >
using
îî 
(
îî 
new
îî 
LogLog
îî 
.
îî  
LogReceivedAdapter
îî 0
(
îî0 1#
configurationMessages
îî1 F
)
îîF G
)
îîG H
{
ïï 
LogLog
ññ 
.
ññ 
Debug
ññ 
(
ññ 
declaringType
ññ *
,
ññ* +
$str
ññ, F
+
ññG H

repository
ññI S
.
ññS T
Name
ññT X
+
ññY Z
$str
ññ[ p
)
ññp q
;
ññq r&
InternalConfigureFromXml
òò (
(
òò( )

repository
òò) 3
,
òò3 4
element
òò5 <
)
òò< =
;
òò= >
}
ôô 

repository
õõ 
.
õõ #
ConfigurationMessages
õõ ,
=
õõ- .#
configurationMessages
õõ/ D
;
õõD E
return
ùù #
configurationMessages
ùù (
;
ùù( )
}
ûû 	
static
˚˚ 
public
˚˚ 
ICollection
˚˚ !
	Configure
˚˚" +
(
˚˚+ ,
ILoggerRepository
˚˚, =

repository
˚˚> H
,
˚˚H I
FileInfo
˚˚J R

configFile
˚˚S ]
)
˚˚] ^
{
¸¸ 	
	ArrayList
˝˝ #
configurationMessages
˝˝ +
=
˝˝, -
new
˝˝. 1
	ArrayList
˝˝2 ;
(
˝˝; <
)
˝˝< =
;
˝˝= >
using
ˇˇ 
(
ˇˇ 
new
ˇˇ 
LogLog
ˇˇ 
.
ˇˇ  
LogReceivedAdapter
ˇˇ 0
(
ˇˇ0 1#
configurationMessages
ˇˇ1 F
)
ˇˇF G
)
ˇˇG H
{
ÄÄ 
InternalConfigure
ÅÅ !
(
ÅÅ! "

repository
ÅÅ" ,
,
ÅÅ, -

configFile
ÅÅ. 8
)
ÅÅ8 9
;
ÅÅ9 :
}
ÇÇ 

repository
ÑÑ 
.
ÑÑ #
ConfigurationMessages
ÑÑ ,
=
ÑÑ- .#
configurationMessages
ÑÑ/ D
;
ÑÑD E
return
ÜÜ #
configurationMessages
ÜÜ (
;
ÜÜ( )
}
áá 	
static
ââ 
private
ââ	 
void
ââ 
InternalConfigure
ââ '
(
ââ' (
ILoggerRepository
ââ( 9

repository
ââ: D
,
ââD E
FileInfo
ââF N

configFile
ââO Y
)
ââY Z
{
ää 
LogLog
ãã 	
.
ãã	 

Debug
ãã
 
(
ãã 
declaringType
ãã 
,
ãã 
$str
ãã 9
+
ãã: ;

repository
ãã< F
.
ããF G
Name
ããG K
+
ããL M
$str
ããN ^
+
ãã_ `

configFile
ããa k
+
ããl m
$str
ããn q
)
ããq r
;
ããr s
if
çç 
(
çç 

configFile
çç 
==
çç 
null
çç 
)
çç 
{
éé 
LogLog
èè 

.
èè
 
Error
èè 
(
èè 
declaringType
èè 
,
èè 
$str
èè  S
)
èèS T
;
èèT U
}
êê 
else
ëë 
{
íí 
if
ïï 
(
ïï 
File
ïï 
.
ïï 
Exists
ïï 
(
ïï 

configFile
ïï 
.
ïï 
FullName
ïï '
)
ïï' (
)
ïï( )
{
ññ 

FileStream
òò 
fs
òò 
=
òò 
null
òò 
;
òò 
for
õõ 
(
õõ 	
int
õõ	 
retry
õõ 
=
õõ 
$num
õõ 
;
õõ 
--
õõ 
retry
õõ 
>=
õõ  "
$num
õõ# $
;
õõ$ %
)
õõ& '
{
úú 
try
ùù 	
{
ûû 
fs
üü 	
=
üü
 

configFile
üü 
.
üü 
Open
üü 
(
üü 
FileMode
üü $
.
üü$ %
Open
üü% )
,
üü) *

FileAccess
üü+ 5
.
üü5 6
Read
üü6 :
,
üü: ;
	FileShare
üü< E
.
üüE F
Read
üüF J
)
üüJ K
;
üüK L
break
†† 
;
†† 
}
°° 
catch
¢¢ 
(
¢¢ 
IOException
¢¢ 
ex
¢¢ 
)
¢¢ 
{
££ 
if
§§ 	
(
§§
 
retry
§§ 
==
§§ 
$num
§§ 
)
§§ 
{
•• 
LogLog
¶¶ 
.
¶¶ 
Error
¶¶ 
(
¶¶ 
declaringType
¶¶ "
,
¶¶" #
$str
¶¶$ F
+
¶¶G H

configFile
¶¶I S
.
¶¶S T
Name
¶¶T X
+
¶¶Y Z
$str
¶¶[ ^
,
¶¶^ _
ex
¶¶` b
)
¶¶b c
;
¶¶c d
fs
©© 

=
©© 
null
©© 
;
©© 
}
™™ 
System
´´ 
.
´´ 
	Threading
´´ 
.
´´ 
Thread
´´ 
.
´´ 
Sleep
´´ $
(
´´$ %
$num
´´% (
)
´´( )
;
´´) *
}
¨¨ 
}
≠≠ 
if
ØØ 
(
ØØ 	
fs
ØØ	 
!=
ØØ 
null
ØØ 
)
ØØ 
{
∞∞ 
try
±± 	
{
≤≤ 
InternalConfigure
¥¥ 
(
¥¥ 

repository
¥¥ #
,
¥¥# $
fs
¥¥% '
)
¥¥' (
;
¥¥( )
}
µµ 
finally
∂∂ 
{
∑∑ 
fs
ππ 	
.
ππ	 

Close
ππ
 
(
ππ 
)
ππ 
;
ππ 
}
∫∫ 
}
ªª 
}
ºº 
else
ΩΩ 
{
ææ 
LogLog
øø 
.
øø 
Debug
øø 
(
øø 
declaringType
øø 
,
øø  
$str
øø! 0
+
øø1 2

configFile
øø3 =
.
øø= >
FullName
øø> F
+
øøG H
$str
øøI p
)
øøp q
;
øøq r
}
¿¿ 
}
¡¡ 
}
¬¬ 
static
‘‘ 
public
‘‘ 
ICollection
‘‘ !
	Configure
‘‘" +
(
‘‘+ ,
ILoggerRepository
‘‘, =

repository
‘‘> H
,
‘‘H I
Uri
‘‘J M
	configUri
‘‘N W
)
‘‘W X
{
’’ 	
	ArrayList
÷÷ #
configurationMessages
÷÷ +
=
÷÷, -
new
÷÷. 1
	ArrayList
÷÷2 ;
(
÷÷; <
)
÷÷< =
;
÷÷= >
using
ÿÿ 
(
ÿÿ 
new
ÿÿ 
LogLog
ÿÿ 
.
ÿÿ  
LogReceivedAdapter
ÿÿ 0
(
ÿÿ0 1#
configurationMessages
ÿÿ1 F
)
ÿÿF G
)
ÿÿG H
{
ŸŸ 
InternalConfigure
⁄⁄ !
(
⁄⁄! "

repository
⁄⁄" ,
,
⁄⁄, -
	configUri
⁄⁄. 7
)
⁄⁄7 8
;
⁄⁄8 9
}
€€ 

repository
›› 
.
›› #
ConfigurationMessages
›› ,
=
››- .#
configurationMessages
››/ D
;
››D E
return
ﬂﬂ #
configurationMessages
ﬂﬂ (
;
ﬂﬂ( )
}
‡‡ 	
static
‚‚ 
private
‚‚	 
void
‚‚ 
InternalConfigure
‚‚ '
(
‚‚' (
ILoggerRepository
‚‚( 9

repository
‚‚: D
,
‚‚D E
Uri
‚‚F I
	configUri
‚‚J S
)
‚‚S T
{
„„ 
LogLog
‰‰ 	
.
‰‰	 

Debug
‰‰
 
(
‰‰ 
declaringType
‰‰ 
,
‰‰ 
$str
‰‰ 9
+
‰‰: ;

repository
‰‰< F
.
‰‰F G
Name
‰‰G K
+
‰‰L M
$str
‰‰N ]
+
‰‰] ^
	configUri
‰‰^ g
+
‰‰g h
$str
‰‰h k
)
‰‰k l
;
‰‰l m
if
ÊÊ 
(
ÊÊ 
	configUri
ÊÊ 
==
ÊÊ 
null
ÊÊ 
)
ÊÊ 
{
ÁÁ 
LogLog
ËË 

.
ËË
 
Error
ËË 
(
ËË 
declaringType
ËË 
,
ËË 
$str
ËË  R
)
ËËR S
;
ËËS T
}
ÈÈ 
else
ÍÍ 
{
ÎÎ 
if
ÏÏ 
(
ÏÏ 
	configUri
ÏÏ 
.
ÏÏ 
IsFile
ÏÏ 
)
ÏÏ 
{
ÌÌ 
InternalConfigure
ÔÔ 
(
ÔÔ 

repository
ÔÔ !
,
ÔÔ! "
new
ÔÔ# &
FileInfo
ÔÔ' /
(
ÔÔ/ 0
	configUri
ÔÔ0 9
.
ÔÔ9 :
	LocalPath
ÔÔ: C
)
ÔÔC D
)
ÔÔD E
;
ÔÔE F
}
 
else
ÒÒ 
{
ÚÚ 

WebRequest
ÙÙ 
configRequest
ÙÙ 
=
ÙÙ 
null
ÙÙ  $
;
ÙÙ$ %
try
ˆˆ 
{
˜˜ 
configRequest
¯¯ 
=
¯¯ 

WebRequest
¯¯  
.
¯¯  !
Create
¯¯! '
(
¯¯' (
	configUri
¯¯( 1
)
¯¯1 2
;
¯¯2 3
}
˘˘ 
catch
˙˙ 

(
˙˙
 
	Exception
˙˙ 
ex
˙˙ 
)
˙˙ 
{
˚˚ 
LogLog
¸¸ 
.
¸¸ 
Error
¸¸ 
(
¸¸ 
declaringType
¸¸  
,
¸¸  !
$str
¸¸" I
+
¸¸I J
	configUri
¸¸J S
+
¸¸S T
$str
¸¸T W
,
¸¸W X
ex
¸¸Y [
)
¸¸[ \
;
¸¸\ ]
}
˝˝ 
if
ˇˇ 
(
ˇˇ 	
configRequest
ˇˇ	 
!=
ˇˇ 
null
ˇˇ 
)
ˇˇ 
{
ÄÄ 
try
ÉÉ 	
{
ÑÑ 
configRequest
ÖÖ 
.
ÖÖ 
Credentials
ÖÖ  
=
ÖÖ! "
CredentialCache
ÖÖ# 2
.
ÖÖ2 3 
DefaultCredentials
ÖÖ3 E
;
ÖÖE F
}
ÜÜ 
catch
áá 
{
àà 
}
ää 
try
åå 	
{
çç 
WebResponse
ëë 
response
ëë 
=
ëë 
configRequest
ëë +
.
ëë+ ,
GetResponse
ëë, 7
(
ëë7 8
)
ëë8 9
;
ëë9 :
if
ìì 	
(
ìì
 
response
ìì 
!=
ìì 
null
ìì 
)
ìì 
{
îî 
try
ïï 
{
ññ 	
using
òò	 
(
òò 
Stream
òò 
configStream
òò "
=
òò# $
response
òò% -
.
òò- .
GetResponseStream
òò. ?
(
òò? @
)
òò@ A
)
òòA B
{
ôô	 

InternalConfigure
öö
 
(
öö 

repository
öö &
,
öö& '
configStream
öö( 4
)
öö4 5
;
öö5 6
}
õõ	 

}
úú 	
finally
ùù 
{
ûû 	
response
üü	 
.
üü 
Close
üü 
(
üü 
)
üü 
;
üü 
}
†† 	
}
°° 
}
¢¢ 
catch
££ 
(
££ 
	Exception
££ 
ex
££ 
)
££ 
{
§§ 
LogLog
•• 
.
•• 
Error
•• 
(
•• 
declaringType
•• !
,
••! "
$str
••# H
+
••H I
	configUri
••I R
+
••R S
$str
••S V
,
••V W
ex
••X Z
)
••Z [
;
••[ \
}
¶¶ 
}
ßß 
}
®® 
}
©© 
}
™™ 
static
ºº 
public
ºº 
ICollection
ºº !
	Configure
ºº" +
(
ºº+ ,
ILoggerRepository
ºº, =

repository
ºº> H
,
ººH I
Stream
ººJ P
configStream
ººQ ]
)
ºº] ^
{
ΩΩ 	
	ArrayList
ææ #
configurationMessages
ææ +
=
ææ, -
new
ææ. 1
	ArrayList
ææ2 ;
(
ææ; <
)
ææ< =
;
ææ= >
using
¿¿ 
(
¿¿ 
new
¿¿ 
LogLog
¿¿ 
.
¿¿  
LogReceivedAdapter
¿¿ 0
(
¿¿0 1#
configurationMessages
¿¿1 F
)
¿¿F G
)
¿¿G H
{
¡¡ 
InternalConfigure
¬¬ !
(
¬¬! "

repository
¬¬" ,
,
¬¬, -
configStream
¬¬. :
)
¬¬: ;
;
¬¬; <
}
√√ 

repository
≈≈ 
.
≈≈ #
ConfigurationMessages
≈≈ ,
=
≈≈- .#
configurationMessages
≈≈/ D
;
≈≈D E
return
«« #
configurationMessages
«« (
;
««( )
}
»» 	
static
   
private
  	 
void
   
InternalConfigure
   '
(
  ' (
ILoggerRepository
  ( 9

repository
  : D
,
  D E
Stream
  F L
configStream
  M Y
)
  Y Z
{
ÀÀ 
LogLog
ÃÃ 	
.
ÃÃ	 

Debug
ÃÃ
 
(
ÃÃ 
declaringType
ÃÃ 
,
ÃÃ 
$str
ÃÃ 9
+
ÃÃ: ;

repository
ÃÃ< F
.
ÃÃF G
Name
ÃÃG K
+
ÃÃL M
$str
ÃÃN ^
)
ÃÃ^ _
;
ÃÃ_ `
if
ŒŒ 
(
ŒŒ 
configStream
ŒŒ 
==
ŒŒ 
null
ŒŒ 
)
ŒŒ 
{
œœ 
LogLog
–– 

.
––
 
Error
–– 
(
–– 
declaringType
–– 
,
–– 
$str
––  U
)
––U V
;
––V W
}
—— 
else
““ 
{
”” 
XmlDocument
’’ 
doc
’’ 
=
’’ 
new
’’ 
XmlDocument
’’ %
(
’’% &
)
’’& '
;
’’' (
try
÷÷ 
{
◊◊ 
XmlReaderSettings
›› 
settings
›› 
=
››  !
new
››" %
XmlReaderSettings
››& 7
(
››7 8
)
››8 9
;
››9 :
settings
ÂÂ 
.
ÂÂ 
DtdProcessing
ÂÂ 
=
ÂÂ 
DtdProcessing
ÂÂ +
.
ÂÂ+ ,
Parse
ÂÂ, 1
;
ÂÂ1 2
	XmlReader
ÈÈ 
	xmlReader
ÈÈ 
=
ÈÈ 
	XmlReader
ÈÈ $
.
ÈÈ$ %
Create
ÈÈ% +
(
ÈÈ+ ,
configStream
ÈÈ, 8
,
ÈÈ8 9
settings
ÈÈ: B
)
ÈÈB C
;
ÈÈC D
doc
ıı 
.
ıı 	
Load
ıı	 
(
ıı 
	xmlReader
ıı 
)
ıı 
;
ıı 
}
ˆˆ 
catch
˜˜ 	
(
˜˜	 

	Exception
˜˜
 
ex
˜˜ 
)
˜˜ 
{
¯¯ 
LogLog
˘˘ 
.
˘˘ 
Error
˘˘ 
(
˘˘ 
declaringType
˘˘ 
,
˘˘  
$str
˘˘! H
,
˘˘H I
ex
˘˘J L
)
˘˘L M
;
˘˘M N
doc
¸¸ 
=
¸¸	 

null
¸¸ 
;
¸¸ 
}
˝˝ 
if
ˇˇ 
(
ˇˇ 
doc
ˇˇ 
!=
ˇˇ 
null
ˇˇ 
)
ˇˇ 
{
ÄÄ 
LogLog
ÅÅ 
.
ÅÅ 
Debug
ÅÅ 
(
ÅÅ 
declaringType
ÅÅ 
,
ÅÅ  
$str
ÅÅ! <
)
ÅÅ< =
;
ÅÅ= >
XmlNodeList
ÑÑ 
configNodeList
ÑÑ 
=
ÑÑ  !
doc
ÑÑ" %
.
ÑÑ% &"
GetElementsByTagName
ÑÑ& :
(
ÑÑ: ;
$str
ÑÑ; D
)
ÑÑD E
;
ÑÑE F
if
ÖÖ 
(
ÖÖ 	
configNodeList
ÖÖ	 
.
ÖÖ 
Count
ÖÖ 
==
ÖÖ  
$num
ÖÖ! "
)
ÖÖ" #
{
ÜÜ 
LogLog
áá 
.
áá 
Debug
áá 
(
áá 
declaringType
áá  
,
áá  !
$str
áá" r
)
áár s
;
áás t
}
àà 
else
ââ 	
if
ââ
 
(
ââ 
configNodeList
ââ 
.
ââ 
Count
ââ "
>
ââ# $
$num
ââ% &
)
ââ& '
{
ää 
LogLog
ãã 
.
ãã 
Error
ãã 
(
ãã 
declaringType
ãã  
,
ãã  !
$str
ãã" @
+
ããA B
configNodeList
ããC Q
.
ããQ R
Count
ããR W
+
ããX Y
$strããZ ù
)ããù û
;ããû ü
}
åå 
else
çç 	
{
éé &
InternalConfigureFromXml
èè 
(
èè 

repository
èè )
,
èè) *
configNodeList
èè+ 9
[
èè9 :
$num
èè: ;
]
èè; <
as
èè= ?

XmlElement
èè@ J
)
èèJ K
;
èèK L
}
êê 
}
ëë 
}
íí 
}
ìì 
static
∞∞ 
public
∞∞	 
ICollection
∞∞ 
ConfigureAndWatch
∞∞ -
(
∞∞- .
FileInfo
∞∞. 6

configFile
∞∞7 A
)
∞∞A B
{
±± 
	ArrayList
≤≤ #
configurationMessages
≤≤ +
=
≤≤, -
new
≤≤. 1
	ArrayList
≤≤2 ;
(
≤≤; <
)
≤≤< =
;
≤≤= >
ILoggerRepository
¥¥ 

repository
¥¥ (
=
¥¥) *

LogManager
¥¥+ 5
.
¥¥5 6
GetRepository
¥¥6 C
(
¥¥C D
Assembly
¥¥D L
.
¥¥L M 
GetCallingAssembly
¥¥M _
(
¥¥_ `
)
¥¥` a
)
¥¥a b
;
¥¥b c
using
∂∂ 
(
∂∂ 
new
∂∂ 
LogLog
∂∂ 
.
∂∂  
LogReceivedAdapter
∂∂ 0
(
∂∂0 1#
configurationMessages
∂∂1 F
)
∂∂F G
)
∂∂G H
{
∑∑ '
InternalConfigureAndWatch
∏∏ )
(
∏∏) *

repository
∏∏* 4
,
∏∏4 5

configFile
∏∏6 @
)
∏∏@ A
;
∏∏A B
}
ππ 

repository
ªª 
.
ªª #
ConfigurationMessages
ªª ,
=
ªª- .#
configurationMessages
ªª/ D
;
ªªD E
return
ΩΩ #
configurationMessages
ΩΩ (
;
ΩΩ( )
}
ææ 
static
ÿÿ 
public
ÿÿ 
ICollection
ÿÿ !
ConfigureAndWatch
ÿÿ" 3
(
ÿÿ3 4
ILoggerRepository
ÿÿ4 E

repository
ÿÿF P
,
ÿÿP Q
FileInfo
ÿÿR Z

configFile
ÿÿ[ e
)
ÿÿe f
{
ŸŸ 	
	ArrayList
⁄⁄ #
configurationMessages
⁄⁄ +
=
⁄⁄, -
new
⁄⁄. 1
	ArrayList
⁄⁄2 ;
(
⁄⁄; <
)
⁄⁄< =
;
⁄⁄= >
using
‹‹ 
(
‹‹ 
new
‹‹ 
LogLog
‹‹ 
.
‹‹  
LogReceivedAdapter
‹‹ 0
(
‹‹0 1#
configurationMessages
‹‹1 F
)
‹‹F G
)
‹‹G H
{
›› '
InternalConfigureAndWatch
ﬁﬁ )
(
ﬁﬁ) *

repository
ﬁﬁ* 4
,
ﬁﬁ4 5

configFile
ﬁﬁ6 @
)
ﬁﬁ@ A
;
ﬁﬁA B
}
ﬂﬂ 

repository
·· 
.
·· #
ConfigurationMessages
·· ,
=
··- .#
configurationMessages
··/ D
;
··D E
return
„„ #
configurationMessages
„„ (
;
„„( )
}
‰‰ 	
static
ÊÊ 
private
ÊÊ	 
void
ÊÊ '
InternalConfigureAndWatch
ÊÊ /
(
ÊÊ/ 0
ILoggerRepository
ÊÊ0 A

repository
ÊÊB L
,
ÊÊL M
FileInfo
ÊÊN V

configFile
ÊÊW a
)
ÊÊa b
{
ÁÁ 
LogLog
ËË 	
.
ËË	 

Debug
ËË
 
(
ËË 
declaringType
ËË 
,
ËË 
$str
ËË 9
+
ËË: ;

repository
ËË< F
.
ËËF G
Name
ËËG K
+
ËËL M
$str
ËËN ^
+
ËË_ `

configFile
ËËa k
+
ËËl m
$strËËn ã
)ËËã å
;ËËå ç
if
ÍÍ 
(
ÍÍ 

configFile
ÍÍ 
==
ÍÍ 
null
ÍÍ 
)
ÍÍ 
{
ÎÎ 
LogLog
ÏÏ 

.
ÏÏ
 
Error
ÏÏ 
(
ÏÏ 
declaringType
ÏÏ 
,
ÏÏ 
$str
ÏÏ  [
)
ÏÏ[ \
;
ÏÏ\ ]
}
ÌÌ 
else
ÓÓ 
{
ÔÔ 
InternalConfigure
ÒÒ 
(
ÒÒ 

repository
ÒÒ  
,
ÒÒ  !

configFile
ÒÒ" ,
)
ÒÒ, -
;
ÒÒ- .
try
ÛÛ 
{
ÙÙ 
lock
ıı 
(
ıı 4
&m_repositoryName2ConfigAndWatchHandler
ıı @
)
ıı@ A
{
ˆˆ &
ConfigureAndWatchHandler
¯¯ 0
handler
¯¯1 8
=
¯¯9 :
(
˘˘ &
ConfigureAndWatchHandler
˘˘  
)
˘˘  !4
&m_repositoryName2ConfigAndWatchHandler
˘˘! G
[
˘˘G H

configFile
˘˘H R
.
˘˘R S
FullName
˘˘S [
]
˘˘[ \
;
˘˘\ ]
if
˚˚ 
(
˚˚ 
handler
˚˚ #
!=
˚˚$ &
null
˚˚' +
)
˚˚+ ,
{
¸¸ 4
&m_repositoryName2ConfigAndWatchHandler
˝˝ -
.
˝˝- .
Remove
˝˝. 4
(
˝˝4 5

configFile
˝˝5 ?
.
˝˝? @
FullName
˝˝@ H
)
˝˝H I
;
˝˝I J
handler
˛˛ #
.
˛˛# $
Dispose
˛˛$ +
(
˛˛+ ,
)
˛˛, -
;
˛˛- .
}
ˇˇ 
handler
ÉÉ 
=
ÉÉ  !
new
ÉÉ" %&
ConfigureAndWatchHandler
ÉÉ& >
(
ÉÉ> ?

repository
ÉÉ? I
,
ÉÉI J

configFile
ÉÉK U
)
ÉÉU V
;
ÉÉV W4
&m_repositoryName2ConfigAndWatchHandler
ÑÑ ,
[
ÑÑ, -

configFile
ÑÑ- 7
.
ÑÑ7 8
FullName
ÑÑ8 @
]
ÑÑ@ A
=
ÑÑB C
handler
ÑÑD K
;
ÑÑK L
}
ÖÖ 
}
ÜÜ 
catch
áá 	
(
áá	 

	Exception
áá
 
ex
áá 
)
áá 
{
àà 
LogLog
ââ 
.
ââ 
Error
ââ 
(
ââ 
declaringType
ââ 
,
ââ  
$str
ââ! ]
+
ââ] ^

configFile
ââ^ h
.
ââh i
FullName
ââi q
+
ââq r
$str
ââr u
,
ââu v
ex
ââw y
)
âây z
;
ââz {
}
ää 
}
ãã 
}
åå 
private
§§ 	
sealed
§§
 
class
§§ &
ConfigureAndWatchHandler
§§ /
:
§§0 1
IDisposable
§§2 =
{
•• 
private
©© 

FileInfo
©© 
m_configFile
©©  
;
©©  !
private
ÆÆ 

ILoggerRepository
ÆÆ 
m_repository
ÆÆ )
;
ÆÆ) *
private
≥≥ 

Timer
≥≥ 
m_timer
≥≥ 
;
≥≥ 
private
ππ 

const
ππ 
int
ππ 
TimeoutMillis
ππ "
=
ππ# $
$num
ππ% (
;
ππ( )
private
øø 
FileSystemWatcher
øø %
	m_watcher
øø& /
;
øø/ 0
[
ÕÕ 
System
ÕÕ 
.
ÕÕ 
Security
ÕÕ 
.
ÕÕ "
SecuritySafeCritical
ÕÕ 1
]
ÕÕ1 2
public
œœ &
ConfigureAndWatchHandler
œœ +
(
œœ+ ,
ILoggerRepository
œœ, =

repository
œœ> H
,
œœH I
FileInfo
œœJ R

configFile
œœS ]
)
œœ] ^
{
–– 
m_repository
—— 
=
—— 

repository
—— 
;
—— 
m_configFile
““ 
=
““ 

configFile
““ 
;
““ 
	m_watcher
’’ 
=
’’ 
new
’’ 
FileSystemWatcher
’’ %
(
’’% &
)
’’& '
;
’’' (
	m_watcher
◊◊ 
.
◊◊ 
Path
◊◊ 
=
◊◊ 
m_configFile
◊◊ !
.
◊◊! "
DirectoryName
◊◊" /
;
◊◊/ 0
	m_watcher
ÿÿ 
.
ÿÿ 
Filter
ÿÿ 
=
ÿÿ 
m_configFile
ÿÿ #
.
ÿÿ# $
Name
ÿÿ$ (
;
ÿÿ( )
	m_watcher
€€ 
.
€€ 
NotifyFilter
€€ 
=
€€ 
NotifyFilters
€€ *
.
€€* +
CreationTime
€€+ 7
|
€€8 9
NotifyFilters
€€: G
.
€€G H
	LastWrite
€€H Q
|
€€R S
NotifyFilters
€€T a
.
€€a b
FileName
€€b j
;
€€j k
	m_watcher
ﬁﬁ 
.
ﬁﬁ 
Changed
ﬁﬁ 
+=
ﬁﬁ 
new
ﬁﬁ $
FileSystemEventHandler
ﬁﬁ 3
(
ﬁﬁ3 40
"ConfigureAndWatchHandler_OnChanged
ﬁﬁ4 V
)
ﬁﬁV W
;
ﬁﬁW X
	m_watcher
ﬂﬂ 
.
ﬂﬂ 
Created
ﬂﬂ 
+=
ﬂﬂ 
new
ﬂﬂ $
FileSystemEventHandler
ﬂﬂ 3
(
ﬂﬂ3 40
"ConfigureAndWatchHandler_OnChanged
ﬂﬂ4 V
)
ﬂﬂV W
;
ﬂﬂW X
	m_watcher
‡‡ 
.
‡‡ 
Deleted
‡‡ 
+=
‡‡ 
new
‡‡ $
FileSystemEventHandler
‡‡ 3
(
‡‡3 40
"ConfigureAndWatchHandler_OnChanged
‡‡4 V
)
‡‡V W
;
‡‡W X
	m_watcher
·· 
.
·· 
Renamed
·· 
+=
·· 
new
·· !
RenamedEventHandler
·· 0
(
··0 10
"ConfigureAndWatchHandler_OnRenamed
··1 S
)
··S T
;
··T U
	m_watcher
‰‰ 
.
‰‰ !
EnableRaisingEvents
‰‰ !
=
‰‰" #
true
‰‰$ (
;
‰‰( )
m_timer
ÁÁ 
=
ÁÁ 
new
ÁÁ 
Timer
ÁÁ #
(
ÁÁ# $
new
ÁÁ$ '
TimerCallback
ÁÁ( 5
(
ÁÁ5 6!
OnWatchedFileChange
ÁÁ6 I
)
ÁÁI J
,
ÁÁJ K
null
ÁÁL P
,
ÁÁP Q
Timeout
ÁÁR Y
.
ÁÁY Z
Infinite
ÁÁZ b
,
ÁÁb c
Timeout
ÁÁd k
.
ÁÁk l
Infinite
ÁÁl t
)
ÁÁt u
;
ÁÁu v
}
ËË 
private
ÙÙ 

void
ÙÙ 0
"ConfigureAndWatchHandler_OnChanged
ÙÙ 2
(
ÙÙ2 3
object
ÙÙ3 9
source
ÙÙ: @
,
ÙÙ@ A!
FileSystemEventArgs
ÙÙB U
e
ÙÙV W
)
ÙÙW X
{
ıı 
LogLog
ˆˆ 

.
ˆˆ
 
Debug
ˆˆ 
(
ˆˆ 
declaringType
ˆˆ 
,
ˆˆ 
$str
ˆˆ  <
+
ˆˆ< =
e
ˆˆ= >
.
ˆˆ> ?

ChangeType
ˆˆ? I
+
ˆˆI J
$str
ˆˆJ N
+
ˆˆO P
m_configFile
ˆˆQ ]
.
ˆˆ] ^
FullName
ˆˆ^ f
+
ˆˆg h
$str
ˆˆi l
)
ˆˆl m
;
ˆˆm n
m_timer
˙˙ 
.
˙˙ 
Change
˙˙ 
(
˙˙ 
TimeoutMillis
˙˙  
,
˙˙  !
Timeout
˙˙" )
.
˙˙) *
Infinite
˙˙* 2
)
˙˙2 3
;
˙˙3 4
}
˚˚ 
private
áá 

void
áá 0
"ConfigureAndWatchHandler_OnRenamed
áá 2
(
áá2 3
object
áá3 9
source
áá: @
,
áá@ A
RenamedEventArgs
ááB R
e
ááS T
)
ááT U
{
àà 
LogLog
ââ 

.
ââ
 
Debug
ââ 
(
ââ 
declaringType
ââ 
,
ââ 
$str
ââ  <
+
ââ= >
e
ââ? @
.
ââ@ A

ChangeType
ââA K
+
ââL M
$str
ââN R
+
ââS T
m_configFile
ââU a
.
ââa b
FullName
ââb j
+
ââk l
$str
ââm p
)
ââp q
;
ââq r
m_timer
çç 
.
çç 
Change
çç 
(
çç 
TimeoutMillis
çç  
,
çç  !
Timeout
çç" )
.
çç) *
Infinite
çç* 2
)
çç2 3
;
çç3 4
}
éé 
private
îî 

void
îî !
OnWatchedFileChange
îî #
(
îî# $
object
îî$ *
state
îî+ 0
)
îî0 1
{
ïï 
XmlConfigurator
ññ 
.
ññ 
InternalConfigure
ññ %
(
ññ% &
m_repository
ññ& 2
,
ññ2 3
m_configFile
ññ4 @
)
ññ@ A
;
ññA B
}
óó 
[
ùù 
System
ùù 
.
ùù 
Security
ùù 
.
ùù "
SecuritySafeCritical
ùù 1
]
ùù1 2
public
üü 
void
üü 
Dispose
üü 
(
üü  
)
üü  !
{
†† 
	m_watcher
°° 
.
°° !
EnableRaisingEvents
°° -
=
°°. /
false
°°0 5
;
°°5 6
	m_watcher
¢¢ 
.
¢¢ 
Dispose
¢¢ !
(
¢¢! "
)
¢¢" #
;
¢¢# $
m_timer
££ 
.
££ 
Dispose
££ 
(
££  
)
££  !
;
££! "
}
§§ 
}
•• 
static
ªª 
private
ªª	 
void
ªª &
InternalConfigureFromXml
ªª .
(
ªª. /
ILoggerRepository
ªª/ @

repository
ªªA K
,
ªªK L

XmlElement
ªªM W
element
ªªX _
)
ªª_ `
{
ºº 
if
ΩΩ 
(
ΩΩ 
element
ΩΩ 
==
ΩΩ 
null
ΩΩ 
)
ΩΩ 
{
ææ 
LogLog
øø 

.
øø
 
Error
øø 
(
øø 
declaringType
øø 
,
øø 
$str
øø  W
)
øøW X
;
øøX Y
}
¿¿ 
else
¡¡ 
if
¡¡ 

(
¡¡ 

repository
¡¡ 
==
¡¡ 
null
¡¡ 
)
¡¡ 
{
¬¬ 
LogLog
√√ 

.
√√
 
Error
√√ 
(
√√ 
declaringType
√√ 
,
√√ 
$str
√√  Z
)
√√Z [
;
√√[ \
}
ƒƒ 
else
≈≈ 
{
∆∆ 
LogLog
«« 

.
««
 
Debug
«« 
(
«« 
declaringType
«« 
,
«« 
$str
««  :
+
««; <

repository
««= G
.
««G H
Name
««H L
+
««M N
$str
««O R
)
««R S
;
««S T(
IXmlRepositoryConfigurator
…… $
configurableRepository
…… 5
=
……6 7

repository
……8 B
as
……C E(
IXmlRepositoryConfigurator
……F `
;
……` a
if
   
(
   $
configurableRepository
   
==
   !
null
  " &
)
  & '
{
ÀÀ 
LogLog
ÃÃ 
.
ÃÃ 
Warn
ÃÃ 
(
ÃÃ 
declaringType
ÃÃ 
,
ÃÃ 
$str
ÃÃ  .
+
ÃÃ/ 0

repository
ÃÃ1 ;
+
ÃÃ< =
$str
ÃÃ> f
)
ÃÃf g
;
ÃÃg h
}
ÕÕ 
else
ŒŒ 
{
œœ 
XmlDocument
”” 
newDoc
”” 
=
”” 
new
”” 
XmlDocument
”” )
(
””) *
)
””* +
;
””+ ,

XmlElement
‘‘ 

newElement
‘‘ 
=
‘‘ 
(
‘‘ 

XmlElement
‘‘ (
)
‘‘( )
newDoc
‘‘) /
.
‘‘/ 0
AppendChild
‘‘0 ;
(
‘‘; <
newDoc
‘‘< B
.
‘‘B C

ImportNode
‘‘C M
(
‘‘M N
element
‘‘N U
,
‘‘U V
true
‘‘W [
)
‘‘[ \
)
‘‘\ ]
;
‘‘] ^$
configurableRepository
◊◊ 
.
◊◊ 
	Configure
◊◊ %
(
◊◊% &

newElement
◊◊& 0
)
◊◊0 1
;
◊◊1 2
}
ÿÿ 
}
ŸŸ 
}
⁄⁄ 
private
ÂÂ 
readonly
ÂÂ 
static
ÂÂ 
	Hashtable
ÂÂ  )4
&m_repositoryName2ConfigAndWatchHandler
ÂÂ* P
=
ÂÂQ R
new
ÂÂS V
	Hashtable
ÂÂW `
(
ÂÂ` a
)
ÂÂa b
;
ÂÂb c
private
ÓÓ 
readonly
ÓÓ 
static
ÓÓ 
Type
ÓÓ !
declaringType
ÓÓ" /
=
ÓÓ0 1
typeof
ÓÓ2 8
(
ÓÓ8 9
XmlConfigurator
ÓÓ9 H
)
ÓÓH I
;
ÓÓI J
}
ÒÒ 
}ÚÚ ’â
JC:\sonarqube\projects\log4net-2.0.7\src\Config\XmlConfiguratorAttribute.cs
	namespace   	
log4net  
 
.   
Config   
{!! 
[QQ 
AttributeUsageQQ 
(QQ 
AttributeTargetsQQ !
.QQ! "
AssemblyQQ" *
)QQ* +
]QQ+ ,
[RR 
SerializableRR 
]RR 
publicSS 
classSS $
XmlConfiguratorAttributeSS 1
:SS2 3!
ConfiguratorAttributeSS4 I
{TT 
publicaa $
XmlConfiguratorAttributeaa	 !
(aa! "
)aa" #
:aa$ %
baseaa& *
(aa* +
$numaa+ ,
)aa, -
{bb 
}cc 
publicww 
stringww	 

ConfigFileww 
{xx 
getyy 
{yy 
returnyy	 
m_configFileyy 
;yy 
}yy 
setzz 
{zz 
m_configFilezz	 
=zz 
valuezz 
;zz 
}zz  
}{{ 
public
ìì 
string
ìì	 !
ConfigFileExtension
ìì #
{
îî 
get
ïï 
{
ïï 
return
ïï	 #
m_configFileExtension
ïï %
;
ïï% &
}
ïï' (
set
ññ 
{
ññ #
m_configFileExtension
ññ	 
=
ññ  
value
ññ! &
;
ññ& '
}
ññ( )
}
óó 
public
ØØ 
bool
ØØ	 
Watch
ØØ 
{
∞∞ 
get
±± 
{
±± 
return
±±	 !
m_configureAndWatch
±± #
;
±±# $
}
±±% &
set
≤≤ 
{
≤≤ !
m_configureAndWatch
≤≤	 
=
≤≤ 
value
≤≤ $
;
≤≤$ %
}
≤≤& '
}
≥≥ 
override
«« 

public
«« 
void
«« 
	Configure
««  
(
««  !
Assembly
««! )
sourceAssembly
««* 8
,
««8 9
ILoggerRepository
««: K
targetRepository
««L \
)
««\ ]
{
»» 
IList
…… #
configurationMessages
…… '
=
……( )
new
……* -
	ArrayList
……. 7
(
……7 8
)
……8 9
;
……9 :
using
ÀÀ 
(
ÀÀ 
new
ÀÀ 
LogLog
ÀÀ 
.
ÀÀ  
LogReceivedAdapter
ÀÀ 0
(
ÀÀ0 1#
configurationMessages
ÀÀ1 F
)
ÀÀF G
)
ÀÀG H
{
ÃÃ 
string
ÕÕ &
applicationBaseDirectory
ÕÕ /
=
ÕÕ0 1
null
ÕÕ2 6
;
ÕÕ6 7
try
ŒŒ 
{
œœ &
applicationBaseDirectory
–– ,
=
––- .

SystemInfo
––/ 9
.
––9 :&
ApplicationBaseDirectory
––: R
;
––R S
}
—— 
catch
““ 
{
”” 
}
÷÷ 
if
ÿÿ 
(
ÿÿ &
applicationBaseDirectory
ÿÿ ,
==
ÿÿ- /
null
ÿÿ0 4
||
ÿÿ5 7
(
ÿÿ8 9
new
ÿÿ9 <
Uri
ÿÿ= @
(
ÿÿ@ A&
applicationBaseDirectory
ÿÿA Y
)
ÿÿY Z
)
ÿÿZ [
.
ÿÿ[ \
IsFile
ÿÿ\ b
)
ÿÿb c
{
ŸŸ 
ConfigureFromFile
⁄⁄ %
(
⁄⁄% &
sourceAssembly
⁄⁄& 4
,
⁄⁄4 5
targetRepository
⁄⁄6 F
)
⁄⁄F G
;
⁄⁄G H
}
€€ 
else
‹‹ 
{
›› 
ConfigureFromUri
ﬁﬁ $
(
ﬁﬁ$ %
sourceAssembly
ﬁﬁ% 3
,
ﬁﬁ3 4
targetRepository
ﬁﬁ5 E
)
ﬁﬁE F
;
ﬁﬁF G
}
ﬂﬂ 
}
‡‡ 
targetRepository
‚‚ 
.
‚‚ #
ConfigurationMessages
‚‚ 2
=
‚‚3 4#
configurationMessages
‚‚5 J
;
‚‚J K
}
„„ 
private
ÏÏ 	
void
ÏÏ
 
ConfigureFromFile
ÏÏ  
(
ÏÏ  !
Assembly
ÏÏ! )
sourceAssembly
ÏÏ* 8
,
ÏÏ8 9
ILoggerRepository
ÏÏ: K
targetRepository
ÏÏL \
)
ÏÏ\ ]
{
ÌÌ 
string
ÔÔ 	!
fullPath2ConfigFile
ÔÔ
 
=
ÔÔ 
null
ÔÔ  $
;
ÔÔ$ %
if
ÚÚ 
(
ÚÚ 
m_configFile
ÚÚ 
==
ÚÚ 
null
ÚÚ 
||
ÚÚ 
m_configFile
ÚÚ +
.
ÚÚ+ ,
Length
ÚÚ, 2
==
ÚÚ3 5
$num
ÚÚ6 7
)
ÚÚ7 8
{
ÛÛ 
if
ÙÙ 
(
ÙÙ #
m_configFileExtension
ÙÙ 
==
ÙÙ  
null
ÙÙ! %
||
ÙÙ& (#
m_configFileExtension
ÙÙ) >
.
ÙÙ> ?
Length
ÙÙ? E
==
ÙÙF H
$num
ÙÙI J
)
ÙÙJ K
{
ıı 
try
˜˜ 
{
¯¯ !
fullPath2ConfigFile
˘˘ 
=
˘˘ 

SystemInfo
˘˘ &
.
˘˘& ''
ConfigurationFileLocation
˘˘' @
;
˘˘@ A
}
˙˙ 
catch
˚˚ 

(
˚˚
 
	Exception
˚˚ 
ex
˚˚ 
)
˚˚ 
{
¸¸ 
LogLog
˝˝ 
.
˝˝ 
Error
˝˝ 
(
˝˝ 
declaringType
˝˝  
,
˝˝  !
$str˝˝" ‹
,˝˝‹ ›
ex˝˝ﬁ ‡
)˝˝‡ ·
;˝˝· ‚
}
˛˛ 
}
ˇˇ 
else
ÄÄ 
{
ÅÅ 
if
ÉÉ 
(
ÉÉ 	#
m_configFileExtension
ÉÉ	 
[
ÉÉ 
$num
ÉÉ  
]
ÉÉ  !
!=
ÉÉ" $
$char
ÉÉ% (
)
ÉÉ( )
{
ÑÑ #
m_configFileExtension
ÖÖ 
=
ÖÖ 
$str
ÖÖ !
+
ÖÖ" ##
m_configFileExtension
ÖÖ$ 9
;
ÖÖ9 :
}
ÜÜ 
string
àà &
applicationBaseDirectory
àà $
=
àà% &
null
àà' +
;
àà+ ,
try
ââ 
{
ää &
applicationBaseDirectory
ãã 
=
ãã  

SystemInfo
ãã! +
.
ãã+ ,&
ApplicationBaseDirectory
ãã, D
;
ããD E
}
åå 
catch
çç 

(
çç
 
	Exception
çç 
ex
çç 
)
çç 
{
éé 
LogLog
èè 
.
èè 
Error
èè 
(
èè 
declaringType
èè  
,
èè  !
$strèè" ø
,èèø ¿
exèè¡ √
)èè√ ƒ
;èèƒ ≈
}
êê 
if
íí 
(
íí 	&
applicationBaseDirectory
íí	 !
!=
íí" $
null
íí% )
)
íí) *
{
ìì !
fullPath2ConfigFile
îî 
=
îî 
Path
îî  
.
îî  !
Combine
îî! (
(
îî( )&
applicationBaseDirectory
îî) A
,
îîA B

SystemInfo
îîC M
.
îîM N
AssemblyFileName
îîN ^
(
îî^ _
sourceAssembly
îî_ m
)
îîm n
+
îîo p$
m_configFileExtensionîîq Ü
)îîÜ á
;îîá à
}
ïï 
}
ññ 
}
óó 
else
òò 
{
ôô 
string
öö 
&
applicationBaseDirectory
öö #
=
öö$ %
null
öö& *
;
öö* +
try
õõ 
{
úú &
applicationBaseDirectory
ùù 
=
ùù 

SystemInfo
ùù  *
.
ùù* +&
ApplicationBaseDirectory
ùù+ C
;
ùùC D
}
ûû 
catch
üü 	
(
üü	 

	Exception
üü
 
ex
üü 
)
üü 
{
†† 
LogLog
°° 
.
°° 
Warn
°° 
(
°° 
declaringType
°° 
,
°° 
$str
°°  h
+
°°h i
m_configFile
°°i u
+
°°u v
$str°°v û
,°°û ü
ex°°† ¢
)°°¢ £
;°°£ §
}
¢¢ 
if
§§ 
(
§§ &
applicationBaseDirectory
§§  
!=
§§! #
null
§§$ (
)
§§( )
{
•• !
fullPath2ConfigFile
ßß 
=
ßß 
Path
ßß 
.
ßß  
Combine
ßß  '
(
ßß' (&
applicationBaseDirectory
ßß( @
,
ßß@ A
m_configFile
ßßB N
)
ßßN O
;
ßßO P
}
®® 
else
©© 
{
™™ !
fullPath2ConfigFile
´´ 
=
´´ 
m_configFile
´´ '
;
´´' (
}
¨¨ 
}
≠≠ 
if
ØØ 
(
ØØ !
fullPath2ConfigFile
ØØ 
!=
ØØ 
null
ØØ "
)
ØØ" #
{
∞∞ 
ConfigureFromFile
±± 
(
±± 
targetRepository
±± &
,
±±& '
new
±±( +
FileInfo
±±, 4
(
±±4 5!
fullPath2ConfigFile
±±5 H
)
±±H I
)
±±I J
;
±±J K
}
≤≤ 
}
≥≥ 
private
∫∫ 	
void
∫∫
 
ConfigureFromFile
∫∫  
(
∫∫  !
ILoggerRepository
∫∫! 2
targetRepository
∫∫3 C
,
∫∫C D
FileInfo
∫∫E M

configFile
∫∫N X
)
∫∫X Y
{
ªª 
if
ƒƒ 
(
ƒƒ !
m_configureAndWatch
ƒƒ 
)
ƒƒ 
{
≈≈ 
XmlConfigurator
∆∆ 
.
∆∆ 
ConfigureAndWatch
∆∆ %
(
∆∆% &
targetRepository
∆∆& 6
,
∆∆6 7

configFile
∆∆8 B
)
∆∆B C
;
∆∆C D
}
«« 
else
»» 
{
…… 
XmlConfigurator
   
.
   
	Configure
   
(
   
targetRepository
   .
,
  . /

configFile
  0 :
)
  : ;
;
  ; <
}
ÀÀ 
}
ÕÕ 
private
‘‘ 	
void
‘‘
 
ConfigureFromUri
‘‘ 
(
‘‘  
Assembly
‘‘  (
sourceAssembly
‘‘) 7
,
‘‘7 8
ILoggerRepository
‘‘9 J
targetRepository
‘‘K [
)
‘‘[ \
{
’’ 
Uri
◊◊ !
fullPath2ConfigFile
◊◊ 
=
◊◊ 
null
◊◊ !
;
◊◊! "
if
⁄⁄ 
(
⁄⁄ 
m_configFile
⁄⁄ 
==
⁄⁄ 
null
⁄⁄ 
||
⁄⁄ 
m_configFile
⁄⁄ +
.
⁄⁄+ ,
Length
⁄⁄, 2
==
⁄⁄3 5
$num
⁄⁄6 7
)
⁄⁄7 8
{
€€ 
if
‹‹ 
(
‹‹ #
m_configFileExtension
‹‹ 
==
‹‹  
null
‹‹! %
||
‹‹& (#
m_configFileExtension
‹‹) >
.
‹‹> ?
Length
‹‹? E
==
‹‹F H
$num
‹‹I J
)
‹‹J K
{
›› 
string
ﬁﬁ "
systemConfigFilePath
ﬁﬁ  
=
ﬁﬁ! "
null
ﬁﬁ# '
;
ﬁﬁ' (
try
ﬂﬂ 
{
‡‡ "
systemConfigFilePath
·· 
=
·· 

SystemInfo
·· '
.
··' ('
ConfigurationFileLocation
··( A
;
··A B
}
‚‚ 
catch
„„ 

(
„„
 
	Exception
„„ 
ex
„„ 
)
„„ 
{
‰‰ 
LogLog
ÂÂ 
.
ÂÂ 
Error
ÂÂ 
(
ÂÂ 
declaringType
ÂÂ  
,
ÂÂ  !
$strÂÂ" ‹
,ÂÂ‹ ›
exÂÂﬁ ‡
)ÂÂ‡ ·
;ÂÂ· ‚
}
ÊÊ 
if
ËË 
(
ËË 	"
systemConfigFilePath
ËË	 
!=
ËË  
null
ËË! %
)
ËË% &
{
ÈÈ 
Uri
ÍÍ 	!
systemConfigFileUri
ÍÍ
 
=
ÍÍ 
new
ÍÍ  #
Uri
ÍÍ$ '
(
ÍÍ' ("
systemConfigFilePath
ÍÍ( <
)
ÍÍ< =
;
ÍÍ= >!
fullPath2ConfigFile
ÌÌ 
=
ÌÌ !
systemConfigFileUri
ÌÌ /
;
ÌÌ/ 0
}
ÓÓ 
}
ÔÔ 
else
 
{
ÒÒ 
if
ÛÛ 
(
ÛÛ 	#
m_configFileExtension
ÛÛ	 
[
ÛÛ 
$num
ÛÛ  
]
ÛÛ  !
!=
ÛÛ" $
$char
ÛÛ% (
)
ÛÛ( )
{
ÙÙ #
m_configFileExtension
ıı 
=
ıı 
$str
ıı !
+
ıı" ##
m_configFileExtension
ıı$ 9
;
ıı9 :
}
ˆˆ 
string
¯¯ "
systemConfigFilePath
¯¯  
=
¯¯! "
null
¯¯# '
;
¯¯' (
try
˘˘ 
{
˙˙ "
systemConfigFilePath
˚˚ 
=
˚˚ 

SystemInfo
˚˚ '
.
˚˚' ('
ConfigurationFileLocation
˚˚( A
;
˚˚A B
}
¸¸ 
catch
˝˝ 

(
˝˝
 
	Exception
˝˝ 
ex
˝˝ 
)
˝˝ 
{
˛˛ 
LogLog
ˇˇ 
.
ˇˇ 
Error
ˇˇ 
(
ˇˇ 
declaringType
ˇˇ  
,
ˇˇ  !
$strˇˇ" ∆
,ˇˇ∆ «
exˇˇ»  
)ˇˇ  À
;ˇˇÀ Ã
}
ÄÄ 
if
ÇÇ 
(
ÇÇ 	"
systemConfigFilePath
ÇÇ	 
!=
ÇÇ  
null
ÇÇ! %
)
ÇÇ% &
{
ÉÉ 

UriBuilder
ÑÑ 
builder
ÑÑ 
=
ÑÑ 
new
ÑÑ 

UriBuilder
ÑÑ )
(
ÑÑ) *
new
ÑÑ* -
Uri
ÑÑ. 1
(
ÑÑ1 2"
systemConfigFilePath
ÑÑ2 F
)
ÑÑF G
)
ÑÑG H
;
ÑÑH I
string
áá 
path
áá 
=
áá 
builder
áá 
.
áá 
Path
áá  
;
áá  !
int
àà 	
startOfExtension
àà
 
=
àà 
path
àà !
.
àà! "
LastIndexOf
àà" -
(
àà- .
$str
àà. 1
)
àà1 2
;
àà2 3
if
ââ 
(
ââ	 

startOfExtension
ââ
 
>=
ââ 
$num
ââ 
)
ââ  
{
ää 
path
ãã 
=
ãã 
path
ãã 
.
ãã 
	Substring
ãã 
(
ãã 
$num
ãã 
,
ãã 
startOfExtension
ãã  0
)
ãã0 1
;
ãã1 2
}
åå 
path
çç 

+=
çç #
m_configFileExtension
çç #
;
çç# $
builder
èè 
.
èè 
Path
èè 
=
èè 
path
èè 
;
èè !
fullPath2ConfigFile
êê 
=
êê 
builder
êê #
.
êê# $
Uri
êê$ '
;
êê' (
}
ëë 
}
íí 
}
ìì 
else
îî 
{
ïï 
string
ññ 
&
applicationBaseDirectory
ññ #
=
ññ$ %
null
ññ& *
;
ññ* +
try
óó 
{
òò &
applicationBaseDirectory
ôô 
=
ôô 

SystemInfo
ôô  *
.
ôô* +&
ApplicationBaseDirectory
ôô+ C
;
ôôC D
}
öö 
catch
õõ 	
(
õõ	 

	Exception
õõ
 
ex
õõ 
)
õõ 
{
úú 
LogLog
ùù 
.
ùù 
Warn
ùù 
(
ùù 
declaringType
ùù 
,
ùù 
$str
ùù  h
+
ùùh i
m_configFile
ùùi u
+
ùùu v
$strùùv ù
,ùùù û
exùùü °
)ùù° ¢
;ùù¢ £
}
ûû 
if
†† 
(
†† &
applicationBaseDirectory
††  
!=
††! #
null
††$ (
)
††( )
{
°° !
fullPath2ConfigFile
££ 
=
££ 
new
££ 
Uri
££ "
(
££" #
new
££# &
Uri
££' *
(
££* +&
applicationBaseDirectory
££+ C
)
££C D
,
££D E
m_configFile
££F R
)
££R S
;
££S T
}
§§ 
else
•• 
{
¶¶ !
fullPath2ConfigFile
ßß 
=
ßß 
new
ßß 
Uri
ßß "
(
ßß" #
m_configFile
ßß# /
)
ßß/ 0
;
ßß0 1
}
®® 
}
©© 
if
´´ 
(
´´ !
fullPath2ConfigFile
´´ 
!=
´´ 
null
´´ "
)
´´" #
{
¨¨ 
if
≠≠ 
(
≠≠ !
fullPath2ConfigFile
≠≠ 
.
≠≠ 
IsFile
≠≠ "
)
≠≠" #
{
ÆÆ 
ConfigureFromFile
±± 
(
±± 
targetRepository
±± '
,
±±' (
new
±±) ,
FileInfo
±±- 5
(
±±5 6!
fullPath2ConfigFile
±±6 I
.
±±I J
	LocalPath
±±J S
)
±±S T
)
±±T U
;
±±U V
}
≤≤ 
else
≥≥ 
{
¥¥ 
if
µµ 
(
µµ 	!
m_configureAndWatch
µµ	 
)
µµ 
{
∂∂ 
LogLog
∑∑ 
.
∑∑ 
Warn
∑∑ 
(
∑∑ 
declaringType
∑∑ 
,
∑∑  
$str
∑∑! j
)
∑∑j k
;
∑∑k l
}
∏∏ 
XmlConfigurator
ππ 
.
ππ 
	Configure
ππ 
(
ππ 
targetRepository
ππ /
,
ππ/ 0!
fullPath2ConfigFile
ππ1 D
)
ππD E
;
ππE F
}
∫∫ 
}
ªª 
}
ºº 
private
¿¿ 	
string
¿¿
 
m_configFile
¿¿ 
=
¿¿ 
null
¿¿  $
;
¿¿$ %
private
¡¡ 	
string
¡¡
 #
m_configFileExtension
¡¡ &
=
¡¡' (
null
¡¡) -
;
¡¡- .
private
¬¬ 	
bool
¬¬
 !
m_configureAndWatch
¬¬ "
=
¬¬# $
false
¬¬% *
;
¬¬* +
private
œœ 
readonly
œœ 
static
œœ 
Type
œœ !
declaringType
œœ" /
=
œœ0 1
typeof
œœ2 8
(
œœ8 9&
XmlConfiguratorAttribute
œœ9 Q
)
œœQ R
;
œœR S
}
““ 
}”” —V
IC:\sonarqube\projects\log4net-2.0.7\src\Core\CompactRepositorySelector.cs
	namespace 	
log4net
 
. 
Core 
{ 
public00 
class00 %
CompactRepositorySelector00 '
:00( )
IRepositorySelector00* =
{11 
private44 	
const44
 
string44 !
DefaultRepositoryName44 ,
=44- .
$str44/ K
;44K L
private66 	
readonly66
 
	Hashtable66  
m_name2repositoryMap66 1
=662 3
new664 7
	Hashtable668 A
(66A B
)66B C
;66C D
private77 	
readonly77
 
Type77 #
m_defaultRepositoryType77 /
;77/ 0
private99 	
event99
 0
$LoggerRepositoryCreationEventHandler99 4*
m_loggerRepositoryCreatedEvent995 S
;99S T
publicLL %
CompactRepositorySelectorLL	 "
(LL" #
TypeLL# '!
defaultRepositoryTypeLL( =
)LL= >
{MM 
ifNN 
(NN !
defaultRepositoryTypeNN 
==NN 
nullNN  $
)NN$ %
{OO 
throwPP 	
newPP
 !
ArgumentNullExceptionPP #
(PP# $
$strPP$ ;
)PP; <
;PP< =
}QQ 
ifTT 
(TT 
!TT 
(TT	 

typeofTT
 
(TT 
ILoggerRepositoryTT "
)TT" #
.TT# $
IsAssignableFromTT$ 4
(TT4 5!
defaultRepositoryTypeTT5 J
)TTJ K
)TTK L
)TTM N
{UU 
throwVV 	
log4netVV
 
.VV 
UtilVV 
.VV 

SystemInfoVV !
.VV! "-
!CreateArgumentOutOfRangeExceptionVV" C
(VVC D
$strVVD [
,VV[ \
(VV] ^
objectVV^ d
)VVd e!
defaultRepositoryTypeVVe z
,VVz {
$str	VV| ®
+
VV® ©#
defaultRepositoryType
VV© æ
+
VVæ ø
$str
VVø à
)
VVà â
;
VVâ ä
}WW #
m_defaultRepositoryTypeYY 
=YY !
defaultRepositoryTypeYY 2
;YY2 3
LogLog[[ 	
.[[	 

Debug[[
 
([[ 
declaringType[[ 
,[[ 
$str[[ 8
+[[8 9#
m_defaultRepositoryType[[9 P
+[[P Q
$str[[Q T
)[[T U
;[[U V
}\\ 
publicqq 
ILoggerRepositoryqq	 
GetRepositoryqq (
(qq( )
Assemblyqq) 1
assemblyqq2 :
)qq: ;
{rr 
returnss 	
CreateRepositoryss
 
(ss 
assemblyss #
,ss# $#
m_defaultRepositoryTypess% <
)ss< =
;ss= >
}tt 
public
ÖÖ 
ILoggerRepository
ÖÖ	 
GetRepository
ÖÖ (
(
ÖÖ( )
string
ÖÖ) /
repositoryName
ÖÖ0 >
)
ÖÖ> ?
{
ÜÜ 
if
áá 
(
áá 
repositoryName
áá 
==
áá 
null
áá 
)
áá 
{
àà 
throw
ââ 	
new
ââ
 #
ArgumentNullException
ââ #
(
ââ# $
$str
ââ$ 4
)
ââ4 5
;
ââ5 6
}
ää 
lock
åå 
(
åå 
this
åå 
)
åå 
{
çç 
ILoggerRepository
èè 
rep
èè 
=
èè "
m_name2repositoryMap
èè 0
[
èè0 1
repositoryName
èè1 ?
]
èè? @
as
èèA C
ILoggerRepository
èèD U
;
èèU V
if
êê 
(
êê 
rep
êê 
==
êê 
null
êê 
)
êê 
{
ëë 
throw
íí 

new
íí 
LogException
íí 
(
íí 
$str
íí *
+
íí* +
repositoryName
íí+ 9
+
íí9 :
$str
íí: M
)
ííM N
;
ííN O
}
ìì 
return
îî 

rep
îî 
;
îî 
}
ïï 
}
ññ 
public
¨¨ 
ILoggerRepository
¨¨	 
CreateRepository
¨¨ +
(
¨¨+ ,
Assembly
¨¨, 4
assembly
¨¨5 =
,
¨¨= >
Type
¨¨? C
repositoryType
¨¨D R
)
¨¨R S
{
≠≠ 
if
ØØ 
(
ØØ 
repositoryType
ØØ 
==
ØØ 
null
ØØ 
)
ØØ 
{
∞∞ 
repositoryType
±± 
=
±± %
m_defaultRepositoryType
±± ,
;
±±, -
}
≤≤ 
lock
¥¥ 
(
¥¥ 
this
¥¥ 
)
¥¥ 
{
µµ 
ILoggerRepository
ππ 
rep
ππ 
=
ππ "
m_name2repositoryMap
ππ 0
[
ππ0 1#
DefaultRepositoryName
ππ1 F
]
ππF G
as
ππH J
ILoggerRepository
ππK \
;
ππ\ ]
if
∫∫ 
(
∫∫ 
rep
∫∫ 
==
∫∫ 
null
∫∫ 
)
∫∫ 
{
ªª 
rep
ΩΩ 
=
ΩΩ	 

CreateRepository
ΩΩ 
(
ΩΩ #
DefaultRepositoryName
ΩΩ 1
,
ΩΩ1 2
repositoryType
ΩΩ3 A
)
ΩΩA B
;
ΩΩB C
}
ææ 
return
¿¿ 

rep
¿¿ 
;
¿¿ 
}
¡¡ 
}
¬¬ 
public
€€ 
ILoggerRepository
€€	 
CreateRepository
€€ +
(
€€+ ,
string
€€, 2
repositoryName
€€3 A
,
€€A B
Type
€€C G
repositoryType
€€H V
)
€€V W
{
‹‹ 
if
›› 
(
›› 
repositoryName
›› 
==
›› 
null
›› 
)
›› 
{
ﬁﬁ 
throw
ﬂﬂ 	
new
ﬂﬂ
 #
ArgumentNullException
ﬂﬂ #
(
ﬂﬂ# $
$str
ﬂﬂ$ 4
)
ﬂﬂ4 5
;
ﬂﬂ5 6
}
‡‡ 
if
„„ 
(
„„ 
repositoryType
„„ 
==
„„ 
null
„„ 
)
„„ 
{
‰‰ 
repositoryType
ÂÂ 
=
ÂÂ %
m_defaultRepositoryType
ÂÂ ,
;
ÂÂ, -
}
ÊÊ 
lock
ËË 
(
ËË 
this
ËË 
)
ËË 
{
ÈÈ 
ILoggerRepository
ÍÍ 
rep
ÍÍ 
=
ÍÍ 
null
ÍÍ  
;
ÍÍ  !
rep
ÌÌ 
=
ÌÌ 	"
m_name2repositoryMap
ÌÌ
 
[
ÌÌ 
repositoryName
ÌÌ -
]
ÌÌ- .
as
ÌÌ/ 1
ILoggerRepository
ÌÌ2 C
;
ÌÌC D
if
ÓÓ 
(
ÓÓ 
rep
ÓÓ 
!=
ÓÓ 
null
ÓÓ 
)
ÓÓ 
{
ÔÔ 
throw
 

new
 
LogException
 
(
 
$str
 *
+
* +
repositoryName
+ 9
+
9 :
$str
: s
)
s t
;
t u
}
ÒÒ 
else
ÚÚ 
{
ÛÛ 
LogLog
ÙÙ 
.
ÙÙ 
Debug
ÙÙ 
(
ÙÙ 
declaringType
ÙÙ 
,
ÙÙ  
$str
ÙÙ! 8
+
ÙÙ8 9
repositoryName
ÙÙ9 G
+
ÙÙG H
$str
ÙÙH X
+
ÙÙX Y
repositoryType
ÙÙY g
+
ÙÙg h
$str
ÙÙh k
)
ÙÙk l
;
ÙÙl m
rep
˜˜ 
=
˜˜	 

(
˜˜ 
ILoggerRepository
˜˜ 
)
˜˜ 
	Activator
˜˜ '
.
˜˜' (
CreateInstance
˜˜( 6
(
˜˜6 7
repositoryType
˜˜7 E
)
˜˜E F
;
˜˜F G
rep
˙˙ 
.
˙˙ 	
Name
˙˙	 
=
˙˙ 
repositoryName
˙˙ 
;
˙˙ "
m_name2repositoryMap
˝˝ 
[
˝˝ 
repositoryName
˝˝ (
]
˝˝( )
=
˝˝* +
rep
˝˝, /
;
˝˝/ 0,
OnLoggerRepositoryCreatedEvent
ÄÄ #
(
ÄÄ# $
rep
ÄÄ$ '
)
ÄÄ' (
;
ÄÄ( )
}
ÅÅ 
return
ÉÉ 

rep
ÉÉ 
;
ÉÉ 
}
ÑÑ 
}
ÖÖ 
public
ìì 
bool
ìì	 
ExistsRepository
ìì 
(
ìì 
string
ìì %
repositoryName
ìì& 4
)
ìì4 5
{
îî 
lock
ïï 
(
ïï 
this
ïï 
)
ïï 
{
ññ 
return
óó 
"
m_name2repositoryMap
óó 
.
óó  
ContainsKey
óó  +
(
óó+ ,
repositoryName
óó, :
)
óó: ;
;
óó; <
}
òò 
}
ôô 
public
§§ 
ILoggerRepository
§§	 
[
§§ 
]
§§  
GetAllRepositories
§§ /
(
§§/ 0
)
§§0 1
{
•• 
lock
¶¶ 
(
¶¶ 
this
¶¶ 
)
¶¶ 
{
ßß 
ICollection
®® 
reps
®® 
=
®® "
m_name2repositoryMap
®® +
.
®®+ ,
Values
®®, 2
;
®®2 3
ILoggerRepository
©© 
[
©© 
]
©© 
all
©© 
=
©© 
new
©© !
ILoggerRepository
©©" 3
[
©©3 4
reps
©©4 8
.
©©8 9
Count
©©9 >
]
©©> ?
;
©©? @
reps
™™ 
.
™™ 	
CopyTo
™™	 
(
™™ 
all
™™ 
,
™™ 
$num
™™ 
)
™™ 
;
™™ 
return
´´ 

all
´´ 
;
´´ 
}
¨¨ 
}
≠≠ 
private
∫∫ 
readonly
∫∫ 
static
∫∫ 
Type
∫∫ !
declaringType
∫∫" /
=
∫∫0 1
typeof
∫∫2 8
(
∫∫8 9'
CompactRepositorySelector
∫∫9 R
)
∫∫R S
;
∫∫S T
public
ÃÃ 
event
ÃÃ	 2
$LoggerRepositoryCreationEventHandler
ÃÃ 3*
LoggerRepositoryCreatedEvent
ÃÃ4 P
{
ÕÕ 
add
ŒŒ 
{
ŒŒ ,
m_loggerRepositoryCreatedEvent
ŒŒ	 '
+=
ŒŒ( *
value
ŒŒ+ 0
;
ŒŒ0 1
}
ŒŒ2 3
remove
œœ 	
{
œœ
 ,
m_loggerRepositoryCreatedEvent
œœ *
-=
œœ+ -
value
œœ. 3
;
œœ3 4
}
œœ5 6
}
–– 
	protected
‹‹ 
virtual
‹‹ 
void
‹‹ ,
OnLoggerRepositoryCreatedEvent
‹‹ 7
(
‹‹7 8
ILoggerRepository
‹‹8 I

repository
‹‹J T
)
‹‹T U
{
›› 2
$LoggerRepositoryCreationEventHandler
ﬁﬁ '
handler
ﬁﬁ( /
=
ﬁﬁ0 1,
m_loggerRepositoryCreatedEvent
ﬁﬁ2 P
;
ﬁﬁP Q
if
ﬂﬂ 
(
ﬂﬂ 
handler
ﬂﬂ 
!=
ﬂﬂ 
null
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
handler
·· 
(
·· 
this
·· 
,
·· 
new
·· /
!LoggerRepositoryCreationEventArgs
·· 7
(
··7 8

repository
··8 B
)
··B C
)
··C D
;
··D E
}
‚‚ 
}
„„ 
}
‰‰ 
}ÂÂ ´Œ
IC:\sonarqube\projects\log4net-2.0.7\src\Core\DefaultRepositorySelector.cs
	namespace&& 	
log4net&&
 
.&& 
Core&& 
{'' 
public33 
class33 %
DefaultRepositorySelector33 '
:33( )
IRepositorySelector33* =
{44 
publicEE 
eventEE	 0
$LoggerRepositoryCreationEventHandlerEE 3(
LoggerRepositoryCreatedEventEE4 P
{FF 
addGG 
{GG *
m_loggerRepositoryCreatedEventGG	 '
+=GG( *
valueGG+ 0
;GG0 1
}GG2 3
removeHH 	
{HH
 *
m_loggerRepositoryCreatedEventHH *
-=HH+ -
valueHH. 3
;HH3 4
}HH5 6
}II 
public\\ %
DefaultRepositorySelector\\	 "
(\\" #
Type\\# '!
defaultRepositoryType\\( =
)\\= >
{]] 
if^^ 
(^^ !
defaultRepositoryType^^ 
==^^ 
null^^  $
)^^$ %
{__ 
throw`` 	
new``
 !
ArgumentNullException`` #
(``# $
$str``$ ;
)``; <
;``< =
}aa 
ifdd 
(dd 
!dd 
(dd	 

typeofdd
 
(dd 
ILoggerRepositorydd "
)dd" #
.dd# $
IsAssignableFromdd$ 4
(dd4 5!
defaultRepositoryTypedd5 J
)ddJ K
)ddK L
)ddM N
{ee 
throwff 	
log4netff
 
.ff 
Utilff 
.ff 

SystemInfoff !
.ff! "-
!CreateArgumentOutOfRangeExceptionff" C
(ffC D
$strffD [
,ff[ \!
defaultRepositoryTypeff] r
,ffr s
$str	fft †
+
ff° ¢#
defaultRepositoryType
ff£ ∏
+
ffπ ∫
$str
ffª Ñ
)
ffÑ Ö
;
ffÖ Ü
}gg #
m_defaultRepositoryTypeii 
=ii !
defaultRepositoryTypeii 2
;ii2 3
LogLogkk 	
.kk	 

Debugkk
 
(kk 
declaringTypekk 
,kk 
$strkk 8
+kk9 :#
m_defaultRepositoryTypekk; R
+kkS T
$strkkU X
)kkX Y
;kkY Z
}ll 
public
ââ 
ILoggerRepository
ââ	 
GetRepository
ââ (
(
ââ( )
Assembly
ââ) 1 
repositoryAssembly
ââ2 D
)
ââD E
{
ää 
if
ãã 
(
ãã  
repositoryAssembly
ãã 
==
ãã 
null
ãã !
)
ãã! "
{
åå 
throw
çç 	
new
çç
 #
ArgumentNullException
çç #
(
çç# $
$str
çç$ 8
)
çç8 9
;
çç9 :
}
éé 
return
èè 	
CreateRepository
èè
 
(
èè  
repositoryAssembly
èè -
,
èè- .%
m_defaultRepositoryType
èè/ F
)
èèF G
;
èèG H
}
êê 
public
££ 
ILoggerRepository
££	 
GetRepository
££ (
(
££( )
string
££) /
repositoryName
££0 >
)
££> ?
{
§§ 
if
•• 
(
•• 
repositoryName
•• 
==
•• 
null
•• 
)
•• 
{
¶¶ 
throw
ßß 	
new
ßß
 #
ArgumentNullException
ßß #
(
ßß# $
$str
ßß$ 4
)
ßß4 5
;
ßß5 6
}
®® 
lock
™™ 
(
™™ 
this
™™ 
)
™™ 
{
´´ 
ILoggerRepository
≠≠ 
rep
≠≠ 
=
≠≠ "
m_name2repositoryMap
≠≠ 0
[
≠≠0 1
repositoryName
≠≠1 ?
]
≠≠? @
as
≠≠A C
ILoggerRepository
≠≠D U
;
≠≠U V
if
ÆÆ 
(
ÆÆ 
rep
ÆÆ 
==
ÆÆ 
null
ÆÆ 
)
ÆÆ 
{
ØØ 
throw
∞∞ 

new
∞∞ 
LogException
∞∞ 
(
∞∞ 
$str
∞∞ *
+
∞∞+ ,
repositoryName
∞∞- ;
+
∞∞< =
$str
∞∞> Q
)
∞∞Q R
;
∞∞R S
}
±± 
return
≤≤ 

rep
≤≤ 
;
≤≤ 
}
≥≥ 
}
¥¥ 
public
⁄⁄ 
ILoggerRepository
⁄⁄	 
CreateRepository
⁄⁄ +
(
⁄⁄+ ,
Assembly
⁄⁄, 4 
repositoryAssembly
⁄⁄5 G
,
⁄⁄G H
Type
⁄⁄I M
repositoryType
⁄⁄N \
)
⁄⁄\ ]
{
€€ 
return
‹‹ 	
CreateRepository
‹‹
 
(
‹‹  
repositoryAssembly
‹‹ -
,
‹‹- .
repositoryType
‹‹/ =
,
‹‹= >#
DefaultRepositoryName
‹‹? T
,
‹‹T U
true
‹‹V Z
)
‹‹Z [
;
‹‹[ \
}
›› 
public
ÖÖ 
ILoggerRepository
ÖÖ	 
CreateRepository
ÖÖ +
(
ÖÖ+ ,
Assembly
ÖÖ, 4 
repositoryAssembly
ÖÖ5 G
,
ÖÖG H
Type
ÖÖI M
repositoryType
ÖÖN \
,
ÖÖ\ ]
string
ÖÖ^ d
repositoryName
ÖÖe s
,
ÖÖs t
bool
ÖÖu y%
readAssemblyAttributesÖÖz ê
)ÖÖê ë
{
ÜÜ 
if
áá 
(
áá  
repositoryAssembly
áá 
==
áá 
null
áá !
)
áá! "
{
àà 
throw
ââ 	
new
ââ
 #
ArgumentNullException
ââ #
(
ââ# $
$str
ââ$ 8
)
ââ8 9
;
ââ9 :
}
ää 
if
çç 
(
çç 
repositoryType
çç 
==
çç 
null
çç 
)
çç 
{
éé 
repositoryType
èè 
=
èè %
m_defaultRepositoryType
èè ,
;
èè, -
}
êê 
lock
íí 
(
íí 
this
íí 
)
íí 
{
ìì 
ILoggerRepository
ïï 
rep
ïï 
=
ïï &
m_assembly2repositoryMap
ïï 4
[
ïï4 5 
repositoryAssembly
ïï5 G
]
ïïG H
as
ïïI K
ILoggerRepository
ïïL ]
;
ïï] ^
if
ññ 
(
ññ 
rep
ññ 
==
ññ 
null
ññ 
)
ññ 
{
óó 
LogLog
ôô 
.
ôô 
Debug
ôô 
(
ôô 
declaringType
ôô 
,
ôô  
$str
ôô! E
+
ôôF G 
repositoryAssembly
ôôH Z
+
ôô[ \
$str
ôô] `
)
ôô` a
;
ôôa b
string
úú "
actualRepositoryName
úú  
=
úú! "
repositoryName
úú# 1
;
úú1 2
Type
ùù 	"
actualRepositoryType
ùù
 
=
ùù  
repositoryType
ùù! /
;
ùù/ 0
if
üü 
(
üü 	$
readAssemblyAttributes
üü	 
)
üü  
{
††  
GetInfoForAssembly
¢¢ 
(
¢¢  
repositoryAssembly
¢¢ +
,
¢¢+ ,
ref
¢¢- 0"
actualRepositoryName
¢¢1 E
,
¢¢E F
ref
¢¢G J"
actualRepositoryType
¢¢K _
)
¢¢_ `
;
¢¢` a
}
££ 
LogLog
•• 
.
•• 
Debug
•• 
(
•• 
declaringType
•• 
,
••  
$str
••! -
+
••. / 
repositoryAssembly
••0 B
+
••C D
$str
••E [
+
••\ ]"
actualRepositoryName
••^ r
+
••s t
$str••u é
+••è ê$
actualRepositoryType••ë •
+••¶ ß
$str••® ´
)••´ ¨
;••¨ ≠
rep
®® 
=
®®	 
"
m_name2repositoryMap
®® 
[
®®  "
actualRepositoryName
®®  4
]
®®4 5
as
®®6 8
ILoggerRepository
®®9 J
;
®®J K
if
©© 
(
©© 	
rep
©©	 
==
©© 
null
©© 
)
©© 
{
™™ 
rep
¨¨ 	
=
¨¨
 
CreateRepository
¨¨ 
(
¨¨ "
actualRepositoryName
¨¨ 1
,
¨¨1 2"
actualRepositoryType
¨¨3 G
)
¨¨G H
;
¨¨H I
if
ÆÆ 
(
ÆÆ	 
$
readAssemblyAttributes
ÆÆ
  
)
ÆÆ  !
{
ØØ 
try
∞∞ 

{
±± 
LoadAliases
≥≥ 
(
≥≥  
repositoryAssembly
≥≥ &
,
≥≥& '
rep
≥≥( +
)
≥≥+ ,
;
≥≥, -
LoadPlugins
∂∂ 
(
∂∂  
repositoryAssembly
∂∂ &
,
∂∂& '
rep
∂∂( +
)
∂∂+ ,
;
∂∂, -!
ConfigureRepository
ππ 
(
ππ  
repositoryAssembly
ππ .
,
ππ. /
rep
ππ0 3
)
ππ3 4
;
ππ4 5
}
∫∫ 
catch
ªª 
(
ªª 
	Exception
ªª 
ex
ªª 
)
ªª 
{
ºº 
LogLog
ΩΩ 
.
ΩΩ 
Error
ΩΩ 
(
ΩΩ 
declaringType
ΩΩ "
,
ΩΩ" #
$str
ΩΩ$ F
+
ΩΩG H"
actualRepositoryName
ΩΩI ]
+
ΩΩ^ _
$str
ΩΩ` }
,
ΩΩ} ~
exΩΩ Å
)ΩΩÅ Ç
;ΩΩÇ É
}
ææ 
}
øø 
}
¿¿ 
else
¡¡ 	
{
¬¬ 
LogLog
√√ 
.
√√ 
Debug
√√ 
(
√√ 
declaringType
√√  
,
√√  !
$str
√√" 0
+
√√1 2"
actualRepositoryName
√√3 G
+
√√H I
$str
√√J u
+
√√v w
rep
√√x {
.
√√{ |
GetType√√| É
(√√É Ñ
)√√Ñ Ö
.√√Ö Ü
FullName√√Ü é
+√√è ê
$str√√ë î
)√√î ï
;√√ï ñ
if
≈≈ 
(
≈≈	 
$
readAssemblyAttributes
≈≈
  
)
≈≈  !
{
∆∆ 
try
«« 

{
»» 
LoadPlugins
   
(
    
repositoryAssembly
   &
,
  & '
rep
  ( +
)
  + ,
;
  , -
}
ÀÀ 
catch
ÃÃ 
(
ÃÃ 
	Exception
ÃÃ 
ex
ÃÃ 
)
ÃÃ 
{
ÕÕ 
LogLog
ŒŒ 
.
ŒŒ 
Error
ŒŒ 
(
ŒŒ 
declaringType
ŒŒ "
,
ŒŒ" #
$str
ŒŒ$ F
+
ŒŒG H"
actualRepositoryName
ŒŒI ]
+
ŒŒ^ _
$str
ŒŒ` }
,
ŒŒ} ~
exŒŒ Å
)ŒŒÅ Ç
;ŒŒÇ É
}
œœ 
}
–– 
}
—— &
m_assembly2repositoryMap
““ 
[
““  
repositoryAssembly
““ 0
]
““0 1
=
““2 3
rep
““4 7
;
““7 8
}
”” 
return
‘‘ 

rep
‘‘ 
;
‘‘ 
}
’’ 
}
÷÷ 
public
ËË 
ILoggerRepository
ËË	 
CreateRepository
ËË +
(
ËË+ ,
string
ËË, 2
repositoryName
ËË3 A
,
ËËA B
Type
ËËC G
repositoryType
ËËH V
)
ËËV W
{
ÈÈ 
if
ÍÍ 
(
ÍÍ 
repositoryName
ÍÍ 
==
ÍÍ 
null
ÍÍ 
)
ÍÍ 
{
ÎÎ 
throw
ÏÏ 	
new
ÏÏ
 #
ArgumentNullException
ÏÏ #
(
ÏÏ# $
$str
ÏÏ$ 4
)
ÏÏ4 5
;
ÏÏ5 6
}
ÌÌ 
if
 
(
 
repositoryType
 
==
 
null
 
)
 
{
ÒÒ 
repositoryType
ÚÚ 
=
ÚÚ %
m_defaultRepositoryType
ÚÚ ,
;
ÚÚ, -
}
ÛÛ 
lock
ıı 
(
ıı 
this
ıı 
)
ıı 
{
ˆˆ 
ILoggerRepository
˜˜ 
rep
˜˜ 
=
˜˜ 
null
˜˜  
;
˜˜  !
rep
˙˙ 
=
˙˙ 	"
m_name2repositoryMap
˙˙
 
[
˙˙ 
repositoryName
˙˙ -
]
˙˙- .
as
˙˙/ 1
ILoggerRepository
˙˙2 C
;
˙˙C D
if
˚˚ 
(
˚˚ 
rep
˚˚ 
!=
˚˚ 
null
˚˚ 
)
˚˚ 
{
¸¸ 
throw
˝˝ 

new
˝˝ 
LogException
˝˝ 
(
˝˝ 
$str
˝˝ *
+
˝˝+ ,
repositoryName
˝˝- ;
+
˝˝< =
$str
˝˝> w
)
˝˝w x
;
˝˝x y
}
˛˛ 
else
ˇˇ 
{
ÄÄ 
ILoggerRepository
ÇÇ 
aliasedRepository
ÇÇ (
=
ÇÇ) *#
m_alias2repositoryMap
ÇÇ+ @
[
ÇÇ@ A
repositoryName
ÇÇA O
]
ÇÇO P
as
ÇÇQ S
ILoggerRepository
ÇÇT e
;
ÇÇe f
if
ÉÉ 
(
ÉÉ 	
aliasedRepository
ÉÉ	 
!=
ÉÉ 
null
ÉÉ "
)
ÉÉ" #
{
ÑÑ 
if
àà 
(
àà	 

aliasedRepository
àà
 
.
àà 
GetType
àà #
(
àà# $
)
àà$ %
==
àà& (
repositoryType
àà) 7
)
àà7 8
{
ââ 
LogLog
ãã 
.
ãã 
Debug
ãã 
(
ãã 
declaringType
ãã !
,
ãã! "
$str
ãã# :
+
ãã; <
repositoryName
ãã= K
+
ããL M
$str
ããN j
+
ããk l
aliasedRepository
ããm ~
.
ãã~ 
Nameãã É
+ããÑ Ö
$strããÜ â
)ããâ ä
;ããä ã
rep
åå 

=
åå 
aliasedRepository
åå 
;
åå "
m_name2repositoryMap
èè 
[
èè 
repositoryName
èè *
]
èè* +
=
èè, -
rep
èè. 1
;
èè1 2
}
êê 
else
ëë 

{
íí 
LogLog
îî 
.
îî 
Error
îî 
(
îî 
declaringType
îî !
,
îî! "
$str
îî# A
+
îîB C
repositoryName
îîD R
+
îîS T
$str
îîU q
+
îîq r 
aliasedRepositoryîîr É
.îîÉ Ñ
NameîîÑ à
+îîà â
$strîîâ ©
+îî© ™
repositoryTypeîî™ ∏
.îî∏ π
FullNameîîπ ¡
+îî¡ ¬
$strîî¬ Ï
+îîÌ Ó!
aliasedRepositoryîîÔ Ä
.îîÄ Å
GetTypeîîÅ à
(îîà â
)îîâ ä
.îîä ã
FullNameîîã ì
+îîî ï
$strîîñ ô
)îîô ö
;îîö õ
}
óó 
}
òò 
if
õõ 
(
õõ 	
rep
õõ	 
==
õõ 
null
õõ 
)
õõ 
{
úú 
LogLog
ùù 
.
ùù 
Debug
ùù 
(
ùù 
declaringType
ùù  
,
ùù  !
$str
ùù" 9
+
ùù: ;
repositoryName
ùù< J
+
ùùK L
$str
ùùM ]
+
ùù^ _
repositoryType
ùù` n
+
ùùo p
$str
ùùq t
)
ùùt u
;
ùùu v
rep
†† 	
=
††
 
(
†† 
ILoggerRepository
†† 
)
†† 
	Activator
†† (
.
††( )
CreateInstance
††) 7
(
††7 8
repositoryType
††8 F
)
††F G
;
††G H
rep
££ 	
.
££	 

Name
££
 
=
££ 
repositoryName
££ 
;
££  "
m_name2repositoryMap
¶¶ 
[
¶¶ 
repositoryName
¶¶ )
]
¶¶) *
=
¶¶+ ,
rep
¶¶- 0
;
¶¶0 1,
OnLoggerRepositoryCreatedEvent
©© $
(
©©$ %
rep
©©% (
)
©©( )
;
©©) *
}
™™ 
}
´´ 
return
≠≠ 

rep
≠≠ 
;
≠≠ 
}
ÆÆ 
}
ØØ 
public
ΩΩ 
bool
ΩΩ	 
ExistsRepository
ΩΩ 
(
ΩΩ 
string
ΩΩ %
repositoryName
ΩΩ& 4
)
ΩΩ4 5
{
ææ 
lock
øø 
(
øø 
this
øø 
)
øø 
{
¿¿ 
return
¡¡ 
"
m_name2repositoryMap
¡¡ 
.
¡¡  
ContainsKey
¡¡  +
(
¡¡+ ,
repositoryName
¡¡, :
)
¡¡: ;
;
¡¡; <
}
¬¬ 
}
√√ 
public
ŒŒ 
ILoggerRepository
ŒŒ	 
[
ŒŒ 
]
ŒŒ  
GetAllRepositories
ŒŒ /
(
ŒŒ/ 0
)
ŒŒ0 1
{
œœ 
lock
–– 
(
–– 
this
–– 
)
–– 
{
—— 
ICollection
““ 
reps
““ 
=
““ "
m_name2repositoryMap
““ +
.
““+ ,
Values
““, 2
;
““2 3
ILoggerRepository
”” 
[
”” 
]
”” 
all
”” 
=
”” 
new
”” !
ILoggerRepository
””" 3
[
””3 4
reps
””4 8
.
””8 9
Count
””9 >
]
””> ?
;
””? @
reps
‘‘ 
.
‘‘ 	
CopyTo
‘‘	 
(
‘‘ 
all
‘‘ 
,
‘‘ 
$num
‘‘ 
)
‘‘ 
;
‘‘ 
return
’’ 

all
’’ 
;
’’ 
}
÷÷ 
}
◊◊ 
public
ÒÒ 
void
ÒÒ	 
AliasRepository
ÒÒ 
(
ÒÒ 
string
ÒÒ $
repositoryAlias
ÒÒ% 4
,
ÒÒ4 5
ILoggerRepository
ÒÒ6 G
repositoryTarget
ÒÒH X
)
ÒÒX Y
{
ÚÚ 
if
ÛÛ 
(
ÛÛ 
repositoryAlias
ÛÛ 
==
ÛÛ 
null
ÛÛ 
)
ÛÛ 
{
ÙÙ 
throw
ıı 	
new
ıı
 #
ArgumentNullException
ıı #
(
ıı# $
$str
ıı$ 5
)
ıı5 6
;
ıı6 7
}
ˆˆ 
if
˜˜ 
(
˜˜ 
repositoryTarget
˜˜ 
==
˜˜ 
null
˜˜ 
)
˜˜  
{
¯¯ 
throw
˘˘ 	
new
˘˘
 #
ArgumentNullException
˘˘ #
(
˘˘# $
$str
˘˘$ 6
)
˘˘6 7
;
˘˘7 8
}
˙˙ 
lock
¸¸ 
(
¸¸ 
this
¸¸ 
)
¸¸ 
{
˝˝ 
if
ˇˇ 
(
ˇˇ #
m_alias2repositoryMap
ˇˇ 
.
ˇˇ 
Contains
ˇˇ &
(
ˇˇ& '
repositoryAlias
ˇˇ' 6
)
ˇˇ6 7
)
ˇˇ7 8
{
ÄÄ 
if
ÇÇ 
(
ÇÇ 	
repositoryTarget
ÇÇ	 
!=
ÇÇ 
(
ÇÇ 
(
ÇÇ 
ILoggerRepository
ÇÇ 0
)
ÇÇ0 1#
m_alias2repositoryMap
ÇÇ1 F
[
ÇÇF G
repositoryAlias
ÇÇG V
]
ÇÇV W
)
ÇÇW X
)
ÇÇX Y
{
ÉÉ 
throw
ÖÖ 
new
ÖÖ '
InvalidOperationException
ÖÖ )
(
ÖÖ) *
$str
ÖÖ* 8
+
ÖÖ9 :
repositoryAlias
ÖÖ; J
+
ÖÖK L
$str
ÖÖM s
+
ÖÖt u
(
ÖÖv w
(
ÖÖw x 
ILoggerRepositoryÖÖx â
)ÖÖâ ä%
m_alias2repositoryMapÖÖä ü
[ÖÖü †
repositoryAliasÖÖ† Ø
]ÖÖØ ∞
)ÖÖ∞ ±
.ÖÖ± ≤
NameÖÖ≤ ∂
+ÖÖ∑ ∏
$strÖÖπ ⁄
)ÖÖ⁄ €
;ÖÖ€ ‹
}
ÜÜ 
}
áá 
else
ââ 
if
ââ	 
(
ââ "
m_name2repositoryMap
ââ !
.
ââ! "
Contains
ââ" *
(
ââ* +
repositoryAlias
ââ+ :
)
ââ: ;
)
ââ; <
{
ää 
if
åå 
(
åå 	
repositoryTarget
åå
 
!=
åå 
(
åå 
(
åå  
ILoggerRepository
åå  1
)
åå1 2"
m_name2repositoryMap
åå2 F
[
ååF G
repositoryAlias
ååG V
]
ååV W
)
ååW X
)
ååY Z
{
çç 
throw
èè 
new
èè '
InvalidOperationException
èè )
(
èè) *
$str
èè* 8
+
èè9 :
repositoryAlias
èè; J
+
èèK L
$strèèM Ö
+èèÜ á 
repositoryTargetèèà ò
.èèò ô
Nameèèô ù
+èèû ü
$strèè† §
)èè§ •
;èè• ¶
}
êê 
}
ëë 
else
íí 
{
ìì #
m_alias2repositoryMap
ïï 
[
ïï 
repositoryAlias
ïï *
]
ïï* +
=
ïï, -
repositoryTarget
ïï. >
;
ïï> ?
}
ññ 
}
óó 
}
òò 
	protected
ßß 
virtual
ßß 
void
ßß ,
OnLoggerRepositoryCreatedEvent
ßß 7
(
ßß7 8
ILoggerRepository
ßß8 I

repository
ßßJ T
)
ßßT U
{
®® 2
$LoggerRepositoryCreationEventHandler
©© '
handler
©©( /
=
©©0 1,
m_loggerRepositoryCreatedEvent
©©2 P
;
©©P Q
if
™™ 
(
™™ 
handler
™™ 
!=
™™ 
null
™™ 
)
™™ 
{
´´ 
handler
¨¨ 
(
¨¨ 
this
¨¨ 
,
¨¨ 
new
¨¨ /
!LoggerRepositoryCreationEventArgs
¨¨ 7
(
¨¨7 8

repository
¨¨8 B
)
¨¨B C
)
¨¨C D
;
¨¨D E
}
≠≠ 
}
ÆÆ 
private
ªª 	
void
ªª
  
GetInfoForAssembly
ªª !
(
ªª! "
Assembly
ªª" *
assembly
ªª+ 3
,
ªª3 4
ref
ªª5 8
string
ªª9 ?
repositoryName
ªª@ N
,
ªªN O
ref
ªªP S
Type
ªªT X
repositoryType
ªªY g
)
ªªg h
{
ºº 
if
ΩΩ 
(
ΩΩ 
assembly
ΩΩ 
==
ΩΩ 
null
ΩΩ 
)
ΩΩ 
{
ææ 
throw
øø 	
new
øø
 #
ArgumentNullException
øø #
(
øø# $
$str
øø$ .
)
øø. /
;
øø/ 0
}
¿¿ 
try
¬¬ 
{
√√ 
LogLog
ƒƒ 

.
ƒƒ
 
Debug
ƒƒ 
(
ƒƒ 
declaringType
ƒƒ 
,
ƒƒ 
$str
ƒƒ  ,
+
ƒƒ- .
assembly
ƒƒ/ 7
.
ƒƒ7 8
FullName
ƒƒ8 @
+
ƒƒA B
$str
ƒƒC T
+
ƒƒU V

SystemInfo
ƒƒW a
.
ƒƒa b"
AssemblyLocationInfo
ƒƒb v
(
ƒƒv w
assembly
ƒƒw 
)ƒƒ Ä
+ƒƒÅ Ç
$strƒƒÉ Ü
)ƒƒÜ á
;ƒƒá à
}
≈≈ 
catch
∆∆ 
{
«« 
}
…… 
try
ÀÀ 
{
ÃÃ 
object
—— 

[
——
 
]
—— "
repositoryAttributes
—— !
=
——" #
	Attribute
——$ -
.
——- .!
GetCustomAttributes
——. A
(
——A B
assembly
——B J
,
——J K
typeof
——L R
(
——R S
log4net
——S Z
.
——Z [
Config
——[ a
.
——a b!
RepositoryAttribute
——b u
)
——u v
,
——v w
false
——x }
)
——} ~
;
——~ 
if
”” 
(
”” "
repositoryAttributes
”” 
==
”” 
null
””  $
||
””% '"
repositoryAttributes
””( <
.
””< =
Length
””= C
==
””D F
$num
””G H
)
””H I
{
‘‘ 
LogLog
÷÷ 
.
÷÷ 
Debug
÷÷ 
(
÷÷ 
declaringType
÷÷ 
,
÷÷  
$str
÷÷! -
+
÷÷. /
assembly
÷÷0 8
+
÷÷9 :
$str
÷÷; m
)
÷÷m n
;
÷÷n o
}
◊◊ 
else
ÿÿ 
{
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 	"
repositoryAttributes
⁄⁄	 
.
⁄⁄ 
Length
⁄⁄ $
>
⁄⁄% &
$num
⁄⁄' (
)
⁄⁄( )
{
€€ 
LogLog
‹‹ 
.
‹‹ 
Error
‹‹ 
(
‹‹ 
declaringType
‹‹  
,
‹‹  !
$str
‹‹" .
+
‹‹/ 0
assembly
‹‹1 9
+
‹‹: ;
$str‹‹< °
)‹‹° ¢
;‹‹¢ £
}
›› 
log4net
ﬂﬂ 
.
ﬂﬂ 
Config
ﬂﬂ 
.
ﬂﬂ !
RepositoryAttribute
ﬂﬂ '
domAttr
ﬂﬂ( /
=
ﬂﬂ0 1"
repositoryAttributes
ﬂﬂ2 F
[
ﬂﬂF G
$num
ﬂﬂG H
]
ﬂﬂH I
as
ﬂﬂJ L
log4net
ﬂﬂM T
.
ﬂﬂT U
Config
ﬂﬂU [
.
ﬂﬂ[ \!
RepositoryAttribute
ﬂﬂ\ o
;
ﬂﬂo p
if
·· 
(
·· 	
domAttr
··	 
==
·· 
null
·· 
)
·· 
{
‚‚ 
LogLog
„„ 
.
„„ 
Error
„„ 
(
„„ 
declaringType
„„  
,
„„  !
$str
„„" .
+
„„/ 0
assembly
„„1 9
+
„„: ;
$str
„„< k
)
„„k l
;
„„l m
}
‰‰ 
else
ÂÂ 	
{
ÊÊ 
if
ËË 
(
ËË	 

domAttr
ËË
 
.
ËË 
Name
ËË 
!=
ËË 
null
ËË 
)
ËË 
{
ÈÈ 
repositoryName
ÍÍ 
=
ÍÍ 
domAttr
ÍÍ 
.
ÍÍ  
Name
ÍÍ  $
;
ÍÍ$ %
}
ÎÎ 
if
ÓÓ 
(
ÓÓ	 

domAttr
ÓÓ
 
.
ÓÓ 
RepositoryType
ÓÓ  
!=
ÓÓ! #
null
ÓÓ$ (
)
ÓÓ( )
{
ÔÔ 
if
ÒÒ 	
(
ÒÒ
 
typeof
ÒÒ 
(
ÒÒ 
ILoggerRepository
ÒÒ #
)
ÒÒ# $
.
ÒÒ$ %
IsAssignableFrom
ÒÒ% 5
(
ÒÒ5 6
domAttr
ÒÒ6 =
.
ÒÒ= >
RepositoryType
ÒÒ> L
)
ÒÒL M
)
ÒÒM N
{
ÚÚ 
repositoryType
ÛÛ 
=
ÛÛ 
domAttr
ÛÛ  
.
ÛÛ  !
RepositoryType
ÛÛ! /
;
ÛÛ/ 0
}
ÙÙ 
else
ıı 
{
ˆˆ 
LogLog
˜˜ 
.
˜˜ 
Error
˜˜ 
(
˜˜ 
declaringType
˜˜ "
,
˜˜" #
$str
˜˜$ R
+
˜˜S T
domAttr
˜˜U \
.
˜˜\ ]
RepositoryType
˜˜] k
+
˜˜l m
$str˜˜n °
)˜˜° ¢
;˜˜¢ £
}
¯¯ 
}
˘˘ 
}
˙˙ 
}
˚˚ 
}
¸¸ 
catch
˝˝ 
(
˝˝	 

	Exception
˝˝
 
ex
˝˝ 
)
˝˝ 
{
˛˛ 
LogLog
ˇˇ 

.
ˇˇ
 
Error
ˇˇ 
(
ˇˇ 
declaringType
ˇˇ 
,
ˇˇ 
$str
ˇˇ  K
,
ˇˇK L
ex
ˇˇM O
)
ˇˇO P
;
ˇˇP Q
}
ÄÄ 
}
ÅÅ 
private
éé 	
void
éé
 !
ConfigureRepository
éé "
(
éé" #
Assembly
éé# +
assembly
éé, 4
,
éé4 5
ILoggerRepository
éé6 G

repository
ééH R
)
ééR S
{
èè 
if
êê 
(
êê 
assembly
êê 
==
êê 
null
êê 
)
êê 
{
ëë 
throw
íí 	
new
íí
 #
ArgumentNullException
íí #
(
íí# $
$str
íí$ .
)
íí. /
;
íí/ 0
}
ìì 
if
îî 
(
îî 

repository
îî 
==
îî 
null
îî 
)
îî 
{
ïï 
throw
ññ 	
new
ññ
 #
ArgumentNullException
ññ #
(
ññ# $
$str
ññ$ 0
)
ññ0 1
;
ññ1 2
}
óó 
object
ùù 	
[
ùù	 

]
ùù
 
configAttributes
ùù 
=
ùù 
	Attribute
ùù (
.
ùù( )!
GetCustomAttributes
ùù) <
(
ùù< =
assembly
ùù= E
,
ùùE F
typeof
ùùG M
(
ùùM N
log4net
ùùN U
.
ùùU V
Config
ùùV \
.
ùù\ ]#
ConfiguratorAttribute
ùù] r
)
ùùr s
,
ùùs t
false
ùùu z
)
ùùz {
;
ùù{ |
if
üü 
(
üü 
configAttributes
üü 
!=
üü 
null
üü 
&&
üü  "
configAttributes
üü# 3
.
üü3 4
Length
üü4 :
>
üü; <
$num
üü= >
)
üü> ?
{
†† 
Array
¢¢ 	
.
¢¢	 

Sort
¢¢
 
(
¢¢ 
configAttributes
¢¢ 
)
¢¢  
;
¢¢  !
foreach
•• 
(
•• 
log4net
•• 
.
•• 
Config
•• 
.
•• #
ConfiguratorAttribute
•• 0

configAttr
••1 ;
in
••< >
configAttributes
••? O
)
••O P
{
¶¶ 
if
ßß 
(
ßß 	

configAttr
ßß	 
!=
ßß 
null
ßß 
)
ßß 
{
®® 
try
©© 	
{
™™ 

configAttr
´´ 
.
´´ 
	Configure
´´ 
(
´´ 
assembly
´´ $
,
´´$ %

repository
´´& 0
)
´´0 1
;
´´1 2
}
¨¨ 
catch
≠≠ 
(
≠≠ 
	Exception
≠≠ 
ex
≠≠ 
)
≠≠ 
{
ÆÆ 
LogLog
ØØ 
.
ØØ 
Error
ØØ 
(
ØØ 
declaringType
ØØ !
,
ØØ! "
$str
ØØ# 8
+
ØØ8 9

configAttr
ØØ9 C
.
ØØC D
GetType
ØØD K
(
ØØK L
)
ØØL M
.
ØØM N
FullName
ØØN V
+
ØØV W
$str
ØØW m
,
ØØm n
ex
ØØo q
)
ØØq r
;
ØØr s
}
∞∞ 
}
±± 
}
≤≤ 
}
≥≥ 
if
µµ 
(
µµ 

repository
µµ 
.
µµ 
Name
µµ 
==
µµ #
DefaultRepositoryName
µµ /
)
µµ/ 0
{
∂∂ 
string
ªª 
"
repositoryConfigFile
ªª 
=
ªª  !

SystemInfo
ªª" ,
.
ªª, -
GetAppSetting
ªª- :
(
ªª: ;
$str
ªª; K
)
ªªK L
;
ªªL M
if
ºº 
(
ºº "
repositoryConfigFile
ºº 
!=
ºº 
null
ºº  $
&&
ºº% '"
repositoryConfigFile
ºº( <
.
ºº< =
Length
ºº= C
>
ººD E
$num
ººF G
)
ººG H
{
ΩΩ 
string
ææ &
applicationBaseDirectory
ææ $
=
ææ% &
null
ææ' +
;
ææ+ ,
try
øø 
{
¿¿ &
applicationBaseDirectory
¡¡ 
=
¡¡  

SystemInfo
¡¡! +
.
¡¡+ ,&
ApplicationBaseDirectory
¡¡, D
;
¡¡D E
}
¬¬ 
catch
√√ 

(
√√
 
	Exception
√√ 
ex
√√ 
)
√√ 
{
ƒƒ 
LogLog
≈≈ 
.
≈≈ 
Warn
≈≈ 
(
≈≈ 
declaringType
≈≈ 
,
≈≈  
$str
≈≈! p
+
≈≈p q#
repositoryConfigFile≈≈q Ö
+≈≈Ö Ü
$str≈≈Ü ¨
,≈≈¨ ≠
ex≈≈Æ ∞
)≈≈∞ ±
;≈≈± ≤
}
∆∆ 
string
»» &
repositoryConfigFilePath
»» 3
=
»»4 5"
repositoryConfigFile
»»6 J
;
»»J K
if
…… 
(
…… &
applicationBaseDirectory
…… 0
!=
……1 3
null
……4 8
)
……8 9
{
   &
repositoryConfigFilePath
ÀÀ 0
=
ÀÀ1 2
Path
ÀÀ3 7
.
ÀÀ7 8
Combine
ÀÀ8 ?
(
ÀÀ? @&
applicationBaseDirectory
ÀÀ@ X
,
ÀÀX Y"
repositoryConfigFile
ÀÀZ n
)
ÀÀn o
;
ÀÀo p
}
ÃÃ 
bool
œœ '
watchRepositoryConfigFile
œœ &
=
œœ' (
false
œœ) .
;
œœ. /
Boolean
—— 
.
—— 
TryParse
—— 
(
—— 

SystemInfo
—— #
.
——# $
GetAppSetting
——$ 1
(
——1 2
$str
——2 H
)
——H I
,
——I J
out
——K N'
watchRepositoryConfigFile
——O h
)
——h i
;
——i j
if
„„ 
(
„„ 	'
watchRepositoryConfigFile
„„	 "
)
„„" #
{
‰‰ 
FileInfo
ÁÁ &
repositoryConfigFileInfo
ÁÁ '
=
ÁÁ( )
null
ÁÁ* .
;
ÁÁ. /
try
ËË 	
{
ÈÈ &
repositoryConfigFileInfo
ÍÍ 
=
ÍÍ  !
new
ÍÍ" %
FileInfo
ÍÍ& .
(
ÍÍ. /&
repositoryConfigFilePath
ÍÍ/ G
)
ÍÍG H
;
ÍÍH I
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
	Exception
ÏÏ 
ex
ÏÏ 
)
ÏÏ 
{
ÌÌ 
LogLog
ÓÓ "
.
ÓÓ" #
Error
ÓÓ# (
(
ÓÓ( )
declaringType
ÓÓ) 6
,
ÓÓ6 7
$strÓÓ8 ê
+ÓÓë í(
repositoryConfigFilePathÓÓì ´
+ÓÓ¨ ≠
$strÓÓÆ ±
,ÓÓ± ≤
exÓÓ≥ µ
)ÓÓµ ∂
;ÓÓ∂ ∑
}
ÔÔ 
try
 	
{
ÒÒ 
LogLog
ÚÚ "
.
ÚÚ" #
Debug
ÚÚ# (
(
ÚÚ( )
declaringType
ÚÚ) 6
,
ÚÚ6 7
$strÚÚ8 ú
+ÚÚù û(
repositoryConfigFilePathÚÚü ∑
+ÚÚ∏ π
$strÚÚ∫ Ω
)ÚÚΩ æ
;ÚÚæ ø
XmlConfigurator
ÙÙ +
.
ÙÙ+ ,
ConfigureAndWatch
ÙÙ, =
(
ÙÙ= >

repository
ÙÙ> H
,
ÙÙH I&
repositoryConfigFileInfo
ÙÙJ b
)
ÙÙb c
;
ÙÙc d
}
ıı 
catch
ˆˆ 
(
ˆˆ 
	Exception
ˆˆ 
ex
ˆˆ 
)
ˆˆ 
{
˜˜ 
LogLog
¯¯ "
.
¯¯" #
Error
¯¯# (
(
¯¯( )
declaringType
¯¯) 6
,
¯¯6 7
$str¯¯8 •
+¯¯¶ ß(
repositoryConfigFilePath¯¯® ¿
+¯¯¡ ¬
$str¯¯√ ∆
,¯¯∆ «
ex¯¯»  
)¯¯  À
;¯¯À Ã
}
˘˘ 
}
˙˙ 
else
˚˚ 	
{
¸¸ 
Uri
ˇˇ !
repositoryConfigUri
ˇˇ	 
=
ˇˇ 
null
ˇˇ #
;
ˇˇ# $
try
ÄÄ 
{
ÅÅ !
repositoryConfigUri
ÇÇ	 
=
ÇÇ 
new
ÇÇ "
Uri
ÇÇ# &
(
ÇÇ& '&
repositoryConfigFilePath
ÇÇ' ?
)
ÇÇ? @
;
ÇÇ@ A
}
ÉÉ 
catch
ÑÑ 

(
ÑÑ
 
	Exception
ÑÑ 
ex
ÑÑ 
)
ÑÑ 
{
ÖÖ 
LogLog
ÜÜ 
.
ÜÜ 
Error
ÜÜ 
(
ÜÜ 
declaringType
ÜÜ  
,
ÜÜ  !
$str
ÜÜ" V
+
ÜÜV W"
repositoryConfigFile
ÜÜW k
+
ÜÜk l
$str
ÜÜl o
,
ÜÜo p
ex
ÜÜq s
)
ÜÜs t
;
ÜÜt u
}
áá 
if
ââ 
(
ââ 	!
repositoryConfigUri
ââ	 
!=
ââ 
null
ââ  $
)
ââ$ %
{
ää 
LogLog
ãã 
.
ãã 
Debug
ãã 
(
ãã 
declaringType
ãã  
,
ãã  !
$str
ãã" x
+
ããx y"
repositoryConfigUriããy å
.ããå ç
ToStringããç ï
(ããï ñ
)ããñ ó
+ããó ò
$strããò õ
)ããõ ú
;ããú ù
try
çç 	
{
éé 
XmlConfigurator
êê 
.
êê 
	Configure
êê  
(
êê  !

repository
êê! +
,
êê+ ,!
repositoryConfigUri
êê- @
)
êê@ A
;
êêA B
}
ëë 
catch
íí 
(
íí 
	Exception
íí 
ex
íí 
)
íí 
{
ìì 
LogLog
îî 
.
îî 
Error
îî 
(
îî 
declaringType
îî !
,
îî! "
$str
îî# h
+
îîh i!
repositoryConfigUri
îîi |
+
îî| }
$strîî} Ä
,îîÄ Å
exîîÇ Ñ
)îîÑ Ö
;îîÖ Ü
}
ïï 
}
ññ 
}
óó 
}
òò 
}
ôô 
}
öö 
private
¶¶ 	
void
¶¶
 
LoadPlugins
¶¶ 
(
¶¶ 
Assembly
¶¶ #
assembly
¶¶$ ,
,
¶¶, -
ILoggerRepository
¶¶. ?

repository
¶¶@ J
)
¶¶J K
{
ßß 
if
®® 
(
®® 
assembly
®® 
==
®® 
null
®® 
)
®® 
{
©© 
throw
™™ 	
new
™™
 #
ArgumentNullException
™™ #
(
™™# $
$str
™™$ .
)
™™. /
;
™™/ 0
}
´´ 
if
¨¨ 
(
¨¨ 

repository
¨¨ 
==
¨¨ 
null
¨¨ 
)
¨¨ 
{
≠≠ 
throw
ÆÆ 	
new
ÆÆ
 #
ArgumentNullException
ÆÆ #
(
ÆÆ# $
$str
ÆÆ$ 0
)
ÆÆ0 1
;
ÆÆ1 2
}
ØØ 
object
µµ 	
[
µµ	 

]
µµ
 
configAttributes
µµ 
=
µµ 
	Attribute
µµ (
.
µµ( )!
GetCustomAttributes
µµ) <
(
µµ< =
assembly
µµ= E
,
µµE F
typeof
µµG M
(
µµM N
log4net
µµN U
.
µµU V
Config
µµV \
.
µµ\ ]
PluginAttribute
µµ] l
)
µµl m
,
µµm n
false
µµo t
)
µµt u
;
µµu v
if
∑∑ 
(
∑∑ 
configAttributes
∑∑ 
!=
∑∑ 
null
∑∑ 
&&
∑∑  "
configAttributes
∑∑# 3
.
∑∑3 4
Length
∑∑4 :
>
∑∑; <
$num
∑∑= >
)
∑∑> ?
{
∏∏ 
foreach
ππ 
(
ππ 
log4net
ππ 
.
ππ 
Plugin
ππ 
.
ππ 
IPluginFactory
ππ )

configAttr
ππ* 4
in
ππ5 7
configAttributes
ππ8 H
)
ππH I
{
∫∫ 
try
ªª 
{
ºº 

repository
ææ 
.
ææ 
	PluginMap
ææ 
.
ææ 
Add
ææ 
(
ææ 

configAttr
ææ )
.
ææ) *
CreatePlugin
ææ* 6
(
ææ6 7
)
ææ7 8
)
ææ8 9
;
ææ9 :
}
øø 
catch
¿¿ 

(
¿¿
 
	Exception
¿¿ 
ex
¿¿ 
)
¿¿ 
{
¡¡ 
LogLog
¬¬ 
.
¬¬ 
Error
¬¬ 
(
¬¬ 
declaringType
¬¬  
,
¬¬  !
$str
¬¬" H
+
¬¬I J

configAttr
¬¬K U
.
¬¬U V
ToString
¬¬V ^
(
¬¬^ _
)
¬¬_ `
+
¬¬a b
$str
¬¬c f
,
¬¬f g
ex
¬¬h j
)
¬¬j k
;
¬¬k l
}
√√ 
}
ƒƒ 
}
≈≈ 
}
∆∆ 
private
““ 	
void
““
 
LoadAliases
““ 
(
““ 
Assembly
““ #
assembly
““$ ,
,
““, -
ILoggerRepository
““. ?

repository
““@ J
)
““J K
{
”” 
if
‘‘ 
(
‘‘ 
assembly
‘‘ 
==
‘‘ 
null
‘‘ 
)
‘‘ 
{
’’ 
throw
÷÷ 	
new
÷÷
 #
ArgumentNullException
÷÷ #
(
÷÷# $
$str
÷÷$ .
)
÷÷. /
;
÷÷/ 0
}
◊◊ 
if
ÿÿ 
(
ÿÿ 

repository
ÿÿ 
==
ÿÿ 
null
ÿÿ 
)
ÿÿ 
{
ŸŸ 
throw
⁄⁄ 	
new
⁄⁄
 #
ArgumentNullException
⁄⁄ #
(
⁄⁄# $
$str
⁄⁄$ 0
)
⁄⁄0 1
;
⁄⁄1 2
}
€€ 
object
·· 	
[
··	 

]
··
 
configAttributes
·· 
=
·· 
	Attribute
·· (
.
··( )!
GetCustomAttributes
··) <
(
··< =
assembly
··= E
,
··E F
typeof
··G M
(
··M N
log4net
··N U
.
··U V
Config
··V \
.
··\ ]&
AliasRepositoryAttribute
··] u
)
··u v
,
··v w
false
··x }
)
··} ~
;
··~ 
if
„„ 
(
„„ 
configAttributes
„„ 
!=
„„ 
null
„„ 
&&
„„  "
configAttributes
„„# 3
.
„„3 4
Length
„„4 :
>
„„; <
$num
„„= >
)
„„> ?
{
‰‰ 
foreach
ÂÂ 
(
ÂÂ 
log4net
ÂÂ 
.
ÂÂ 
Config
ÂÂ 
.
ÂÂ &
AliasRepositoryAttribute
ÂÂ 3

configAttr
ÂÂ4 >
in
ÂÂ? A
configAttributes
ÂÂB R
)
ÂÂR S
{
ÊÊ 
try
ÁÁ 
{
ËË 
AliasRepository
ÈÈ 
(
ÈÈ 

configAttr
ÈÈ  
.
ÈÈ  !
Name
ÈÈ! %
,
ÈÈ% &

repository
ÈÈ' 1
)
ÈÈ1 2
;
ÈÈ2 3
}
ÍÍ 
catch
ÎÎ 

(
ÎÎ
 
	Exception
ÎÎ 
ex
ÎÎ 
)
ÎÎ 
{
ÏÏ 
LogLog
ÌÌ 
.
ÌÌ 
Error
ÌÌ 
(
ÌÌ 
declaringType
ÌÌ  
,
ÌÌ  !
$str
ÌÌ" @
+
ÌÌA B

configAttr
ÌÌC M
.
ÌÌM N
Name
ÌÌN R
+
ÌÌS T
$str
ÌÌU X
,
ÌÌX Y
ex
ÌÌZ \
)
ÌÌ\ ]
;
ÌÌ] ^
}
ÓÓ 
}
ÔÔ 
}
 
}
ÒÒ 
private
˛˛ 
readonly
˛˛ 
static
˛˛ 
Type
˛˛  $
declaringType
˛˛% 2
=
˛˛3 4
typeof
˛˛5 ;
(
˛˛; <'
DefaultRepositorySelector
˛˛< U
)
˛˛U V
;
˛˛V W
private
ÄÄ 	
const
ÄÄ
 
string
ÄÄ #
DefaultRepositoryName
ÄÄ ,
=
ÄÄ- .
$str
ÄÄ/ K
;
ÄÄK L
private
ÜÜ 	
readonly
ÜÜ
 
	Hashtable
ÜÜ "
m_name2repositoryMap
ÜÜ 1
=
ÜÜ2 3
new
ÜÜ4 7
	Hashtable
ÜÜ8 A
(
ÜÜA B
)
ÜÜB C
;
ÜÜC D
private
áá 	
readonly
áá
 
	Hashtable
áá &
m_assembly2repositoryMap
áá 5
=
áá6 7
new
áá8 ;
	Hashtable
áá< E
(
ááE F
)
ááF G
;
ááG H
private
àà 	
readonly
àà
 
	Hashtable
àà #
m_alias2repositoryMap
àà 2
=
àà3 4
new
àà5 8
	Hashtable
àà9 B
(
ààB C
)
ààC D
;
ààD E
private
ââ 	
readonly
ââ
 
Type
ââ %
m_defaultRepositoryType
ââ /
;
ââ/ 0
private
ãã 	
event
ãã
 2
$LoggerRepositoryCreationEventHandler
ãã 4,
m_loggerRepositoryCreatedEvent
ãã5 S
;
ããS T
}
éé 
}èè Ÿ
9C:\sonarqube\projects\log4net-2.0.7\src\Core\ErrorCode.cs
	namespace 	
log4net
 
. 
Core 
{ 
public!! 
enum!! 
	ErrorCode!! 
:!! 
int!! 
{"" 
GenericFailure&& 
=&& 
$num&& 
,&& 
WriteFailure++ 
,++ 
FlushFailure00 
,00 
CloseFailure55 
,55 
FileOpenFailure:: 
,:: 
MissingLayout?? 
,?? 
AddressParseFailureDD 
}EE 
}FF ü
BC:\sonarqube\projects\log4net-2.0.7\src\Core\ExceptionEvaluator.cs
	namespace 	
log4net
 
. 
Core 
{ 
public&& 
class&& 
ExceptionEvaluator&&  
:&&! "%
ITriggeringEventEvaluator&&# <
{'' 
private++ 	
Type++
 
m_type++ 
;++ 
private00 	
bool00
 
m_triggerOnSubclass00 "
;00" #
public55 
ExceptionEvaluator55	 
(55 
)55 
{66 
}88 
public?? 
ExceptionEvaluator??	 
(?? 
Type??  
exType??! '
,??' (
bool??) -
triggerOnSubClass??. ?
)??? @
{@@ 
ifAA 
(AA 
exTypeAA 
==AA 
nullAA 
)AA 
{BB 
throwCC 	
newCC
 !
ArgumentNullExceptionCC #
(CC# $
$strCC$ ,
)CC, -
;CC- .
}DD 
m_typeFF 	
=FF
 
exTypeFF 
;FF 
m_triggerOnSubclassGG 
=GG 
triggerOnSubClassGG *
;GG* +
}HH 
publicMM 
TypeMM	 
ExceptionTypeMM 
{NN 
getOO 
{OO 
returnOO	 
m_typeOO 
;OO 
}OO 
setPP 
{PP 
m_typePP	 
=PP 
valuePP 
;PP 
}PP 
}QQ 
publicVV 
boolVV	 
TriggerOnSubclassVV 
{WW 
getXX 
{XX 
returnXX	 
m_triggerOnSubclassXX #
;XX# $
}XX% &
setYY 
{YY 
m_triggerOnSubclassYY	 
=YY 
valueYY $
;YY$ %
}YY& '
}ZZ 
publicll 
boolll	 
IsTriggeringEventll 
(ll  
LoggingEventll  ,
loggingEventll- 9
)ll9 :
{mm 
ifnn 
(nn 
loggingEventnn 
==nn 
nullnn 
)nn 
{oo 
throwpp 	
newpp
 !
ArgumentNullExceptionpp #
(pp# $
$strpp$ 2
)pp2 3
;pp3 4
}qq 
ifss 
(ss 
m_triggerOnSubclassss 
&&ss 
loggingEventss *
.ss* +
ExceptionObjectss+ :
!=ss; =
nullss> B
)ssB C
{tt 
Typevv 
exceptionObjectTypevv	 
=vv 
loggingEventvv +
.vv+ ,
ExceptionObjectvv, ;
.vv; <
GetTypevv< C
(vvC D
)vvD E
;vvE F
returnww 

exceptionObjectTypeww 
==ww !
m_typeww" (
||ww) +
exceptionObjectTypeww, ?
.ww? @
IsSubclassOfww@ L
(wwL M
m_typewwM S
)wwS T
;wwT U
}xx 
elseyy 
ifyy 

(yy 
!yy 
m_triggerOnSubclassyy  
&&yy! #
loggingEventyy$ 0
.yy0 1
ExceptionObjectyy1 @
!=yyA C
nullyyD H
)yyH I
{zz 
return{{ 

loggingEvent{{ 
.{{ 
ExceptionObject{{ '
.{{' (
GetType{{( /
({{/ 0
){{0 1
=={{2 4
m_type{{5 ;
;{{; <
}|| 
else}} 
{~~ 
return 

false 
; 
}
ÄÄ 
}
ÅÅ 
}
ÑÑ 
}ÖÖ É
CC:\sonarqube\projects\log4net-2.0.7\src\Core\IAppenderAttachable.cs
	namespace 	
log4net
 
. 
Core 
{ 
public$$ 
	interface$$ 
IAppenderAttachable$$ %
{%% 
void00 
AddAppender00 
(00 
	IAppender00 
appender00 %
)00% &
;00& '
AppenderCollection@@ 
	Appenders@@ 
{@@  
get@@  #
;@@# $
}@@$ %
	IAppenderQQ 
GetAppenderQQ 
(QQ 
stringQQ 
nameQQ #
)QQ# $
;QQ$ %
void[[ 
RemoveAllAppenders[[ 
([[ 
)[[ 
;[[ 
	IAppenderii 
RemoveAppenderii 
(ii 
	IAppenderii $
appenderii% -
)ii- .
;ii. /
	IAppenderww 
RemoveAppenderww 
(ww 
stringww !
nameww" &
)ww& '
;ww' (
}xx 
}yy †
=C:\sonarqube\projects\log4net-2.0.7\src\Core\IErrorHandler.cs
	namespace 	
log4net
 
. 
Core 
{ 
public## 
	interface## 
IErrorHandler## 
{$$ 
void22 
Error22 
(22 
string22 
message22 
,22 
	Exception22 &
e22' (
,22( )
	ErrorCode22* 3
	errorCode224 =
)22= >
;22> ?
void>> 
Error>> 
(>> 
string>> 
message>> 
,>> 
	Exception>> &
e>>' (
)>>( )
;>>) *
voidII 
ErrorII 
(II 
stringII 
messageII 
)II 
;II 
}JJ 
}KK È
?C:\sonarqube\projects\log4net-2.0.7\src\Core\IFixingRequired.cs
	namespace 	
log4net
 
. 
Core 
{ 
public++ 
	interface++ 
IFixingRequired++ !
{,, 
object88 
GetFixedObject88	 
(88 
)88 
;88 
}99 
}:: é
7C:\sonarqube\projects\log4net-2.0.7\src\Core\ILogger.cs
	namespace 	
log4net
 
. 
Core 
{ 
public++ 
	interface++ 
ILogger++ 
{,, 
string88 
Name88	 
{88 
get88 
;88 
}88 
voidHH 
LogHH 

(HH
 
TypeHH ,
 callerStackBoundaryDeclaringTypeHH 0
,HH0 1
LevelHH2 7
levelHH8 =
,HH= >
objectHH? E
messageHHF M
,HHM N
	ExceptionHHO X
	exceptionHHY b
)HHb c
;HHc d
voidTT 
LogTT 

(TT
 
LoggingEventTT 
logEventTT  
)TT  !
;TT! "
boolbb 
IsEnabledForbb 
(bb 
Levelbb 
levelbb 
)bb  
;bb  !
ILoggerRepositoryqq 

Repositoryqq 
{qq  
getqq! $
;qq$ %
}qq& '
}rr 
}ss Ò
>C:\sonarqube\projects\log4net-2.0.7\src\Core\ILoggerWrapper.cs
	namespace 	
log4net
 
. 
Core 
{ 
public(( 
	interface(( 
ILoggerWrapper((  
{)) 
ILogger99 	
Logger99
 
{99 
get99 
;99 
}99 
}:: 
};; Ê
>C:\sonarqube\projects\log4net-2.0.7\src\Core\IOptionHandler.cs
	namespace 	
log4net
 
. 
Core 
{ 
public(( 
	interface(( 
IOptionHandler((  
{)) 
void88 
ActivateOptions88 
(88 
)88 
;88 
}99 
}:: √
CC:\sonarqube\projects\log4net-2.0.7\src\Core\IRepositorySelector.cs
	namespace 	
log4net
 
. 
Core 
{ 
public(( 
delegate(( 
void(( 0
$LoggerRepositoryCreationEventHandler(( :
(((: ;
object((; A
sender((B H
,((H I-
!LoggerRepositoryCreationEventArgs((J k
e((l m
)((m n
;((n o
public33 
class33 -
!LoggerRepositoryCreationEventArgs33 /
:330 1
	EventArgs332 ;
{44 
private88 	
ILoggerRepository88
 
m_repository88 (
;88( )
publicCC -
!LoggerRepositoryCreationEventArgsCC	 *
(CC* +
ILoggerRepositoryCC+ <

repositoryCC= G
)CCG H
{DD 
m_repositoryEE 
=EE 

repositoryEE 
;EE 
}FF 
publicSS 
ILoggerRepositorySS	 
LoggerRepositorySS +
{TT 
getUU 
{UU 
returnUU	 
m_repositoryUU 
;UU 
}UU 
}VV 
}WW 
publicgg 
	interfacegg 
IRepositorySelectorgg %
{hh 
ILoggerRepositoryzz 
GetRepositoryzz !
(zz! "
Assemblyzz" *
assemblyzz+ 3
)zz3 4
;zz4 5
ILoggerRepository
ÖÖ 
GetRepository
ÖÖ !
(
ÖÖ! "
string
ÖÖ" (
repositoryName
ÖÖ) 7
)
ÖÖ7 8
;
ÖÖ8 9
ILoggerRepository
ôô 
CreateRepository
ôô $
(
ôô$ %
Assembly
ôô% -
assembly
ôô. 6
,
ôô6 7
Type
ôô8 <
repositoryType
ôô= K
)
ôôK L
;
ôôL M
ILoggerRepository
®® 
CreateRepository
®® $
(
®®$ %
string
®®% +
repositoryName
®®, :
,
®®: ;
Type
®®< @
repositoryType
®®A O
)
®®O P
;
®®P Q
bool
∂∂ 
ExistsRepository
∂∂ 
(
∂∂ 
string
∂∂ 
repositoryName
∂∂ -
)
∂∂- .
;
∂∂. /
ILoggerRepository
√√ 
[
√√ 
]
√√  
GetAllRepositories
√√ (
(
√√( )
)
√√) *
;
√√* +
event
”” 2
$LoggerRepositoryCreationEventHandler
”” ,*
LoggerRepositoryCreatedEvent
””- I
;
””I J
}
‘‘ 
}’’ ≤
IC:\sonarqube\projects\log4net-2.0.7\src\Core\ITriggeringEventEvaluator.cs
	namespace 	
log4net
 
. 
Core 
{ 
public%% 
	interface%% %
ITriggeringEventEvaluator%% +
{&& 
bool11 
IsTriggeringEvent11 
(11 
LoggingEvent11 %
loggingEvent11& 2
)112 3
;113 4
}22 
}33 •t
5C:\sonarqube\projects\log4net-2.0.7\src\Core\Level.cs
	namespace 	
log4net
 
. 
Core 
{ 
[TT 
SerializableTT 
]TT 
sealedVV 
publicVV 
classVV 
LevelVV 
:VV 
IComparableVV (
{WW 
publicff 
Levelff	 
(ff 
intff 
levelff 
,ff 
stringff  
	levelNameff! *
,ff* +
stringff, 2
displayNameff3 >
)ff> ?
{gg 
ifhh 
(hh 
	levelNamehh 
==hh 
nullhh 
)hh 
{ii 
throwjj 	
newjj
 !
ArgumentNullExceptionjj #
(jj# $
$strjj$ /
)jj/ 0
;jj0 1
}kk 
ifll 
(ll 
displayNamell 
==ll 
nullll 
)ll 
{mm 
thrownn 	
newnn
 !
ArgumentNullExceptionnn #
(nn# $
$strnn$ 1
)nn1 2
;nn2 3
}oo 
m_levelValueqq 
=qq 
levelqq 
;qq 
m_levelNameuu 
=uu 
stringuu 
.uu 
Internuu 
(uu 
	levelNameuu (
)uu( )
;uu) *
m_levelDisplayNameww 
=ww 
displayNameww #
;ww# $
}xx 
public
ÖÖ 
Level
ÖÖ	 
(
ÖÖ 
int
ÖÖ 
level
ÖÖ 
,
ÖÖ 
string
ÖÖ  
	levelName
ÖÖ! *
)
ÖÖ* +
:
ÖÖ, -
this
ÖÖ. 2
(
ÖÖ2 3
level
ÖÖ3 8
,
ÖÖ8 9
	levelName
ÖÖ: C
,
ÖÖC D
	levelName
ÖÖE N
)
ÖÖN O
{
ÜÜ 
}
áá 
public
òò 
string
òò	 
Name
òò 
{
ôô 
get
öö 
{
öö 
return
öö	 
m_levelName
öö 
;
öö 
}
öö 
}
õõ 
public
®® 
int
®®	 
Value
®® 
{
©© 
get
™™ 
{
™™ 
return
™™	 
m_levelValue
™™ 
;
™™ 
}
™™ 
}
´´ 
public
∏∏ 
string
∏∏	 
DisplayName
∏∏ 
{
ππ 
get
∫∫ 
{
∫∫ 
return
∫∫	  
m_levelDisplayName
∫∫ "
;
∫∫" #
}
∫∫$ %
}
ªª 
override
ÕÕ 

public
ÕÕ 
string
ÕÕ 
ToString
ÕÕ !
(
ÕÕ! "
)
ÕÕ" #
{
ŒŒ 
return
œœ 	
m_levelName
œœ
 
;
œœ 
}
–– 
override
ﬁﬁ 

public
ﬁﬁ 
bool
ﬁﬁ 
Equals
ﬁﬁ 
(
ﬁﬁ 
object
ﬁﬁ $
o
ﬁﬁ% &
)
ﬁﬁ& '
{
ﬂﬂ 
Level
‡‡ 

otherLevel
‡‡	 
=
‡‡ 
o
‡‡ 
as
‡‡ 
Level
‡‡  
;
‡‡  !
if
·· 
(
·· 

otherLevel
·· 
!=
·· 
null
·· 
)
·· 
{
‚‚ 
return
„„ 

m_levelValue
„„ 
==
„„ 

otherLevel
„„ %
.
„„% &
m_levelValue
„„& 2
;
„„2 3
}
‰‰ 
else
ÂÂ 
{
ÊÊ 
return
ÁÁ 

base
ÁÁ 
.
ÁÁ 
Equals
ÁÁ 
(
ÁÁ 
o
ÁÁ 
)
ÁÁ 
;
ÁÁ 
}
ËË 
}
ÈÈ 
override
¯¯ 

public
¯¯ 
int
¯¯ 
GetHashCode
¯¯ !
(
¯¯! "
)
¯¯" #
{
˘˘ 
return
˙˙ 	
m_levelValue
˙˙
 
;
˙˙ 
}
˚˚ 
public
ßß 
int
ßß	 
	CompareTo
ßß 
(
ßß 
object
ßß 
r
ßß 
)
ßß  
{
®® 
Level
©© 
target
©©	 
=
©© 
r
©© 
as
©© 
Level
©© 
;
©© 
if
™™ 
(
™™ 
target
™™ 
!=
™™ 
null
™™ 
)
™™ 
{
´´ 
return
¨¨ 

Compare
¨¨ 
(
¨¨ 
this
¨¨ 
,
¨¨ 
target
¨¨ 
)
¨¨  
;
¨¨  !
}
≠≠ 
throw
ÆÆ 
new
ÆÆ	 
ArgumentException
ÆÆ 
(
ÆÆ 
$str
ÆÆ 7
+
ÆÆ8 9
r
ÆÆ: ;
+
ÆÆ< =
$str
ÆÆ> ]
)
ÆÆ] ^
;
ÆÆ^ _
}
ØØ 
public
ƒƒ 
static
ƒƒ	 
bool
ƒƒ 
operator
ƒƒ 
>
ƒƒ 
(
ƒƒ  !
Level
ƒƒ! &
l
ƒƒ' (
,
ƒƒ( )
Level
ƒƒ* /
r
ƒƒ0 1
)
ƒƒ1 2
{
≈≈ 
return
∆∆ 	
l
∆∆
 
.
∆∆ 
m_levelValue
∆∆ 
>
∆∆ 
r
∆∆ 
.
∆∆ 
m_levelValue
∆∆ )
;
∆∆) *
}
«« 
public
ÿÿ 
static
ÿÿ	 
bool
ÿÿ 
operator
ÿÿ 
<
ÿÿ 
(
ÿÿ  !
Level
ÿÿ! &
l
ÿÿ' (
,
ÿÿ( )
Level
ÿÿ* /
r
ÿÿ0 1
)
ÿÿ1 2
{
ŸŸ 
return
⁄⁄ 	
l
⁄⁄
 
.
⁄⁄ 
m_levelValue
⁄⁄ 
<
⁄⁄ 
r
⁄⁄ 
.
⁄⁄ 
m_levelValue
⁄⁄ )
;
⁄⁄) *
}
€€ 
public
ÏÏ 
static
ÏÏ	 
bool
ÏÏ 
operator
ÏÏ 
>=
ÏÏ  
(
ÏÏ! "
Level
ÏÏ" '
l
ÏÏ( )
,
ÏÏ) *
Level
ÏÏ+ 0
r
ÏÏ1 2
)
ÏÏ2 3
{
ÌÌ 
return
ÓÓ 	
l
ÓÓ
 
.
ÓÓ 
m_levelValue
ÓÓ 
>=
ÓÓ 
r
ÓÓ 
.
ÓÓ 
m_levelValue
ÓÓ *
;
ÓÓ* +
}
ÔÔ 
public
ÄÄ 
static
ÄÄ	 
bool
ÄÄ 
operator
ÄÄ 
<=
ÄÄ  
(
ÄÄ! "
Level
ÄÄ" '
l
ÄÄ( )
,
ÄÄ) *
Level
ÄÄ+ 0
r
ÄÄ1 2
)
ÄÄ2 3
{
ÅÅ 
return
ÇÇ 	
l
ÇÇ
 
.
ÇÇ 
m_levelValue
ÇÇ 
<=
ÇÇ 
r
ÇÇ 
.
ÇÇ 
m_levelValue
ÇÇ *
;
ÇÇ* +
}
ÉÉ 
public
îî 
static
îî	 
bool
îî 
operator
îî 
==
îî  
(
îî! "
Level
îî" '
l
îî( )
,
îî) *
Level
îî+ 0
r
îî1 2
)
îî2 3
{
ïï 
if
ññ 
(
ññ 
(
ññ 
(
ññ 	
object
ññ	 
)
ññ 
l
ññ 
)
ññ 
!=
ññ 
null
ññ 
&&
ññ 
(
ññ 
(
ññ  
object
ññ  &
)
ññ& '
r
ññ' (
)
ññ( )
!=
ññ* ,
null
ññ- 1
)
ññ1 2
{
óó 
return
òò 

l
òò 
.
òò 
m_levelValue
òò 
==
òò 
r
òò 
.
òò 
m_levelValue
òò +
;
òò+ ,
}
ôô 
else
öö 
{
õõ 
return
úú 

(
úú 
(
úú 
object
úú 
)
úú 
l
úú 
)
úú 
==
úú 
(
úú 
(
úú 
object
úú #
)
úú# $
r
úú% &
)
úú& '
;
úú' (
}
ùù 
}
ûû 
public
ØØ 
static
ØØ	 
bool
ØØ 
operator
ØØ 
!=
ØØ  
(
ØØ! "
Level
ØØ" '
l
ØØ( )
,
ØØ) *
Level
ØØ+ 0
r
ØØ1 2
)
ØØ2 3
{
∞∞ 
return
±± 	
!
±±
 
(
±± 
l
±± 
==
±± 
r
±± 
)
±± 
;
±± 
}
≤≤ 
public
ÿÿ 
static
ÿÿ	 
int
ÿÿ 
Compare
ÿÿ 
(
ÿÿ 
Level
ÿÿ !
l
ÿÿ" #
,
ÿÿ# $
Level
ÿÿ% *
r
ÿÿ+ ,
)
ÿÿ, -
{
ŸŸ 
if
€€ 
(
€€ 
(
€€ 
object
€€ 
)
€€ 
l
€€ 
==
€€ 
(
€€ 
object
€€ 
)
€€ 
r
€€ 
)
€€ 
{
‹‹ 
return
›› 

$num
›› 
;
›› 
}
ﬁﬁ 
if
‡‡ 
(
‡‡ 
l
‡‡ 
==
‡‡	 
null
‡‡ 
&&
‡‡ 
r
‡‡ 
==
‡‡ 
null
‡‡ 
)
‡‡ 
{
·· 
return
‚‚ 

$num
‚‚ 
;
‚‚ 
}
„„ 
if
‰‰ 
(
‰‰ 
l
‰‰ 
==
‰‰	 
null
‰‰ 
)
‰‰ 
{
ÂÂ 
return
ÊÊ 

-
ÊÊ 
$num
ÊÊ 
;
ÊÊ 
}
ÁÁ 
if
ËË 
(
ËË 
r
ËË 
==
ËË	 
null
ËË 
)
ËË 
{
ÈÈ 
return
ÍÍ 

$num
ÍÍ 
;
ÍÍ 
}
ÎÎ 
return
ÌÌ 	
l
ÌÌ
 
.
ÌÌ 
m_levelValue
ÌÌ 
.
ÌÌ 
	CompareTo
ÌÌ "
(
ÌÌ" #
r
ÌÌ# $
.
ÌÌ$ %
m_levelValue
ÌÌ% 1
)
ÌÌ1 2
;
ÌÌ2 3
}
ÓÓ 
public
˜˜ 
readonly
˜˜	 
static
˜˜ 
Level
˜˜ 
Off
˜˜ "
=
˜˜# $
new
˜˜% (
Level
˜˜) .
(
˜˜. /
int
˜˜/ 2
.
˜˜2 3
MaxValue
˜˜3 ;
,
˜˜; <
$str
˜˜= B
)
˜˜B C
;
˜˜C D
public
˝˝ 
readonly
˝˝ 
static
˝˝ 
Level
˝˝ $
Log4Net_Debug
˝˝% 2
=
˝˝3 4
new
˝˝5 8
Level
˝˝9 >
(
˝˝> ?
$num
˝˝? E
,
˝˝E F
$str
˝˝G V
)
˝˝V W
;
˝˝W X
public
ÉÉ 
readonly
ÉÉ	 
static
ÉÉ 
Level
ÉÉ 
	Emergency
ÉÉ (
=
ÉÉ) *
new
ÉÉ+ .
Level
ÉÉ/ 4
(
ÉÉ4 5
$num
ÉÉ5 ;
,
ÉÉ; <
$str
ÉÉ= H
)
ÉÉH I
;
ÉÉI J
public
ââ 
readonly
ââ	 
static
ââ 
Level
ââ 
Fatal
ââ $
=
ââ% &
new
ââ' *
Level
ââ+ 0
(
ââ0 1
$num
ââ1 7
,
ââ7 8
$str
ââ9 @
)
ââ@ A
;
ââA B
public
èè 
readonly
èè	 
static
èè 
Level
èè 
Alert
èè $
=
èè% &
new
èè' *
Level
èè+ 0
(
èè0 1
$num
èè1 7
,
èè7 8
$str
èè9 @
)
èè@ A
;
èèA B
public
ïï 
readonly
ïï	 
static
ïï 
Level
ïï 
Critical
ïï '
=
ïï( )
new
ïï* -
Level
ïï. 3
(
ïï3 4
$num
ïï4 9
,
ïï9 :
$str
ïï; E
)
ïïE F
;
ïïF G
public
öö 
readonly
öö	 
static
öö 
Level
öö 
Severe
öö %
=
öö& '
new
öö( +
Level
öö, 1
(
öö1 2
$num
öö2 7
,
öö7 8
$str
öö9 A
)
ööA B
;
ööB C
public
†† 
readonly
††	 
static
†† 
Level
†† 
Error
†† $
=
††% &
new
††' *
Level
††+ 0
(
††0 1
$num
††1 6
,
††6 7
$str
††8 ?
)
††? @
;
††@ A
public
¶¶ 
readonly
¶¶	 
static
¶¶ 
Level
¶¶ 
Warn
¶¶ #
=
¶¶% &
new
¶¶' *
Level
¶¶+ 0
(
¶¶0 1
$num
¶¶1 6
,
¶¶6 7
$str
¶¶8 >
)
¶¶> ?
;
¶¶? @
public
¨¨ 
readonly
¨¨	 
static
¨¨ 
Level
¨¨ 
Notice
¨¨ %
=
¨¨' (
new
¨¨) ,
Level
¨¨- 2
(
¨¨2 3
$num
¨¨3 8
,
¨¨8 9
$str
¨¨: B
)
¨¨B C
;
¨¨C D
public
≤≤ 
readonly
≤≤	 
static
≤≤ 
Level
≤≤ 
Info
≤≤ #
=
≤≤% &
new
≤≤' *
Level
≤≤+ 0
(
≤≤0 1
$num
≤≤1 6
,
≤≤6 7
$str
≤≤8 >
)
≤≤> ?
;
≤≤? @
public
∏∏ 
readonly
∏∏	 
static
∏∏ 
Level
∏∏ 
Debug
∏∏ $
=
∏∏% &
new
∏∏' *
Level
∏∏+ 0
(
∏∏0 1
$num
∏∏1 6
,
∏∏6 7
$str
∏∏8 ?
)
∏∏? @
;
∏∏@ A
public
ææ 
readonly
ææ	 
static
ææ 
Level
ææ 
Fine
ææ #
=
ææ$ %
new
ææ& )
Level
ææ* /
(
ææ/ 0
$num
ææ0 5
,
ææ5 6
$str
ææ7 =
)
ææ= >
;
ææ> ?
public
ƒƒ 
readonly
ƒƒ	 
static
ƒƒ 
Level
ƒƒ 
Trace
ƒƒ $
=
ƒƒ% &
new
ƒƒ' *
Level
ƒƒ+ 0
(
ƒƒ0 1
$num
ƒƒ1 6
,
ƒƒ6 7
$str
ƒƒ8 ?
)
ƒƒ? @
;
ƒƒ@ A
public
   
readonly
  	 
static
   
Level
   
Finer
   $
=
  % &
new
  ' *
Level
  + 0
(
  0 1
$num
  1 6
,
  6 7
$str
  8 ?
)
  ? @
;
  @ A
public
–– 
readonly
––	 
static
–– 
Level
–– 
Verbose
–– &
=
––' (
new
––) ,
Level
––- 2
(
––2 3
$num
––3 8
,
––8 9
$str
––: C
)
––C D
;
––D E
public
÷÷ 
readonly
÷÷	 
static
÷÷ 
Level
÷÷ 
Finest
÷÷ %
=
÷÷& '
new
÷÷( +
Level
÷÷, 1
(
÷÷1 2
$num
÷÷2 7
,
÷÷7 8
$str
÷÷9 A
)
÷÷A B
;
÷÷B C
public
€€ 
readonly
€€	 
static
€€ 
Level
€€ 
All
€€ "
=
€€# $
new
€€% (
Level
€€) .
(
€€. /
int
€€/ 2
.
€€2 3
MinValue
€€3 ;
,
€€; <
$str
€€= B
)
€€B C
;
€€C D
private
·· 	
readonly
··
 
int
·· 
m_levelValue
·· #
;
··# $
private
‚‚ 	
readonly
‚‚
 
string
‚‚ 
m_levelName
‚‚ %
;
‚‚% &
private
„„ 	
readonly
„„
 
string
„„  
m_levelDisplayName
„„ ,
;
„„, -
}
ÊÊ 
}ÁÁ ß§
?C:\sonarqube\projects\log4net-2.0.7\src\Core\LevelCollection.cs
	namespace 	
log4net
 
. 
Core 
{ 
public 
class 
LevelCollection 
: 
ICollection  +
,+ ,
IList- 2
,2 3
IEnumerable4 ?
, 

ICloneable 
{!! 
public'' 
	interface''	 &
ILevelCollectionEnumerator'' -
{(( 
Level,, 
Current,,	 
{,, 
get,, 
;,, 
},, 
bool88 
MoveNext88 
(88 
)88 
;88 
void== 
Reset== 
(== 
)== 
;== 
}>> 
privateBB 	
constBB
 
intBB 
DEFAULT_CAPACITYBB $
=BB% &
$numBB' )
;BB) *
privateFF 	
LevelFF
 
[FF 
]FF 
m_arrayFF 
;FF 
privateGG 	
intGG
 
m_countGG 
=GG 
$numGG 
;GG 
privateHH 	
intHH
 
	m_versionHH 
=HH 
$numHH 
;HH 
publicUU 
staticUU	 
LevelCollectionUU 
ReadOnlyUU  (
(UU( )
LevelCollectionUU) 8
listUU9 =
)UU= >
{VV 
ifWW 
(WW 
listWW 

==WW
 
nullWW 
)WW 
throwWW 
newWW !
ArgumentNullExceptionWW 1
(WW1 2
$strWW2 8
)WW8 9
;WW9 :
returnYY 	
newYY
 #
ReadOnlyLevelCollectionYY %
(YY% &
listYY& *
)YY* +
;YY+ ,
}ZZ 
publicdd 
LevelCollectiondd	 
(dd 
)dd 
{ee 
m_arrayff 

=ff 
newff 
Levelff 
[ff 
DEFAULT_CAPACITYff '
]ff' (
;ff( )
}gg 
publicpp 
LevelCollectionpp	 
(pp 
intpp 
capacitypp %
)pp% &
{qq 
m_arrayrr 

=rr 
newrr 
Levelrr 
[rr 
capacityrr 
]rr  
;rr  !
}ss 
publiczz 
LevelCollectionzz	 
(zz 
LevelCollectionzz (
czz) *
)zz* +
{{{ 
m_array|| 

=|| 
new|| 
Level|| 
[|| 
c|| 
.|| 
Count|| 
]|| 
;||  
AddRange}} 
(}} 
c}} 
)}} 
;}} 
}~~ 
public
ÖÖ 
LevelCollection
ÖÖ	 
(
ÖÖ 
Level
ÖÖ 
[
ÖÖ 
]
ÖÖ  
a
ÖÖ! "
)
ÖÖ" #
{
ÜÜ 
m_array
áá 

=
áá 
new
áá 
Level
áá 
[
áá 
a
áá 
.
áá 
Length
áá 
]
áá  
;
áá  !
AddRange
àà 
(
àà 
a
àà 
)
àà 
;
àà 
}
ââ 
public
êê 
LevelCollection
êê	 
(
êê 
ICollection
êê $
col
êê% (
)
êê( )
{
ëë 
m_array
íí 

=
íí 
new
íí 
Level
íí 
[
íí 
col
íí 
.
íí 
Count
íí  
]
íí  !
;
íí! "
AddRange
ìì 
(
ìì 
col
ìì 
)
ìì 
;
ìì 
}
îî 
	protected
öö 
internal
öö 
enum
öö 
Tag
öö 
{
õõ 
Default
üü 

}
†† 
	protected
¶¶ 
internal
¶¶ 
LevelCollection
¶¶ $
(
¶¶$ %
Tag
¶¶% (
tag
¶¶) ,
)
¶¶, -
{
ßß 
m_array
®® 

=
®® 
null
®® 
;
®® 
}
©© 
public
±± 
virtual
±±	 
int
±± 
Count
±± 
{
≤≤ 
get
≥≥ 
{
≥≥ 
return
≥≥	 
m_count
≥≥ 
;
≥≥ 
}
≥≥ 
}
¥¥ 
public
ªª 
virtual
ªª	 
void
ªª 
CopyTo
ªª 
(
ªª 
Level
ªª "
[
ªª" #
]
ªª# $
array
ªª% *
)
ªª* +
{
ºº 
this
ΩΩ 
.
ΩΩ 
CopyTo
ΩΩ 
(
ΩΩ 
array
ΩΩ 
,
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
;
ΩΩ 
}
ææ 
public
∆∆ 
virtual
∆∆	 
void
∆∆ 
CopyTo
∆∆ 
(
∆∆ 
Level
∆∆ "
[
∆∆" #
]
∆∆# $
array
∆∆% *
,
∆∆* +
int
∆∆, /
start
∆∆0 5
)
∆∆5 6
{
«« 
if
»» 
(
»» 
m_count
»» 
>
»» 
array
»» 
.
»» 
GetUpperBound
»» $
(
»»$ %
$num
»»% &
)
»»& '
+
»»( )
$num
»»* +
-
»», -
start
»». 3
)
»»3 4
{
…… 
throw
   	
new
  
 
System
   
.
   
ArgumentException
   &
(
  & '
$str
  ' O
)
  O P
;
  P Q
}
ÀÀ 
Array
ÕÕ 
.
ÕÕ 	
Copy
ÕÕ	 
(
ÕÕ 
m_array
ÕÕ 
,
ÕÕ 
$num
ÕÕ 
,
ÕÕ 
array
ÕÕ 
,
ÕÕ  
start
ÕÕ! &
,
ÕÕ& '
m_count
ÕÕ( /
)
ÕÕ/ 0
;
ÕÕ0 1
}
ŒŒ 
public
‘‘ 
virtual
‘‘	 
bool
‘‘ 
IsSynchronized
‘‘ $
{
’’ 
get
÷÷ 
{
÷÷ 
return
÷÷	 
false
÷÷ 
;
÷÷ 
}
÷÷ 
}
◊◊ 
public
‹‹ 
virtual
‹‹	 
object
‹‹ 
SyncRoot
‹‹  
{
›› 
get
ﬁﬁ 
{
ﬁﬁ 
return
ﬁﬁ	 
m_array
ﬁﬁ 
;
ﬁﬁ 
}
ﬁﬁ 
}
ﬂﬂ 
public
ÓÓ 
virtual
ÓÓ	 
Level
ÓÓ 
this
ÓÓ 
[
ÓÓ 
int
ÓÓ 
index
ÓÓ  %
]
ÓÓ% &
{
ÔÔ 
get
 
{
ÒÒ 
ValidateIndex
ÚÚ 
(
ÚÚ 
index
ÚÚ 
)
ÚÚ 
;
ÚÚ 
return
ÛÛ 

m_array
ÛÛ 
[
ÛÛ 
index
ÛÛ 
]
ÛÛ 
;
ÛÛ 
}
ÙÙ 
set
ıı 
{
ˆˆ 
ValidateIndex
˜˜ 
(
˜˜ 
index
˜˜ 
)
˜˜ 
;
˜˜ 
++
¯¯ 
	m_version
¯¯ 
;
¯¯ 
m_array
˘˘ 
[
˘˘ 
index
˘˘ 
]
˘˘ 
=
˘˘ 
value
˘˘ 
;
˘˘ 
}
˙˙ 
}
˚˚ 
public
ÇÇ 
virtual
ÇÇ	 
int
ÇÇ 
Add
ÇÇ 
(
ÇÇ 
Level
ÇÇ 
item
ÇÇ #
)
ÇÇ# $
{
ÉÉ 
if
ÑÑ 
(
ÑÑ 
m_count
ÑÑ 
==
ÑÑ 
m_array
ÑÑ 
.
ÑÑ 
Length
ÑÑ  
)
ÑÑ  !
{
ÖÖ 
EnsureCapacity
ÜÜ 
(
ÜÜ 
m_count
ÜÜ 
+
ÜÜ 
$num
ÜÜ 
)
ÜÜ 
;
ÜÜ  
}
áá 
m_array
ââ 

[
ââ
 
m_count
ââ 
]
ââ 
=
ââ 
item
ââ 
;
ââ 
	m_version
ää 
++
ää 
;
ää 
return
åå 	
m_count
åå
 
++
åå 
;
åå 
}
çç 
public
íí 
virtual
íí	 
void
íí 
Clear
íí 
(
íí 
)
íí 
{
ìì 
++
îî 
	m_version
îî 
;
îî 
m_array
ïï 

=
ïï 
new
ïï 
Level
ïï 
[
ïï 
DEFAULT_CAPACITY
ïï '
]
ïï' (
;
ïï( )
m_count
ññ 

=
ññ 
$num
ññ 
;
ññ 
}
óó 
public
ùù 
virtual
ùù	 
object
ùù 
Clone
ùù 
(
ùù 
)
ùù 
{
ûû 
LevelCollection
üü 
newCol
üü 
=
üü 
new
üü 
LevelCollection
üü  /
(
üü/ 0
m_count
üü0 7
)
üü7 8
;
üü8 9
Array
†† 
.
†† 	
Copy
††	 
(
†† 
m_array
†† 
,
†† 
$num
†† 
,
†† 
newCol
††  
.
††  !
m_array
††! (
,
††( )
$num
††* +
,
††+ ,
m_count
††- 4
)
††4 5
;
††5 6
newCol
°° 	
.
°°	 

m_count
°°
 
=
°° 
m_count
°° 
;
°° 
newCol
¢¢ 	
.
¢¢	 

	m_version
¢¢
 
=
¢¢ 
	m_version
¢¢ 
;
¢¢  
return
§§ 	
newCol
§§
 
;
§§ 
}
•• 
public
¨¨ 
virtual
¨¨	 
bool
¨¨ 
Contains
¨¨ 
(
¨¨ 
Level
¨¨ $
item
¨¨% )
)
¨¨) *
{
≠≠ 
for
ÆÆ 
(
ÆÆ 
int
ÆÆ 
i
ÆÆ 
=
ÆÆ 
$num
ÆÆ 
;
ÆÆ 
i
ÆÆ 
!=
ÆÆ 
m_count
ÆÆ 
;
ÆÆ 
++
ÆÆ !
i
ÆÆ! "
)
ÆÆ" #
{
ØØ 
if
∞∞ 
(
∞∞ 
m_array
∞∞ 
[
∞∞ 
i
∞∞ 
]
∞∞ 
.
∞∞ 
Equals
∞∞ 
(
∞∞ 
item
∞∞ 
)
∞∞ 
)
∞∞  
{
±± 
return
≤≤ 
true
≤≤ 
;
≤≤ 
}
≥≥ 
}
¥¥ 
return
µµ 	
false
µµ
 
;
µµ 
}
∂∂ 
public
¡¡ 
virtual
¡¡	 
int
¡¡ 
IndexOf
¡¡ 
(
¡¡ 
Level
¡¡ "
item
¡¡# '
)
¡¡' (
{
¬¬ 
for
√√ 
(
√√ 
int
√√ 
i
√√ 
=
√√ 
$num
√√ 
;
√√ 
i
√√ 
!=
√√ 
m_count
√√ 
;
√√ 
++
√√ !
i
√√! "
)
√√" #
{
ƒƒ 
if
≈≈ 
(
≈≈ 
m_array
≈≈ 
[
≈≈ 
i
≈≈ 
]
≈≈ 
.
≈≈ 
Equals
≈≈ 
(
≈≈ 
item
≈≈ 
)
≈≈ 
)
≈≈  
{
∆∆ 
return
«« 
i
«« 
;
«« 
}
»» 
}
…… 
return
   	
-
  
 
$num
   
;
   
}
ÀÀ 
public
◊◊ 
virtual
◊◊	 
void
◊◊ 
Insert
◊◊ 
(
◊◊ 
int
◊◊  
index
◊◊! &
,
◊◊& '
Level
◊◊( -
item
◊◊. 2
)
◊◊2 3
{
ÿÿ 
ValidateIndex
ŸŸ 
(
ŸŸ 
index
ŸŸ 
,
ŸŸ 
true
ŸŸ 
)
ŸŸ 
;
ŸŸ 
if
€€ 
(
€€ 
m_count
€€ 
==
€€ 
m_array
€€ 
.
€€ 
Length
€€  
)
€€  !
{
‹‹ 
EnsureCapacity
›› 
(
›› 
m_count
›› 
+
›› 
$num
›› 
)
›› 
;
››  
}
ﬁﬁ 
if
‡‡ 
(
‡‡ 
index
‡‡ 
<
‡‡ 
m_count
‡‡ 
)
‡‡ 
{
·· 
Array
‚‚ 	
.
‚‚	 

Copy
‚‚
 
(
‚‚ 
m_array
‚‚ 
,
‚‚ 
index
‚‚ 
,
‚‚ 
m_array
‚‚ &
,
‚‚& '
index
‚‚( -
+
‚‚. /
$num
‚‚0 1
,
‚‚1 2
m_count
‚‚3 :
-
‚‚; <
index
‚‚= B
)
‚‚B C
;
‚‚C D
}
„„ 
m_array
ÂÂ 

[
ÂÂ
 
index
ÂÂ 
]
ÂÂ 
=
ÂÂ 
item
ÂÂ 
;
ÂÂ 
m_count
ÊÊ 

++
ÊÊ
 
;
ÊÊ 
	m_version
ÁÁ 
++
ÁÁ 
;
ÁÁ 
}
ËË 
public
ÒÒ 
virtual
ÒÒ	 
void
ÒÒ 
Remove
ÒÒ 
(
ÒÒ 
Level
ÒÒ "
item
ÒÒ# '
)
ÒÒ' (
{
ÚÚ 
int
ÛÛ 
i
ÛÛ 
=
ÛÛ	 

IndexOf
ÛÛ 
(
ÛÛ 
item
ÛÛ 
)
ÛÛ 
;
ÛÛ 
if
ÙÙ 
(
ÙÙ 
i
ÙÙ 
<
ÙÙ	 

$num
ÙÙ 
)
ÙÙ 
{
ıı 
throw
ˆˆ 	
new
ˆˆ
 
System
ˆˆ 
.
ˆˆ 
ArgumentException
ˆˆ &
(
ˆˆ& '
$str
ˆˆ' 
)ˆˆ Ä
;ˆˆÄ Å
}
˜˜ 
++
˘˘ 
	m_version
˘˘ 
;
˘˘ 
RemoveAt
˙˙ 
(
˙˙ 
i
˙˙ 
)
˙˙ 
;
˙˙ 
}
˚˚ 
public
ÜÜ 
virtual
ÜÜ	 
void
ÜÜ 
RemoveAt
ÜÜ 
(
ÜÜ 
int
ÜÜ "
index
ÜÜ# (
)
ÜÜ( )
{
áá 
ValidateIndex
àà 
(
àà 
index
àà 
)
àà 
;
àà 
m_count
ää 

--
ää
 
;
ää 
if
åå 
(
åå 
index
åå 
<
åå 
m_count
åå 
)
åå 
{
çç 
Array
éé 	
.
éé	 

Copy
éé
 
(
éé 
m_array
éé 
,
éé 
index
éé 
+
éé 
$num
éé  !
,
éé! "
m_array
éé# *
,
éé* +
index
éé, 1
,
éé1 2
m_count
éé3 :
-
éé; <
index
éé= B
)
ééB C
;
ééC D
}
èè 
Level
îî 
[
îî 	
]
îî	 

temp
îî 
=
îî 
new
îî 
Level
îî 
[
îî 
$num
îî 
]
îî 
;
îî 
Array
ïï 
.
ïï 	
Copy
ïï	 
(
ïï 
temp
ïï 
,
ïï 
$num
ïï 
,
ïï 
m_array
ïï 
,
ïï 
m_count
ïï  '
,
ïï' (
$num
ïï) *
)
ïï* +
;
ïï+ ,
	m_version
ññ 
++
ññ 
;
ññ 
}
óó 
public
ùù 
virtual
ùù	 
bool
ùù 
IsFixedSize
ùù !
{
ûû 
get
üü 
{
üü 
return
üü	 
false
üü 
;
üü 
}
üü 
}
†† 
public
¶¶ 
virtual
¶¶	 
bool
¶¶ 

IsReadOnly
¶¶  
{
ßß 
get
®® 
{
®® 
return
®®	 
false
®® 
;
®® 
}
®® 
}
©© 
public
≥≥ 
virtual
≥≥	 (
ILevelCollectionEnumerator
≥≥ +
GetEnumerator
≥≥, 9
(
≥≥9 :
)
≥≥: ;
{
¥¥ 
return
µµ 	
new
µµ
 

Enumerator
µµ 
(
µµ 
this
µµ 
)
µµ 
;
µµ 
}
∂∂ 
public
øø 
virtual
øø	 
int
øø 
Capacity
øø 
{
¿¿ 
get
¡¡ 
{
¬¬ 
return
√√ 

m_array
√√ 
.
√√ 
Length
√√ 
;
√√ 
}
ƒƒ 
set
≈≈ 
{
∆∆ 
if
«« 
(
«« 
value
«« 
<
«« 
m_count
«« 
)
«« 
{
»» 
value
…… 

=
…… 
m_count
…… 
;
…… 
}
   
if
ÃÃ 
(
ÃÃ 
value
ÃÃ 
!=
ÃÃ 
m_array
ÃÃ 
.
ÃÃ 
Length
ÃÃ 
)
ÃÃ  
{
ÕÕ 
if
ŒŒ 
(
ŒŒ 	
value
ŒŒ	 
>
ŒŒ 
$num
ŒŒ 
)
ŒŒ 
{
œœ 
Level
–– 
[
–– 
]
–– 
temp
–– 
=
–– 
new
–– 
Level
–– 
[
–– 
value
–– $
]
––$ %
;
––% &
Array
—— 
.
—— 
Copy
—— 
(
—— 
m_array
—— 
,
—— 
$num
—— 
,
—— 
temp
—— !
,
——! "
$num
——# $
,
——$ %
m_count
——& -
)
——- .
;
——. /
m_array
““ 
=
““ 
temp
““ 
;
““ 
}
”” 
else
‘‘ 	
{
’’ 
m_array
÷÷ 
=
÷÷ 
new
÷÷ 
Level
÷÷ 
[
÷÷ 
DEFAULT_CAPACITY
÷÷ *
]
÷÷* +
;
÷÷+ ,
}
◊◊ 
}
ÿÿ 
}
ŸŸ 
}
⁄⁄ 
public
·· 
virtual
··	 
int
·· 
AddRange
·· 
(
·· 
LevelCollection
·· -
x
··. /
)
··/ 0
{
‚‚ 
if
„„ 
(
„„ 
m_count
„„ 
+
„„ 
x
„„ 
.
„„ 
Count
„„ 
>=
„„ 
m_array
„„ #
.
„„# $
Length
„„$ *
)
„„* +
{
‰‰ 
EnsureCapacity
ÂÂ 
(
ÂÂ 
m_count
ÂÂ 
+
ÂÂ 
x
ÂÂ 
.
ÂÂ 
Count
ÂÂ $
)
ÂÂ$ %
;
ÂÂ% &
}
ÊÊ 
Array
ËË 
.
ËË 	
Copy
ËË	 
(
ËË 
x
ËË 
.
ËË 
m_array
ËË 
,
ËË 
$num
ËË 
,
ËË 
m_array
ËË #
,
ËË# $
m_count
ËË% ,
,
ËË, -
x
ËË. /
.
ËË/ 0
Count
ËË0 5
)
ËË5 6
;
ËË6 7
m_count
ÈÈ 

+=
ÈÈ 
x
ÈÈ 
.
ÈÈ 
Count
ÈÈ 
;
ÈÈ 
	m_version
ÍÍ 
++
ÍÍ 
;
ÍÍ 
return
ÏÏ 	
m_count
ÏÏ
 
;
ÏÏ 
}
ÌÌ 
public
ÙÙ 
virtual
ÙÙ	 
int
ÙÙ 
AddRange
ÙÙ 
(
ÙÙ 
Level
ÙÙ #
[
ÙÙ# $
]
ÙÙ$ %
x
ÙÙ& '
)
ÙÙ' (
{
ıı 
if
ˆˆ 
(
ˆˆ 
m_count
ˆˆ 
+
ˆˆ 
x
ˆˆ 
.
ˆˆ 
Length
ˆˆ 
>=
ˆˆ 
m_array
ˆˆ $
.
ˆˆ$ %
Length
ˆˆ% +
)
ˆˆ+ ,
{
˜˜ 
EnsureCapacity
¯¯ 
(
¯¯ 
m_count
¯¯ 
+
¯¯ 
x
¯¯ 
.
¯¯ 
Length
¯¯ %
)
¯¯% &
;
¯¯& '
}
˘˘ 
Array
˚˚ 
.
˚˚ 	
Copy
˚˚	 
(
˚˚ 
x
˚˚ 
,
˚˚ 
$num
˚˚ 
,
˚˚ 
m_array
˚˚ 
,
˚˚ 
m_count
˚˚ $
,
˚˚$ %
x
˚˚& '
.
˚˚' (
Length
˚˚( .
)
˚˚. /
;
˚˚/ 0
m_count
¸¸ 

+=
¸¸ 
x
¸¸ 
.
¸¸ 
Length
¸¸ 
;
¸¸ 
	m_version
˝˝ 
++
˝˝ 
;
˝˝ 
return
ˇˇ 	
m_count
ˇˇ
 
;
ˇˇ 
}
ÄÄ 
public
áá 
virtual
áá	 
int
áá 
AddRange
áá 
(
áá 
ICollection
áá )
col
áá* -
)
áá- .
{
àà 
if
ââ 
(
ââ 
m_count
ââ 
+
ââ 
col
ââ 
.
ââ 
Count
ââ 
>=
ââ 
m_array
ââ %
.
ââ% &
Length
ââ& ,
)
ââ, -
{
ää 
EnsureCapacity
ãã 
(
ãã 
m_count
ãã 
+
ãã 
col
ãã  
.
ãã  !
Count
ãã! &
)
ãã& '
;
ãã' (
}
åå 
foreach
éé 

(
éé
 
object
éé 
item
éé 
in
éé 
col
éé 
)
éé 
{
èè 
Add
êê 
(
êê 
(
êê 	
Level
êê	 
)
êê 
item
êê 
)
êê 
;
êê 
}
ëë 
return
ìì 	
m_count
ìì
 
;
ìì 
}
îî 
public
ôô 
virtual
ôô	 
void
ôô 

TrimToSize
ôô  
(
ôô  !
)
ôô! "
{
öö 
this
õõ 
.
õõ 
Capacity
õõ 
=
õõ 
m_count
õõ 
;
õõ 
}
úú 
private
ßß 	
void
ßß
 
ValidateIndex
ßß 
(
ßß 
int
ßß  
i
ßß! "
)
ßß" #
{
®® 
ValidateIndex
©© 
(
©© 
i
©© 
,
©© 
false
©© 
)
©© 
;
©© 
}
™™ 
private
±± 	
void
±±
 
ValidateIndex
±± 
(
±± 
int
±±  
i
±±! "
,
±±" #
bool
±±$ (
allowEqualEnd
±±) 6
)
±±6 7
{
≤≤ 
int
≥≥ 
max
≥≥ 

=
≥≥ 
(
≥≥ 
allowEqualEnd
≥≥ 
)
≥≥ 
?
≥≥ 
(
≥≥  
m_count
≥≥  '
)
≥≥' (
:
≥≥) *
(
≥≥+ ,
m_count
≥≥, 3
-
≥≥3 4
$num
≥≥4 5
)
≥≥5 6
;
≥≥6 7
if
¥¥ 
(
¥¥ 
i
¥¥ 
<
¥¥	 

$num
¥¥ 
||
¥¥ 
i
¥¥ 
>
¥¥ 
max
¥¥ 
)
¥¥ 
{
µµ 
throw
∂∂ 	
log4net
∂∂
 
.
∂∂ 
Util
∂∂ 
.
∂∂ 

SystemInfo
∂∂ !
.
∂∂! "/
!CreateArgumentOutOfRangeException
∂∂" C
(
∂∂C D
$str
∂∂D G
,
∂∂G H
(
∂∂I J
object
∂∂J P
)
∂∂P Q
i
∂∂Q R
,
∂∂R S
$str∂∂T Æ
+∂∂Ø ∞
(∂∂± ≤
object∂∂≤ ∏
)∂∂∏ π
i∂∂π ∫
+∂∂ª º
$str∂∂Ω ˘
)∂∂˘ ˙
;∂∂˙ ˚
}
∑∑ 
}
∏∏ 
private
∫∫ 	
void
∫∫
 
EnsureCapacity
∫∫ 
(
∫∫ 
int
∫∫ !
min
∫∫" %
)
∫∫% &
{
ªª 
int
ºº 
newCapacity
ºº 
=
ºº 
(
ºº 
(
ºº 
m_array
ºº 
.
ºº 
Length
ºº %
==
ºº& (
$num
ºº) *
)
ºº* +
?
ºº, -
DEFAULT_CAPACITY
ºº. >
:
ºº? @
m_array
ººA H
.
ººH I
Length
ººI O
*
ººP Q
$num
ººR S
)
ººS T
;
ººT U
if
ΩΩ 
(
ΩΩ 
newCapacity
ΩΩ 
<
ΩΩ 
min
ΩΩ 
)
ΩΩ 
{
ææ 
newCapacity
øø 
=
øø 
min
øø 
;
øø 
}
¿¿ 
this
¬¬ 
.
¬¬ 
Capacity
¬¬ 
=
¬¬ 
newCapacity
¬¬ 
;
¬¬ 
}
√√ 
void
…… 
ICollection
…… 
.
…… 
CopyTo
…… 
(
…… 
Array
…… 
array
……  %
,
……% &
int
……' *
start
……+ 0
)
……0 1
{
   
Array
ÀÀ 
.
ÀÀ 	
Copy
ÀÀ	 
(
ÀÀ 
m_array
ÀÀ 
,
ÀÀ 
$num
ÀÀ 
,
ÀÀ 
array
ÀÀ 
,
ÀÀ  
start
ÀÀ! &
,
ÀÀ& '
m_count
ÀÀ( /
)
ÀÀ/ 0
;
ÀÀ0 1
}
ÃÃ 
object
““ 
IList
““	 
.
““ 
this
““ 
[
““ 
int
““ 
i
““ 
]
““ 
{
”” 
get
‘‘ 
{
‘‘ 
return
‘‘	 
(
‘‘ 
object
‘‘ 
)
‘‘ 
this
‘‘ 
[
‘‘ 
i
‘‘ 
]
‘‘ 
;
‘‘  
}
‘‘! "
set
’’ 
{
’’ 
this
’’	 
[
’’ 
i
’’ 
]
’’ 
=
’’ 
(
’’ 
Level
’’ 
)
’’ 
value
’’ 
;
’’  
}
’’! "
}
÷÷ 
int
ÿÿ 
IList
ÿÿ 
.
ÿÿ 
Add
ÿÿ 
(
ÿÿ 
object
ÿÿ 
x
ÿÿ 
)
ÿÿ 
{
ŸŸ 
return
⁄⁄ 	
this
⁄⁄
 
.
⁄⁄ 
Add
⁄⁄ 
(
⁄⁄ 
(
⁄⁄ 
Level
⁄⁄ 
)
⁄⁄ 
x
⁄⁄ 
)
⁄⁄ 
;
⁄⁄ 
}
€€ 
bool
›› 
IList
›› 
.
›› 
Contains
›› 
(
›› 
object
›› 
x
›› 
)
›› 
{
ﬁﬁ 
return
ﬂﬂ 	
this
ﬂﬂ
 
.
ﬂﬂ 
Contains
ﬂﬂ 
(
ﬂﬂ 
(
ﬂﬂ 
Level
ﬂﬂ 
)
ﬂﬂ 
x
ﬂﬂ  
)
ﬂﬂ  !
;
ﬂﬂ! "
}
‡‡ 
int
‚‚ 
IList
‚‚ 
.
‚‚ 
IndexOf
‚‚ 
(
‚‚ 
object
‚‚ 
x
‚‚ 
)
‚‚ 
{
„„ 
return
‰‰ 	
this
‰‰
 
.
‰‰ 
IndexOf
‰‰ 
(
‰‰ 
(
‰‰ 
Level
‰‰ 
)
‰‰ 
x
‰‰ 
)
‰‰  
;
‰‰  !
}
ÂÂ 
void
ÁÁ 
IList
ÁÁ 
.
ÁÁ 
Insert
ÁÁ 
(
ÁÁ 
int
ÁÁ 
pos
ÁÁ 
,
ÁÁ 
object
ÁÁ #
x
ÁÁ$ %
)
ÁÁ% &
{
ËË 
this
ÈÈ 
.
ÈÈ 
Insert
ÈÈ 
(
ÈÈ 
pos
ÈÈ 
,
ÈÈ 
(
ÈÈ 
Level
ÈÈ 
)
ÈÈ 
x
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
void
ÏÏ 
IList
ÏÏ 
.
ÏÏ 
Remove
ÏÏ 
(
ÏÏ 
object
ÏÏ 
x
ÏÏ 
)
ÏÏ 
{
ÌÌ 
this
ÓÓ 
.
ÓÓ 
Remove
ÓÓ 
(
ÓÓ 
(
ÓÓ 
Level
ÓÓ 
)
ÓÓ 
x
ÓÓ 
)
ÓÓ 
;
ÓÓ 
}
ÔÔ 
void
ÒÒ 
IList
ÒÒ 
.
ÒÒ 
RemoveAt
ÒÒ 
(
ÒÒ 
int
ÒÒ 
pos
ÒÒ 
)
ÒÒ 
{
ÚÚ 
this
ÛÛ 
.
ÛÛ 
RemoveAt
ÛÛ 
(
ÛÛ 
pos
ÛÛ 
)
ÛÛ 
;
ÛÛ 
}
ÙÙ 
IEnumerator
˙˙ 
IEnumerable
˙˙ 
.
˙˙ 
GetEnumerator
˙˙ '
(
˙˙' (
)
˙˙( )
{
˚˚ 
return
¸¸ 	
(
¸¸
 
IEnumerator
¸¸ 
)
¸¸ 
(
¸¸ 
this
¸¸ 
.
¸¸ 
GetEnumerator
¸¸ *
(
¸¸* +
)
¸¸+ ,
)
¸¸, -
;
¸¸- .
}
˝˝ 
private
ÜÜ 	
sealed
ÜÜ
 
class
ÜÜ 

Enumerator
ÜÜ !
:
ÜÜ" #
IEnumerator
ÜÜ$ /
,
ÜÜ/ 0(
ILevelCollectionEnumerator
ÜÜ1 K
{
áá 
private
ää 

readonly
ää 
LevelCollection
ää #
m_collection
ää$ 0
;
ää0 1
private
ãã 

int
ãã 
m_index
ãã 
;
ãã 
private
åå 

int
åå 
	m_version
åå 
;
åå 
internal
ññ 

Enumerator
ññ 
(
ññ 
LevelCollection
ññ &
tc
ññ' )
)
ññ) *
{
óó 
m_collection
òò 
=
òò 
tc
òò 
;
òò 
m_index
ôô 
=
ôô 
-
ôô 
$num
ôô 
;
ôô 
	m_version
öö 
=
öö 
tc
öö 
.
öö 
	m_version
öö 
;
öö 
}
õõ 
public
§§ 	
Level
§§
 
Current
§§ 
{
•• 
get
¶¶ 
{
¶¶ 	
return
¶¶
 
m_collection
¶¶ 
[
¶¶ 
m_index
¶¶ %
]
¶¶% &
;
¶¶& '
}
¶¶( )
}
ßß 
public
≥≥ 	
bool
≥≥
 
MoveNext
≥≥ 
(
≥≥ 
)
≥≥ 
{
¥¥ 
if
µµ 
(
µµ 
	m_version
µµ 
!=
µµ 
m_collection
µµ !
.
µµ! "
	m_version
µµ" +
)
µµ+ ,
{
∂∂ 
throw
∑∑ 

new
∑∑ 
System
∑∑ 
.
∑∑ '
InvalidOperationException
∑∑ /
(
∑∑/ 0
$str
∑∑0 q
)
∑∑q r
;
∑∑r s
}
∏∏ 
++
∫∫ 
m_index
∫∫ 
;
∫∫ 
return
ªª 

(
ªª 
m_index
ªª 
<
ªª 
m_collection
ªª "
.
ªª" #
Count
ªª# (
)
ªª( )
;
ªª) *
}
ºº 
public
¡¡ 	
void
¡¡
 
Reset
¡¡ 
(
¡¡ 
)
¡¡ 
{
¬¬ 
m_index
√√ 
=
√√ 
-
√√ 
$num
√√ 
;
√√ 
}
ƒƒ 
object
   	
IEnumerator
  
 
.
   
Current
   
{
ÀÀ 
get
ÃÃ 
{
ÃÃ 	
return
ÃÃ
 
this
ÃÃ 
.
ÃÃ 
Current
ÃÃ 
;
ÃÃ 
}
ÃÃ  
}
ÕÕ 
}
–– 
private
÷÷ 	
sealed
÷÷
 
class
÷÷ %
ReadOnlyLevelCollection
÷÷ .
:
÷÷/ 0
LevelCollection
÷÷1 @
{
◊◊ 
private
⁄⁄ 

readonly
⁄⁄ 
LevelCollection
⁄⁄ #
m_collection
⁄⁄$ 0
;
⁄⁄0 1
internal
‡‡ %
ReadOnlyLevelCollection
‡‡ #
(
‡‡# $
LevelCollection
‡‡$ 3
list
‡‡4 8
)
‡‡8 9
:
‡‡: ;
base
‡‡< @
(
‡‡@ A
Tag
‡‡A D
.
‡‡D E
Default
‡‡E L
)
‡‡L M
{
·· 
m_collection
‚‚ 
=
‚‚ 
list
‚‚ 
;
‚‚ 
}
„„ 
public
ÈÈ 	
override
ÈÈ
 
void
ÈÈ 
CopyTo
ÈÈ 
(
ÈÈ 
Level
ÈÈ $
[
ÈÈ$ %
]
ÈÈ% &
array
ÈÈ' ,
)
ÈÈ, -
{
ÍÍ 
m_collection
ÎÎ 
.
ÎÎ 
CopyTo
ÎÎ 
(
ÎÎ 
array
ÎÎ 
)
ÎÎ 
;
ÎÎ 
}
ÏÏ 
public
ÓÓ 	
override
ÓÓ
 
void
ÓÓ 
CopyTo
ÓÓ 
(
ÓÓ 
Level
ÓÓ $
[
ÓÓ$ %
]
ÓÓ% &
array
ÓÓ' ,
,
ÓÓ, -
int
ÓÓ. 1
start
ÓÓ2 7
)
ÓÓ7 8
{
ÔÔ 
m_collection
 
.
 
CopyTo
 
(
 
array
 
,
 
start
 #
)
# $
;
$ %
}
ÒÒ 
public
ÚÚ 	
override
ÚÚ
 
int
ÚÚ 
Count
ÚÚ 
{
ÛÛ 
get
ÙÙ 
{
ÙÙ 	
return
ÙÙ
 
m_collection
ÙÙ 
.
ÙÙ 
Count
ÙÙ #
;
ÙÙ# $
}
ÙÙ% &
}
ıı 
public
˜˜ 	
override
˜˜
 
bool
˜˜ 
IsSynchronized
˜˜ &
{
¯¯ 
get
˘˘ 
{
˘˘ 	
return
˘˘
 
m_collection
˘˘ 
.
˘˘ 
IsSynchronized
˘˘ ,
;
˘˘, -
}
˘˘. /
}
˙˙ 
public
¸¸ 	
override
¸¸
 
object
¸¸ 
SyncRoot
¸¸ "
{
˝˝ 
get
˛˛ 
{
˛˛ 	
return
˛˛
 
this
˛˛ 
.
˛˛ 
m_collection
˛˛ "
.
˛˛" #
SyncRoot
˛˛# +
;
˛˛+ ,
}
˛˛- .
}
ˇˇ 
public
ÖÖ 	
override
ÖÖ
 
Level
ÖÖ 
this
ÖÖ 
[
ÖÖ 
int
ÖÖ !
i
ÖÖ" #
]
ÖÖ# $
{
ÜÜ 
get
áá 
{
áá 	
return
áá
 
m_collection
áá 
[
áá 
i
áá 
]
áá  
;
áá  !
}
áá" #
set
àà 
{
àà 	
throw
àà
 
new
àà #
NotSupportedException
àà )
(
àà) *
$str
àà* b
)
ààb c
;
ààc d
}
ààe f
}
ââ 
public
ãã 	
override
ãã
 
int
ãã 
Add
ãã 
(
ãã 
Level
ãã  
x
ãã! "
)
ãã" #
{
åå 
throw
çç 	
new
çç
 #
NotSupportedException
çç #
(
çç# $
$str
çç$ \
)
çç\ ]
;
çç] ^
}
éé 
public
êê 	
override
êê
 
void
êê 
Clear
êê 
(
êê 
)
êê 
{
ëë 
throw
íí 	
new
íí
 #
NotSupportedException
íí #
(
íí# $
$str
íí$ \
)
íí\ ]
;
íí] ^
}
ìì 
public
ïï 	
override
ïï
 
bool
ïï 
Contains
ïï  
(
ïï  !
Level
ïï! &
x
ïï' (
)
ïï( )
{
ññ 
return
óó 

m_collection
óó 
.
óó 
Contains
óó  
(
óó  !
x
óó! "
)
óó" #
;
óó# $
}
òò 
public
öö 	
override
öö
 
int
öö 
IndexOf
öö 
(
öö 
Level
öö $
x
öö% &
)
öö& '
{
õõ 
return
úú 

m_collection
úú 
.
úú 
IndexOf
úú 
(
úú  
x
úú  !
)
úú! "
;
úú" #
}
ùù 
public
üü 	
override
üü
 
void
üü 
Insert
üü 
(
üü 
int
üü "
pos
üü# &
,
üü& '
Level
üü( -
x
üü. /
)
üü/ 0
{
†† 
throw
°° 	
new
°°
 #
NotSupportedException
°° #
(
°°# $
$str
°°$ \
)
°°\ ]
;
°°] ^
}
¢¢ 
public
§§ 	
override
§§
 
void
§§ 
Remove
§§ 
(
§§ 
Level
§§ $
x
§§% &
)
§§& '
{
•• 
throw
¶¶ 	
new
¶¶
 #
NotSupportedException
¶¶ #
(
¶¶# $
$str
¶¶$ \
)
¶¶\ ]
;
¶¶] ^
}
ßß 
public
©© 	
override
©©
 
void
©© 
RemoveAt
©©  
(
©©  !
int
©©! $
pos
©©% (
)
©©( )
{
™™ 
throw
´´ 	
new
´´
 #
NotSupportedException
´´ #
(
´´# $
$str
´´$ \
)
´´\ ]
;
´´] ^
}
¨¨ 
public
ÆÆ 	
override
ÆÆ
 
bool
ÆÆ 
IsFixedSize
ÆÆ #
{
ØØ 
get
∞∞ 
{
∞∞ 	
return
∞∞
 
true
∞∞ 
;
∞∞ 
}
∞∞ 
}
±± 
public
≥≥ 	
override
≥≥
 
bool
≥≥ 

IsReadOnly
≥≥ "
{
¥¥ 
get
µµ 
{
µµ 	
return
µµ
 
true
µµ 
;
µµ 
}
µµ 
}
∂∂ 
public
ºº 	
override
ºº
 (
ILevelCollectionEnumerator
ºº -
GetEnumerator
ºº. ;
(
ºº; <
)
ºº< =
{
ΩΩ 
return
ææ 

m_collection
ææ 
.
ææ 
GetEnumerator
ææ %
(
ææ% &
)
ææ& '
;
ææ' (
}
øø 
public
∆∆ 	
override
∆∆
 
int
∆∆ 
Capacity
∆∆ 
{
«« 
get
»» 
{
»» 	
return
»»
 
m_collection
»» 
.
»» 
Capacity
»» &
;
»»& '
}
»»( )
set
…… 
{
…… 	
throw
……
 
new
…… #
NotSupportedException
…… )
(
……) *
$str
……* b
)
……b c
;
……c d
}
……e f
}
   
public
ÃÃ 	
override
ÃÃ
 
int
ÃÃ 
AddRange
ÃÃ 
(
ÃÃ  
LevelCollection
ÃÃ  /
x
ÃÃ0 1
)
ÃÃ1 2
{
ÕÕ 
throw
ŒŒ 	
new
ŒŒ
 #
NotSupportedException
ŒŒ #
(
ŒŒ# $
$str
ŒŒ$ \
)
ŒŒ\ ]
;
ŒŒ] ^
}
œœ 
public
—— 	
override
——
 
int
—— 
AddRange
—— 
(
——  
Level
——  %
[
——% &
]
——& '
x
——( )
)
——) *
{
““ 
throw
”” 	
new
””
 #
NotSupportedException
”” #
(
””# $
$str
””$ \
)
””\ ]
;
””] ^
}
‘‘ 
}
◊◊ 
}
⁄⁄ 
}‹‹ ú
>C:\sonarqube\projects\log4net-2.0.7\src\Core\LevelEvaluator.cs
	namespace 	
log4net
 
. 
Core 
{ 
public&& 
class&& 
LevelEvaluator&& 
:&& %
ITriggeringEventEvaluator&& 8
{'' 
private++ 	
Level++
 
m_threshold++ 
;++ 
public;; 
LevelEvaluator;;	 
(;; 
);; 
:;; 
this;;  
(;;  !
Level;;! &
.;;& '
Off;;' *
);;* +
{<< 
}== 
publicNN 
LevelEvaluatorNN	 
(NN 
LevelNN 
	thresholdNN '
)NN' (
{OO 
ifPP 
(PP 
	thresholdPP 
==PP 
nullPP 
)PP 
{QQ 
throwRR 	
newRR
 !
ArgumentNullExceptionRR #
(RR# $
$strRR$ /
)RR/ 0
;RR0 1
}SS 
m_thresholdUU 
=UU 
	thresholdUU 
;UU 
}VV 
publicff 
Levelff	 
	Thresholdff 
{gg 
gethh 
{hh 
returnhh	 
m_thresholdhh 
;hh 
}hh 
setii 
{ii 
m_thresholdii	 
=ii 
valueii 
;ii 
}ii 
}jj 
public{{ 
bool{{	 
IsTriggeringEvent{{ 
({{  
LoggingEvent{{  ,
loggingEvent{{- 9
){{9 :
{|| 
if}} 
(}} 
loggingEvent}} 
==}} 
null}} 
)}} 
{~~ 
throw 	
new
 !
ArgumentNullException #
(# $
$str$ 2
)2 3
;3 4
}
ÄÄ 
return
ÇÇ 	
(
ÇÇ
 
loggingEvent
ÇÇ 
.
ÇÇ 
Level
ÇÇ 
>=
ÇÇ  
m_threshold
ÇÇ! ,
)
ÇÇ, -
;
ÇÇ- .
}
ÉÉ 
}
ÑÑ 
}ÖÖ ∆0
8C:\sonarqube\projects\log4net-2.0.7\src\Core\LevelMap.cs
	namespace 	
log4net
 
. 
Core 
{ 
public'' 
sealed'' 
class'' 
LevelMap'' 
{(( 
private// 	
	Hashtable//
 
m_mapName2Level// #
=//$ %

SystemInfo//& 0
.//0 1*
CreateCaseInsensitiveHashtable//1 O
(//O P
)//P Q
;//Q R
public;; 
LevelMap;;	 
(;; 
);; 
{<< 
}== 
publicGG 
voidGG	 
ClearGG 
(GG 
)GG 
{HH 
m_mapName2LevelJJ 
.JJ 
ClearJJ 
(JJ 
)JJ 
;JJ 
}KK 
publicYY 
LevelYY	 
thisYY 
[YY 
stringYY 
nameYY 
]YY  
{ZZ 
get[[ 
{\\ 
if]] 
(]] 
name]] 
==]] 
null]] 
)]] 
{^^ 
throw__ 

new__ !
ArgumentNullException__ $
(__$ %
$str__% +
)__+ ,
;__, -
}`` 
lockbb 
(bb 	
thisbb	 
)bb 
{cc 
returndd 
(dd 
Leveldd 
)dd 
m_mapName2Leveldd "
[dd" #
namedd# '
]dd' (
;dd( )
}ee 
}ff 
}gg 
publictt 
voidtt	 
Addtt 
(tt 
stringtt 
namett 
,tt 
inttt "
valuett# (
)tt( )
{uu 
Addvv 
(vv 
namevv 
,vv 
valuevv 
,vv 
nullvv 
)vv 
;vv 
}ww 
public
ÑÑ 
void
ÑÑ	 
Add
ÑÑ 
(
ÑÑ 
string
ÑÑ 
name
ÑÑ 
,
ÑÑ 
int
ÑÑ "
value
ÑÑ# (
,
ÑÑ( )
string
ÑÑ* 0
displayName
ÑÑ1 <
)
ÑÑ< =
{
ÖÖ 
if
ÜÜ 
(
ÜÜ 
name
ÜÜ 
==
ÜÜ 
null
ÜÜ 
)
ÜÜ 
{
áá 
throw
àà 	
new
àà
 #
ArgumentNullException
àà #
(
àà# $
$str
àà$ *
)
àà* +
;
àà+ ,
}
ââ 
if
ää 
(
ää 
name
ää 
.
ää 
Length
ää 
==
ää 
$num
ää 
)
ää 
{
ãã 
throw
åå 	
log4net
åå
 
.
åå 
Util
åå 
.
åå 

SystemInfo
åå !
.
åå! "/
!CreateArgumentOutOfRangeException
åå" C
(
ååC D
$str
ååD J
,
ååJ K
name
ååL P
,
ååP Q
$str
ååR m
+
ååm n
name
åån r
+
åår s
$stråås °
)åå° ¢
;åå¢ £
}
çç 
if
èè 
(
èè 
displayName
èè 
==
èè 
null
èè 
||
èè 
displayName
èè )
.
èè) *
Length
èè* 0
==
èè1 3
$num
èè4 5
)
èè5 6
{
êê 
displayName
ëë 
=
ëë 
name
ëë 
;
ëë 
}
íí 
Add
îî 
(
îî 
new
îî 

Level
îî 
(
îî 
value
îî 
,
îî 
name
îî 
,
îî 
displayName
îî )
)
îî) *
)
îî* +
;
îî+ ,
}
ïï 
public
†† 
void
††	 
Add
†† 
(
†† 
Level
†† 
level
†† 
)
†† 
{
°° 
if
¢¢ 
(
¢¢ 
level
¢¢ 
==
¢¢ 
null
¢¢ 
)
¢¢ 
{
££ 
throw
§§ 	
new
§§
 #
ArgumentNullException
§§ #
(
§§# $
$str
§§$ +
)
§§+ ,
;
§§, -
}
•• 
lock
¶¶ 
(
¶¶ 
this
¶¶ 
)
¶¶ 
{
ßß 
m_mapName2Level
®® 
[
®® 
level
®® 
.
®® 
Name
®® 
]
®® 
=
®®  !
level
®®" '
;
®®' (
}
©© 
}
™™ 
public
µµ 
LevelCollection
µµ	 
	AllLevels
µµ "
{
∂∂ 
get
∑∑ 
{
∏∏ 
lock
ππ 
(
ππ 	
this
ππ	 
)
ππ 
{
∫∫ 
return
ªª 
new
ªª 
LevelCollection
ªª 
(
ªª  
m_mapName2Level
ªª  /
.
ªª/ 0
Values
ªª0 6
)
ªª6 7
;
ªª7 8
}
ºº 
}
ΩΩ 
}
ææ 
public
““ 
Level
““	 
LookupWithDefault
““  
(
““  !
Level
““! &
defaultLevel
““' 3
)
““3 4
{
”” 
if
‘‘ 
(
‘‘ 
defaultLevel
‘‘ 
==
‘‘ 
null
‘‘ 
)
‘‘ 
{
’’ 
throw
÷÷ 	
new
÷÷
 #
ArgumentNullException
÷÷ #
(
÷÷# $
$str
÷÷$ 2
)
÷÷2 3
;
÷÷3 4
}
◊◊ 
lock
ŸŸ 
(
ŸŸ 
this
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
Level
€€ 	
level
€€
 
=
€€ 
(
€€ 
Level
€€ 
)
€€ 
m_mapName2Level
€€ (
[
€€( )
defaultLevel
€€) 5
.
€€5 6
Name
€€6 :
]
€€: ;
;
€€; <
if
‹‹ 
(
‹‹ 
level
‹‹ 
==
‹‹ 
null
‹‹ 
)
‹‹ 
{
›› 
m_mapName2Level
ﬁﬁ 
[
ﬁﬁ 
defaultLevel
ﬁﬁ !
.
ﬁﬁ! "
Name
ﬁﬁ" &
]
ﬁﬁ& '
=
ﬁﬁ( )
defaultLevel
ﬁﬁ* 6
;
ﬁﬁ6 7
return
ﬂﬂ 
defaultLevel
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 
return
·· 

level
·· 
;
·· 
}
‚‚ 
}
„„ 
}
‰‰ 
}ÂÂ ƒQ
<C:\sonarqube\projects\log4net-2.0.7\src\Core\LocationInfo.cs
	namespace 	
log4net
 
. 
Core 
{ 
[<< 
Serializable<< 
]<< 
public>> 
class>> 
LocationInfo>> 
{?? 
publicMM 
LocationInfoMM	 
(MM 
TypeMM ,
 callerStackBoundaryDeclaringTypeMM ;
)MM; <
{NN 
m_classNamePP 
=PP 
NAPP 
;PP 

m_fileNameQQ 
=QQ 
NAQQ 
;QQ 
m_lineNumberRR 
=RR 
NARR 
;RR 
m_methodNameSS 
=SS 
NASS 
;SS 

m_fullInfoTT 
=TT 
NATT 
;TT 
ifWW 
(WW ,
 callerStackBoundaryDeclaringTypeWW '
!=WW( *
nullWW+ /
)WW/ 0
{XX 
tryYY 
{ZZ 

StackTrace[[ 
st[[ 
=[[ 
new[[ 

StackTrace[[ #
([[# $
true[[$ (
)[[( )
;[[) *
int\\ 

frameIndex\\	 
=\\ 
$num\\ 
;\\ 
while__ 

(__ 

frameIndex__ 
<__ 
st__ 
.__ 

FrameCount__ &
)__& '
{`` 

StackFrameaa 
frameaa 
=aa 
staa 
.aa 
GetFrameaa $
(aa$ %

frameIndexaa% /
)aa/ 0
;aa0 1
ifbb 
(bb	 

framebb
 
!=bb 
nullbb 
&&bb 
framebb  
.bb  !
	GetMethodbb! *
(bb* +
)bb+ ,
.bb, -
DeclaringTypebb- :
==bb; =,
 callerStackBoundaryDeclaringTypebb> ^
)bb^ _
{cc 
breakdd 
;dd 
}ee 

frameIndexff 
++ff 
;ff 
}gg 
whilejj 

(jj 

frameIndexjj 
<jj 
stjj 
.jj 

FrameCountjj &
)jj& '
{kk 

StackFramell 
framell 
=ll 
stll 
.ll 
GetFramell $
(ll$ %

frameIndexll% /
)ll/ 0
;ll0 1
ifmm 
(mm	 

framemm
 
!=mm 
nullmm 
&&mm 
framemm  
.mm  !
	GetMethodmm! *
(mm* +
)mm+ ,
.mm, -
DeclaringTypemm- :
!=mm; =,
 callerStackBoundaryDeclaringTypemm> ^
)mm^ _
{nn 
breakoo 
;oo 
}pp 

frameIndexqq 
++qq 
;qq 
}rr 
iftt 
(tt 	

frameIndextt	 
<tt 
sttt 
.tt 

FrameCounttt #
)tt# $
{uu 
intww 	
adjustedFrameCountww
 
=ww 
stww !
.ww! "

FrameCountww" ,
-ww- .

frameIndexww/ 9
;ww9 :
	ArrayListxx !
stackFramesListxx" 1
=xx2 3
newxx4 7
	ArrayListxx8 A
(xxA B
adjustedFrameCountxxB T
)xxT U
;xxU V
m_stackFramesyy 
=yy 
newyy 
StackFrameItemyy (
[yy( )
adjustedFrameCountyy) ;
]yy; <
;yy< =
forzz 	
(zz
 
intzz 
izz 
=zz 

frameIndexzz 
;zz 
izz 
<zz  
stzz! #
.zz# $

FrameCountzz$ .
;zz. /
izz0 1
++zz1 3
)zz3 4
{{{ 
stackFramesList|| 
.|| 
Add|| 
(|| 
new|| 
StackFrameItem|| -
(||- .
st||. 0
.||0 1
GetFrame||1 9
(||9 :
i||: ;
)||; <
)||< =
)||= >
;||> ?
}}} 
stackFramesList 
. 
CopyTo 
( 
m_stackFrames *
,* +
$num, -
)- .
;. /

StackFrame
ÇÇ 
locationFrame
ÇÇ 
=
ÇÇ  
st
ÇÇ! #
.
ÇÇ# $
GetFrame
ÇÇ$ ,
(
ÇÇ, -

frameIndex
ÇÇ- 7
)
ÇÇ7 8
;
ÇÇ8 9
if
ÑÑ 
(
ÑÑ	 

locationFrame
ÑÑ
 
!=
ÑÑ 
null
ÑÑ 
)
ÑÑ  
{
ÖÖ 
System
ÜÜ 
.
ÜÜ 

Reflection
ÜÜ 
.
ÜÜ 

MethodBase
ÜÜ #
method
ÜÜ$ *
=
ÜÜ+ ,
locationFrame
ÜÜ- :
.
ÜÜ: ;
	GetMethod
ÜÜ; D
(
ÜÜD E
)
ÜÜE F
;
ÜÜF G
if
àà 	
(
àà
 
method
àà 
!=
àà 
null
àà 
)
àà 
{
ââ 
m_methodName
ää 
=
ää 
method
ää 
.
ää 
Name
ää #
;
ää# $
if
ãã 

(
ãã 
method
ãã 
.
ãã 
DeclaringType
ãã  
!=
ãã! #
null
ãã$ (
)
ãã( )
{
åå 	
m_className
çç	 
=
çç 
method
çç 
.
çç 
DeclaringType
çç +
.
çç+ ,
FullName
çç, 4
;
çç4 5
}
éé 	
}
èè 

m_fileName
êê 
=
êê 
locationFrame
êê !
.
êê! "
GetFileName
êê" -
(
êê- .
)
êê. /
;
êê/ 0
m_lineNumber
ëë 
=
ëë 
locationFrame
ëë #
.
ëë# $
GetFileLineNumber
ëë$ 5
(
ëë5 6
)
ëë6 7
.
ëë7 8
ToString
ëë8 @
(
ëë@ A
System
ëëA G
.
ëëG H
Globalization
ëëH U
.
ëëU V
NumberFormatInfo
ëëV f
.
ëëf g
InvariantInfo
ëëg t
)
ëët u
;
ëëu v

m_fullInfo
îî 
=
îî 
m_className
îî  
+
îî! "
$char
îî# &
+
îî' (
m_methodName
îî) 5
+
îî6 7
$char
îî8 ;
+
îî< =

m_fileName
îî> H
+
îîI J
$char
îîK N
+
îîO P
m_lineNumber
îîQ ]
+
îî^ _
$char
îî` c
;
îîc d
}
ïï 
}
ññ 
}
óó 
catch
òò 	
(
òò	 

System
òò
 
.
òò 
Security
òò 
.
òò 
SecurityException
òò +
)
òò+ ,
{
ôô 
LogLog
úú 
.
úú 
Debug
úú 
(
úú 
declaringType
úú 
,
úú  
$strúú! ê
)úúê ë
;úúë í
}
ùù 
}
ûû 
}
†† 
public
ØØ 
LocationInfo
ØØ	 
(
ØØ 
string
ØØ 
	className
ØØ &
,
ØØ& '
string
ØØ( .

methodName
ØØ/ 9
,
ØØ9 :
string
ØØ; A
fileName
ØØB J
,
ØØJ K
string
ØØL R

lineNumber
ØØS ]
)
ØØ] ^
{
∞∞ 
m_className
±± 
=
±± 
	className
±± 
;
±± 

m_fileName
≤≤ 
=
≤≤ 
fileName
≤≤ 
;
≤≤ 
m_lineNumber
≥≥ 
=
≥≥ 

lineNumber
≥≥ 
;
≥≥ 
m_methodName
¥¥ 
=
¥¥ 

methodName
¥¥ 
;
¥¥ 

m_fullInfo
µµ 
=
µµ 
m_className
µµ 
+
µµ 
$char
µµ !
+
µµ" #
m_methodName
µµ$ 0
+
µµ1 2
$char
µµ3 6
+
µµ7 8

m_fileName
µµ9 C
+
µµD E
$char
∂∂ 
+
∂∂ 	
m_lineNumber
∂∂
 
+
∂∂ 
$char
∂∂ 
;
∂∂ 
}
∑∑ 
public
ÀÀ 
string
ÀÀ	 
	ClassName
ÀÀ 
{
ÃÃ 
get
ÕÕ 
{
ÕÕ 
return
ÕÕ	 
m_className
ÕÕ 
;
ÕÕ 
}
ÕÕ 
}
ŒŒ 
public
€€ 
string
€€	 
FileName
€€ 
{
‹‹ 
get
›› 
{
›› 
return
››	 

m_fileName
›› 
;
›› 
}
›› 
}
ﬁﬁ 
public
ÎÎ 
string
ÎÎ	 

LineNumber
ÎÎ 
{
ÏÏ 
get
ÌÌ 
{
ÌÌ 
return
ÌÌ	 
m_lineNumber
ÌÌ 
;
ÌÌ 
}
ÌÌ 
}
ÓÓ 
public
˚˚ 
string
˚˚	 

MethodName
˚˚ 
{
¸¸ 
get
˝˝ 
{
˝˝ 
return
˝˝	 
m_methodName
˝˝ 
;
˝˝ 
}
˝˝ 
}
˛˛ 
public
çç 
string
çç	 
FullInfo
çç 
{
éé 
get
èè 
{
èè 
return
èè	 

m_fullInfo
èè 
;
èè 
}
èè 
}
êê 
public
ññ 
StackFrameItem
ññ	 
[
ññ 
]
ññ 
StackFrames
ññ %
{
óó 
get
òò 
{
òò 
return
òò	 
m_stackFrames
òò 
;
òò 
}
òò  
}
ôô 
private
†† 	
readonly
††
 
string
†† 
m_className
†† %
;
††% &
private
°° 	
readonly
°°
 
string
°° 

m_fileName
°° $
;
°°$ %
private
¢¢ 	
readonly
¢¢
 
string
¢¢ 
m_lineNumber
¢¢ &
;
¢¢& '
private
££ 	
readonly
££
 
string
££ 
m_methodName
££ &
;
££& '
private
§§ 	
readonly
§§
 
string
§§ 

m_fullInfo
§§ $
;
§§$ %
private
¶¶ 	
readonly
¶¶
 
StackFrameItem
¶¶ !
[
¶¶! "
]
¶¶" #
m_stackFrames
¶¶$ 1
;
¶¶1 2
private
¥¥ 
readonly
¥¥ 
static
¥¥ 
Type
¥¥ !
declaringType
¥¥" /
=
¥¥0 1
typeof
¥¥2 8
(
¥¥8 9
LocationInfo
¥¥9 E
)
¥¥E F
;
¥¥F G
private
ªª 	
const
ªª
 
string
ªª 
NA
ªª 
=
ªª 
$str
ªª 
;
ªª  
}
ææ 
}øø Â

<C:\sonarqube\projects\log4net-2.0.7\src\Core\LogException.cs
	namespace 	
log4net
 
. 
Core 
{ 
[(( 
Serializable(( 
](( 
public-- 
class-- 
LogException-- 
:--  
ApplicationException-- 1
{// 
public:: 
LogException::	 
(:: 
):: 
{;; 
}<< 
publicHH 
LogExceptionHH	 
(HH 
StringHH 
messageHH $
)HH$ %
:HH& '
baseHH( ,
(HH, -
messageHH- 4
)HH4 5
{II 
}JJ 
publicWW 
LogExceptionWW	 
(WW 
StringWW 
messageWW $
,WW$ %
	ExceptionWW& /
innerExceptionWW0 >
)WW> ?
:WW@ A
baseWWB F
(WWF G
messageWWG N
,WWN O
innerExceptionWWP ^
)WW^ _
{XX 
}YY 
	protectedkk 
LogExceptionkk 
(kk 
SerializationInfokk *
infokk+ /
,kk/ 0
StreamingContextkk1 A
contextkkB I
)kkI J
:kkK L
basekkM Q
(kkQ R
infokkR V
,kkV W
contextkkX _
)kk_ `
{ll 
}mm 
}qq 
}rr „
=C:\sonarqube\projects\log4net-2.0.7\src\Core\LoggerManager.cs
	namespace 	
log4net
 
. 
Core 
{   
public66 
sealed66 
class66 
LoggerManager66 "
{77 
privateBB 	
LoggerManagerBB
 
(BB 
)BB 
{CC 
}DD 
staticTT 
LoggerManagerTT	 
(TT 
)TT 
{UU 
tryVV 
{WW #
RegisterAppDomainEvents[[ 
([[ 
)[[ 
;[[ 
}\\ 
catch]] 
(]] 	
System]]	 
.]] 
Security]] 
.]] 
SecurityException]] *
)]]* +
{^^ 
LogLog__ 

.__
 
Debug__ 
(__ 
declaringType__ 
,__ 
$str__  `
+__` a
$str`` Q
+``Q R
$straa T
+aaT U
$strbb 
)bb 
;bb 
}cc 
LogLogff 
.ff 
Debugff 
(ff 
declaringTypeff &
,ff& '
GetVersionInfoff( 6
(ff6 7
)ff7 8
)ff8 9
;ff9 :
stringnn 	)
appRepositorySelectorTypeNamenn
 '
=nn( )

SystemInfonn* 4
.nn4 5
GetAppSettingnn5 B
(nnB C
$strnnC _
)nn_ `
;nn` a
ifoo 
(oo )
appRepositorySelectorTypeNameoo $
!=oo% '
nulloo( ,
&&oo- /)
appRepositorySelectorTypeNameoo0 M
.ooM N
LengthooN T
>ooU V
$numooW X
)ooX Y
{pp 
Typerr %
appRepositorySelectorTyperr	 "
=rr# $
nullrr% )
;rr) *
tryss 
{tt %
appRepositorySelectorTypeuu 
=uu  

SystemInfouu! +
.uu+ ,
GetTypeFromStringuu, =
(uu= >)
appRepositorySelectorTypeNameuu> [
,uu[ \
falseuu] b
,uub c
trueuud h
)uuh i
;uui j
}vv 
catchww 	
(ww	 

	Exceptionww
 
exww 
)ww 
{xx 
LogLogyy 
.yy 
Erroryy 
(yy 
declaringTypeyy 
,yy  
$stryy! V
+yyV W)
appRepositorySelectorTypeNameyyW t
+yyt u
$stryyu x
,yyx y
exyyz |
)yy| }
;yy} ~
}zz 
if|| 
(|| %
appRepositorySelectorType|| !
!=||" $
null||% )
)||) *
{}} 
object $
appRepositorySelectorObj $
=% &
null' +
;+ ,
try
ÄÄ 
{
ÅÅ &
appRepositorySelectorObj
ÇÇ 
=
ÇÇ  
	Activator
ÇÇ! *
.
ÇÇ* +
CreateInstance
ÇÇ+ 9
(
ÇÇ9 :'
appRepositorySelectorType
ÇÇ: S
)
ÇÇS T
;
ÇÇT U
}
ÉÉ 
catch
ÑÑ 

(
ÑÑ
 
	Exception
ÑÑ 
ex
ÑÑ 
)
ÑÑ 
{
ÖÖ 
LogLog
ÜÜ 
.
ÜÜ 
Error
ÜÜ 
(
ÜÜ 
declaringType
ÜÜ  
,
ÜÜ  !
$str
ÜÜ" Q
+
ÜÜQ R'
appRepositorySelectorType
ÜÜR k
.
ÜÜk l
FullName
ÜÜl t
+
ÜÜt u
$str
ÜÜu x
,
ÜÜx y
ex
ÜÜz |
)
ÜÜ| }
;
ÜÜ} ~
}
áá 
if
ââ 
(
ââ 	&
appRepositorySelectorObj
ââ	 !
!=
ââ" $
null
ââ% )
&&
ââ* ,&
appRepositorySelectorObj
ââ- E
is
ââF H!
IRepositorySelector
ââI \
)
ââ\ ]
{
ää "
s_repositorySelector
ãã 
=
ãã 
(
ãã !
IRepositorySelector
ãã 1
)
ãã1 2&
appRepositorySelectorObj
ãã2 J
;
ããJ K
}
åå 
else
çç 	
{
éé 
LogLog
èè 
.
èè 
Error
èè 
(
èè 
declaringType
èè  
,
èè  !
$str
èè" =
+
èè= >'
appRepositorySelectorType
èè> W
.
èèW X
FullName
èèX `
+
èè` a
$strèèa Ç
)èèÇ É
;èèÉ Ñ
}
êê 
}
ëë 
}
íí 
if
ïï 
(
ïï "
s_repositorySelector
ïï 
==
ïï 
null
ïï #
)
ïï# $
{
ññ "
s_repositorySelector
óó 
=
óó 
new
óó '
DefaultRepositorySelector
óó 8
(
óó8 9
typeof
óó9 ?
(
óó? @
log4net
óó@ G
.
óóG H

Repository
óóH R
.
óóR S
	Hierarchy
óóS \
.
óó\ ]
	Hierarchy
óó] f
)
óóf g
)
óóg h
;
óóh i
}
òò 
}
ôô 
private
ßß 	
static
ßß
 
void
ßß %
RegisterAppDomainEvents
ßß -
(
ßß- .
)
ßß. /
{
®® 
	AppDomain
´´ 
.
´´ 
CurrentDomain
´´ 
.
´´ 
ProcessExit
´´ &
+=
´´' )
new
´´* -
EventHandler
´´. :
(
´´: ;
OnProcessExit
´´; H
)
´´H I
;
´´I J
	AppDomain
ÆÆ 
.
ÆÆ 
CurrentDomain
ÆÆ 
.
ÆÆ 
DomainUnload
ÆÆ '
+=
ÆÆ( *
new
ÆÆ+ .
EventHandler
ÆÆ/ ;
(
ÆÆ; <
OnDomainUnload
ÆÆ< J
)
ÆÆJ K
;
ÆÆK L
}
∞∞ 
[
¡¡ 
Obsolete
¡¡ 
(
¡¡ 
$str
¡¡ >
)
¡¡> ?
]
¡¡? @
public
¬¬ 
static
¬¬	 
ILoggerRepository
¬¬ !!
GetLoggerRepository
¬¬" 5
(
¬¬5 6
string
¬¬6 <

repository
¬¬= G
)
¬¬G H
{
√√ 
return
ƒƒ 	
GetRepository
ƒƒ
 
(
ƒƒ 

repository
ƒƒ "
)
ƒƒ" #
;
ƒƒ# $
}
≈≈ 
[
ÃÃ 
Obsolete
ÃÃ 
(
ÃÃ 
$str
ÃÃ >
)
ÃÃ> ?
]
ÃÃ? @
public
ÕÕ 
static
ÕÕ	 
ILoggerRepository
ÕÕ !!
GetLoggerRepository
ÕÕ" 5
(
ÕÕ5 6
Assembly
ÕÕ6 > 
repositoryAssembly
ÕÕ? Q
)
ÕÕQ R
{
ŒŒ 
return
œœ 	
GetRepository
œœ
 
(
œœ  
repositoryAssembly
œœ *
)
œœ* +
;
œœ+ ,
}
–– 
public
›› 
static
››	 
ILoggerRepository
›› !
GetRepository
››" /
(
››/ 0
string
››0 6

repository
››7 A
)
››A B
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 

repository
ﬂﬂ 
==
ﬂﬂ 
null
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
throw
·· 	
new
··
 #
ArgumentNullException
·· #
(
··# $
$str
··$ 0
)
··0 1
;
··1 2
}
‚‚ 
return
„„ 	 
RepositorySelector
„„
 
.
„„ 
GetRepository
„„ *
(
„„* +

repository
„„+ 5
)
„„5 6
;
„„6 7
}
‰‰ 
public
 
static
	 
ILoggerRepository
 !
GetRepository
" /
(
/ 0
Assembly
0 8 
repositoryAssembly
9 K
)
K L
{
ÒÒ 
if
ÚÚ 
(
ÚÚ  
repositoryAssembly
ÚÚ 
==
ÚÚ 
null
ÚÚ !
)
ÚÚ! "
{
ÛÛ 
throw
ÙÙ 	
new
ÙÙ
 #
ArgumentNullException
ÙÙ #
(
ÙÙ# $
$str
ÙÙ$ 8
)
ÙÙ8 9
;
ÙÙ9 :
}
ıı 
return
ˆˆ 	 
RepositorySelector
ˆˆ
 
.
ˆˆ 
GetRepository
ˆˆ *
(
ˆˆ* + 
repositoryAssembly
ˆˆ+ =
)
ˆˆ= >
;
ˆˆ> ?
}
˜˜ 
public
ââ 
static
ââ	 
ILogger
ââ 
Exists
ââ 
(
ââ 
string
ââ %

repository
ââ& 0
,
ââ0 1
string
ââ2 8
name
ââ9 =
)
ââ= >
{
ää 
if
ãã 
(
ãã 

repository
ãã 
==
ãã 
null
ãã 
)
ãã 
{
åå 
throw
çç 	
new
çç
 #
ArgumentNullException
çç #
(
çç# $
$str
çç$ 0
)
çç0 1
;
çç1 2
}
éé 
if
èè 
(
èè 
name
èè 
==
èè 
null
èè 
)
èè 
{
êê 
throw
ëë 	
new
ëë
 #
ArgumentNullException
ëë #
(
ëë# $
$str
ëë$ *
)
ëë* +
;
ëë+ ,
}
íí 
return
ìì 	 
RepositorySelector
ìì
 
.
ìì 
GetRepository
ìì *
(
ìì* +

repository
ìì+ 5
)
ìì5 6
.
ìì6 7
Exists
ìì7 =
(
ìì= >
name
ìì> B
)
ììB C
;
ììC D
}
îî 
public
¶¶ 
static
¶¶	 
ILogger
¶¶ 
Exists
¶¶ 
(
¶¶ 
Assembly
¶¶ ' 
repositoryAssembly
¶¶( :
,
¶¶: ;
string
¶¶< B
name
¶¶C G
)
¶¶G H
{
ßß 
if
®® 
(
®®  
repositoryAssembly
®® 
==
®® 
null
®® !
)
®®! "
{
©© 
throw
™™ 	
new
™™
 #
ArgumentNullException
™™ #
(
™™# $
$str
™™$ 8
)
™™8 9
;
™™9 :
}
´´ 
if
¨¨ 
(
¨¨ 
name
¨¨ 
==
¨¨ 
null
¨¨ 
)
¨¨ 
{
≠≠ 
throw
ÆÆ 	
new
ÆÆ
 #
ArgumentNullException
ÆÆ #
(
ÆÆ# $
$str
ÆÆ$ *
)
ÆÆ* +
;
ÆÆ+ ,
}
ØØ 
return
∞∞ 	 
RepositorySelector
∞∞
 
.
∞∞ 
GetRepository
∞∞ *
(
∞∞* + 
repositoryAssembly
∞∞+ =
)
∞∞= >
.
∞∞> ?
Exists
∞∞? E
(
∞∞E F
name
∞∞F J
)
∞∞J K
;
∞∞K L
}
±± 
public
ΩΩ 
static
ΩΩ	 
ILogger
ΩΩ 
[
ΩΩ 
]
ΩΩ 
GetCurrentLoggers
ΩΩ +
(
ΩΩ+ ,
string
ΩΩ, 2

repository
ΩΩ3 =
)
ΩΩ= >
{
ææ 
if
øø 
(
øø 

repository
øø 
==
øø 
null
øø 
)
øø 
{
¿¿ 
throw
¡¡ 	
new
¡¡
 #
ArgumentNullException
¡¡ #
(
¡¡# $
$str
¡¡$ 0
)
¡¡0 1
;
¡¡1 2
}
¬¬ 
return
√√ 	 
RepositorySelector
√√
 
.
√√ 
GetRepository
√√ *
(
√√* +

repository
√√+ 5
)
√√5 6
.
√√6 7
GetCurrentLoggers
√√7 H
(
√√H I
)
√√I J
;
√√J K
}
ƒƒ 
public
–– 
static
––	 
ILogger
–– 
[
–– 
]
–– 
GetCurrentLoggers
–– +
(
––+ ,
Assembly
––, 4 
repositoryAssembly
––5 G
)
––G H
{
—— 
if
““ 
(
““  
repositoryAssembly
““ 
==
““ 
null
““ !
)
““! "
{
”” 
throw
‘‘ 	
new
‘‘
 #
ArgumentNullException
‘‘ #
(
‘‘# $
$str
‘‘$ 8
)
‘‘8 9
;
‘‘9 :
}
’’ 
return
÷÷ 	 
RepositorySelector
÷÷
 
.
÷÷ 
GetRepository
÷÷ *
(
÷÷* + 
repositoryAssembly
÷÷+ =
)
÷÷= >
.
÷÷> ?
GetCurrentLoggers
÷÷? P
(
÷÷P Q
)
÷÷Q R
;
÷÷R S
}
◊◊ 
public
ÏÏ 
static
ÏÏ	 
ILogger
ÏÏ 
	GetLogger
ÏÏ !
(
ÏÏ! "
string
ÏÏ" (

repository
ÏÏ) 3
,
ÏÏ3 4
string
ÏÏ5 ;
name
ÏÏ< @
)
ÏÏ@ A
{
ÌÌ 
if
ÓÓ 
(
ÓÓ 

repository
ÓÓ 
==
ÓÓ 
null
ÓÓ 
)
ÓÓ 
{
ÔÔ 
throw
 	
new

 #
ArgumentNullException
 #
(
# $
$str
$ 0
)
0 1
;
1 2
}
ÒÒ 
if
ÚÚ 
(
ÚÚ 
name
ÚÚ 
==
ÚÚ 
null
ÚÚ 
)
ÚÚ 
{
ÛÛ 
throw
ÙÙ 	
new
ÙÙ
 #
ArgumentNullException
ÙÙ #
(
ÙÙ# $
$str
ÙÙ$ *
)
ÙÙ* +
;
ÙÙ+ ,
}
ıı 
return
ˆˆ 	 
RepositorySelector
ˆˆ
 
.
ˆˆ 
GetRepository
ˆˆ *
(
ˆˆ* +

repository
ˆˆ+ 5
)
ˆˆ5 6
.
ˆˆ6 7
	GetLogger
ˆˆ7 @
(
ˆˆ@ A
name
ˆˆA E
)
ˆˆE F
;
ˆˆF G
}
˜˜ 
public
åå 
static
åå	 
ILogger
åå 
	GetLogger
åå !
(
åå! "
Assembly
åå" * 
repositoryAssembly
åå+ =
,
åå= >
string
åå? E
name
ååF J
)
ååJ K
{
çç 
if
éé 
(
éé  
repositoryAssembly
éé 
==
éé 
null
éé !
)
éé! "
{
èè 
throw
êê 	
new
êê
 #
ArgumentNullException
êê #
(
êê# $
$str
êê$ 8
)
êê8 9
;
êê9 :
}
ëë 
if
íí 
(
íí 
name
íí 
==
íí 
null
íí 
)
íí 
{
ìì 
throw
îî 	
new
îî
 #
ArgumentNullException
îî #
(
îî# $
$str
îî$ *
)
îî* +
;
îî+ ,
}
ïï 
return
ññ 	 
RepositorySelector
ññ
 
.
ññ 
GetRepository
ññ *
(
ññ* + 
repositoryAssembly
ññ+ =
)
ññ= >
.
ññ> ?
	GetLogger
ññ? H
(
ññH I
name
ññI M
)
ññM N
;
ññN O
}
óó 
public
§§ 
static
§§	 
ILogger
§§ 
	GetLogger
§§ !
(
§§! "
string
§§" (

repository
§§) 3
,
§§3 4
Type
§§5 9
type
§§: >
)
§§> ?
{
•• 
if
¶¶ 
(
¶¶ 

repository
¶¶ 
==
¶¶ 
null
¶¶ 
)
¶¶ 
{
ßß 
throw
®® 	
new
®®
 #
ArgumentNullException
®® #
(
®®# $
$str
®®$ 0
)
®®0 1
;
®®1 2
}
©© 
if
™™ 
(
™™ 
type
™™ 
==
™™ 
null
™™ 
)
™™ 
{
´´ 
throw
¨¨ 	
new
¨¨
 #
ArgumentNullException
¨¨ #
(
¨¨# $
$str
¨¨$ *
)
¨¨* +
;
¨¨+ ,
}
≠≠ 
return
ÆÆ 	 
RepositorySelector
ÆÆ
 
.
ÆÆ 
GetRepository
ÆÆ *
(
ÆÆ* +

repository
ÆÆ+ 5
)
ÆÆ5 6
.
ÆÆ6 7
	GetLogger
ÆÆ7 @
(
ÆÆ@ A
type
ÆÆA E
.
ÆÆE F
FullName
ÆÆF N
)
ÆÆN O
;
ÆÆO P
}
ØØ 
public
ºº 
static
ºº	 
ILogger
ºº 
	GetLogger
ºº !
(
ºº! "
Assembly
ºº" * 
repositoryAssembly
ºº+ =
,
ºº= >
Type
ºº? C
type
ººD H
)
ººH I
{
ΩΩ 
if
ææ 
(
ææ  
repositoryAssembly
ææ 
==
ææ 
null
ææ !
)
ææ! "
{
øø 
throw
¿¿ 	
new
¿¿
 #
ArgumentNullException
¿¿ #
(
¿¿# $
$str
¿¿$ 8
)
¿¿8 9
;
¿¿9 :
}
¡¡ 
if
¬¬ 
(
¬¬ 
type
¬¬ 
==
¬¬ 
null
¬¬ 
)
¬¬ 
{
√√ 
throw
ƒƒ 	
new
ƒƒ
 #
ArgumentNullException
ƒƒ #
(
ƒƒ# $
$str
ƒƒ$ *
)
ƒƒ* +
;
ƒƒ+ ,
}
≈≈ 
return
∆∆ 	 
RepositorySelector
∆∆
 
.
∆∆ 
GetRepository
∆∆ *
(
∆∆* + 
repositoryAssembly
∆∆+ =
)
∆∆= >
.
∆∆> ?
	GetLogger
∆∆? H
(
∆∆H I
type
∆∆I M
.
∆∆M N
FullName
∆∆N V
)
∆∆V W
;
∆∆W X
}
«« 
public
›› 
static
››	 
void
›› 
Shutdown
›› 
(
›› 
)
›› 
{
ﬁﬁ 
foreach
ﬂﬂ 

(
ﬂﬂ
 
ILoggerRepository
ﬂﬂ 

repository
ﬂﬂ '
in
ﬂﬂ( * 
GetAllRepositories
ﬂﬂ+ =
(
ﬂﬂ= >
)
ﬂﬂ> ?
)
ﬂﬂ? @
{
‡‡ 

repository
·· 
.
·· 
Shutdown
·· 
(
·· 
)
·· 
;
·· 
}
‚‚ 
}
„„ 
public
˙˙ 
static
˙˙	 
void
˙˙  
ShutdownRepository
˙˙ '
(
˙˙' (
string
˙˙( .

repository
˙˙/ 9
)
˙˙9 :
{
˚˚ 
if
¸¸ 
(
¸¸ 

repository
¸¸ 
==
¸¸ 
null
¸¸ 
)
¸¸ 
{
˝˝ 
throw
˛˛ 	
new
˛˛
 #
ArgumentNullException
˛˛ #
(
˛˛# $
$str
˛˛$ 0
)
˛˛0 1
;
˛˛1 2
}
ˇˇ  
RepositorySelector
ÄÄ 
.
ÄÄ 
GetRepository
ÄÄ #
(
ÄÄ# $

repository
ÄÄ$ .
)
ÄÄ. /
.
ÄÄ/ 0
Shutdown
ÄÄ0 8
(
ÄÄ8 9
)
ÄÄ9 :
;
ÄÄ: ;
}
ÅÅ 
public
ôô 
static
ôô	 
void
ôô  
ShutdownRepository
ôô '
(
ôô' (
Assembly
ôô( 0 
repositoryAssembly
ôô1 C
)
ôôC D
{
öö 
if
õõ 
(
õõ  
repositoryAssembly
õõ 
==
õõ 
null
õõ !
)
õõ! "
{
úú 
throw
ùù 	
new
ùù
 #
ArgumentNullException
ùù #
(
ùù# $
$str
ùù$ 8
)
ùù8 9
;
ùù9 :
}
ûû  
RepositorySelector
üü 
.
üü 
GetRepository
üü #
(
üü# $ 
repositoryAssembly
üü$ 6
)
üü6 7
.
üü7 8
Shutdown
üü8 @
(
üü@ A
)
üüA B
;
üüB C
}
†† 
public
∞∞ 
static
∞∞	 
void
∞∞  
ResetConfiguration
∞∞ '
(
∞∞' (
string
∞∞( .

repository
∞∞/ 9
)
∞∞9 :
{
±± 
if
≤≤ 
(
≤≤ 

repository
≤≤ 
==
≤≤ 
null
≤≤ 
)
≤≤ 
{
≥≥ 
throw
¥¥ 	
new
¥¥
 #
ArgumentNullException
¥¥ #
(
¥¥# $
$str
¥¥$ 0
)
¥¥0 1
;
¥¥1 2
}
µµ  
RepositorySelector
∂∂ 
.
∂∂ 
GetRepository
∂∂ #
(
∂∂# $

repository
∂∂$ .
)
∂∂. /
.
∂∂/ 0 
ResetConfiguration
∂∂0 B
(
∂∂B C
)
∂∂C D
;
∂∂D E
}
∑∑ 
public
«« 
static
««	 
void
««  
ResetConfiguration
«« '
(
««' (
Assembly
««( 0 
repositoryAssembly
««1 C
)
««C D
{
»» 
if
…… 
(
……  
repositoryAssembly
…… 
==
…… 
null
…… !
)
……! "
{
   
throw
ÀÀ 	
new
ÀÀ
 #
ArgumentNullException
ÀÀ #
(
ÀÀ# $
$str
ÀÀ$ 8
)
ÀÀ8 9
;
ÀÀ9 :
}
ÃÃ  
RepositorySelector
ÕÕ 
.
ÕÕ 
GetRepository
ÕÕ #
(
ÕÕ# $ 
repositoryAssembly
ÕÕ$ 6
)
ÕÕ6 7
.
ÕÕ7 8 
ResetConfiguration
ÕÕ8 J
(
ÕÕJ K
)
ÕÕK L
;
ÕÕL M
}
ŒŒ 
[
„„ 
Obsolete
„„ 
(
„„ 
$str
„„ :
)
„„: ;
]
„„; <
public
‰‰ 
static
‰‰	 
ILoggerRepository
‰‰ !
CreateDomain
‰‰" .
(
‰‰. /
string
‰‰/ 5

repository
‰‰6 @
)
‰‰@ A
{
ÂÂ 
return
ÊÊ 	
CreateRepository
ÊÊ
 
(
ÊÊ 

repository
ÊÊ %
)
ÊÊ% &
;
ÊÊ& '
}
ÁÁ 
public
˘˘ 
static
˘˘	 
ILoggerRepository
˘˘ !
CreateRepository
˘˘" 2
(
˘˘2 3
string
˘˘3 9

repository
˘˘: D
)
˘˘D E
{
˙˙ 
if
˚˚ 
(
˚˚ 

repository
˚˚ 
==
˚˚ 
null
˚˚ 
)
˚˚ 
{
¸¸ 
throw
˝˝ 	
new
˝˝
 #
ArgumentNullException
˝˝ #
(
˝˝# $
$str
˝˝$ 0
)
˝˝0 1
;
˝˝1 2
}
˛˛ 
return
ˇˇ 	 
RepositorySelector
ˇˇ
 
.
ˇˇ 
CreateRepository
ˇˇ -
(
ˇˇ- .

repository
ˇˇ. 8
,
ˇˇ8 9
null
ˇˇ: >
)
ˇˇ> ?
;
ˇˇ? @
}
ÄÄ 
[
îî 
Obsolete
îî 
(
îî 
$str
îî :
)
îî: ;
]
îî; <
public
ïï 
static
ïï	 
ILoggerRepository
ïï !
CreateDomain
ïï" .
(
ïï. /
string
ïï/ 5

repository
ïï6 @
,
ïï@ A
Type
ïïB F
repositoryType
ïïG U
)
ïïU V
{
ññ 
return
óó 	
CreateRepository
óó
 
(
óó 

repository
óó %
,
óó% &
repositoryType
óó' 5
)
óó5 6
;
óó6 7
}
òò 
public
©© 
static
©©	 
ILoggerRepository
©© !
CreateRepository
©©" 2
(
©©2 3
string
©©3 9

repository
©©: D
,
©©D E
Type
©©F J
repositoryType
©©K Y
)
©©Y Z
{
™™ 
if
´´ 
(
´´ 

repository
´´ 
==
´´ 
null
´´ 
)
´´ 
{
¨¨ 
throw
≠≠ 	
new
≠≠
 #
ArgumentNullException
≠≠ #
(
≠≠# $
$str
≠≠$ 0
)
≠≠0 1
;
≠≠1 2
}
ÆÆ 
if
ØØ 
(
ØØ 
repositoryType
ØØ 
==
ØØ 
null
ØØ 
)
ØØ 
{
∞∞ 
throw
±± 	
new
±±
 #
ArgumentNullException
±± #
(
±±# $
$str
±±$ 4
)
±±4 5
;
±±5 6
}
≤≤ 
return
≥≥ 	 
RepositorySelector
≥≥
 
.
≥≥ 
CreateRepository
≥≥ -
(
≥≥- .

repository
≥≥. 8
,
≥≥8 9
repositoryType
≥≥: H
)
≥≥H I
;
≥≥I J
}
¥¥ 
[
»» 
Obsolete
»» 
(
»» 
$str
»» :
)
»»: ;
]
»»; <
public
…… 
static
……	 
ILoggerRepository
…… !
CreateDomain
……" .
(
……. /
Assembly
……/ 7 
repositoryAssembly
……8 J
,
……J K
Type
……L P
repositoryType
……Q _
)
……_ `
{
   
return
ÀÀ 	
CreateRepository
ÀÀ
 
(
ÀÀ  
repositoryAssembly
ÀÀ -
,
ÀÀ- .
repositoryType
ÀÀ/ =
)
ÀÀ= >
;
ÀÀ> ?
}
ÃÃ 
public
›› 
static
››	 
ILoggerRepository
›› !
CreateRepository
››" 2
(
››2 3
Assembly
››3 ; 
repositoryAssembly
››< N
,
››N O
Type
››P T
repositoryType
››U c
)
››c d
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ  
repositoryAssembly
ﬂﬂ 
==
ﬂﬂ 
null
ﬂﬂ !
)
ﬂﬂ! "
{
‡‡ 
throw
·· 	
new
··
 #
ArgumentNullException
·· #
(
··# $
$str
··$ 8
)
··8 9
;
··9 :
}
‚‚ 
if
„„ 
(
„„ 
repositoryType
„„ 
==
„„ 
null
„„ 
)
„„ 
{
‰‰ 
throw
ÂÂ 	
new
ÂÂ
 #
ArgumentNullException
ÂÂ #
(
ÂÂ# $
$str
ÂÂ$ 4
)
ÂÂ4 5
;
ÂÂ5 6
}
ÊÊ 
return
ÁÁ 	 
RepositorySelector
ÁÁ
 
.
ÁÁ 
CreateRepository
ÁÁ -
(
ÁÁ- . 
repositoryAssembly
ÁÁ. @
,
ÁÁ@ A
repositoryType
ÁÁB P
)
ÁÁP Q
;
ÁÁQ R
}
ËË 
public
ÛÛ 
static
ÛÛ	 
ILoggerRepository
ÛÛ !
[
ÛÛ! "
]
ÛÛ" # 
GetAllRepositories
ÛÛ$ 6
(
ÛÛ6 7
)
ÛÛ7 8
{
ÙÙ 
return
ıı 	 
RepositorySelector
ıı
 
.
ıı  
GetAllRepositories
ıı /
(
ıı/ 0
)
ıı0 1
;
ıı1 2
}
ˆˆ 
public
íí 
static
íí	 !
IRepositorySelector
íí # 
RepositorySelector
íí$ 6
{
ìì 
get
îî 
{
îî 
return
îî	 "
s_repositorySelector
îî $
;
îî$ %
}
îî& '
set
ïï 
{
ïï "
s_repositorySelector
ïï	 
=
ïï 
value
ïï  %
;
ïï% &
}
ïï' (
}
ññ 
private
†† 	
static
††
 
string
†† 
GetVersionInfo
†† &
(
††& '
)
††' (
{
°° 
System
¢¢ 	
.
¢¢	 

Text
¢¢
 
.
¢¢ 
StringBuilder
¢¢ 
sb
¢¢ 
=
¢¢  !
new
¢¢" %
System
¢¢& ,
.
¢¢, -
Text
¢¢- 1
.
¢¢1 2
StringBuilder
¢¢2 ?
(
¢¢? @
)
¢¢@ A
;
¢¢A B
Assembly
™™ 

myAssembly
™™ 
=
™™ 
Assembly
™™ !
.
™™! ""
GetExecutingAssembly
™™" 6
(
™™6 7
)
™™7 8
;
™™8 9
sb
´´ 
.
´´ 
Append
´´ 
(
´´ 
$str
´´ !
)
´´! "
.
´´" #
Append
´´# )
(
´´) *

myAssembly
´´* 4
.
´´4 5
FullName
´´5 =
)
´´= >
.
´´> ?
Append
´´? E
(
´´E F
$str
´´F K
)
´´K L
;
´´L M
sb
¨¨ 
.
¨¨ 
Append
¨¨ 
(
¨¨ 
$str
¨¨ 
)
¨¨ 
.
¨¨ 
Append
¨¨ $
(
¨¨$ %

SystemInfo
¨¨% /
.
¨¨/ 0"
AssemblyLocationInfo
¨¨0 D
(
¨¨D E

myAssembly
¨¨E O
)
¨¨O P
)
¨¨P Q
.
¨¨Q R
Append
¨¨R X
(
¨¨X Y
$str
¨¨Y ^
)
¨¨^ _
;
¨¨_ `
sb
≠≠ 
.
≠≠ 
Append
≠≠ 
(
≠≠ 
$str
≠≠ 
)
≠≠ 
.
≠≠  
Append
≠≠  &
(
≠≠& '
Environment
≠≠' 2
.
≠≠2 3
Version
≠≠3 :
.
≠≠: ;
ToString
≠≠; C
(
≠≠C D
)
≠≠D E
)
≠≠E F
.
≠≠F G
Append
≠≠G M
(
≠≠M N
$str
≠≠N Q
)
≠≠Q R
;
≠≠R S
sb
ØØ 
.
ØØ 
Append
ØØ 
(
ØØ 
$str
ØØ 
)
ØØ 
.
ØØ 
Append
ØØ $
(
ØØ$ %
Environment
ØØ% 0
.
ØØ0 1
	OSVersion
ØØ1 :
.
ØØ: ;
ToString
ØØ; C
(
ØØC D
)
ØØD E
)
ØØE F
;
ØØF G
sb
≤≤ 
.
≤≤ 
Append
≤≤ 
(
≤≤ 
$str
≤≤ 
)
≤≤ 
;
≤≤ 
return
≥≥ 	
sb
≥≥
 
.
≥≥ 
ToString
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
}
¥¥ 
private
ƒƒ 	
static
ƒƒ
 
void
ƒƒ 
OnDomainUnload
ƒƒ $
(
ƒƒ$ %
object
ƒƒ% +
sender
ƒƒ, 2
,
ƒƒ2 3
	EventArgs
ƒƒ4 =
e
ƒƒ> ?
)
ƒƒ? @
{
≈≈ 
Shutdown
∆∆ 
(
∆∆ 
)
∆∆ 
;
∆∆ 
}
«« 
private
÷÷ 	
static
÷÷
 
void
÷÷ 
OnProcessExit
÷÷ #
(
÷÷# $
object
÷÷$ *
sender
÷÷+ 1
,
÷÷1 2
	EventArgs
÷÷3 <
e
÷÷= >
)
÷÷> ?
{
◊◊ 
Shutdown
ÿÿ 
(
ÿÿ 
)
ÿÿ 
;
ÿÿ 
}
ŸŸ 
private
ÁÁ 
readonly
ÁÁ 
static
ÁÁ 
Type
ÁÁ !
declaringType
ÁÁ" /
=
ÁÁ0 1
typeof
ÁÁ2 8
(
ÁÁ8 9
LoggerManager
ÁÁ9 F
)
ÁÁF G
;
ÁÁG H
private
ÏÏ 	
static
ÏÏ
 !
IRepositorySelector
ÏÏ $"
s_repositorySelector
ÏÏ% 9
;
ÏÏ9 :
}
ÔÔ 
} Ì
AC:\sonarqube\projects\log4net-2.0.7\src\Core\LoggerWrapperImpl.cs
	namespace 	
log4net
 
. 
Core 
{ 
public   
abstract   
class   
LoggerWrapperImpl   (
:  ) *
ILoggerWrapper  + 9
{!! 
	protected-- 
LoggerWrapperImpl-- 
(-- 
ILogger-- %
logger--& ,
)--, -
{.. 
m_logger// 
=// 
logger// 
;// 
}00 
virtualFF 	
publicFF
 
ILoggerFF 
LoggerFF 
{GG 
getHH 
{HH 
returnHH	 
m_loggerHH 
;HH 
}HH 
}II 
privateRR 	
readonlyRR
 
ILoggerRR 
m_loggerRR #
;RR# $
}UU 
}VV €ˆ
<C:\sonarqube\projects\log4net-2.0.7\src\Core\LoggingEvent.cs
	namespace!! 	
log4net!!
 
.!! 
Core!! 
{"" 
public,, 
struct,, 
LoggingEventData,, 
{-- 
public88 
string88	 

LoggerName88 
;88 
publicDD 
LevelDD	 
LevelDD 
;DD 
publicNN 
stringNN	 
MessageNN 
;NN 
publicXX 
stringXX	 

ThreadNameXX 
;XX 
[bb 	
Obsoletebb	 
(bb 
$strbb z
)bbz {
]bb{ |
publiccc 
DateTimecc 
	TimeStampcc !
;cc! "
publicnn 
DateTimenn 
TimeStampUtcnn $
{oo 	
getpp 
{qq 
ifrr 
(rr 
	TimeStamprr 
!=rr  
defaultrr! (
(rr( )
DateTimerr) 1
)rr1 2
&&rr3 5
_timeStampUtcss !
==ss" $
defaultss% ,
(ss, -
DateTimess- 5
)ss5 6
)ss6 7
{tt 
returnww 
	TimeStampww $
.ww$ %
ToUniversalTimeww% 4
(ww4 5
)ww5 6
;ww6 7
}xx 
returnyy 
_timeStampUtcyy $
;yy$ %
}zz 
set{{ 
{|| 
_timeStampUtc}} 
=}} 
value}}  %
;}}% &
	TimeStamp 
= 
_timeStampUtc )
.) *
ToLocalTime* 5
(5 6
)6 7
;7 8
}
ÄÄ 
}
ÅÅ 	
private
ÇÇ 
DateTime
ÇÇ 
_timeStampUtc
ÇÇ &
;
ÇÇ& '
public
çç 
LocationInfo
çç	 
LocationInfo
çç "
;
çç" #
public
òò 
string
òò	 
UserName
òò 
;
òò 
public
¢¢ 
string
¢¢	 
Identity
¢¢ 
;
¢¢ 
public
¨¨ 
string
¨¨	 
ExceptionString
¨¨ 
;
¨¨  
public
∂∂ 
string
∂∂	 
Domain
∂∂ 
;
∂∂ 
public
¬¬ "
PropertiesDictionary
¬¬	 

Properties
¬¬ (
;
¬¬( )
}
≈≈ 
[
–– 
Flags
–– 
]
–– 
public
––	 
enum
–– 
FixFlags
–– 
{
—— 
[
’’ 
Obsolete
’’ 
(
’’ 
$str
’’ .
)
’’. /
]
’’/ 0
Mdc
÷÷ 
=
÷÷ 
$num
÷÷ 
,
÷÷ 
Ndc
€€ 
=
€€ 
$num
€€ 
,
€€ 
Message
‡‡ 	
=
‡‡
 
$num
‡‡ 
,
‡‡ 

ThreadName
ÂÂ 
=
ÂÂ 
$num
ÂÂ 
,
ÂÂ 
LocationInfo
ÌÌ 
=
ÌÌ 
$num
ÌÌ 
,
ÌÌ 
UserName
ıı 

=
ıı 
$num
ıı 
,
ıı 
Domain
˙˙ 
=
˙˙	 

$num
˙˙ 
,
˙˙ 
Identity
ÇÇ 

=
ÇÇ 
$num
ÇÇ 
,
ÇÇ 
	Exception
áá 
=
áá 
$num
áá 
,
áá 

Properties
åå 
=
åå 
$num
åå 
,
åå 
None
ëë 
=
ëë 
$num
ëë	 
,
ëë 
All
ññ 
=
ññ 
$num
ññ 
,
ññ 
Partial
ßß 	
=
ßß
 
Message
ßß 
|
ßß 

ThreadName
ßß  
|
ßß! "
	Exception
ßß# ,
|
ßß- .
Domain
ßß/ 5
|
ßß6 7

Properties
ßß8 B
,
ßßB C
}
®® 
[
∆∆ 
Serializable
∆∆ 
]
∆∆ 
public
»» 
class
»» 
LoggingEvent
»» 
:
   
ISerializable
   
{
ÃÃ 
private
ÕÕ 
readonly
ÕÕ 
static
ÕÕ 
Type
ÕÕ !
declaringType
ÕÕ" /
=
ÕÕ0 1
typeof
ÕÕ2 8
(
ÕÕ8 9
LoggingEvent
ÕÕ9 E
)
ÕÕE F
;
ÕÕF G
public
ÁÁ 
LoggingEvent
ÁÁ	 
(
ÁÁ 
Type
ÁÁ .
 callerStackBoundaryDeclaringType
ÁÁ ;
,
ÁÁ; <
log4net
ÁÁ= D
.
ÁÁD E

Repository
ÁÁE O
.
ÁÁO P
ILoggerRepository
ÁÁP a

repository
ÁÁb l
,
ÁÁl m
string
ÁÁn t

loggerName
ÁÁu 
,ÁÁ Ä
LevelÁÁÅ Ü
levelÁÁá å
,ÁÁå ç
objectÁÁé î
messageÁÁï ú
,ÁÁú ù
	ExceptionÁÁû ß
	exceptionÁÁ® ±
)ÁÁ± ≤
{
ËË 0
"m_callerStackBoundaryDeclaringType
ÈÈ %
=
ÈÈ& '.
 callerStackBoundaryDeclaringType
ÈÈ( H
;
ÈÈH I
	m_message
ÍÍ 
=
ÍÍ 
message
ÍÍ 
;
ÍÍ 
m_repository
ÎÎ 
=
ÎÎ 

repository
ÎÎ 
;
ÎÎ 
m_thrownException
ÏÏ 
=
ÏÏ 
	exception
ÏÏ  
;
ÏÏ  !
m_data
ÓÓ 	
.
ÓÓ	 


LoggerName
ÓÓ
 
=
ÓÓ 

loggerName
ÓÓ !
;
ÓÓ! "
m_data
ÔÔ 	
.
ÔÔ	 

Level
ÔÔ
 
=
ÔÔ 
level
ÔÔ 
;
ÔÔ 
m_data
ÚÚ 	
.
ÚÚ	 

TimeStampUtc
ÚÚ
 
=
ÚÚ 
DateTime
ÚÚ !
.
ÚÚ! "
UtcNow
ÚÚ" (
;
ÚÚ( )
}
ÛÛ 
public
éé 
LoggingEvent
éé	 
(
éé 
Type
éé .
 callerStackBoundaryDeclaringType
éé ;
,
éé; <
log4net
éé= D
.
ééD E

Repository
ééE O
.
ééO P
ILoggerRepository
ééP a

repository
ééb l
,
éél m
LoggingEventData
één ~
dataéé É
,ééÉ Ñ
FixFlagsééÖ ç
	fixedDataééé ó
)ééó ò
{
èè 0
"m_callerStackBoundaryDeclaringType
êê %
=
êê& '.
 callerStackBoundaryDeclaringType
êê( H
;
êêH I
m_repository
ëë 
=
ëë 

repository
ëë 
;
ëë 
m_data
ìì 	
=
ìì
 
data
ìì 
;
ìì 

m_fixFlags
îî 
=
îî 
	fixedData
îî 
;
îî 
}
ïï 
public
ØØ 
LoggingEvent
ØØ	 
(
ØØ 
Type
ØØ .
 callerStackBoundaryDeclaringType
ØØ ;
,
ØØ; <
log4net
ØØ= D
.
ØØD E

Repository
ØØE O
.
ØØO P
ILoggerRepository
ØØP a

repository
ØØb l
,
ØØl m
LoggingEventData
ØØn ~
dataØØ É
)ØØÉ Ñ
:ØØÖ Ü
thisØØá ã
(ØØã å0
 callerStackBoundaryDeclaringTypeØØå ¨
,ØØ¨ ≠

repositoryØØÆ ∏
,ØØ∏ π
dataØØ∫ æ
,ØØæ ø
FixFlagsØØ¿ »
.ØØ» …
AllØØ… Ã
)ØØÃ Õ
{
∞∞ 
}
±± 
public
»» 
LoggingEvent
»»	 
(
»» 
LoggingEventData
»» &
data
»»' +
)
»»+ ,
:
»»- .
this
»»/ 3
(
»»3 4
null
»»4 8
,
»»8 9
null
»»: >
,
»»> ?
data
»»@ D
)
»»D E
{
…… 
}
   
	protected
›› 
LoggingEvent
›› 
(
›› 
SerializationInfo
›› *
info
››+ /
,
››/ 0
StreamingContext
››1 A
context
››B I
)
››I J
{
ﬁﬁ 
m_data
ﬂﬂ 	
.
ﬂﬂ	 


LoggerName
ﬂﬂ
 
=
ﬂﬂ 
info
ﬂﬂ 
.
ﬂﬂ 
	GetString
ﬂﬂ %
(
ﬂﬂ% &
$str
ﬂﬂ& 2
)
ﬂﬂ2 3
;
ﬂﬂ3 4
m_data
ÊÊ 	
.
ÊÊ	 

Level
ÊÊ
 
=
ÊÊ 
(
ÊÊ 
Level
ÊÊ 
)
ÊÊ 
info
ÊÊ 
.
ÊÊ 
GetValue
ÊÊ &
(
ÊÊ& '
$str
ÊÊ' .
,
ÊÊ. /
typeof
ÊÊ0 6
(
ÊÊ6 7
Level
ÊÊ7 <
)
ÊÊ< =
)
ÊÊ= >
;
ÊÊ> ?
m_data
ËË 	
.
ËË	 

Message
ËË
 
=
ËË 
info
ËË 
.
ËË 
	GetString
ËË "
(
ËË" #
$str
ËË# ,
)
ËË, -
;
ËË- .
m_data
ÈÈ 	
.
ÈÈ	 


ThreadName
ÈÈ
 
=
ÈÈ 
info
ÈÈ 
.
ÈÈ 
	GetString
ÈÈ %
(
ÈÈ% &
$str
ÈÈ& 2
)
ÈÈ2 3
;
ÈÈ3 4
m_data
ÍÍ 	
.
ÍÍ	 

TimeStampUtc
ÍÍ
 
=
ÍÍ 
info
ÍÍ 
.
ÍÍ 
GetDateTime
ÍÍ )
(
ÍÍ) *
$str
ÍÍ* 5
)
ÍÍ5 6
.
ÍÍ6 7
ToUniversalTime
ÍÍ7 F
(
ÍÍF G
)
ÍÍG H
;
ÍÍH I
m_data
ÎÎ 	
.
ÎÎ	 

LocationInfo
ÎÎ
 
=
ÎÎ 
(
ÎÎ 
LocationInfo
ÎÎ &
)
ÎÎ& '
info
ÎÎ( ,
.
ÎÎ, -
GetValue
ÎÎ- 5
(
ÎÎ5 6
$str
ÎÎ6 D
,
ÎÎD E
typeof
ÎÎF L
(
ÎÎL M
LocationInfo
ÎÎM Y
)
ÎÎY Z
)
ÎÎZ [
;
ÎÎ[ \
m_data
ÏÏ 	
.
ÏÏ	 

UserName
ÏÏ
 
=
ÏÏ 
info
ÏÏ 
.
ÏÏ 
	GetString
ÏÏ #
(
ÏÏ# $
$str
ÏÏ$ .
)
ÏÏ. /
;
ÏÏ/ 0
m_data
ÌÌ 	
.
ÌÌ	 

ExceptionString
ÌÌ
 
=
ÌÌ 
info
ÌÌ  
.
ÌÌ  !
	GetString
ÌÌ! *
(
ÌÌ* +
$str
ÌÌ+ <
)
ÌÌ< =
;
ÌÌ= >
m_data
ÓÓ 	
.
ÓÓ	 


Properties
ÓÓ
 
=
ÓÓ 
(
ÓÓ "
PropertiesDictionary
ÓÓ ,
)
ÓÓ, -
info
ÓÓ. 2
.
ÓÓ2 3
GetValue
ÓÓ3 ;
(
ÓÓ; <
$str
ÓÓ< H
,
ÓÓH I
typeof
ÓÓJ P
(
ÓÓP Q"
PropertiesDictionary
ÓÓQ e
)
ÓÓe f
)
ÓÓf g
;
ÓÓg h
m_data
ÔÔ 	
.
ÔÔ	 

Domain
ÔÔ
 
=
ÔÔ 
info
ÔÔ 
.
ÔÔ 
	GetString
ÔÔ !
(
ÔÔ! "
$str
ÔÔ" *
)
ÔÔ* +
;
ÔÔ+ ,
m_data
 	
.
	 

Identity

 
=
 
info
 
.
 
	GetString
 #
(
# $
$str
$ .
)
. /
;
/ 0

m_fixFlags
ÙÙ 
=
ÙÙ 
FixFlags
ÙÙ 
.
ÙÙ 
All
ÙÙ 
;
ÙÙ 
}
ıı 
public
íí 
static
íí	 
DateTime
íí 
	StartTime
íí "
{
ìì 
get
îî 
{
îî 
return
îî	 

SystemInfo
îî 
.
îî !
ProcessStartTimeUtc
îî .
.
îî. /
ToLocalTime
îî/ :
(
îî: ;
)
îî; <
;
îî< =
}
îî> ?
}
ïï 
public
©© 
static
©© 
DateTime
©© 
StartTimeUtc
©© +
{
™™ 	
get
´´ 
{
´´ 
return
´´ 

SystemInfo
´´ #
.
´´# $!
ProcessStartTimeUtc
´´$ 7
;
´´7 8
}
´´9 :
}
¨¨ 
public
ππ 
Level
ππ	 
Level
ππ 
{
∫∫ 
get
ªª 
{
ªª 
return
ªª	 
m_data
ªª 
.
ªª 
Level
ªª 
;
ªª 
}
ªª 
}
ºº 
public
…… 
DateTime
……	 
	TimeStamp
…… 
{
   
get
ÀÀ 
{
ÀÀ 
return
ÀÀ	 
m_data
ÀÀ 
.
ÀÀ 
TimeStampUtc
ÀÀ #
.
ÀÀ# $
ToLocalTime
ÀÀ$ /
(
ÀÀ/ 0
)
ÀÀ0 1
;
ÀÀ1 2
}
ÀÀ3 4
}
ÃÃ 
public
‘‘ 
DateTime
‘‘ 
TimeStampUtc
‘‘ $
{
’’ 	
get
÷÷ 
{
÷÷ 
return
÷÷ 
m_data
÷÷ 
.
÷÷  
TimeStampUtc
÷÷  ,
;
÷÷, -
}
÷÷. /
}
◊◊ 
public
‰‰ 
string
‰‰	 

LoggerName
‰‰ 
{
ÂÂ 
get
ÊÊ 
{
ÊÊ 
return
ÊÊ	 
m_data
ÊÊ 
.
ÊÊ 

LoggerName
ÊÊ !
;
ÊÊ! "
}
ÊÊ# $
}
ÁÁ 
public
˘˘ 
LocationInfo
˘˘	 !
LocationInformation
˘˘ )
{
˙˙ 
get
˚˚ 
{
¸¸ 
if
˝˝ 
(
˝˝ 
m_data
˝˝ 
.
˝˝ 
LocationInfo
˝˝ 
==
˝˝ 
null
˝˝ #
&&
˝˝% '
this
˝˝( ,
.
˝˝, -
m_cacheUpdatable
˝˝- =
)
˝˝= >
{
˛˛ 
m_data
ˇˇ 
.
ˇˇ 
LocationInfo
ˇˇ 
=
ˇˇ 
new
ˇˇ 
LocationInfo
ˇˇ +
(
ˇˇ+ ,0
"m_callerStackBoundaryDeclaringType
ˇˇ, N
)
ˇˇN O
;
ˇˇO P
}
ÄÄ 
return
ÅÅ 

m_data
ÅÅ 
.
ÅÅ 
LocationInfo
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}
ÉÉ 
public
ôô 
object
ôô	 
MessageObject
ôô 
{
öö 
get
õõ 
{
õõ 
return
õõ	 
	m_message
õõ 
;
õõ 
}
õõ 
}
úú 
public
≤≤ 
	Exception
≤≤	 
ExceptionObject
≤≤ "
{
≥≥ 
get
¥¥ 
{
¥¥ 
return
¥¥	 
m_thrownException
¥¥ !
;
¥¥! "
}
¥¥# $
}
µµ 
public
øø 
ILoggerRepository
øø	 

Repository
øø %
{
¿¿ 
get
¡¡ 
{
¡¡ 
return
¡¡	 
m_repository
¡¡ 
;
¡¡ 
}
¡¡ 
}
¬¬ 
internal
»» 

void
»» 
EnsureRepository
»»  
(
»»  !
ILoggerRepository
»»! 2

repository
»»3 =
)
»»= >
{
…… 
if
   
(
   

repository
   
!=
   
null
   
)
   
{
ÀÀ 
m_repository
ÃÃ 
=
ÃÃ 

repository
ÃÃ 
;
ÃÃ 
}
ÕÕ 
}
ŒŒ 
public
€€ 
string
€€	 
RenderedMessage
€€ 
{
‹‹ 
get
›› 
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
m_data
ﬂﬂ 
.
ﬂﬂ 
Message
ﬂﬂ 
==
ﬂﬂ 
null
ﬂﬂ 
&&
ﬂﬂ !
this
ﬂﬂ" &
.
ﬂﬂ& '
m_cacheUpdatable
ﬂﬂ' 7
)
ﬂﬂ7 8
{
‡‡ 
if
·· 
(
·· 	
	m_message
··	 
==
·· 
null
·· 
)
·· 
{
‚‚ 
m_data
„„ 
.
„„ 
Message
„„ 
=
„„ 
$str
„„ 
;
„„ 
}
‰‰ 
else
ÂÂ 	
if
ÂÂ
 
(
ÂÂ 
	m_message
ÂÂ 
is
ÂÂ 
string
ÂÂ !
)
ÂÂ! "
{
ÊÊ 
m_data
ÁÁ 
.
ÁÁ 
Message
ÁÁ 
=
ÁÁ 
(
ÁÁ 
	m_message
ÁÁ !
as
ÁÁ" $
string
ÁÁ% +
)
ÁÁ+ ,
;
ÁÁ, -
}
ËË 
else
ÈÈ 	
if
ÈÈ
 
(
ÈÈ 
m_repository
ÈÈ 
!=
ÈÈ 
null
ÈÈ "
)
ÈÈ" #
{
ÍÍ 
m_data
ÎÎ 
.
ÎÎ 
Message
ÎÎ 
=
ÎÎ 
m_repository
ÎÎ #
.
ÎÎ# $
RendererMap
ÎÎ$ /
.
ÎÎ/ 0
FindAndRender
ÎÎ0 =
(
ÎÎ= >
	m_message
ÎÎ> G
)
ÎÎG H
;
ÎÎH I
}
ÏÏ 
else
ÌÌ 	
{
ÓÓ 
m_data
 
.
 
Message
 
=
 
	m_message
  
.
  !
ToString
! )
(
) *
)
* +
;
+ ,
}
ÒÒ 
}
ÚÚ 
return
ÛÛ 

m_data
ÛÛ 
.
ÛÛ 
Message
ÛÛ 
;
ÛÛ 
}
ÙÙ 
}
ıı 
public
ÑÑ 
void
ÑÑ	 "
WriteRenderedMessage
ÑÑ "
(
ÑÑ" #

TextWriter
ÑÑ# -
writer
ÑÑ. 4
)
ÑÑ4 5
{
ÖÖ 
if
ÜÜ 
(
ÜÜ 
m_data
ÜÜ 
.
ÜÜ 
Message
ÜÜ 
!=
ÜÜ 
null
ÜÜ 
)
ÜÜ 
{
áá 
writer
àà 

.
àà
 
Write
àà 
(
àà 
m_data
àà 
.
àà 
Message
àà 
)
àà  
;
àà  !
}
ââ 
else
ää 
{
ãã 
if
åå 
(
åå 
	m_message
åå 
!=
åå 
null
åå 
)
åå 
{
çç 
if
éé 
(
éé 	
	m_message
éé	 
is
éé 
string
éé 
)
éé 
{
èè 
writer
êê 
.
êê 
Write
êê 
(
êê 
	m_message
êê 
as
êê 
string
êê  &
)
êê& '
;
êê' (
}
ëë 
else
íí 	
if
íí
 
(
íí 
m_repository
íí 
!=
íí 
null
íí "
)
íí" #
{
ìì 
m_repository
îî 
.
îî 
RendererMap
îî 
.
îî 
FindAndRender
îî ,
(
îî, -
	m_message
îî- 6
,
îî6 7
writer
îî8 >
)
îî> ?
;
îî? @
}
ïï 
else
ññ 	
{
óó 
writer
ôô 
.
ôô 
Write
ôô 
(
ôô 
	m_message
ôô 
.
ôô 
ToString
ôô %
(
ôô% &
)
ôô& '
)
ôô' (
;
ôô( )
}
öö 
}
õõ 
}
úú 
}
ùù 
public
´´ 
string
´´	 

ThreadName
´´ 
{
¨¨ 
get
≠≠ 
{
ÆÆ 
if
ØØ 
(
ØØ 
m_data
ØØ 
.
ØØ 

ThreadName
ØØ 
==
ØØ 
null
ØØ !
&&
ØØ" $
this
ØØ% )
.
ØØ) *
m_cacheUpdatable
ØØ* :
)
ØØ: ;
{
∞∞ 
m_data
µµ 
.
µµ 

ThreadName
µµ 
=
µµ 
System
µµ 
.
µµ  
	Threading
µµ  )
.
µµ) *
Thread
µµ* 0
.
µµ0 1
CurrentThread
µµ1 >
.
µµ> ?
Name
µµ? C
;
µµC D
if
∂∂ 
(
∂∂ 	
m_data
∂∂	 
.
∂∂ 

ThreadName
∂∂ 
==
∂∂ 
null
∂∂ "
||
∂∂# %
m_data
∂∂& ,
.
∂∂, -

ThreadName
∂∂- 7
.
∂∂7 8
Length
∂∂8 >
==
∂∂? A
$num
∂∂B C
)
∂∂C D
{
∑∑ 
try
ªª 	
{
ºº 
m_data
ΩΩ 
.
ΩΩ 

ThreadName
ΩΩ 
=
ΩΩ 

SystemInfo
ΩΩ %
.
ΩΩ% &
CurrentThreadId
ΩΩ& 5
.
ΩΩ5 6
ToString
ΩΩ6 >
(
ΩΩ> ?
System
ΩΩ? E
.
ΩΩE F
Globalization
ΩΩF S
.
ΩΩS T
NumberFormatInfo
ΩΩT d
.
ΩΩd e
InvariantInfo
ΩΩe r
)
ΩΩr s
;
ΩΩs t
}
ææ 
catch
øø 
(
øø 
System
øø 
.
øø 
Security
øø 
.
øø 
SecurityException
øø -
)
øø- .
{
¿¿ 
LogLog
√√ 
.
√√ 
Debug
√√ 
(
√√ 
declaringType
√√ !
,
√√! "
$str√√# Ä
)√√Ä Å
;√√Å Ç
m_data
∆∆ 
.
∆∆ 

ThreadName
∆∆ 
=
∆∆ 
System
∆∆ !
.
∆∆! "
	Threading
∆∆" +
.
∆∆+ ,
Thread
∆∆, 2
.
∆∆2 3
CurrentThread
∆∆3 @
.
∆∆@ A
GetHashCode
∆∆A L
(
∆∆L M
)
∆∆M N
.
∆∆N O
ToString
∆∆O W
(
∆∆W X
System
∆∆X ^
.
∆∆^ _
Globalization
∆∆_ l
.
∆∆l m
CultureInfo
∆∆m x
.
∆∆x y
InvariantCulture∆∆y â
)∆∆â ä
;∆∆ä ã
}
«« 
}
»» 
}
   
return
ÀÀ 

m_data
ÀÀ 
.
ÀÀ 

ThreadName
ÀÀ 
;
ÀÀ 
}
ÃÃ 
}
ÕÕ 
public
˛˛ 
string
˛˛	 
UserName
˛˛ 
{
ˇˇ 
get
ÄÄ 
{
ÅÅ 
if
ÇÇ 
(
ÇÇ 
m_data
ÇÇ 
.
ÇÇ 
UserName
ÇÇ 
==
ÇÇ 
null
ÇÇ 
&&
ÇÇ! #
this
ÇÇ$ (
.
ÇÇ( )
m_cacheUpdatable
ÇÇ) 9
)
ÇÇ9 :
{
ÉÉ 
try
àà 
{
ââ 
WindowsIdentity
ää 
windowsIdentity
ää %
=
ää& '
WindowsIdentity
ää( 7
.
ää7 8

GetCurrent
ää8 B
(
ääB C
)
ääC D
;
ääD E
if
ãã 
(
ãã	 

windowsIdentity
ãã
 
!=
ãã 
null
ãã !
&&
ãã" $
windowsIdentity
ãã% 4
.
ãã4 5
Name
ãã5 9
!=
ãã: <
null
ãã= A
)
ããA B
{
åå 
m_data
çç 
.
çç 
UserName
çç 
=
çç 
windowsIdentity
çç (
.
çç( )
Name
çç) -
;
çç- .
}
éé 
else
èè 

{
êê 
m_data
ëë 
.
ëë 
UserName
ëë 
=
ëë 
$str
ëë 
;
ëë 
}
íí 
}
ìì 
catch
îî 

(
îî
 
System
îî 
.
îî 
Security
îî 
.
îî 
SecurityException
îî ,
)
îî, -
{
ïï 
LogLog
òò 
.
òò 
Debug
òò 
(
òò 
declaringType
òò  
,
òò  !
$stròò" Ñ
)òòÑ Ö
;òòÖ Ü
m_data
öö 
.
öö 
UserName
öö 
=
öö 
$str
öö 
;
öö 
}
õõ 
}
ùù 
return
ûû 

m_data
ûû 
.
ûû 
UserName
ûû 
;
ûû 
}
üü 
}
†† 
public
ÆÆ 
string
ÆÆ	 
Identity
ÆÆ 
{
ØØ 
get
∞∞ 
{
±± 
if
≤≤ 
(
≤≤ 
m_data
≤≤ 
.
≤≤ 
Identity
≤≤ 
==
≤≤ 
null
≤≤ 
&&
≤≤! #
this
≤≤$ (
.
≤≤( )
m_cacheUpdatable
≤≤) 9
)
≤≤9 :
{
≥≥ 
try
∏∏ 
{
ππ 
if
∫∫ 
(
∫∫	 

System
∫∫
 
.
∫∫ 
	Threading
∫∫ 
.
∫∫ 
Thread
∫∫ !
.
∫∫! "
CurrentPrincipal
∫∫" 2
!=
∫∫3 5
null
∫∫6 :
&&
∫∫; =
System
ªª 
.
ªª 
	Threading
ªª 
.
ªª 
Thread
ªª 
.
ªª 
CurrentPrincipal
ªª /
.
ªª/ 0
Identity
ªª0 8
!=
ªª9 ;
null
ªª< @
&&
ªªA C
System
ºº 
.
ºº 
	Threading
ºº 
.
ºº 
Thread
ºº 
.
ºº 
CurrentPrincipal
ºº /
.
ºº/ 0
Identity
ºº0 8
.
ºº8 9
Name
ºº9 =
!=
ºº> @
null
ººA E
)
ººE F
{
ΩΩ 
m_data
ææ 
.
ææ 
Identity
ææ 
=
ææ 
System
ææ 
.
ææ  
	Threading
ææ  )
.
ææ) *
Thread
ææ* 0
.
ææ0 1
CurrentPrincipal
ææ1 A
.
ææA B
Identity
ææB J
.
ææJ K
Name
ææK O
;
ææO P
}
øø 
else
¿¿ 

{
¡¡ 
m_data
¬¬ 
.
¬¬ 
Identity
¬¬ 
=
¬¬ 
$str
¬¬ 
;
¬¬ 
}
√√ 
}
ƒƒ 
catch
≈≈ 

(
≈≈ %
ObjectDisposedException
≈≈ #
)
≈≈# $
{
∆∆ 
LogLog
   
.
   
Debug
   
(
   
declaringType
    
,
    !
$str  " è
)  è ê
;  ê ë
m_data
ÃÃ 
.
ÃÃ 
Identity
ÃÃ 
=
ÃÃ 
$str
ÃÃ 
;
ÃÃ 
}
ÕÕ 
catch
ŒŒ 

(
ŒŒ 
System
ŒŒ 
.
ŒŒ 
Security
ŒŒ 
.
ŒŒ 
SecurityException
ŒŒ -
)
ŒŒ- .
{
œœ 
LogLog
““ 
.
““ 
Debug
““ 
(
““ 
declaringType
““  
,
““  !
$str““" à
)““à â
;““â ä
m_data
‘‘ 
.
‘‘ 
Identity
‘‘ 
=
‘‘ 
$str
‘‘ 
;
‘‘ 
}
’’ 
}
◊◊ 
return
ÿÿ 

m_data
ÿÿ 
.
ÿÿ 
Identity
ÿÿ 
;
ÿÿ 
}
ŸŸ 
}
⁄⁄ 
public
ÁÁ 
string
ÁÁ	 
Domain
ÁÁ 
{
ËË 
get
ÈÈ 
{
ÍÍ 
if
ÎÎ 
(
ÎÎ 
m_data
ÎÎ 
.
ÎÎ 
Domain
ÎÎ 
==
ÎÎ 
null
ÎÎ 
&&
ÎÎ !
this
ÎÎ" &
.
ÎÎ& '
m_cacheUpdatable
ÎÎ' 7
)
ÎÎ7 8
{
ÏÏ 
m_data
ÌÌ 
.
ÌÌ 
Domain
ÌÌ 
=
ÌÌ 

SystemInfo
ÌÌ 
.
ÌÌ  %
ApplicationFriendlyName
ÌÌ  7
;
ÌÌ7 8
}
ÓÓ 
return
ÔÔ 

m_data
ÔÔ 
.
ÔÔ 
Domain
ÔÔ 
;
ÔÔ 
}
 
}
ÒÒ 
public
çç "
PropertiesDictionary
çç	 

Properties
çç (
{
éé 
get
èè 
{
êê 
if
íí 
(
íí 
m_data
íí 
.
íí 

Properties
íí 
!=
íí 
null
íí !
)
íí! "
{
ìì 
return
îî 
m_data
îî 
.
îî 

Properties
îî 
;
îî 
}
ïï 
if
óó 
(
óó 
m_eventProperties
óó 
==
óó 
null
óó !
)
óó! "
{
òò 
m_eventProperties
ôô 
=
ôô 
new
ôô "
PropertiesDictionary
ôô 1
(
ôô1 2
)
ôô2 3
;
ôô3 4
}
öö 
return
õõ 

m_eventProperties
õõ 
;
õõ 
}
úú 
}
ùù 
public
´´ 
FixFlags
´´	 
Fix
´´ 
{
¨¨ 
get
≠≠ 
{
≠≠ 
return
≠≠	 

m_fixFlags
≠≠ 
;
≠≠ 
}
≠≠ 
set
ÆÆ 
{
ÆÆ 
this
ÆÆ	 
.
ÆÆ 
FixVolatileData
ÆÆ 
(
ÆÆ 
value
ÆÆ #
)
ÆÆ# $
;
ÆÆ$ %
}
ÆÆ& '
}
ØØ 
[
«« 	
System
««	 
.
«« 
Security
«« 
.
«« 
SecurityCritical
«« )
]
««) *
public
ÀÀ 
virtual
ÀÀ	 
void
ÀÀ 
GetObjectData
ÀÀ #
(
ÀÀ# $
SerializationInfo
ÀÀ$ 5
info
ÀÀ6 :
,
ÀÀ: ;
StreamingContext
ÀÀ< L
context
ÀÀM T
)
ÀÀT U
{
ÃÃ 
info
–– 
.
–– 
AddValue
–– 
(
–– 
$str
–– 
,
–– 
m_data
–– %
.
––% &

LoggerName
––& 0
)
––0 1
;
––1 2
info
—— 
.
—— 
AddValue
—— 
(
—— 
$str
—— 
,
—— 
m_data
——  
.
——  !
Level
——! &
)
——& '
;
——' (
info
““ 
.
““ 
AddValue
““ 
(
““ 
$str
““ 
,
““ 
m_data
““ "
.
““" #
Message
““# *
)
““* +
;
““+ ,
info
”” 
.
”” 
AddValue
”” 
(
”” 
$str
”” 
,
”” 
m_data
”” %
.
””% &

ThreadName
””& 0
)
””0 1
;
””1 2
info
ÿÿ 
.
ÿÿ 
AddValue
ÿÿ 
(
ÿÿ 
$str
ÿÿ 
,
ÿÿ 
m_data
ÿÿ $
.
ÿÿ$ %
	TimeStamp
ÿÿ% .
)
ÿÿ. /
;
ÿÿ/ 0
info
⁄⁄ 
.
⁄⁄ 
AddValue
⁄⁄ 
(
⁄⁄ 
$str
⁄⁄ (
,
⁄⁄( )
m_data
⁄⁄* 0
.
⁄⁄0 1
LocationInfo
⁄⁄1 =
)
⁄⁄= >
;
⁄⁄> ?
info
€€ 
.
€€ 
AddValue
€€ 
(
€€ 
$str
€€ 
,
€€ 
m_data
€€ #
.
€€# $
UserName
€€$ ,
)
€€, -
;
€€- .
info
‹‹ 
.
‹‹ 
AddValue
‹‹ 
(
‹‹ 
$str
‹‹ "
,
‹‹" #
m_data
‹‹$ *
.
‹‹* +
ExceptionString
‹‹+ :
)
‹‹: ;
;
‹‹; <
info
›› 
.
›› 
AddValue
›› 
(
›› 
$str
›› 
,
›› 
m_data
›› %
.
››% &

Properties
››& 0
)
››0 1
;
››1 2
info
ﬁﬁ 
.
ﬁﬁ 
AddValue
ﬁﬁ 
(
ﬁﬁ 
$str
ﬁﬁ 
,
ﬁﬁ 
m_data
ﬁﬁ !
.
ﬁﬁ! "
Domain
ﬁﬁ" (
)
ﬁﬁ( )
;
ﬁﬁ) *
info
ﬂﬂ 
.
ﬂﬂ 
AddValue
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ 
,
ﬂﬂ 
m_data
ﬂﬂ #
.
ﬂﬂ# $
Identity
ﬂﬂ$ ,
)
ﬂﬂ, -
;
ﬂﬂ- .
}
‡‡ 
public
ˆˆ 
LoggingEventData
ˆˆ	 !
GetLoggingEventData
ˆˆ -
(
ˆˆ- .
)
ˆˆ. /
{
˜˜ 
return
¯¯ 	!
GetLoggingEventData
¯¯
 
(
¯¯ 
FixFlags
¯¯ &
.
¯¯& '
Partial
¯¯' .
)
¯¯. /
;
¯¯/ 0
}
˘˘ 
public
Ü	Ü	 
LoggingEventData
Ü	Ü		 !
GetLoggingEventData
Ü	Ü	 -
(
Ü	Ü	- .
FixFlags
Ü	Ü	. 6
fixFlags
Ü	Ü	7 ?
)
Ü	Ü	? @
{
á	á	 
Fix
à	à	 
=
à	à	 
fixFlags
à	à		 
;
à	à	 
return
â	â	 	
m_data
â	â	
 
;
â	â	 
}
ä	ä	 
[
ò	ò	 
Obsolete
ò	ò	 
(
ò	ò	 
$str
ò	ò	 ,
)
ò	ò	, -
]
ò	ò	- .
public
ô	ô	 
string
ô	ô		  
GetExceptionStrRep
ô	ô	 "
(
ô	ô	" #
)
ô	ô	# $
{
ö	ö	 
return
õ	õ	 	 
GetExceptionString
õ	õ	
 
(
õ	õ	 
)
õ	õ	 
;
õ	õ	 
}
ú	ú	 
public
´	´	 
string
´	´		  
GetExceptionString
´	´	 "
(
´	´	" #
)
´	´	# $
{
¨	¨	 
if
≠	≠	 
(
≠	≠	 
m_data
≠	≠	 
.
≠	≠	 
ExceptionString
≠	≠	 
==
≠	≠	  
null
≠	≠	! %
&&
≠	≠	' )
this
≠	≠	* .
.
≠	≠	. /
m_cacheUpdatable
≠	≠	/ ?
)
≠	≠	? @
{
Æ	Æ	 
if
Ø	Ø	 
(
Ø	Ø	 
m_thrownException
Ø	Ø	 
!=
Ø	Ø	 
null
Ø	Ø	 !
)
Ø	Ø	! "
{
∞	∞	 
if
±	±	 
(
±	±	 	
m_repository
±	±		 
!=
±	±	 
null
±	±	 
)
±	±	 
{
≤	≤	 
m_data
¥	¥	 
.
¥	¥	 
ExceptionString
¥	¥	 
=
¥	¥	 
m_repository
¥	¥	 +
.
¥	¥	+ ,
RendererMap
¥	¥	, 7
.
¥	¥	7 8
FindAndRender
¥	¥	8 E
(
¥	¥	E F
m_thrownException
¥	¥	F W
)
¥	¥	W X
;
¥	¥	X Y
}
µ	µ	 
else
∂	∂	 	
{
∑	∑	 
m_data
π	π	 
.
π	π	 
ExceptionString
π	π	 
=
π	π	 
m_thrownException
π	π	 0
.
π	π	0 1
ToString
π	π	1 9
(
π	π	9 :
)
π	π	: ;
;
π	π	; <
}
∫	∫	 
}
ª	ª	 
else
º	º	 
{
Ω	Ω	 
m_data
æ	æ	 
.
æ	æ	 
ExceptionString
æ	æ	 
=
æ	æ	 
$str
æ	æ	  
;
æ	æ	  !
}
ø	ø	 
}
¿	¿	 
return
¡	¡	 	
m_data
¡	¡	
 
.
¡	¡	 
ExceptionString
¡	¡	  
;
¡	¡	  !
}
¬	¬	 
[
‹	‹	 
Obsolete
‹	‹	 
(
‹	‹	 
$str
‹	‹	 
)
‹	‹	 
]
‹	‹	  
public
›	›	 
void
›	›		 
FixVolatileData
›	›	 
(
›	›	 
)
›	›	 
{
ﬁ	ﬁ	 
Fix
ﬂ	ﬂ	 
=
ﬂ	ﬂ	 
FixFlags
ﬂ	ﬂ		 
.
ﬂ	ﬂ	 
All
ﬂ	ﬂ	 
;
ﬂ	ﬂ	 
}
‡	‡	 
[
˛	˛	 
Obsolete
˛	˛	 
(
˛	˛	 
$str
˛	˛	 
)
˛	˛	 
]
˛	˛	  
public
ˇ	ˇ	 
void
ˇ	ˇ		 
FixVolatileData
ˇ	ˇ	 
(
ˇ	ˇ	 
bool
ˇ	ˇ	 "
fastButLoose
ˇ	ˇ	# /
)
ˇ	ˇ	/ 0
{
Ä
Ä
 
if
Å
Å
 
(
Å
Å
 
fastButLoose
Å
Å
 
)
Å
Å
 
{
Ç
Ç
 
Fix
É
É
 
=
É
É
 	
FixFlags
É
É

 
.
É
É
 
Partial
É
É
 
;
É
É
 
}
Ñ
Ñ
 
else
Ö
Ö
 
{
Ü
Ü
 
Fix
á
á
 
=
á
á
 	
FixFlags
á
á

 
.
á
á
 
All
á
á
 
;
á
á
 
}
à
à
 
}
â
â
 
	protected
ñ
ñ
 
void
ñ
ñ
 
FixVolatileData
ñ
ñ
  
(
ñ
ñ
  !
FixFlags
ñ
ñ
! )
flags
ñ
ñ
* /
)
ñ
ñ
/ 0
{
ó
ó
 
object
ò
ò
 	
forceCreation
ò
ò

 
=
ò
ò
 
null
ò
ò
 
;
ò
ò
 
m_cacheUpdatable
ù
ù
 
=
ù
ù
 
true
ù
ù
 
;
ù
ù
 
FixFlags
†
†
 
updateFlags
†
†
 
=
†
†
 
(
†
†
 
FixFlags
†
†
 #
)
†
†
# $
(
†
†
$ %
(
†
†
% &
flags
†
†
& +
^
†
†
, -

m_fixFlags
†
†
. 8
)
†
†
8 9
&
†
†
: ;
flags
†
†
< A
)
†
†
A B
;
†
†
B C
if
¢
¢
 
(
¢
¢
 
updateFlags
¢
¢
 
>
¢
¢
 
$num
¢
¢
 
)
¢
¢
 
{
£
£
 
if
§
§
 
(
§
§
 
(
§
§
 	
updateFlags
§
§
	 
&
§
§
 
FixFlags
§
§
 
.
§
§
  
Message
§
§
  '
)
§
§
' (
!=
§
§
) +
$num
§
§
, -
)
§
§
- .
{
•
•
 
forceCreation
ß
ß
 
=
ß
ß
 
this
ß
ß
 
.
ß
ß
 
RenderedMessage
ß
ß
 )
;
ß
ß
) *

m_fixFlags
©
©
 
|=
©
©
 
FixFlags
©
©
 
.
©
©
 
Message
©
©
 #
;
©
©
# $
}
™
™
 
if
´
´
 
(
´
´
 
(
´
´
 	
updateFlags
´
´
	 
&
´
´
 
FixFlags
´
´
 
.
´
´
  

ThreadName
´
´
  *
)
´
´
* +
!=
´
´
, .
$num
´
´
/ 0
)
´
´
0 1
{
¨
¨
 
forceCreation
Æ
Æ
 
=
Æ
Æ
 
this
Æ
Æ
 
.
Æ
Æ
 

ThreadName
Æ
Æ
 $
;
Æ
Æ
$ %

m_fixFlags
∞
∞
 
|=
∞
∞
 
FixFlags
∞
∞
 
.
∞
∞
 

ThreadName
∞
∞
 &
;
∞
∞
& '
}
±
±
 
if
≥
≥
 
(
≥
≥
 
(
≥
≥
 	
updateFlags
≥
≥
	 
&
≥
≥
 
FixFlags
≥
≥
 
.
≥
≥
  
LocationInfo
≥
≥
  ,
)
≥
≥
, -
!=
≥
≥
. 0
$num
≥
≥
1 2
)
≥
≥
2 3
{
¥
¥
 
forceCreation
∂
∂
 
=
∂
∂
 
this
∂
∂
 
.
∂
∂
 !
LocationInformation
∂
∂
 -
;
∂
∂
- .

m_fixFlags
∏
∏
 
|=
∏
∏
 
FixFlags
∏
∏
 
.
∏
∏
 
LocationInfo
∏
∏
 (
;
∏
∏
( )
}
π
π
 
if
∫
∫
 
(
∫
∫
 
(
∫
∫
 	
updateFlags
∫
∫
	 
&
∫
∫
 
FixFlags
∫
∫
 
.
∫
∫
  
UserName
∫
∫
  (
)
∫
∫
( )
!=
∫
∫
* ,
$num
∫
∫
- .
)
∫
∫
. /
{
ª
ª
 
forceCreation
Ω
Ω
 
=
Ω
Ω
 
this
Ω
Ω
 
.
Ω
Ω
 
UserName
Ω
Ω
 "
;
Ω
Ω
" #

m_fixFlags
ø
ø
 
|=
ø
ø
 
FixFlags
ø
ø
 
.
ø
ø
 
UserName
ø
ø
 $
;
ø
ø
$ %
}
¿
¿
 
if
¡
¡
 
(
¡
¡
 
(
¡
¡
 	
updateFlags
¡
¡
	 
&
¡
¡
 
FixFlags
¡
¡
 
.
¡
¡
  
Domain
¡
¡
  &
)
¡
¡
& '
!=
¡
¡
( *
$num
¡
¡
+ ,
)
¡
¡
, -
{
¬
¬
 
forceCreation
ƒ
ƒ
 
=
ƒ
ƒ
 
this
ƒ
ƒ
 
.
ƒ
ƒ
 
Domain
ƒ
ƒ
  
;
ƒ
ƒ
  !

m_fixFlags
∆
∆
 
|=
∆
∆
 
FixFlags
∆
∆
 
.
∆
∆
 
Domain
∆
∆
 "
;
∆
∆
" #
}
«
«
 
if
»
»
 
(
»
»
 
(
»
»
 	
updateFlags
»
»
	 
&
»
»
 
FixFlags
»
»
 
.
»
»
  
Identity
»
»
  (
)
»
»
( )
!=
»
»
* ,
$num
»
»
- .
)
»
»
. /
{
…
…
 
forceCreation
À
À
 
=
À
À
 
this
À
À
 
.
À
À
 
Identity
À
À
 "
;
À
À
" #

m_fixFlags
Õ
Õ
 
|=
Õ
Õ
 
FixFlags
Õ
Õ
 
.
Õ
Õ
 
Identity
Õ
Õ
 $
;
Õ
Õ
$ %
}
Œ
Œ
 
if
–
–
 
(
–
–
 
(
–
–
 	
updateFlags
–
–
	 
&
–
–
 
FixFlags
–
–
 
.
–
–
  
	Exception
–
–
  )
)
–
–
) *
!=
–
–
+ -
$num
–
–
. /
)
–
–
/ 0
{
—
—
 
forceCreation
”
”
 
=
”
”
  
GetExceptionString
”
”
 '
(
”
”
' (
)
”
”
( )
;
”
”
) *

m_fixFlags
’
’
 
|=
’
’
 
FixFlags
’
’
 
.
’
’
 
	Exception
’
’
 %
;
’
’
% &
}
÷
÷
 
if
ÿ
ÿ
 
(
ÿ
ÿ
 
(
ÿ
ÿ
 	
updateFlags
ÿ
ÿ
	 
&
ÿ
ÿ
 
FixFlags
ÿ
ÿ
 
.
ÿ
ÿ
  

Properties
ÿ
ÿ
  *
)
ÿ
ÿ
* +
!=
ÿ
ÿ
, .
$num
ÿ
ÿ
/ 0
)
ÿ
ÿ
0 1
{
Ÿ
Ÿ
 
CacheProperties
⁄
⁄
 
(
⁄
⁄
 
)
⁄
⁄
 
;
⁄
⁄
 

m_fixFlags
‹
‹
 
|=
‹
‹
 
FixFlags
‹
‹
 
.
‹
‹
 

Properties
‹
‹
 &
;
‹
‹
& '
}
›
›
 
}
ﬁ
ﬁ
 
if
·
·
 
(
·
·
 
forceCreation
·
·
 
!=
·
·
 
null
·
·
 
)
·
·
 
{
‚
‚
 
}
„
„
 
m_cacheUpdatable
Ê
Ê
 
=
Ê
Ê
 
false
Ê
Ê
 
;
Ê
Ê
 
}
Á
Á
 
private
Ì
Ì
 	
void
Ì
Ì

 '
CreateCompositeProperties
Ì
Ì
 (
(
Ì
Ì
( )
)
Ì
Ì
) *
{
Ó
Ó
 !
CompositeProperties
Ô
Ô
 !
compositeProperties
Ô
Ô
 *
=
Ô
Ô
+ ,
new
Ô
Ô
- 0!
CompositeProperties
Ô
Ô
1 D
(
Ô
Ô
D E
)
Ô
Ô
E F
;
Ô
Ô
F G
if
Ò
Ò
 
(
Ò
Ò
 
m_eventProperties
Ò
Ò
 
!=
Ò
Ò
 
null
Ò
Ò
  
)
Ò
Ò
  !
{
Ú
Ú
 !
compositeProperties
Û
Û
 
.
Û
Û
 
Add
Û
Û
 
(
Û
Û
 
m_eventProperties
Û
Û
 -
)
Û
Û
- .
;
Û
Û
. /
}
Ù
Ù
 "
PropertiesDictionary
ˆ
ˆ
 %
logicalThreadProperties
ˆ
ˆ
 /
=
ˆ
ˆ
0 1"
LogicalThreadContext
ˆ
ˆ
2 F
.
ˆ
ˆ
F G

Properties
ˆ
ˆ
G Q
.
ˆ
ˆ
Q R
GetProperties
ˆ
ˆ
R _
(
ˆ
ˆ
_ `
false
ˆ
ˆ
` e
)
ˆ
ˆ
e f
;
ˆ
ˆ
f g
if
˜
˜
 
(
˜
˜
 %
logicalThreadProperties
˜
˜
 
!=
˜
˜
 !
null
˜
˜
" &
)
˜
˜
& '
{
¯
¯
 !
compositeProperties
˘
˘
 
.
˘
˘
 
Add
˘
˘
 
(
˘
˘
 %
logicalThreadProperties
˘
˘
 3
)
˘
˘
3 4
;
˘
˘
4 5
}
˙
˙
 "
PropertiesDictionary
¸
¸
 
threadProperties
¸
¸
 (
=
¸
¸
) *
ThreadContext
¸
¸
+ 8
.
¸
¸
8 9

Properties
¸
¸
9 C
.
¸
¸
C D
GetProperties
¸
¸
D Q
(
¸
¸
Q R
false
¸
¸
R W
)
¸
¸
W X
;
¸
¸
X Y
if
˝
˝
 
(
˝
˝
 
threadProperties
˝
˝
 
!=
˝
˝
 
null
˝
˝
 
)
˝
˝
  
{
˛
˛
 !
compositeProperties
ˇ
ˇ
 
.
ˇ
ˇ
 
Add
ˇ
ˇ
 
(
ˇ
ˇ
 
threadProperties
ˇ
ˇ
 ,
)
ˇ
ˇ
, -
;
ˇ
ˇ
- .
}
ÄÄ "
PropertiesDictionary
ÖÖ 
eventProperties
ÖÖ '
=
ÖÖ( )
new
ÖÖ* -"
PropertiesDictionary
ÖÖ. B
(
ÖÖB C
)
ÖÖC D
;
ÖÖD E
eventProperties
ÜÜ 
[
ÜÜ 
UserNameProperty
ÜÜ #
]
ÜÜ# $
=
ÜÜ% &
UserName
ÜÜ' /
;
ÜÜ/ 0
eventProperties
áá 
[
áá 
IdentityProperty
áá #
]
áá# $
=
áá% &
Identity
áá' /
;
áá/ 0!
compositeProperties
àà 
.
àà 
Add
àà 
(
àà 
eventProperties
àà *
)
àà* +
;
àà+ ,!
compositeProperties
ää 
.
ää 
Add
ää 
(
ää 
GlobalContext
ää (
.
ää( )

Properties
ää) 3
.
ää3 4#
GetReadOnlyProperties
ää4 I
(
ääI J
)
ääJ K
)
ääK L
;
ääL M#
m_compositeProperties
ãã -
=
ãã. /!
compositeProperties
ãã0 C
;
ããC D
}
åå 
private
éé 	
void
éé
 
CacheProperties
éé 
(
éé 
)
éé  
{
èè 
if
êê 
(
êê 
m_data
êê 
.
êê 

Properties
êê 
==
êê 
null
êê  
&&
êê" $
this
êê% )
.
êê) *
m_cacheUpdatable
êê* :
)
êê: ;
{
ëë 
if
íí 
(
íí #
m_compositeProperties
íí 
==
íí  
null
íí! %
)
íí% &
{
ìì '
CreateCompositeProperties
îî 
(
îî 
)
îî  
;
îî  !
}
ïï "
PropertiesDictionary
óó !
flattenedProperties
óó ,
=
óó- .#
m_compositeProperties
óó/ D
.
óóD E
Flatten
óóE L
(
óóL M
)
óóM N
;
óóN O"
PropertiesDictionary
ôô 
fixedProperties
ôô (
=
ôô) *
new
ôô+ ."
PropertiesDictionary
ôô/ C
(
ôôC D
)
ôôD E
;
ôôE F
foreach
úú 
(
úú 
DictionaryEntry
úú 
entry
úú !
in
úú" $!
flattenedProperties
úú% 8
)
úú8 9
{
ùù 
string
ûû 
key
ûû 
=
ûû 
entry
ûû 
.
ûû 
Key
ûû 
as
ûû 
string
ûû %
;
ûû% &
if
†† 
(
†† 	
key
††	 
!=
†† 
null
†† 
)
†† 
{
°° 
object
¢¢ 
val
¢¢ 
=
¢¢ 
entry
¢¢ 
.
¢¢ 
Value
¢¢ 
;
¢¢ 
IFixingRequired
•• 
fixingRequired
•• $
=
••% &
val
••' *
as
••+ -
IFixingRequired
••. =
;
••= >
if
¶¶ 
(
¶¶	 

fixingRequired
¶¶
 
!=
¶¶ 
null
¶¶  
)
¶¶  !
{
ßß 
val
®® 

=
®® 
fixingRequired
®® 
.
®® 
GetFixedObject
®® *
(
®®* +
)
®®+ ,
;
®®, -
}
©© 
if
¨¨ 
(
¨¨	 

val
¨¨
 
!=
¨¨ 
null
¨¨ 
)
¨¨ 
{
≠≠ 
fixedProperties
ÆÆ 
[
ÆÆ 
key
ÆÆ 
]
ÆÆ 
=
ÆÆ 
val
ÆÆ !
;
ÆÆ! "
}
ØØ 
}
∞∞ 
}
±± 
m_data
≥≥ 

.
≥≥
 

Properties
≥≥ 
=
≥≥ 
fixedProperties
≥≥ '
;
≥≥' (
}
¥¥ 
}
µµ 
public
ŸŸ 
object
ŸŸ	 
LookupProperty
ŸŸ 
(
ŸŸ 
string
ŸŸ %
key
ŸŸ& )
)
ŸŸ) *
{
⁄⁄ 
if
€€ 
(
€€ 
m_data
€€ 
.
€€ 

Properties
€€ 
!=
€€ 
null
€€  
)
€€  !
{
‹‹ 
return
›› 

m_data
›› 
.
›› 

Properties
›› 
[
›› 
key
››  
]
››  !
;
››! "
}
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ #
m_compositeProperties
ﬂﬂ 
==
ﬂﬂ 
null
ﬂﬂ  $
)
ﬂﬂ$ %
{
‡‡ '
CreateCompositeProperties
·· 
(
·· 
)
·· 
;
··  
}
‚‚ 
return
„„ 	#
m_compositeProperties
„„
 
[
„„  
key
„„  #
]
„„# $
;
„„$ %
}
‰‰ 
public
ÙÙ "
PropertiesDictionary
ÙÙ	 
GetProperties
ÙÙ +
(
ÙÙ+ ,
)
ÙÙ, -
{
ıı 
if
ˆˆ 
(
ˆˆ 
m_data
ˆˆ 
.
ˆˆ 

Properties
ˆˆ 
!=
ˆˆ 
null
ˆˆ  
)
ˆˆ  !
{
˜˜ 
return
¯¯ 

m_data
¯¯ 
.
¯¯ 

Properties
¯¯ 
;
¯¯ 
}
˘˘ 
if
˙˙ 
(
˙˙ #
m_compositeProperties
˙˙ 
==
˙˙ 
null
˙˙  $
)
˙˙$ %
{
˚˚ '
CreateCompositeProperties
¸¸ 
(
¸¸ 
)
¸¸ 
;
¸¸  
}
˝˝ 
return
˛˛ 	#
m_compositeProperties
˛˛
 
.
˛˛  
Flatten
˛˛  '
(
˛˛' (
)
˛˛( )
;
˛˛) *
}
ˇˇ 
private
àà 	
LoggingEventData
àà
 
m_data
àà !
;
àà! "
private
çç 	!
CompositeProperties
çç
 #
m_compositeProperties
çç 3
;
çç3 4
private
íí 	"
PropertiesDictionary
íí
 
m_eventProperties
íí 0
;
íí0 1
private
òò 	
readonly
òò
 
Type
òò 0
"m_callerStackBoundaryDeclaringType
òò :
;
òò: ;
private
ùù 	
readonly
ùù
 
object
ùù 
	m_message
ùù #
;
ùù# $
private
¶¶ 	
readonly
¶¶
 
	Exception
¶¶ 
m_thrownException
¶¶ .
;
¶¶. /
private
ÆÆ 	
ILoggerRepository
ÆÆ
 
m_repository
ÆÆ (
=
ÆÆ) *
null
ÆÆ+ /
;
ÆÆ/ 0
private
∑∑ 	
FixFlags
∑∑
 

m_fixFlags
∑∑ 
=
∑∑ 
FixFlags
∑∑  (
.
∑∑( )
None
∑∑) -
;
∑∑- .
private
¿¿ 	
bool
¿¿
 
m_cacheUpdatable
¿¿ 
=
¿¿  !
true
¿¿" &
;
¿¿& '
public
…… 
const
……	 
string
…… 
HostNameProperty
…… &
=
……' (
$str
……) ;
;
……; <
public
ŒŒ 
const
ŒŒ	 
string
ŒŒ 
IdentityProperty
ŒŒ &
=
ŒŒ' (
$str
ŒŒ) ;
;
ŒŒ; <
public
”” 
const
””	 
string
”” 
UserNameProperty
”” &
=
””' (
$str
””) ;
;
””; <
}
÷÷ 
}◊◊ ¥ô
7C:\sonarqube\projects\log4net-2.0.7\src\Core\LogImpl.cs
	namespace 	
log4net
 
. 
Core 
{ 
publiccc 
classcc 
LogImplcc 
:cc 
LoggerWrapperImplcc )
,cc) *
ILogcc+ /
{dd 
publicpp 
LogImplpp	 
(pp 
ILoggerpp 
loggerpp 
)pp  
:pp! "
basepp# '
(pp' (
loggerpp( .
)pp. /
{qq 
loggerss 	
.ss	 


Repositoryss
 
.ss  
ConfigurationChangedss )
+=ss* ,
newss- 0<
0LoggerRepositoryConfigurationChangedEventHandlerss1 a
(ssa b1
$LoggerRepositoryConfigurationChanged	ssb Ü
)
ssÜ á
;
ssá à
ReloadLevelsvv 
(vv 
loggervv 
.vv 

Repositoryvv !
)vv! "
;vv" #
}ww 
	protected
ÑÑ 
virtual
ÑÑ 
void
ÑÑ 
ReloadLevels
ÑÑ %
(
ÑÑ% &
ILoggerRepository
ÑÑ& 7

repository
ÑÑ8 B
)
ÑÑB C
{
ÖÖ 
LevelMap
ÜÜ 
levelMap
ÜÜ 
=
ÜÜ 

repository
ÜÜ !
.
ÜÜ! "
LevelMap
ÜÜ" *
;
ÜÜ* +
m_levelDebug
àà 
=
àà 
levelMap
àà 
.
àà 
LookupWithDefault
àà ,
(
àà, -
Level
àà- 2
.
àà2 3
Debug
àà3 8
)
àà8 9
;
àà9 :
m_levelInfo
ââ 
=
ââ 
levelMap
ââ 
.
ââ 
LookupWithDefault
ââ +
(
ââ+ ,
Level
ââ, 1
.
ââ1 2
Info
ââ2 6
)
ââ6 7
;
ââ7 8
m_levelWarn
ää 
=
ää 
levelMap
ää 
.
ää 
LookupWithDefault
ää +
(
ää+ ,
Level
ää, 1
.
ää1 2
Warn
ää2 6
)
ää6 7
;
ää7 8
m_levelError
ãã 
=
ãã 
levelMap
ãã 
.
ãã 
LookupWithDefault
ãã ,
(
ãã, -
Level
ãã- 2
.
ãã2 3
Error
ãã3 8
)
ãã8 9
;
ãã9 :
m_levelFatal
åå 
=
åå 
levelMap
åå 
.
åå 
LookupWithDefault
åå ,
(
åå, -
Level
åå- 2
.
åå2 3
Fatal
åå3 8
)
åå8 9
;
åå9 :
}
çç 
virtual
®® 	
public
®®
 
void
®® 
Debug
®® 
(
®® 
object
®® "
message
®®# *
)
®®* +
{
©© 
Logger
™™ 	
.
™™	 

Log
™™
 
(
™™ 
ThisDeclaringType
™™ 
,
™™  
m_levelDebug
™™! -
,
™™- .
message
™™/ 6
,
™™6 7
null
™™8 <
)
™™< =
;
™™= >
}
´´ 
virtual
ΩΩ 	
public
ΩΩ
 
void
ΩΩ 
Debug
ΩΩ 
(
ΩΩ 
object
ΩΩ "
message
ΩΩ# *
,
ΩΩ* +
	Exception
ΩΩ, 5
	exception
ΩΩ6 ?
)
ΩΩ? @
{
ææ 
Logger
øø 	
.
øø	 

Log
øø
 
(
øø 
ThisDeclaringType
øø 
,
øø  
m_levelDebug
øø! -
,
øø- .
message
øø/ 6
,
øø6 7
	exception
øø8 A
)
øøA B
;
øøB C
}
¿¿ 
virtual
ÿÿ 	
public
ÿÿ
 
void
ÿÿ 
DebugFormat
ÿÿ !
(
ÿÿ! "
string
ÿÿ" (
format
ÿÿ) /
,
ÿÿ/ 0
params
ÿÿ1 7
object
ÿÿ8 >
[
ÿÿ> ?
]
ÿÿ? @
args
ÿÿA E
)
ÿÿE F
{
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 
IsDebugEnabled
⁄⁄ 
)
⁄⁄ 
{
€€ 
Logger
‹‹ 

.
‹‹
 
Log
‹‹ 
(
‹‹ 
ThisDeclaringType
‹‹  
,
‹‹  !
m_levelDebug
‹‹" .
,
‹‹. /
new
‹‹0 3 
SystemStringFormat
‹‹4 F
(
‹‹F G
CultureInfo
‹‹G R
.
‹‹R S
InvariantCulture
‹‹S c
,
‹‹c d
format
‹‹e k
,
‹‹k l
args
‹‹m q
)
‹‹q r
,
‹‹r s
null
‹‹t x
)
‹‹x y
;
‹‹y z
}
›› 
}
ﬁﬁ 
virtual
ˆˆ 	
public
ˆˆ
 
void
ˆˆ 
DebugFormat
ˆˆ !
(
ˆˆ! "
string
ˆˆ" (
format
ˆˆ) /
,
ˆˆ/ 0
object
ˆˆ1 7
arg0
ˆˆ8 <
)
ˆˆ< =
{
˜˜ 
if
¯¯ 
(
¯¯ 
IsDebugEnabled
¯¯ 
)
¯¯ 
{
˘˘ 
Logger
˙˙ 

.
˙˙
 
Log
˙˙ 
(
˙˙ 
ThisDeclaringType
˙˙  
,
˙˙  !
m_levelDebug
˙˙" .
,
˙˙. /
new
˙˙0 3 
SystemStringFormat
˙˙4 F
(
˙˙F G
CultureInfo
˙˙G R
.
˙˙R S
InvariantCulture
˙˙S c
,
˙˙c d
format
˙˙e k
,
˙˙k l
new
˙˙m p
object
˙˙q w
[
˙˙w x
]
˙˙x y
{
˙˙z {
arg0˙˙| Ä
}˙˙Å Ç
)˙˙Ç É
,˙˙É Ñ
null˙˙Ö â
)˙˙â ä
;˙˙ä ã
}
˚˚ 
}
¸¸ 
virtual
ïï 	
public
ïï
 
void
ïï 
DebugFormat
ïï !
(
ïï! "
string
ïï" (
format
ïï) /
,
ïï/ 0
object
ïï1 7
arg0
ïï8 <
,
ïï< =
object
ïï> D
arg1
ïïE I
)
ïïI J
{
ññ 
if
óó 
(
óó 
IsDebugEnabled
óó 
)
óó 
{
òò 
Logger
ôô 

.
ôô
 
Log
ôô 
(
ôô 
ThisDeclaringType
ôô  
,
ôô  !
m_levelDebug
ôô" .
,
ôô. /
new
ôô0 3 
SystemStringFormat
ôô4 F
(
ôôF G
CultureInfo
ôôG R
.
ôôR S
InvariantCulture
ôôS c
,
ôôc d
format
ôôe k
,
ôôk l
new
ôôm p
object
ôôq w
[
ôôw x
]
ôôx y
{
ôôz {
arg0ôô| Ä
,ôôÄ Å
arg1ôôÇ Ü
}ôôá à
)ôôà â
,ôôâ ä
nullôôã è
)ôôè ê
;ôôê ë
}
öö 
}
õõ 
virtual
µµ 	
public
µµ
 
void
µµ 
DebugFormat
µµ !
(
µµ! "
string
µµ" (
format
µµ) /
,
µµ/ 0
object
µµ1 7
arg0
µµ8 <
,
µµ< =
object
µµ> D
arg1
µµE I
,
µµI J
object
µµK Q
arg2
µµR V
)
µµV W
{
∂∂ 
if
∑∑ 
(
∑∑ 
IsDebugEnabled
∑∑ 
)
∑∑ 
{
∏∏ 
Logger
ππ 

.
ππ
 
Log
ππ 
(
ππ 
ThisDeclaringType
ππ  
,
ππ  !
m_levelDebug
ππ" .
,
ππ. /
new
ππ0 3 
SystemStringFormat
ππ4 F
(
ππF G
CultureInfo
ππG R
.
ππR S
InvariantCulture
ππS c
,
ππc d
format
ππe k
,
ππk l
new
ππm p
object
ππq w
[
ππw x
]
ππx y
{
ππz {
arg0ππ| Ä
,ππÄ Å
arg1ππÇ Ü
,ππÜ á
arg2ππà å
}ππç é
)ππé è
,ππè ê
nullππë ï
)ππï ñ
;ππñ ó
}
∫∫ 
}
ªª 
virtual
œœ 	
public
œœ
 
void
œœ 
DebugFormat
œœ !
(
œœ! "
IFormatProvider
œœ" 1
provider
œœ2 :
,
œœ: ;
string
œœ< B
format
œœC I
,
œœI J
params
œœK Q
object
œœR X
[
œœX Y
]
œœY Z
args
œœ[ _
)
œœ_ `
{
–– 
if
—— 
(
—— 
IsDebugEnabled
—— 
)
—— 
{
““ 
Logger
”” 

.
””
 
Log
”” 
(
”” 
ThisDeclaringType
””  
,
””  !
m_levelDebug
””" .
,
””. /
new
””0 3 
SystemStringFormat
””4 F
(
””F G
provider
””G O
,
””O P
format
””Q W
,
””W X
args
””Y ]
)
””] ^
,
””^ _
null
””` d
)
””d e
;
””e f
}
‘‘ 
}
’’ 
virtual
ÓÓ 	
public
ÓÓ
 
void
ÓÓ 
Info
ÓÓ 
(
ÓÓ 
object
ÓÓ !
message
ÓÓ" )
)
ÓÓ) *
{
ÔÔ 
Logger
 	
.
	 

Log

 
(
 
ThisDeclaringType
 
,
  
m_levelInfo
! ,
,
, -
message
. 5
,
5 6
null
7 ;
)
; <
;
< =
}
ÒÒ 
virtual
ÉÉ 	
public
ÉÉ
 
void
ÉÉ 
Info
ÉÉ 
(
ÉÉ 
object
ÉÉ !
message
ÉÉ" )
,
ÉÉ) *
	Exception
ÉÉ+ 4
	exception
ÉÉ5 >
)
ÉÉ> ?
{
ÑÑ 
Logger
ÖÖ 	
.
ÖÖ	 

Log
ÖÖ
 
(
ÖÖ 
ThisDeclaringType
ÖÖ 
,
ÖÖ  
m_levelInfo
ÖÖ! ,
,
ÖÖ, -
message
ÖÖ. 5
,
ÖÖ5 6
	exception
ÖÖ7 @
)
ÖÖ@ A
;
ÖÖA B
}
ÜÜ 
virtual
ûû 	
public
ûû
 
void
ûû 

InfoFormat
ûû  
(
ûû  !
string
ûû! '
format
ûû( .
,
ûû. /
params
ûû0 6
object
ûû7 =
[
ûû= >
]
ûû> ?
args
ûû@ D
)
ûûD E
{
üü 
if
†† 
(
†† 
IsInfoEnabled
†† 
)
†† 
{
°° 
Logger
¢¢ 

.
¢¢
 
Log
¢¢ 
(
¢¢ 
ThisDeclaringType
¢¢  
,
¢¢  !
m_levelInfo
¢¢" -
,
¢¢- .
new
¢¢/ 2 
SystemStringFormat
¢¢3 E
(
¢¢E F
CultureInfo
¢¢F Q
.
¢¢Q R
InvariantCulture
¢¢R b
,
¢¢b c
format
¢¢d j
,
¢¢j k
args
¢¢l p
)
¢¢p q
,
¢¢q r
null
¢¢s w
)
¢¢w x
;
¢¢x y
}
££ 
}
§§ 
virtual
ºº 	
public
ºº
 
void
ºº 

InfoFormat
ºº  
(
ºº  !
string
ºº! '
format
ºº( .
,
ºº. /
object
ºº0 6
arg0
ºº7 ;
)
ºº; <
{
ΩΩ 
if
ææ 
(
ææ 
IsInfoEnabled
ææ 
)
ææ 
{
øø 
Logger
¿¿ 

.
¿¿
 
Log
¿¿ 
(
¿¿ 
ThisDeclaringType
¿¿  
,
¿¿  !
m_levelInfo
¿¿" -
,
¿¿- .
new
¿¿/ 2 
SystemStringFormat
¿¿3 E
(
¿¿E F
CultureInfo
¿¿F Q
.
¿¿Q R
InvariantCulture
¿¿R b
,
¿¿b c
format
¿¿d j
,
¿¿j k
new
¿¿l o
object
¿¿p v
[
¿¿v w
]
¿¿w x
{
¿¿y z
arg0
¿¿{ 
}¿¿Ä Å
)¿¿Å Ç
,¿¿Ç É
null¿¿Ñ à
)¿¿à â
;¿¿â ä
}
¡¡ 
}
¬¬ 
virtual
€€ 	
public
€€
 
void
€€ 

InfoFormat
€€  
(
€€  !
string
€€! '
format
€€( .
,
€€. /
object
€€0 6
arg0
€€7 ;
,
€€; <
object
€€= C
arg1
€€D H
)
€€H I
{
‹‹ 
if
›› 
(
›› 
IsInfoEnabled
›› 
)
›› 
{
ﬁﬁ 
Logger
ﬂﬂ 

.
ﬂﬂ
 
Log
ﬂﬂ 
(
ﬂﬂ 
ThisDeclaringType
ﬂﬂ  
,
ﬂﬂ  !
m_levelInfo
ﬂﬂ" -
,
ﬂﬂ- .
new
ﬂﬂ/ 2 
SystemStringFormat
ﬂﬂ3 E
(
ﬂﬂE F
CultureInfo
ﬂﬂF Q
.
ﬂﬂQ R
InvariantCulture
ﬂﬂR b
,
ﬂﬂb c
format
ﬂﬂd j
,
ﬂﬂj k
new
ﬂﬂl o
object
ﬂﬂp v
[
ﬂﬂv w
]
ﬂﬂw x
{
ﬂﬂy z
arg0
ﬂﬂ{ 
,ﬂﬂ Ä
arg1ﬂﬂÅ Ö
}ﬂﬂÜ á
)ﬂﬂá à
,ﬂﬂà â
nullﬂﬂä é
)ﬂﬂé è
;ﬂﬂè ê
}
‡‡ 
}
·· 
virtual
˚˚ 	
public
˚˚
 
void
˚˚ 

InfoFormat
˚˚  
(
˚˚  !
string
˚˚! '
format
˚˚( .
,
˚˚. /
object
˚˚0 6
arg0
˚˚7 ;
,
˚˚; <
object
˚˚= C
arg1
˚˚D H
,
˚˚H I
object
˚˚J P
arg2
˚˚Q U
)
˚˚U V
{
¸¸ 
if
˝˝ 
(
˝˝ 
IsInfoEnabled
˝˝ 
)
˝˝ 
{
˛˛ 
Logger
ˇˇ 

.
ˇˇ
 
Log
ˇˇ 
(
ˇˇ 
ThisDeclaringType
ˇˇ  
,
ˇˇ  !
m_levelInfo
ˇˇ" -
,
ˇˇ- .
new
ˇˇ/ 2 
SystemStringFormat
ˇˇ3 E
(
ˇˇE F
CultureInfo
ˇˇF Q
.
ˇˇQ R
InvariantCulture
ˇˇR b
,
ˇˇb c
format
ˇˇd j
,
ˇˇj k
new
ˇˇl o
object
ˇˇp v
[
ˇˇv w
]
ˇˇw x
{
ˇˇy z
arg0
ˇˇ{ 
,ˇˇ Ä
arg1ˇˇÅ Ö
,ˇˇÖ Ü
arg2ˇˇá ã
}ˇˇå ç
)ˇˇç é
,ˇˇé è
nullˇˇê î
)ˇˇî ï
;ˇˇï ñ
}
ÄÄ 
}
ÅÅ 
virtual
ïï 	
public
ïï
 
void
ïï 

InfoFormat
ïï  
(
ïï  !
IFormatProvider
ïï! 0
provider
ïï1 9
,
ïï9 :
string
ïï; A
format
ïïB H
,
ïïH I
params
ïïJ P
object
ïïQ W
[
ïïW X
]
ïïX Y
args
ïïZ ^
)
ïï^ _
{
ññ 
if
óó 
(
óó 
IsInfoEnabled
óó 
)
óó 
{
òò 
Logger
ôô 

.
ôô
 
Log
ôô 
(
ôô 
ThisDeclaringType
ôô  
,
ôô  !
m_levelInfo
ôô" -
,
ôô- .
new
ôô/ 2 
SystemStringFormat
ôô3 E
(
ôôE F
provider
ôôF N
,
ôôN O
format
ôôP V
,
ôôV W
args
ôôX \
)
ôô\ ]
,
ôô] ^
null
ôô_ c
)
ôôc d
;
ôôd e
}
öö 
}
õõ 
virtual
¥¥ 	
public
¥¥
 
void
¥¥ 
Warn
¥¥ 
(
¥¥ 
object
¥¥ !
message
¥¥" )
)
¥¥) *
{
µµ 
Logger
∂∂ 	
.
∂∂	 

Log
∂∂
 
(
∂∂ 
ThisDeclaringType
∂∂ 
,
∂∂  
m_levelWarn
∂∂! ,
,
∂∂, -
message
∂∂. 5
,
∂∂5 6
null
∂∂7 ;
)
∂∂; <
;
∂∂< =
}
∑∑ 
virtual
…… 	
public
……
 
void
…… 
Warn
…… 
(
…… 
object
…… !
message
……" )
,
……) *
	Exception
……+ 4
	exception
……5 >
)
……> ?
{
   
Logger
ÀÀ 	
.
ÀÀ	 

Log
ÀÀ
 
(
ÀÀ 
ThisDeclaringType
ÀÀ 
,
ÀÀ  
m_levelWarn
ÀÀ! ,
,
ÀÀ, -
message
ÀÀ. 5
,
ÀÀ5 6
	exception
ÀÀ7 @
)
ÀÀ@ A
;
ÀÀA B
}
ÃÃ 
virtual
‰‰ 	
public
‰‰
 
void
‰‰ 

WarnFormat
‰‰  
(
‰‰  !
string
‰‰! '
format
‰‰( .
,
‰‰. /
params
‰‰0 6
object
‰‰7 =
[
‰‰= >
]
‰‰> ?
args
‰‰@ D
)
‰‰D E
{
ÂÂ 
if
ÊÊ 
(
ÊÊ 
IsWarnEnabled
ÊÊ 
)
ÊÊ 
{
ÁÁ 
Logger
ËË 

.
ËË
 
Log
ËË 
(
ËË 
ThisDeclaringType
ËË  
,
ËË  !
m_levelWarn
ËË" -
,
ËË- .
new
ËË/ 2 
SystemStringFormat
ËË3 E
(
ËËE F
CultureInfo
ËËF Q
.
ËËQ R
InvariantCulture
ËËR b
,
ËËb c
format
ËËd j
,
ËËj k
args
ËËl p
)
ËËp q
,
ËËq r
null
ËËs w
)
ËËw x
;
ËËx y
}
ÈÈ 
}
ÍÍ 
virtual
ÇÇ 	
public
ÇÇ
 
void
ÇÇ 

WarnFormat
ÇÇ  
(
ÇÇ  !
string
ÇÇ! '
format
ÇÇ( .
,
ÇÇ. /
object
ÇÇ0 6
arg0
ÇÇ7 ;
)
ÇÇ; <
{
ÉÉ 
if
ÑÑ 
(
ÑÑ 
IsWarnEnabled
ÑÑ 
)
ÑÑ 
{
ÖÖ 
Logger
ÜÜ 

.
ÜÜ
 
Log
ÜÜ 
(
ÜÜ 
ThisDeclaringType
ÜÜ  
,
ÜÜ  !
m_levelWarn
ÜÜ" -
,
ÜÜ- .
new
ÜÜ/ 2 
SystemStringFormat
ÜÜ3 E
(
ÜÜE F
CultureInfo
ÜÜF Q
.
ÜÜQ R
InvariantCulture
ÜÜR b
,
ÜÜb c
format
ÜÜd j
,
ÜÜj k
new
ÜÜl o
object
ÜÜp v
[
ÜÜv w
]
ÜÜw x
{
ÜÜy z
arg0
ÜÜ{ 
}ÜÜÄ Å
)ÜÜÅ Ç
,ÜÜÇ É
nullÜÜÑ à
)ÜÜà â
;ÜÜâ ä
}
áá 
}
àà 
virtual
°° 	
public
°°
 
void
°° 

WarnFormat
°°  
(
°°  !
string
°°! '
format
°°( .
,
°°. /
object
°°0 6
arg0
°°7 ;
,
°°; <
object
°°= C
arg1
°°D H
)
°°H I
{
¢¢ 
if
££ 
(
££ 
IsWarnEnabled
££ 
)
££ 
{
§§ 
Logger
•• 

.
••
 
Log
•• 
(
•• 
ThisDeclaringType
••  
,
••  !
m_levelWarn
••" -
,
••- .
new
••/ 2 
SystemStringFormat
••3 E
(
••E F
CultureInfo
••F Q
.
••Q R
InvariantCulture
••R b
,
••b c
format
••d j
,
••j k
new
••l o
object
••p v
[
••v w
]
••w x
{
••y z
arg0
••{ 
,•• Ä
arg1••Å Ö
}••Ü á
)••á à
,••à â
null••ä é
)••é è
;••è ê
}
¶¶ 
}
ßß 
virtual
¡¡ 	
public
¡¡
 
void
¡¡ 

WarnFormat
¡¡  
(
¡¡  !
string
¡¡! '
format
¡¡( .
,
¡¡. /
object
¡¡0 6
arg0
¡¡7 ;
,
¡¡; <
object
¡¡= C
arg1
¡¡D H
,
¡¡H I
object
¡¡J P
arg2
¡¡Q U
)
¡¡U V
{
¬¬ 
if
√√ 
(
√√ 
IsWarnEnabled
√√ 
)
√√ 
{
ƒƒ 
Logger
≈≈ 

.
≈≈
 
Log
≈≈ 
(
≈≈ 
ThisDeclaringType
≈≈  
,
≈≈  !
m_levelWarn
≈≈" -
,
≈≈- .
new
≈≈/ 2 
SystemStringFormat
≈≈3 E
(
≈≈E F
CultureInfo
≈≈F Q
.
≈≈Q R
InvariantCulture
≈≈R b
,
≈≈b c
format
≈≈d j
,
≈≈j k
new
≈≈l o
object
≈≈p v
[
≈≈v w
]
≈≈w x
{
≈≈y z
arg0
≈≈{ 
,≈≈ Ä
arg1≈≈Å Ö
,≈≈Ö Ü
arg2≈≈á ã
}≈≈å ç
)≈≈ç é
,≈≈é è
null≈≈ê î
)≈≈î ï
;≈≈ï ñ
}
∆∆ 
}
«« 
virtual
€€ 	
public
€€
 
void
€€ 

WarnFormat
€€  
(
€€  !
IFormatProvider
€€! 0
provider
€€1 9
,
€€9 :
string
€€; A
format
€€B H
,
€€H I
params
€€J P
object
€€Q W
[
€€W X
]
€€X Y
args
€€Z ^
)
€€^ _
{
‹‹ 
if
›› 
(
›› 
IsWarnEnabled
›› 
)
›› 
{
ﬁﬁ 
Logger
ﬂﬂ 

.
ﬂﬂ
 
Log
ﬂﬂ 
(
ﬂﬂ 
ThisDeclaringType
ﬂﬂ  
,
ﬂﬂ  !
m_levelWarn
ﬂﬂ" -
,
ﬂﬂ- .
new
ﬂﬂ/ 2 
SystemStringFormat
ﬂﬂ3 E
(
ﬂﬂE F
provider
ﬂﬂF N
,
ﬂﬂN O
format
ﬂﬂP V
,
ﬂﬂV W
args
ﬂﬂX \
)
ﬂﬂ\ ]
,
ﬂﬂ] ^
null
ﬂﬂ_ c
)
ﬂﬂc d
;
ﬂﬂd e
}
‡‡ 
}
·· 
virtual
˙˙ 	
public
˙˙
 
void
˙˙ 
Error
˙˙ 
(
˙˙ 
object
˙˙ "
message
˙˙# *
)
˙˙* +
{
˚˚ 
Logger
¸¸ 	
.
¸¸	 

Log
¸¸
 
(
¸¸ 
ThisDeclaringType
¸¸ 
,
¸¸  
m_levelError
¸¸! -
,
¸¸- .
message
¸¸/ 6
,
¸¸6 7
null
¸¸8 <
)
¸¸< =
;
¸¸= >
}
˝˝ 
virtual
èè 	
public
èè
 
void
èè 
Error
èè 
(
èè 
object
èè "
message
èè# *
,
èè* +
	Exception
èè, 5
	exception
èè6 ?
)
èè? @
{
êê 
Logger
ëë 	
.
ëë	 

Log
ëë
 
(
ëë 
ThisDeclaringType
ëë 
,
ëë  
m_levelError
ëë! -
,
ëë- .
message
ëë/ 6
,
ëë6 7
	exception
ëë8 A
)
ëëA B
;
ëëB C
}
íí 
virtual
™™ 	
public
™™
 
void
™™ 
ErrorFormat
™™ !
(
™™! "
string
™™" (
format
™™) /
,
™™/ 0
params
™™1 7
object
™™8 >
[
™™> ?
]
™™? @
args
™™A E
)
™™E F
{
´´ 
if
¨¨ 
(
¨¨ 
IsErrorEnabled
¨¨ 
)
¨¨ 
{
≠≠ 
Logger
ÆÆ 

.
ÆÆ
 
Log
ÆÆ 
(
ÆÆ 
ThisDeclaringType
ÆÆ  
,
ÆÆ  !
m_levelError
ÆÆ" .
,
ÆÆ. /
new
ÆÆ0 3 
SystemStringFormat
ÆÆ4 F
(
ÆÆF G
CultureInfo
ÆÆG R
.
ÆÆR S
InvariantCulture
ÆÆS c
,
ÆÆc d
format
ÆÆe k
,
ÆÆk l
args
ÆÆm q
)
ÆÆq r
,
ÆÆr s
null
ÆÆt x
)
ÆÆx y
;
ÆÆy z
}
ØØ 
}
∞∞ 
virtual
»» 	
public
»»
 
void
»» 
ErrorFormat
»» !
(
»»! "
string
»»" (
format
»») /
,
»»/ 0
object
»»1 7
arg0
»»8 <
)
»»< =
{
…… 
if
   
(
   
IsErrorEnabled
   
)
   
{
ÀÀ 
Logger
ÃÃ 

.
ÃÃ
 
Log
ÃÃ 
(
ÃÃ 
ThisDeclaringType
ÃÃ  
,
ÃÃ  !
m_levelError
ÃÃ" .
,
ÃÃ. /
new
ÃÃ0 3 
SystemStringFormat
ÃÃ4 F
(
ÃÃF G
CultureInfo
ÃÃG R
.
ÃÃR S
InvariantCulture
ÃÃS c
,
ÃÃc d
format
ÃÃe k
,
ÃÃk l
new
ÃÃm p
object
ÃÃq w
[
ÃÃw x
]
ÃÃx y
{
ÃÃz {
arg0ÃÃ| Ä
}ÃÃÅ Ç
)ÃÃÇ É
,ÃÃÉ Ñ
nullÃÃÖ â
)ÃÃâ ä
;ÃÃä ã
}
ÕÕ 
}
ŒŒ 
virtual
ÁÁ 	
public
ÁÁ
 
void
ÁÁ 
ErrorFormat
ÁÁ !
(
ÁÁ! "
string
ÁÁ" (
format
ÁÁ) /
,
ÁÁ/ 0
object
ÁÁ1 7
arg0
ÁÁ8 <
,
ÁÁ< =
object
ÁÁ> D
arg1
ÁÁE I
)
ÁÁI J
{
ËË 
if
ÈÈ 
(
ÈÈ 
IsErrorEnabled
ÈÈ 
)
ÈÈ 
{
ÍÍ 
Logger
ÎÎ 

.
ÎÎ
 
Log
ÎÎ 
(
ÎÎ 
ThisDeclaringType
ÎÎ  
,
ÎÎ  !
m_levelError
ÎÎ" .
,
ÎÎ. /
new
ÎÎ0 3 
SystemStringFormat
ÎÎ4 F
(
ÎÎF G
CultureInfo
ÎÎG R
.
ÎÎR S
InvariantCulture
ÎÎS c
,
ÎÎc d
format
ÎÎe k
,
ÎÎk l
new
ÎÎm p
object
ÎÎq w
[
ÎÎw x
]
ÎÎx y
{
ÎÎz {
arg0ÎÎ| Ä
,ÎÎÄ Å
arg1ÎÎÇ Ü
}ÎÎá à
)ÎÎà â
,ÎÎâ ä
nullÎÎã è
)ÎÎè ê
;ÎÎê ë
}
ÏÏ 
}
ÌÌ 
virtual
áá 	
public
áá
 
void
áá 
ErrorFormat
áá !
(
áá! "
string
áá" (
format
áá) /
,
áá/ 0
object
áá1 7
arg0
áá8 <
,
áá< =
object
áá> D
arg1
ááE I
,
ááI J
object
ááK Q
arg2
ááR V
)
ááV W
{
àà 
if
ââ 
(
ââ 
IsErrorEnabled
ââ 
)
ââ 
{
ää 
Logger
ãã 

.
ãã
 
Log
ãã 
(
ãã 
ThisDeclaringType
ãã  
,
ãã  !
m_levelError
ãã" .
,
ãã. /
new
ãã0 3 
SystemStringFormat
ãã4 F
(
ããF G
CultureInfo
ããG R
.
ããR S
InvariantCulture
ããS c
,
ããc d
format
ããe k
,
ããk l
new
ããm p
object
ããq w
[
ããw x
]
ããx y
{
ããz {
arg0ãã| Ä
,ããÄ Å
arg1ããÇ Ü
,ããÜ á
arg2ããà å
}ããç é
)ããé è
,ããè ê
nullããë ï
)ããï ñ
;ããñ ó
}
åå 
}
çç 
virtual
°° 	
public
°°
 
void
°° 
ErrorFormat
°° !
(
°°! "
IFormatProvider
°°" 1
provider
°°2 :
,
°°: ;
string
°°< B
format
°°C I
,
°°I J
params
°°K Q
object
°°R X
[
°°X Y
]
°°Y Z
args
°°[ _
)
°°_ `
{
¢¢ 
if
££ 
(
££ 
IsErrorEnabled
££ 
)
££ 
{
§§ 
Logger
•• 

.
••
 
Log
•• 
(
•• 
ThisDeclaringType
••  
,
••  !
m_levelError
••" .
,
••. /
new
••0 3 
SystemStringFormat
••4 F
(
••F G
provider
••G O
,
••O P
format
••Q W
,
••W X
args
••Y ]
)
••] ^
,
••^ _
null
••` d
)
••d e
;
••e f
}
¶¶ 
}
ßß 
virtual
¿¿ 	
public
¿¿
 
void
¿¿ 
Fatal
¿¿ 
(
¿¿ 
object
¿¿ "
message
¿¿# *
)
¿¿* +
{
¡¡ 
Logger
¬¬ 	
.
¬¬	 

Log
¬¬
 
(
¬¬ 
ThisDeclaringType
¬¬ 
,
¬¬  
m_levelFatal
¬¬! -
,
¬¬- .
message
¬¬/ 6
,
¬¬6 7
null
¬¬8 <
)
¬¬< =
;
¬¬= >
}
√√ 
virtual
’’ 	
public
’’
 
void
’’ 
Fatal
’’ 
(
’’ 
object
’’ "
message
’’# *
,
’’* +
	Exception
’’, 5
	exception
’’6 ?
)
’’? @
{
÷÷ 
Logger
◊◊ 	
.
◊◊	 

Log
◊◊
 
(
◊◊ 
ThisDeclaringType
◊◊ 
,
◊◊  
m_levelFatal
◊◊! -
,
◊◊- .
message
◊◊/ 6
,
◊◊6 7
	exception
◊◊8 A
)
◊◊A B
;
◊◊B C
}
ÿÿ 
virtual
 	
public

 
void
 
FatalFormat
 !
(
! "
string
" (
format
) /
,
/ 0
params
1 7
object
8 >
[
> ?
]
? @
args
A E
)
E F
{
ÒÒ 
if
ÚÚ 
(
ÚÚ 
IsFatalEnabled
ÚÚ 
)
ÚÚ 
{
ÛÛ 
Logger
ÙÙ 

.
ÙÙ
 
Log
ÙÙ 
(
ÙÙ 
ThisDeclaringType
ÙÙ  
,
ÙÙ  !
m_levelFatal
ÙÙ" .
,
ÙÙ. /
new
ÙÙ0 3 
SystemStringFormat
ÙÙ4 F
(
ÙÙF G
CultureInfo
ÙÙG R
.
ÙÙR S
InvariantCulture
ÙÙS c
,
ÙÙc d
format
ÙÙe k
,
ÙÙk l
args
ÙÙm q
)
ÙÙq r
,
ÙÙr s
null
ÙÙt x
)
ÙÙx y
;
ÙÙy z
}
ıı 
}
ˆˆ 
virtual
éé 	
public
éé
 
void
éé 
FatalFormat
éé !
(
éé! "
string
éé" (
format
éé) /
,
éé/ 0
object
éé1 7
arg0
éé8 <
)
éé< =
{
èè 
if
êê 
(
êê 
IsFatalEnabled
êê 
)
êê 
{
ëë 
Logger
íí 

.
íí
 
Log
íí 
(
íí 
ThisDeclaringType
íí  
,
íí  !
m_levelFatal
íí" .
,
íí. /
new
íí0 3 
SystemStringFormat
íí4 F
(
ííF G
CultureInfo
ííG R
.
ííR S
InvariantCulture
ííS c
,
ííc d
format
ííe k
,
íík l
new
íím p
object
ííq w
[
ííw x
]
ííx y
{
ííz {
arg0íí| Ä
}ííÅ Ç
)ííÇ É
,ííÉ Ñ
nullííÖ â
)ííâ ä
;ííä ã
}
ìì 
}
îî 
virtual
≠≠ 	
public
≠≠
 
void
≠≠ 
FatalFormat
≠≠ !
(
≠≠! "
string
≠≠" (
format
≠≠) /
,
≠≠/ 0
object
≠≠1 7
arg0
≠≠8 <
,
≠≠< =
object
≠≠> D
arg1
≠≠E I
)
≠≠I J
{
ÆÆ 
if
ØØ 
(
ØØ 
IsFatalEnabled
ØØ 
)
ØØ 
{
∞∞ 
Logger
±± 

.
±±
 
Log
±± 
(
±± 
ThisDeclaringType
±±  
,
±±  !
m_levelFatal
±±" .
,
±±. /
new
±±0 3 
SystemStringFormat
±±4 F
(
±±F G
CultureInfo
±±G R
.
±±R S
InvariantCulture
±±S c
,
±±c d
format
±±e k
,
±±k l
new
±±m p
object
±±q w
[
±±w x
]
±±x y
{
±±z {
arg0±±| Ä
,±±Ä Å
arg1±±Ç Ü
}±±á à
)±±à â
,±±â ä
null±±ã è
)±±è ê
;±±ê ë
}
≤≤ 
}
≥≥ 
virtual
ÕÕ 	
public
ÕÕ
 
void
ÕÕ 
FatalFormat
ÕÕ !
(
ÕÕ! "
string
ÕÕ" (
format
ÕÕ) /
,
ÕÕ/ 0
object
ÕÕ1 7
arg0
ÕÕ8 <
,
ÕÕ< =
object
ÕÕ> D
arg1
ÕÕE I
,
ÕÕI J
object
ÕÕK Q
arg2
ÕÕR V
)
ÕÕV W
{
ŒŒ 
if
œœ 
(
œœ 
IsFatalEnabled
œœ 
)
œœ 
{
–– 
Logger
—— 

.
——
 
Log
—— 
(
—— 
ThisDeclaringType
——  
,
——  !
m_levelFatal
——" .
,
——. /
new
——0 3 
SystemStringFormat
——4 F
(
——F G
CultureInfo
——G R
.
——R S
InvariantCulture
——S c
,
——c d
format
——e k
,
——k l
new
——m p
object
——q w
[
——w x
]
——x y
{
——z {
arg0——| Ä
,——Ä Å
arg1——Ç Ü
,——Ü á
arg2——à å
}——ç é
)——é è
,——è ê
null——ë ï
)——ï ñ
;——ñ ó
}
““ 
}
”” 
virtual
ÁÁ 	
public
ÁÁ
 
void
ÁÁ 
FatalFormat
ÁÁ !
(
ÁÁ! "
IFormatProvider
ÁÁ" 1
provider
ÁÁ2 :
,
ÁÁ: ;
string
ÁÁ< B
format
ÁÁC I
,
ÁÁI J
params
ÁÁK Q
object
ÁÁR X
[
ÁÁX Y
]
ÁÁY Z
args
ÁÁ[ _
)
ÁÁ_ `
{
ËË 
if
ÈÈ 
(
ÈÈ 
IsFatalEnabled
ÈÈ 
)
ÈÈ 
{
ÍÍ 
Logger
ÎÎ 

.
ÎÎ
 
Log
ÎÎ 
(
ÎÎ 
ThisDeclaringType
ÎÎ  
,
ÎÎ  !
m_levelFatal
ÎÎ" .
,
ÎÎ. /
new
ÎÎ0 3 
SystemStringFormat
ÎÎ4 F
(
ÎÎF G
provider
ÎÎG O
,
ÎÎO P
format
ÎÎQ W
,
ÎÎW X
args
ÎÎY ]
)
ÎÎ] ^
,
ÎÎ^ _
null
ÎÎ` d
)
ÎÎd e
;
ÎÎe f
}
ÏÏ 
}
ÌÌ 
virtual
ö	ö	 	
public
ö	ö	
 
bool
ö	ö	 
IsDebugEnabled
ö	ö	 $
{
õ	õ	 
get
ú	ú	 
{
ú	ú	 
return
ú	ú		 
Logger
ú	ú	 
.
ú	ú	 
IsEnabledFor
ú	ú	 #
(
ú	ú	# $
m_levelDebug
ú	ú	$ 0
)
ú	ú	0 1
;
ú	ú	1 2
}
ú	ú	3 4
}
ù	ù	 
virtual
≠	≠	 	
public
≠	≠	
 
bool
≠	≠	 
IsInfoEnabled
≠	≠	 #
{
Æ	Æ	 
get
Ø	Ø	 
{
Ø	Ø	 
return
Ø	Ø		 
Logger
Ø	Ø	 
.
Ø	Ø	 
IsEnabledFor
Ø	Ø	 #
(
Ø	Ø	# $
m_levelInfo
Ø	Ø	$ /
)
Ø	Ø	/ 0
;
Ø	Ø	0 1
}
Ø	Ø	2 3
}
∞	∞	 
virtual
¿	¿	 	
public
¿	¿	
 
bool
¿	¿	 
IsWarnEnabled
¿	¿	 #
{
¡	¡	 
get
¬	¬	 
{
¬	¬	 
return
¬	¬		 
Logger
¬	¬	 
.
¬	¬	 
IsEnabledFor
¬	¬	 #
(
¬	¬	# $
m_levelWarn
¬	¬	$ /
)
¬	¬	/ 0
;
¬	¬	0 1
}
¬	¬	2 3
}
√	√	 
virtual
“	“	 	
public
“	“	
 
bool
“	“	 
IsErrorEnabled
“	“	 $
{
”	”	 
get
‘	‘	 
{
‘	‘	 
return
‘	‘		 
Logger
‘	‘	 
.
‘	‘	 
IsEnabledFor
‘	‘	 #
(
‘	‘	# $
m_levelError
‘	‘	$ 0
)
‘	‘	0 1
;
‘	‘	1 2
}
‘	‘	3 4
}
’	’	 
virtual
‰	‰	 	
public
‰	‰	
 
bool
‰	‰	 
IsFatalEnabled
‰	‰	 $
{
Â	Â	 
get
Ê	Ê	 
{
Ê	Ê	 
return
Ê	Ê		 
Logger
Ê	Ê	 
.
Ê	Ê	 
IsEnabledFor
Ê	Ê	 #
(
Ê	Ê	# $
m_levelFatal
Ê	Ê	$ 0
)
Ê	Ê	0 1
;
Ê	Ê	1 2
}
Ê	Ê	3 4
}
Á	Á	 
private
Ú	Ú	 	
void
Ú	Ú	
 2
$LoggerRepositoryConfigurationChanged
Ú	Ú	 3
(
Ú	Ú	3 4
object
Ú	Ú	4 :
sender
Ú	Ú	; A
,
Ú	Ú	A B
	EventArgs
Ú	Ú	C L
e
Ú	Ú	M N
)
Ú	Ú	N O
{
Û	Û	 
ILoggerRepository
Ù	Ù	 

repository
Ù	Ù	 
=
Ù	Ù	  !
sender
Ù	Ù	" (
as
Ù	Ù	) +
ILoggerRepository
Ù	Ù	, =
;
Ù	Ù	= >
if
ı	ı	 
(
ı	ı	 

repository
ı	ı	 
!=
ı	ı	 
null
ı	ı	 
)
ı	ı	 
{
ˆ	ˆ	 
ReloadLevels
˜	˜	 
(
˜	˜	 

repository
˜	˜	 
)
˜	˜	 
;
˜	˜	 
}
¯	¯	 
}
˘	˘	 
private
Ç
Ç
 	
readonly
Ç
Ç

 
static
Ç
Ç
 
Type
Ç
Ç
 
ThisDeclaringType
Ç
Ç
 0
=
Ç
Ç
1 2
typeof
Ç
Ç
3 9
(
Ç
Ç
9 :
LogImpl
Ç
Ç
: A
)
Ç
Ç
A B
;
Ç
Ç
B C
private
à
à
 	
Level
à
à

 
m_levelDebug
à
à
 
;
à
à
 
private
â
â
 	
Level
â
â

 
m_levelInfo
â
â
 
;
â
â
 
private
ä
ä
 	
Level
ä
ä

 
m_levelWarn
ä
ä
 
;
ä
ä
 
private
ã
ã
 	
Level
ã
ã

 
m_levelError
ã
ã
 
;
ã
ã
 
private
å
å
 	
Level
å
å

 
m_levelFatal
å
å
 
;
å
å
 
}
è
è
 
}ê
ê
 ı'
:C:\sonarqube\projects\log4net-2.0.7\src\Core\MethodItem.cs
	namespace 	
log4net
 
. 
Core 
{ 
[!! 
Serializable!! 
]!! 
public## 
class## 

MethodItem## 
{$$ 
public** 

MethodItem**	 
(** 
)** 
{++ 
m_name,, 	
=,,
 
NA,, 
;,, 
m_parameters-- 
=-- 
new-- 
string-- 
[-- 
$num-- 
]-- 
;--  
}.. 
public44 

MethodItem44	 
(44 
string44 
name44 
)44  
:55 
this55 	
(55	 

)55
 
{66 
m_name77 	
=77
 
name77 
;77 
}88 
public?? 

MethodItem??	 
(?? 
string?? 
name?? 
,??  
string??! '
[??' (
]??( )

parameters??* 4
)??4 5
:@@ 
this@@ 	
(@@	 

name@@
 
)@@ 
{AA 
m_parametersBB 
=BB 

parametersBB 
;BB 
}CC 
publicII 

MethodItemII	 
(II 
SystemII 
.II 

ReflectionII %
.II% &

MethodBaseII& 0

methodBaseII1 ;
)II; <
:JJ 
thisJJ 	
(JJ	 


methodBaseJJ
 
.JJ 
NameJJ 
,JJ #
GetMethodParameterNamesJJ 2
(JJ2 3

methodBaseJJ3 =
)JJ= >
)JJ> ?
{KK 	
}LL 
privatePP 	
staticPP
 
stringPP 
[PP 
]PP #
GetMethodParameterNamesPP 1
(PP1 2
SystemPP2 8
.PP8 9

ReflectionPP9 C
.PPC D

MethodBasePPD N

methodBasePPO Y
)PPY Z
{QQ 
	ArrayListRR  
methodParameterNamesRR !
=RR" #
newRR$ '
	ArrayListRR( 1
(RR1 2
)RR2 3
;RR3 4
trySS 
{TT 
SystemUU 

.UU
 

ReflectionUU 
.UU 
ParameterInfoUU #
[UU# $
]UU$ %#
methodBaseGetParametersUU& =
=UU> ?

methodBaseUU@ J
.UUJ K
GetParametersUUK X
(UUX Y
)UUY Z
;UUZ [
intWW (
methodBaseGetParametersCountWW $
=WW% &#
methodBaseGetParametersWW' >
.WW> ?
GetUpperBoundWW? L
(WWL M
$numWWM N
)WWN O
;WWO P
forYY 
(YY 	
intYY	 
iYY 
=YY 
$numYY 
;YY 
iYY 
<=YY (
methodBaseGetParametersCountYY 5
;YY5 6
iYY7 8
++YY8 :
)YY: ;
{ZZ  
methodParameterNames[[ 
.[[ 
Add[[ 
([[ #
methodBaseGetParameters[[ 5
[[[5 6
i[[6 7
][[7 8
.[[8 9
ParameterType[[9 F
+[[G H
$str[[I L
+[[M N#
methodBaseGetParameters[[O f
[[[f g
i[[g h
][[h i
.[[i j
Name[[j n
)[[n o
;[[o p
}\\ 
}]] 
catch^^ 
(^^	 

	Exception^^
 
ex^^ 
)^^ 
{__ 
LogLog`` 

.``
 
Error`` 
(`` 
declaringType`` 
,`` 
$str``  Z
,``Z [
ex``\ ^
)``^ _
;``_ `
}aa 
returncc 	
(cc
 
stringcc 
[cc 
]cc 
)cc  
methodParameterNamescc (
.cc( )
ToArraycc) 0
(cc0 1
typeofcc1 7
(cc7 8
stringcc8 >
)cc> ?
)cc? @
;cc@ A
}dd 
publicvv 
stringvv	 
Namevv 
{ww 
getxx 
{xx 
returnxx	 
m_namexx 
;xx 
}xx 
}yy 
public
ââ 
string
ââ	 
[
ââ 
]
ââ 

Parameters
ââ 
{
ää 
get
ãã 
{
ãã 
return
ãã	 
m_parameters
ãã 
;
ãã 
}
ãã 
}
åå 
private
íí 	
readonly
íí
 
string
íí 
m_name
íí  
;
íí  !
private
ìì 	
readonly
ìì
 
string
ìì 
[
ìì 
]
ìì 
m_parameters
ìì (
;
ìì( )
private
†† 	
readonly
††
 
static
†† 
Type
†† 
declaringType
†† ,
=
††- .
typeof
††/ 5
(
††5 6

MethodItem
††6 @
)
††@ A
;
††A B
private
ßß 	
const
ßß
 
string
ßß 
NA
ßß 
=
ßß 
$str
ßß 
;
ßß  
}
™™ 
}´´ Œ
?C:\sonarqube\projects\log4net-2.0.7\src\Core\SecurityContext.cs
	namespace 	
log4net
 
. 
Core 
{ 
public## 
abstract## 
class## 
SecurityContext## &
{$$ 
public55 
abstract55	 
IDisposable55 
Impersonate55 )
(55) *
object55* 0
state551 6
)556 7
;557 8
}66 
}77 ü

GC:\sonarqube\projects\log4net-2.0.7\src\Core\SecurityContextProvider.cs
	namespace 	
log4net
 
. 
Core 
{ 
public:: 
class:: #
SecurityContextProvider:: %
{;; 
private?? 	
static??
 #
SecurityContextProvider?? (
s_defaultProvider??) :
=??; <
new??= @#
SecurityContextProvider??A X
(??X Y
)??Y Z
;??Z [
publicWW 
staticWW	 #
SecurityContextProviderWW '
DefaultProviderWW( 7
{XX 
getYY 
{YY 
returnYY	 
s_defaultProviderYY !
;YY! "
}YY# $
setZZ 
{ZZ 
s_defaultProviderZZ	 
=ZZ 
valueZZ "
;ZZ" #
}ZZ$ %
}[[ 
	protectedee #
SecurityContextProvideree #
(ee# $
)ee$ %
{ff 
}gg 
publicww 
virtualww	 
SecurityContextww  !
CreateSecurityContextww! 6
(ww6 7
objectww7 =
consumerww> F
)wwF G
{xx 
returnyy 	
NullSecurityContextyy
 
.yy 
Instanceyy &
;yy& '
}zz 
}{{ 
}|| é%
>C:\sonarqube\projects\log4net-2.0.7\src\Core\StackFrameItem.cs
	namespace 	
log4net
 
. 
Core 
{ 
[!! 
Serializable!! 
]!! 
public"" 

class"" 
StackFrameItem"" 
{## 
public++ 
StackFrameItem++ 
(++ 

StackFrame++ (
frame++) .
)++. /
{,, 	
m_lineNumber.. 
=.. 
NA.. 
;.. 

m_fileName// 
=// 
NA// 
;// 
m_method00 
=00 
new00 

MethodItem00 %
(00% &
)00& '
;00' (
m_className11 
=11 
NA11 
;11 
try33 
{44 
m_lineNumber66 
=66 
frame66 
.66 
GetFileLineNumber66 *
(66* +
)66+ ,
.66, -
ToString66- 5
(665 6
System666 <
.66< =
Globalization66= J
.66J K
NumberFormatInfo66K [
.66[ \
InvariantInfo66\ i
)66i j
;66j k

m_fileName77 
=77 
frame77 
.77 
GetFileName77 "
(77" #
)77# $
;77$ %

MethodBase99 
method99 
=99 
frame99 
.99 
	GetMethod99 '
(99' (
)99( )
;99) *
if:: 
(:: 
method:: 
!=:: 
null:: 
):: 
{;; 
if<< 
(<< 
method<< 
.<< 
DeclaringType<< 
!=<< 
null<<  $
)<<$ %
m_className== 
=== 
method== 
.== 
DeclaringType== (
.==( )
FullName==) 1
;==1 2
m_method>> 
=>> 
new>> 

MethodItem>> 
(>> 
method>> %
)>>% &
;>>& '
}?? 
}@@ 
catchAA 
(AA	 

	ExceptionAA
 
exAA 
)AA 
{BB 
LogLogCC 

.CC
 
ErrorCC 
(CC 
declaringTypeCC 
,CC 
$strCC  `
,CC` a
exCCb d
)CCd e
;CCe f
}DD 

m_fullInfoGG 
=GG 
m_classNameGG $
+GG% &
$charGG' *
+GG+ ,
m_methodGG- 5
.GG5 6
NameGG6 :
+GG; <
$charGG= @
+GGA B

m_fileNameGGC M
+GGN O
$charGGP S
+GGT U
m_lineNumberGGV b
+GGc d
$charGGe h
;GGh i
}HH 	
public\\ 
string\\ 
	ClassName\\ 
{]] 	
get^^ 
{^^ 
return^^ 
m_className^^ $
;^^$ %
}^^& '
}__ 	
publicll 
stringll 
FileNamell 
{mm 	
getnn 
{nn 
returnnn 

m_fileNamenn #
;nn# $
}nn% &
}oo 	
public|| 
string|| 

LineNumber||  
{}} 	
get~~ 
{~~ 
return~~ 
m_lineNumber~~ %
;~~% &
}~~' (
} 	
public
åå 

MethodItem
åå 
Method
åå  
{
çç 	
get
éé 
{
éé 
return
éé 
m_method
éé !
;
éé! "
}
éé# $
}
èè 	
public
ûû 
string
ûû 
FullInfo
ûû 
{
üü 	
get
†† 
{
†† 
return
†† 

m_fullInfo
†† #
;
††# $
}
††% &
}
°° 	
private
ßß 
readonly
ßß 
string
ßß 
m_lineNumber
ßß  ,
;
ßß, -
private
®® 
readonly
®® 
string
®® 

m_fileName
®®  *
;
®®* +
private
©© 
readonly
©© 
string
©© 
m_className
©©  +
;
©©+ ,
private
™™ 
readonly
™™ 
string
™™ 

m_fullInfo
™™  *
;
™™* +
private
´´ 	
readonly
´´
 

MethodItem
´´ 
m_method
´´ &
;
´´& '
private
∏∏ 
readonly
∏∏ 
static
∏∏ 
Type
∏∏  $
declaringType
∏∏% 2
=
∏∏3 4
typeof
∏∏5 ;
(
∏∏; <
StackFrameItem
∏∏< J
)
∏∏J K
;
∏∏K L
private
øø 
const
øø 
string
øø 
NA
øø 
=
øø  !
$str
øø" %
;
øø% &
}
¬¬ 
}√√ Ï
=C:\sonarqube\projects\log4net-2.0.7\src\Core\TimeEvaluator.cs
	namespace 	
log4net
 
. 
Core 
{ 
public"" 

class"" 
TimeEvaluator"" 
:""  %
ITriggeringEventEvaluator""! :
{## 
private'' 
int'' 

m_interval'' 
;'' 
private,, 
DateTime,, 
m_lastTimeUtc,, &
;,,& '
const11 
int11 
DEFAULT_INTERVAL11 "
=11# $
$num11% &
;11& '
public?? 
TimeEvaluator?? 
(?? 
)?? 
:@@ 
this@@ 
(@@ 
DEFAULT_INTERVAL@@ #
)@@# $
{AA 	
}BB 	
publicTT 
TimeEvaluatorTT 
(TT 
intTT  
intervalTT! )
)TT) *
{UU 	

m_intervalVV 
=VV 
intervalVV !
;VV! "
m_lastTimeUtcWW 
=WW 
DateTimeWW $
.WW$ %
UtcNowWW% +
;WW+ ,
}XX 	
publicgg 
intgg 
Intervalgg 
{hh 	
getii 
{ii 
returnii 

m_intervalii #
;ii# $
}ii% &
setjj 
{jj 

m_intervaljj 
=jj 
valuejj $
;jj$ %
}jj& '
}kk 	
publiczz 
boolzz 
IsTriggeringEventzz %
(zz% &
LoggingEventzz& 2
loggingEventzz3 ?
)zz? @
{{{ 	
if|| 
(|| 
loggingEvent|| 
==|| 
null||  $
)||$ %
{}} 
throw~~ 
new~~ !
ArgumentNullException~~ /
(~~/ 0
$str~~0 >
)~~> ?
;~~? @
} 
if
ÇÇ 
(
ÇÇ 

m_interval
ÇÇ 
==
ÇÇ 
$num
ÇÇ 
)
ÇÇ  
return
ÇÇ! '
false
ÇÇ( -
;
ÇÇ- .
lock
ÑÑ 
(
ÑÑ 
this
ÑÑ 
)
ÑÑ 
{
ÖÖ 
TimeSpan
ÜÜ 
passed
ÜÜ 
=
ÜÜ  !
DateTime
ÜÜ" *
.
ÜÜ* +
UtcNow
ÜÜ+ 1
.
ÜÜ1 2
Subtract
ÜÜ2 :
(
ÜÜ: ;
m_lastTimeUtc
ÜÜ; H
)
ÜÜH I
;
ÜÜI J
if
àà 
(
àà 
passed
àà 
.
àà 
TotalSeconds
àà '
>
àà( )

m_interval
àà* 4
)
àà4 5
{
ââ 
m_lastTimeUtc
ää !
=
ää" #
DateTime
ää$ ,
.
ää, -
UtcNow
ää- 3
;
ää3 4
return
ãã 
true
ãã 
;
ãã  
}
åå 
else
çç 
{
éé 
return
èè 
false
èè  
;
èè  !
}
êê 
}
ëë 
}
íí 	
}
ìì 
}îî ß,
:C:\sonarqube\projects\log4net-2.0.7\src\Core\WrapperMap.cs
	namespace 	
log4net
 
. 
Core 
{ 
public,, 
delegate,, 
ILoggerWrapper,, "
WrapperCreationHandler,,  6
(,,6 7
ILogger,,7 >
logger,,? E
),,E F
;,,F G
publicCC 
classCC 

WrapperMapCC 
{DD 
publicQQ 

WrapperMapQQ	 
(QQ "
WrapperCreationHandlerQQ * 
createWrapperHandlerQQ+ ?
)QQ? @
{RR "
m_createWrapperHandlerSS 
=SS  
createWrapperHandlerSS 0
;SS0 1
m_shutdownHandlerVV 
=VV 
newVV 0
$LoggerRepositoryShutdownEventHandlerVV ?
(VV? @&
ILoggerRepository_ShutdownVV@ Z
)VVZ [
;VV[ \
}WW 
virtualll 	
publicll
 
ILoggerWrapperll 

GetWrapperll  *
(ll* +
ILoggerll+ 2
loggerll3 9
)ll9 :
{mm 
ifoo 
(oo 
loggeroo 
==oo 
nulloo 
)oo 
{pp 
returnqq 

nullqq 
;qq 
}rr 
locktt 
(tt 
thistt 
)tt 
{uu 
	Hashtableww 
wrappersMapww 
=ww 
(ww 
	Hashtableww &
)ww& '
m_repositoriesww' 5
[ww5 6
loggerww6 <
.ww< =

Repositoryww= G
]wwG H
;wwH I
ifyy 
(yy 
wrappersMapyy 
==yy 
nullyy 
)yy 
{zz 
wrappersMap~~ 
=~~ 
new~~ 
	Hashtable~~  
(~~  !
)~~! "
;~~" #
m_repositories 
[ 
logger 
. 

Repository %
]% &
=' (
wrappersMap) 4
;4 5
logger
ÇÇ 
.
ÇÇ 

Repository
ÇÇ 
.
ÇÇ 
ShutdownEvent
ÇÇ $
+=
ÇÇ% '
m_shutdownHandler
ÇÇ( 9
;
ÇÇ9 :
}
ÉÉ 
ILoggerWrapper
ÜÜ 
wrapperObject
ÜÜ  
=
ÜÜ! "
wrappersMap
ÜÜ# .
[
ÜÜ. /
logger
ÜÜ/ 5
]
ÜÜ5 6
as
ÜÜ7 9
ILoggerWrapper
ÜÜ: H
;
ÜÜH I
if
àà 
(
àà 
wrapperObject
àà 
==
àà 
null
àà 
)
àà 
{
ââ 
wrapperObject
çç 
=
çç $
CreateNewWrapperObject
çç +
(
çç+ ,
logger
çç, 2
)
çç2 3
;
çç3 4
wrappersMap
êê 
[
êê 
logger
êê 
]
êê 
=
êê 
wrapperObject
êê (
;
êê( )
}
ëë 
return
ìì 

wrapperObject
ìì 
;
ìì 
}
îî 
}
ïï 
	protected
®® 
	Hashtable
®® 
Repositories
®® "
{
©© 
get
™™ 
{
™™ 
return
™™	 
this
™™ 
.
™™ 
m_repositories
™™ #
;
™™# $
}
™™% &
}
´´ 
virtual
ΩΩ 	
	protected
ΩΩ
 
ILoggerWrapper
ΩΩ "$
CreateNewWrapperObject
ΩΩ# 9
(
ΩΩ9 :
ILogger
ΩΩ: A
logger
ΩΩB H
)
ΩΩH I
{
ææ 
if
øø 
(
øø $
m_createWrapperHandler
øø 
!=
øø  
null
øø! %
)
øø% &
{
¿¿ 
return
¡¡ 
$
m_createWrapperHandler
¡¡ !
(
¡¡! "
logger
¡¡" (
)
¡¡( )
;
¡¡) *
}
¬¬ 
return
√√ 	
null
√√
 
;
√√ 
}
ƒƒ 
virtual
”” 	
	protected
””
 
void
””  
RepositoryShutdown
”” +
(
””+ ,
ILoggerRepository
””, =

repository
””> H
)
””H I
{
‘‘ 
lock
’’ 
(
’’ 
this
’’ 
)
’’ 
{
÷÷ 
m_repositories
ÿÿ 
.
ÿÿ 
Remove
ÿÿ 
(
ÿÿ 

repository
ÿÿ $
)
ÿÿ$ %
;
ÿÿ% &

repository
€€ 
.
€€ 
ShutdownEvent
€€ 
-=
€€ 
m_shutdownHandler
€€  1
;
€€1 2
}
‹‹ 
}
›› 
private
‰‰ 	
void
‰‰
 (
ILoggerRepository_Shutdown
‰‰ )
(
‰‰) *
object
‰‰* 0
sender
‰‰1 7
,
‰‰7 8
	EventArgs
‰‰9 B
e
‰‰C D
)
‰‰D E
{
ÂÂ 
ILoggerRepository
ÊÊ 

repository
ÊÊ 
=
ÊÊ  !
sender
ÊÊ" (
as
ÊÊ) +
ILoggerRepository
ÊÊ, =
;
ÊÊ= >
if
ÁÁ 
(
ÁÁ 

repository
ÁÁ 
!=
ÁÁ 
null
ÁÁ 
)
ÁÁ 
{
ËË  
RepositoryShutdown
ÍÍ 
(
ÍÍ 

repository
ÍÍ !
)
ÍÍ! "
;
ÍÍ" #
}
ÎÎ 
}
ÏÏ 
private
ıı 	
readonly
ıı
 
	Hashtable
ıı 
m_repositories
ıı +
=
ıı, -
new
ıı. 1
	Hashtable
ıı2 ;
(
ıı; <
)
ıı< =
;
ıı= >
private
˙˙ 	
readonly
˙˙
 $
WrapperCreationHandler
˙˙ )$
m_createWrapperHandler
˙˙* @
;
˙˙@ A
private
ˇˇ 	
readonly
ˇˇ
 2
$LoggerRepositoryShutdownEventHandler
ˇˇ 7
m_shutdownHandler
ˇˇ8 I
;
ˇˇI J
}
ÇÇ 
}ÉÉ ∑8
RC:\sonarqube\projects\log4net-2.0.7\src\DateFormatter\AbsoluteTimeDateFormatter.cs
	namespace 	
log4net
 
. 
DateFormatter 
{ 
public%% 
class%% %
AbsoluteTimeDateFormatter%% '
:%%( )
IDateFormatter%%* 8
{&& 
virtual66 	
	protected66
 
void66 #
FormatDateWithoutMillis66 0
(660 1
DateTime661 9
dateToFormat66: F
,66F G
StringBuilder66H U
buffer66V \
)66\ ]
{77 
int88 
hour88 
=88 
dateToFormat88 
.88 
Hour88 
;88  
if99 
(99 
hour99 
<99 
$num99 
)99 
{:: 
buffer;; 

.;;
 
Append;; 
(;; 
$char;; 
);; 
;;; 
}<< 
buffer== 	
.==	 

Append==
 
(== 
hour== 
)== 
;== 
buffer>> 	
.>>	 

Append>>
 
(>> 
$char>> 
)>> 
;>> 
int@@ 
mins@@ 
=@@ 
dateToFormat@@ 
.@@ 
Minute@@ !
;@@! "
ifAA 
(AA 
minsAA 
<AA 
$numAA 
)AA 
{BB 
bufferCC 

.CC
 
AppendCC 
(CC 
$charCC 
)CC 
;CC 
}DD 
bufferEE 	
.EE	 

AppendEE
 
(EE 
minsEE 
)EE 
;EE 
bufferFF 	
.FF	 

AppendFF
 
(FF 
$charFF 
)FF 
;FF 
intHH 
secsHH 
=HH 
dateToFormatHH 
.HH 
SecondHH !
;HH! "
ifII 
(II 
secsII 
<II 
$numII 
)II 
{JJ 
bufferKK 

.KK
 
AppendKK 
(KK 
$charKK 
)KK 
;KK 
}LL 
bufferMM 	
.MM	 

AppendMM
 
(MM 
secsMM 
)MM 
;MM 
}NN 
virtualff 	
publicff
 
voidff 

FormatDateff  
(ff  !
DateTimeff! )
dateToFormatff* 6
,ff6 7

TextWriterff8 B
writerffC I
)ffI J
{gg 
lockhh 
(hh 
s_lastTimeStringshh +
)hh+ ,
{ii 
longkk "
currentTimeToTheSecondkk 
=kk  
(kk! "
dateToFormatkk" .
.kk. /
Tickskk/ 4
-kk5 6
(kk7 8
dateToFormatkk8 D
.kkD E
TickskkE J
%kkK L
TimeSpankkM U
.kkU V
TicksPerSecondkkV d
)kkd e
)kke f
;kkf g
stringmm 

timeStringmm )
=mm* +
nullmm, 0
;mm0 1
ifqq 
(qq !
s_lastTimeToTheSecondqq 1
!=qq2 4"
currentTimeToTheSecondqq5 K
)qqK L
{rr 
s_lastTimeStringsss -
.ss- .
Clearss. 3
(ss3 4
)ss4 5
;ss5 6
}tt 
elseuu 
{vv 

timeStringww &
=ww' (
(ww) *
stringww* 0
)ww0 1
s_lastTimeStringsww2 C
[wwC D
GetTypewwD K
(wwK L
)wwL M
]wwM N
;wwN O
}xx 
ifzz 
(zz 

timeStringzz &
==zz' )
nullzz* .
)zz. /
{{{ 
lock
ÄÄ 
(
ÄÄ 	
s_lastTimeBuf
ÄÄ	 
)
ÄÄ 
{
ÅÅ 

timeString
ÇÇ( 2
=
ÇÇ3 4
(
ÇÇ5 6
string
ÇÇ6 <
)
ÇÇ< =
s_lastTimeStrings
ÇÇ> O
[
ÇÇO P
GetType
ÇÇP W
(
ÇÇW X
)
ÇÇX Y
]
ÇÇY Z
;
ÇÇZ [
if
ÑÑ( *
(
ÑÑ+ ,

timeString
ÑÑ, 6
==
ÑÑ7 9
null
ÑÑ: >
)
ÑÑ> ?
{
ÖÖ( )
s_lastTimeBuf
áá 
.
áá 
Length
áá 
=
áá 
$num
áá 
;
áá %
FormatDateWithoutMillis
ää 
(
ää 
dateToFormat
ää *
,
ää* +
s_lastTimeBuf
ää, 9
)
ää9 :
;
ää: ;

timeString
çç0 :
=
çç; <
s_lastTimeBuf
çç= J
.
ççJ K
ToString
ççK S
(
ççS T
)
ççT U
;
ççU V
s_lastTimeStrings
ïï0 A
[
ïïA B
GetType
ïïB I
(
ïïI J
)
ïïJ K
]
ïïK L
=
ïïM N

timeString
ïïO Y
;
ïïY Z#
s_lastTimeToTheSecond
ññ 
=
ññ $
currentTimeToTheSecond
ññ 4
;
ññ4 5
}
óó 
}
òò 
}
ôô 
writer
öö 	
.
öö	 

Write
öö
 
(
öö 

timeString
öö 
)
öö 
;
öö 
writer
ùù 	
.
ùù	 

Write
ùù
 
(
ùù 
$char
ùù 
)
ùù 
;
ùù 
int
ûû 
millis
ûû 
=
ûû 
dateToFormat
ûû 
.
ûû 
Millisecond
ûû (
;
ûû( )
if
üü 
(
üü 
millis
üü 
<
üü 
$num
üü 
)
üü 
{
†† 
writer
°° 

.
°°
 
Write
°° 
(
°° 
$char
°° 
)
°° 
;
°° 
}
¢¢ 
if
££ 
(
££ 
millis
££ 
<
££ 
$num
££ 
)
££ 
{
§§ 
writer
•• 

.
••
 
Write
•• 
(
•• 
$char
•• 
)
•• 
;
•• 
}
¶¶ 
writer
ßß 	
.
ßß	 

Write
ßß
 
(
ßß 
millis
ßß 
)
ßß 
;
ßß 
}
®® 
}
©© 
public
≤≤ 
const
≤≤	 
string
≤≤ $
AbsoluteTimeDateFormat
≤≤ ,
=
≤≤- .
$str
≤≤/ 9
;
≤≤9 :
public
∑∑ 
const
∑∑	 
string
∑∑ #
DateAndTimeDateFormat
∑∑ +
=
∑∑, -
$str
∑∑. 4
;
∑∑4 5
public
ºº 
const
ºº	 
string
ºº #
Iso8601TimeDateFormat
ºº +
=
ºº, -
$str
ºº. 7
;
ºº7 8
private
≈≈ 	
static
≈≈
 
long
≈≈ #
s_lastTimeToTheSecond
≈≈ +
=
≈≈, -
$num
≈≈. /
;
≈≈/ 0
private
ÀÀ 	
static
ÀÀ
 
StringBuilder
ÀÀ 
s_lastTimeBuf
ÀÀ ,
=
ÀÀ- .
new
ÀÀ/ 2
StringBuilder
ÀÀ3 @
(
ÀÀ@ A
)
ÀÀA B
;
ÀÀB C
private
—— 	
static
——
 
	Hashtable
—— 
s_lastTimeStrings
—— ,
=
——- .
new
——/ 2
	Hashtable
——3 <
(
——< =
)
——= >
;
——> ?
}
‘‘ 
}’’ è
NC:\sonarqube\projects\log4net-2.0.7\src\DateFormatter\DateTimeDateFormatter.cs
	namespace 	
log4net
 
. 
DateFormatter 
{ 
public'' 
class'' !
DateTimeDateFormatter'' #
:''$ %%
AbsoluteTimeDateFormatter''& ?
{(( 
public33 !
DateTimeDateFormatter33	 
(33 
)33  
{44  
m_dateTimeFormatInfo55 
=55 
DateTimeFormatInfo55 ,
.55, -
InvariantInfo55- :
;55: ;
}66 
overrideKK 

	protectedKK 
voidKK #
FormatDateWithoutMillisKK 1
(KK1 2
DateTimeKK2 :
dateToFormatKK; G
,KKG H
StringBuilderKKI V
bufferKKW ]
)KK] ^
{LL 
intMM 
dayMM 

=MM 
dateToFormatMM 
.MM 
DayMM 
;MM 
ifNN 
(NN 
dayNN 

<NN 
$numNN 
)NN 
{OO 
bufferPP 

.PP
 
AppendPP 
(PP 
$charPP 
)PP 
;PP 
}QQ 
bufferRR 	
.RR	 

AppendRR
 
(RR 
dayRR 
)RR 
;RR 
bufferSS 	
.SS	 

AppendSS
 
(SS 
$charSS 
)SS 
;SS 
bufferUU 	
.UU	 

AppendUU
 
(UU  
m_dateTimeFormatInfoUU %
.UU% &#
GetAbbreviatedMonthNameUU& =
(UU= >
dateToFormatUU> J
.UUJ K
MonthUUK P
)UUP Q
)UUQ R
;UUR S
bufferVV 	
.VV	 

AppendVV
 
(VV 
$charVV 
)VV 
;VV 
bufferXX 	
.XX	 

AppendXX
 
(XX 
dateToFormatXX 
.XX 
YearXX "
)XX" #
;XX# $
bufferYY 	
.YY	 

AppendYY
 
(YY 
$charYY 
)YY 
;YY 
base\\ 
.\\ #
FormatDateWithoutMillis\\ 
(\\  
dateToFormat\\  ,
,\\, -
buffer\\. 4
)\\4 5
;\\5 6
}]] 
privateff 	
readonlyff
 
DateTimeFormatInfoff % 
m_dateTimeFormatInfoff& :
;ff: ;
}ii 
}jj ﬁ
GC:\sonarqube\projects\log4net-2.0.7\src\DateFormatter\IDateFormatter.cs
	namespace 	
log4net
 
. 
DateFormatter 
{ 
public(( 
	interface(( 
IDateFormatter((  
{)) 
void55 

FormatDate55 
(55 
DateTime55 
dateToFormat55 '
,55' (

TextWriter55) 3
writer554 :
)55: ;
;55; <
}66 
}77 ﬁ
MC:\sonarqube\projects\log4net-2.0.7\src\DateFormatter\Iso8601DateFormatter.cs
	namespace 	
log4net
 
. 
DateFormatter 
{ 
public## 
class##  
Iso8601DateFormatter## "
:### $%
AbsoluteTimeDateFormatter##% >
{$$ 
public//  
Iso8601DateFormatter//	 
(// 
)// 
{00 
}11 
overrideEE 

	protectedEE 
voidEE #
FormatDateWithoutMillisEE 1
(EE1 2
DateTimeEE2 :
dateToFormatEE; G
,EEG H
StringBuilderEEI V
bufferEEW ]
)EE] ^
{FF 
bufferGG 	
.GG	 

AppendGG
 
(GG 
dateToFormatGG 
.GG 
YearGG "
)GG" #
;GG# $
bufferII 	
.II	 

AppendII
 
(II 
$charII 
)II 
;II 
intJJ 
monthJJ 
=JJ 
dateToFormatJJ 
.JJ 
MonthJJ !
;JJ! "
ifKK 
(KK 
monthKK 
<KK 
$numKK 
)KK 
{LL 
bufferMM 

.MM
 
AppendMM 
(MM 
$charMM 
)MM 
;MM 
}NN 
bufferOO 	
.OO	 

AppendOO
 
(OO 
monthOO 
)OO 
;OO 
bufferPP 	
.PP	 

AppendPP
 
(PP 
$charPP 
)PP 
;PP 
intRR 
dayRR 

=RR 
dateToFormatRR 
.RR 
DayRR 
;RR 
ifSS 
(SS 
daySS 

<SS 
$numSS 
)SS 
{TT 
bufferUU 

.UU
 
AppendUU 
(UU 
$charUU 
)UU 
;UU 
}VV 
bufferWW 	
.WW	 

AppendWW
 
(WW 
dayWW 
)WW 
;WW 
bufferXX 	
.XX	 

AppendXX
 
(XX 
$charXX 
)XX 
;XX 
base[[ 
.[[ #
FormatDateWithoutMillis[[ 
([[  
dateToFormat[[  ,
,[[, -
buffer[[. 4
)[[4 5
;[[5 6
}\\ 
}__ 
}`` ö

LC:\sonarqube\projects\log4net-2.0.7\src\DateFormatter\SimpleDateFormatter.cs
	namespace 	
log4net
 
. 
DateFormatter 
{ 
public## 
class## 
SimpleDateFormatter## !
:##" #
IDateFormatter##$ 2
{$$ 
public55 
SimpleDateFormatter55	 
(55 
string55 #
format55$ *
)55* +
{66 
m_formatString77 
=77 
format77 
;77 
}88 
virtualII 	
publicII
 
voidII 

FormatDateII  
(II  !
DateTimeII! )
dateToFormatII* 6
,II6 7

TextWriterII8 B
writerIIC I
)III J
{JJ 
writerKK 	
.KK	 

WriteKK
 
(KK 
dateToFormatKK 
.KK 
ToStringKK %
(KK% &
m_formatStringKK& 4
,KK4 5
SystemKK6 <
.KK< =
GlobalizationKK= J
.KKJ K
DateTimeFormatInfoKKK ]
.KK] ^
InvariantInfoKK^ k
)KKk l
)KKl m
;KKm n
}LL 
private[[ 	
readonly[[
 
string[[ 
m_formatString[[ (
;[[( )
}^^ 
}__ ‹
?C:\sonarqube\projects\log4net-2.0.7\src\Filter\DenyAllFilter.cs
	namespace 	
log4net
 
. 
Filter 
{ 
public'' 
sealed'' 
class'' 
DenyAllFilter'' "
:''# $
FilterSkeleton''% 3
{(( 
public.. 
DenyAllFilter..	 
(.. 
).. 
{// 
}00 
overrideDD 

publicDD 
FilterDecisionDD  
DecideDD! '
(DD' (
LoggingEventDD( 4
loggingEventDD5 A
)DDA B
{EE 
returnFF 	
FilterDecisionFF
 
.FF 
DenyFF 
;FF 
}GG 
}JJ 
}KK É
@C:\sonarqube\projects\log4net-2.0.7\src\Filter\FilterDecision.cs
	namespace 	
log4net
 
. 
Filter 
{ 
public"" 
enum"" 
FilterDecision"" 
:"" 
int"" !
{## 
Deny(( 
=(( 
-((	 

$num((
 
,(( 
Neutral.. 	
=..
 
$num.. 
,.. 
Accept44 
=44	 

$num44 
,44 
}55 
}66 Õ
@C:\sonarqube\projects\log4net-2.0.7\src\Filter\FilterSkeleton.cs
	namespace 	
log4net
 
. 
Filter 
{ 
publicEE 
abstractEE 
classEE 
FilterSkeletonEE %
:EE& '
IFilterEE( /
{FF 
privateQQ 	
IFilterQQ
 
m_nextQQ 
;QQ 
virtualkk 	
publickk
 
voidkk 
ActivateOptionskk %
(kk% &
)kk& '
{ll 
}mm 
abstract
ÖÖ 

public
ÖÖ 
FilterDecision
ÖÖ  
Decide
ÖÖ! '
(
ÖÖ' (
LoggingEvent
ÖÖ( 4
loggingEvent
ÖÖ5 A
)
ÖÖA B
;
ÖÖB C
public
ìì 
IFilter
ìì	 
Next
ìì 
{
îî 
get
ïï 
{
ïï 
return
ïï	 
m_next
ïï 
;
ïï 
}
ïï 
set
ññ 
{
ññ 
m_next
ññ	 
=
ññ 
value
ññ 
;
ññ 
}
ññ 
}
óó 
}
öö 
}õõ ¡
9C:\sonarqube\projects\log4net-2.0.7\src\Filter\IFilter.cs
	namespace 	
log4net
 
. 
Filter 
{ 
publicFF 
	interfaceFF 
IFilterFF 
:FF 
IOptionHandlerFF *
{GG 
FilterDecisionVV 
DecideVV 
(VV 
LoggingEventVV $
loggingEventVV% 1
)VV1 2
;VV2 3
IFilterdd 	
Nextdd
 
{dd 
getdd 
;dd 
setdd 
;dd 
}dd 
}ee 
}ff Ì
BC:\sonarqube\projects\log4net-2.0.7\src\Filter\LevelMatchFilter.cs
	namespace 	
log4net
 
. 
Filter 
{ 
public-- 
class-- 
LevelMatchFilter-- 
:--  
FilterSkeleton--! /
{.. 
private44 	
bool44
 
m_acceptOnMatch44 
=44  
true44! %
;44% &
private99 	
Level99
 
m_levelToMatch99 
;99 
publicBB 
LevelMatchFilterBB	 
(BB 
)BB 
{CC 
}DD 
publicVV 
boolVV	 
AcceptOnMatchVV 
{WW 
getXX 
{XX 
returnXX	 
m_acceptOnMatchXX 
;XX  
}XX! "
setYY 
{YY 
m_acceptOnMatchYY	 
=YY 
valueYY  
;YY  !
}YY" #
}ZZ 
publicff 
Levelff	 
LevelToMatchff 
{gg 
gethh 
{hh 
returnhh	 
m_levelToMatchhh 
;hh 
}hh  !
setii 
{ii 
m_levelToMatchii	 
=ii 
valueii 
;ii  
}ii! "
}jj 
override}} 

public}} 
FilterDecision}}  
Decide}}! '
(}}' (
LoggingEvent}}( 4
loggingEvent}}5 A
)}}A B
{~~ 
if 
( 
loggingEvent 
== 
null 
) 
{
ÄÄ 
throw
ÅÅ 	
new
ÅÅ
 #
ArgumentNullException
ÅÅ #
(
ÅÅ# $
$str
ÅÅ$ 2
)
ÅÅ2 3
;
ÅÅ3 4
}
ÇÇ 
if
ÑÑ 
(
ÑÑ 
m_levelToMatch
ÑÑ 
!=
ÑÑ 
null
ÑÑ 
&&
ÑÑ  
m_levelToMatch
ÑÑ! /
==
ÑÑ0 2
loggingEvent
ÑÑ3 ?
.
ÑÑ? @
Level
ÑÑ@ E
)
ÑÑE F
{
ÖÖ 
return
áá 

m_acceptOnMatch
áá 
?
áá 
FilterDecision
áá +
.
áá+ ,
Accept
áá, 2
:
áá3 4
FilterDecision
áá5 C
.
ááC D
Deny
ááD H
;
ááH I
}
àà 
return
ââ 	
FilterDecision
ââ
 
.
ââ 
Neutral
ââ  
;
ââ  !
}
ää 
}
çç 
}éé ñ
BC:\sonarqube\projects\log4net-2.0.7\src\Filter\LevelRangeFilter.cs
	namespace 	
log4net
 
. 
Filter 
{ 
public,, 
class,, 
LevelRangeFilter,, 
:,,  
FilterSkeleton,,! /
{-- 
private33 	
bool33
 
m_acceptOnMatch33 
=33  
true33! %
;33% &
private88 	
Level88
 

m_levelMin88 
;88 
private== 	
Level==
 

m_levelMax== 
;== 
publicFF 
LevelRangeFilterFF	 
(FF 
)FF 
{GG 
}HH 
publicZZ 
boolZZ	 
AcceptOnMatchZZ 
{[[ 
get\\ 
{\\ 
return\\	 
m_acceptOnMatch\\ 
;\\  
}\\! "
set]] 
{]] 
m_acceptOnMatch]]	 
=]] 
value]]  
;]]  !
}]]" #
}^^ 
publicjj 
Leveljj	 
LevelMinjj 
{kk 
getll 
{ll 
returnll	 

m_levelMinll 
;ll 
}ll 
setmm 
{mm 

m_levelMinmm	 
=mm 
valuemm 
;mm 
}mm 
}nn 
publiczz 
Levelzz	 
LevelMaxzz 
{{{ 
get|| 
{|| 
return||	 

m_levelMax|| 
;|| 
}|| 
set}} 
{}} 

m_levelMax}}	 
=}} 
value}} 
;}} 
}}} 
}~~ 
override
ëë 

public
ëë 
FilterDecision
ëë  
Decide
ëë! '
(
ëë' (
LoggingEvent
ëë( 4
loggingEvent
ëë5 A
)
ëëA B
{
íí 
if
ìì 
(
ìì 
loggingEvent
ìì 
==
ìì 
null
ìì 
)
ìì 
{
îî 
throw
ïï 	
new
ïï
 #
ArgumentNullException
ïï #
(
ïï# $
$str
ïï$ 2
)
ïï2 3
;
ïï3 4
}
ññ 
if
òò 
(
òò 

m_levelMin
òò 
!=
òò 
null
òò 
)
òò 
{
ôô 
if
öö 
(
öö 
loggingEvent
öö 
.
öö 
Level
öö 
<
öö 

m_levelMin
öö '
)
öö' (
{
õõ 
return
ùù 
FilterDecision
ùù 
.
ùù 
Deny
ùù 
;
ùù  
}
ûû 
}
üü 
if
°° 
(
°° 

m_levelMax
°° 
!=
°° 
null
°° 
)
°° 
{
¢¢ 
if
££ 
(
££ 
loggingEvent
££ 
.
££ 
Level
££ 
>
££ 

m_levelMax
££ '
)
££' (
{
§§ 
return
¶¶ 
FilterDecision
¶¶ 
.
¶¶ 
Deny
¶¶ 
;
¶¶  
}
ßß 
}
®® 
if
™™ 
(
™™ 
m_acceptOnMatch
™™ 
)
™™ 
{
´´ 
return
ÆÆ 

FilterDecision
ÆÆ 
.
ÆÆ 
Accept
ÆÆ  
;
ÆÆ  !
}
ØØ 
else
∞∞ 
{
±± 
return
≥≥ 

FilterDecision
≥≥ 
.
≥≥ 
Neutral
≥≥ !
;
≥≥! "
}
¥¥ 
}
µµ 
}
∏∏ 
}ππ á
CC:\sonarqube\projects\log4net-2.0.7\src\Filter\LoggerMatchFilter.cs
	namespace 	
log4net
 
. 
Filter 
{ 
public++ 
class++ 
LoggerMatchFilter++ 
:++  !
FilterSkeleton++" 0
{,, 
private22 	
bool22
 
m_acceptOnMatch22 
=22  
true22! %
;22% &
private77 	
string77
 
m_loggerToMatch77  
;77  !
public@@ 
LoggerMatchFilter@@	 
(@@ 
)@@ 
{AA 
}BB 
publicVV 
boolVV	 
AcceptOnMatchVV 
{WW 
getXX 
{XX 
returnXX	 
m_acceptOnMatchXX 
;XX  
}XX! "
setYY 
{YY 
m_acceptOnMatchYY	 
=YY 
valueYY  
;YY  !
}YY" #
}ZZ 
publichh 
stringhh	 
LoggerToMatchhh 
{ii 
getjj 
{jj 
returnjj	 
m_loggerToMatchjj 
;jj  
}jj! "
setkk 
{kk 
m_loggerToMatchkk	 
=kk 
valuekk  
;kk  !
}kk" #
}ll 
override
ÑÑ 

public
ÑÑ 
FilterDecision
ÑÑ  
Decide
ÑÑ! '
(
ÑÑ' (
LoggingEvent
ÑÑ( 4
loggingEvent
ÑÑ5 A
)
ÑÑA B
{
ÖÖ 
if
ÜÜ 
(
ÜÜ 
loggingEvent
ÜÜ 
==
ÜÜ 
null
ÜÜ 
)
ÜÜ 
{
áá 
throw
àà 	
new
àà
 #
ArgumentNullException
àà #
(
àà# $
$str
àà$ 2
)
àà2 3
;
àà3 4
}
ââ 
if
åå 
(
åå 
(
åå 
m_loggerToMatch
åå 
!=
åå 
null
åå 
&&
åå  "
m_loggerToMatch
åå# 2
.
åå2 3
Length
åå3 9
!=
åå: <
$num
åå= >
)
åå> ?
&&
åå@ B
loggingEvent
çç 
.
çç 

LoggerName
çç 
.
çç 

StartsWith
çç &
(
çç& '
m_loggerToMatch
çç' 6
)
çç6 7
)
çç7 8
{
éé 
if
êê 
(
êê 
m_acceptOnMatch
êê 
)
êê 
{
ëë 
return
íí 
FilterDecision
íí 
.
íí 
Accept
íí !
;
íí! "
}
ìì 
return
îî 

FilterDecision
îî 
.
îî 
Deny
îî 
;
îî 
}
ïï 
else
ññ 
{
óó 
return
öö 

FilterDecision
öö 
.
öö 
Neutral
öö !
;
öö! "
}
õõ 
}
úú 
}
üü 
}†† ´
;C:\sonarqube\projects\log4net-2.0.7\src\Filter\MdcFilter.cs
	namespace 	
log4net
 
. 
Filter 
{ 
public,, 
class,, 
	MdcFilter,, 
:,, 
PropertyFilter,, (
{-- 
}.. 
}// Ù
;C:\sonarqube\projects\log4net-2.0.7\src\Filter\NdcFilter.cs
	namespace 	
log4net
 
. 
Filter 
{ 
public-- 
class-- 
	NdcFilter-- 
:-- 
PropertyFilter-- (
{.. 
public77 
	NdcFilter77	 
(77 
)77 
{88 
base99 
.99 
Key99 
=99 
$str99 
;99 
}:: 
};; 
}<< é!
@C:\sonarqube\projects\log4net-2.0.7\src\Filter\PropertyFilter.cs
	namespace 	
log4net
 
. 
Filter 
{ 
public'' 
class'' 
PropertyFilter'' 
:'' 
StringMatchFilter'' 0
{(( 
private.. 	
string..
 
m_key.. 
;.. 
public77 
PropertyFilter77	 
(77 
)77 
{88 
}99 
publicGG 
stringGG	 
KeyGG 
{HH 
getII 
{II 
returnII	 
m_keyII 
;II 
}II 
setJJ 
{JJ 
m_keyJJ	 
=JJ 
valueJJ 
;JJ 
}JJ 
}KK 
overrideaa 

publicaa 
FilterDecisionaa  
Decideaa! '
(aa' (
LoggingEventaa( 4
loggingEventaa5 A
)aaA B
{bb 
ifcc 
(cc 
loggingEventcc 
==cc 
nullcc 
)cc 
{dd 
throwee 	
newee
 !
ArgumentNullExceptionee #
(ee# $
$stree$ 2
)ee2 3
;ee3 4
}ff 
ifii 
(ii 
m_keyii 
==ii 
nullii 
)ii 
{jj 
returnmm 

FilterDecisionmm 
.mm 
Neutralmm !
;mm! "
}nn 
objectrr 	
msgObjrr
 
=rr 
loggingEventrr 
.rr  
LookupPropertyrr  .
(rr. /
m_keyrr/ 4
)rr4 5
;rr5 6
stringuu 	
msguu
 
=uu 
loggingEventuu 
.uu 

Repositoryuu '
.uu' (
RendererMapuu( 3
.uu3 4
FindAndRenderuu4 A
(uuA B
msgObjuuB H
)uuH I
;uuI J
ifxx 
(xx 
msgxx 

==xx 
nullxx 
||xx 
(xx 
m_stringToMatchxx &
==xx' )
nullxx* .
&&xx/ 1
m_regexToMatchxx2 @
==xxA C
nullxxD H
)xxH I
)xxI J
{yy 
return|| 

FilterDecision|| 
.|| 
Neutral|| !
;||! "
}}} 
if
ÄÄ 
(
ÄÄ 
m_regexToMatch
ÄÄ 
!=
ÄÄ 
null
ÄÄ 
)
ÄÄ 
{
ÅÅ 
if
ÉÉ 
(
ÉÉ 
m_regexToMatch
ÉÉ 
.
ÉÉ 
Match
ÉÉ 
(
ÉÉ 
msg
ÉÉ  
)
ÉÉ  !
.
ÉÉ! "
Success
ÉÉ" )
==
ÉÉ* ,
false
ÉÉ- 2
)
ÉÉ2 3
{
ÑÑ 
return
ÜÜ 
FilterDecision
ÜÜ 
.
ÜÜ 
Neutral
ÜÜ "
;
ÜÜ" #
}
áá 
if
ää 
(
ää 
m_acceptOnMatch
ää 
)
ää 
{
ãã 
return
åå 
FilterDecision
åå 
.
åå 
Accept
åå !
;
åå! "
}
çç 
return
éé 

FilterDecision
éé 
.
éé 
Deny
éé 
;
éé 
}
èè 
else
êê 
if
êê 

(
êê 
m_stringToMatch
êê 
!=
êê 
null
êê #
)
êê# $
{
ëë 
if
ìì 
(
ìì 
msg
ìì 
.
ìì 
IndexOf
ìì 
(
ìì 
m_stringToMatch
ìì #
)
ìì# $
==
ìì% '
-
ìì( )
$num
ìì) *
)
ìì* +
{
îî 
return
ññ 
FilterDecision
ññ 
.
ññ 
Neutral
ññ "
;
ññ" #
}
óó 
if
öö 
(
öö 
m_acceptOnMatch
öö 
)
öö 
{
õõ 
return
úú 
FilterDecision
úú 
.
úú 
Accept
úú !
;
úú! "
}
ùù 
return
ûû 

FilterDecision
ûû 
.
ûû 
Deny
ûû 
;
ûû 
}
üü 
return
†† 	
FilterDecision
††
 
.
†† 
Neutral
††  
;
††  !
}
°° 
}
§§ 
}•• ¨*
CC:\sonarqube\projects\log4net-2.0.7\src\Filter\StringMatchFilter.cs
	namespace 	
log4net
 
. 
Filter 
{ 
public'' 
class'' 
StringMatchFilter'' 
:''  !
FilterSkeleton''" 0
{(( 
	protected.. 
bool.. 
m_acceptOnMatch..  
=..! "
true..# '
;..' (
	protected33 
string33 
m_stringToMatch33 "
;33" #
	protected88 
string88  
m_stringRegexToMatch88 '
;88' (
	protected== 
Regex== 
m_regexToMatch==  
;==  !
publicFF 
StringMatchFilterFF	 
(FF 
)FF 
{GG 
}HH 
override^^ 

public^^ 
void^^ 
ActivateOptions^^ &
(^^& '
)^^' (
{__ 
if`` 
(``  
m_stringRegexToMatch`` 
!=`` 
null`` #
)``# $
{aa 
m_regexToMatchee 
=ee 
newee 
Regexee 
(ee  
m_stringRegexToMatchee 3
,ee3 4
RegexOptionsee5 A
.eeA B
CompiledeeB J
)eeJ K
;eeK L
}gg 
}hh 
publiczz 
boolzz	 
AcceptOnMatchzz 
{{{ 
get|| 
{|| 
return||	 
m_acceptOnMatch|| 
;||  
}||! "
set}} 
{}} 
m_acceptOnMatch}}	 
=}} 
value}}  
;}}  !
}}}" #
}~~ 
public
èè 
string
èè	 
StringToMatch
èè 
{
êê 
get
ëë 
{
ëë 
return
ëë	 
m_stringToMatch
ëë 
;
ëë  
}
ëë! "
set
íí 
{
íí 
m_stringToMatch
íí	 
=
íí 
value
íí  
;
íí  !
}
íí" #
}
ìì 
public
§§ 
string
§§	 
RegexToMatch
§§ 
{
•• 
get
¶¶ 
{
¶¶ 
return
¶¶	 "
m_stringRegexToMatch
¶¶ $
;
¶¶$ %
}
¶¶& '
set
ßß 
{
ßß "
m_stringRegexToMatch
ßß	 
=
ßß 
value
ßß  %
;
ßß% &
}
ßß' (
}
®® 
override
ΩΩ 

public
ΩΩ 
FilterDecision
ΩΩ  
Decide
ΩΩ! '
(
ΩΩ' (
LoggingEvent
ΩΩ( 4
loggingEvent
ΩΩ5 A
)
ΩΩA B
{
ææ 
if
øø 
(
øø 
loggingEvent
øø 
==
øø 
null
øø 
)
øø 
{
¿¿ 
throw
¡¡ 	
new
¡¡
 #
ArgumentNullException
¡¡ #
(
¡¡# $
$str
¡¡$ 2
)
¡¡2 3
;
¡¡3 4
}
¬¬ 
string
ƒƒ 	
msg
ƒƒ
 
=
ƒƒ 
loggingEvent
ƒƒ 
.
ƒƒ 
RenderedMessage
ƒƒ ,
;
ƒƒ, -
if
«« 
(
«« 
msg
«« 

==
«« 
null
«« 
||
«« 
(
«« 
m_stringToMatch
«« &
==
««' )
null
««* .
&&
««/ 1
m_regexToMatch
««2 @
==
««A C
null
««D H
)
««H I
)
««I J
{
»» 
return
ÀÀ 

FilterDecision
ÀÀ 
.
ÀÀ 
Neutral
ÀÀ !
;
ÀÀ! "
}
ÃÃ 
if
œœ 
(
œœ 
m_regexToMatch
œœ 
!=
œœ 
null
œœ 
)
œœ 
{
–– 
if
““ 
(
““ 
m_regexToMatch
““ 
.
““ 
Match
““ 
(
““ 
msg
““  
)
““  !
.
““! "
Success
““" )
==
““* ,
false
““- 2
)
““2 3
{
”” 
return
’’ 
FilterDecision
’’ 
.
’’ 
Neutral
’’ "
;
’’" #
}
÷÷ 
if
ŸŸ 
(
ŸŸ 
m_acceptOnMatch
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
return
€€ 
FilterDecision
€€ 
.
€€ 
Accept
€€ !
;
€€! "
}
‹‹ 
return
›› 

FilterDecision
›› 
.
›› 
Deny
›› 
;
›› 
}
ﬁﬁ 
else
ﬂﬂ 
if
ﬂﬂ 

(
ﬂﬂ 
m_stringToMatch
ﬂﬂ 
!=
ﬂﬂ 
null
ﬂﬂ #
)
ﬂﬂ# $
{
‡‡ 
if
‚‚ 
(
‚‚ 
msg
‚‚ 
.
‚‚ 
IndexOf
‚‚ 
(
‚‚ 
m_stringToMatch
‚‚ #
)
‚‚# $
==
‚‚% '
-
‚‚( )
$num
‚‚) *
)
‚‚* +
{
„„ 
return
ÂÂ 
FilterDecision
ÂÂ 
.
ÂÂ 
Neutral
ÂÂ "
;
ÂÂ" #
}
ÊÊ 
if
ÈÈ 
(
ÈÈ 
m_acceptOnMatch
ÈÈ 
)
ÈÈ 
{
ÍÍ 
return
ÎÎ 
FilterDecision
ÎÎ 
.
ÎÎ 
Accept
ÎÎ !
;
ÎÎ! "
}
ÏÏ 
return
ÌÌ 

FilterDecision
ÌÌ 
.
ÌÌ 
Deny
ÌÌ 
;
ÌÌ 
}
ÓÓ 
return
ÔÔ 	
FilterDecision
ÔÔ
 
.
ÔÔ 
Neutral
ÔÔ  
;
ÔÔ  !
}
ÒÒ 
}
ÙÙ 
}ıı ≈	
8C:\sonarqube\projects\log4net-2.0.7\src\GlobalContext.cs
	namespace 	
log4net
 
{ 
public44 
sealed44 
class44 
GlobalContext44 "
{55 
private>> 	
GlobalContext>>
 
(>> 
)>> 
{?? 
}@@ 
staticDD 
GlobalContextDD	 
(DD 
)DD 
{EE 

PropertiesFF 
[FF 
log4netFF 
.FF 
CoreFF 
.FF 
LoggingEventFF '
.FF' (
HostNamePropertyFF( 8
]FF8 9
=FF: ;

SystemInfoFF< F
.FFF G
HostNameFFG O
;FFO P
}GG 
publicVV 
staticVV	 #
GlobalContextPropertiesVV '

PropertiesVV( 2
{WW 
getXX 
{XX 
returnXX	 
s_propertiesXX 
;XX 
}XX 
}YY 
privatebb 	
readonlybb
 
staticbb #
GlobalContextPropertiesbb 1
s_propertiesbb2 >
=bb? @
newbbA D#
GlobalContextPropertiesbbE \
(bb\ ]
)bb] ^
;bb^ _
}ee 
}ff ¸H
/C:\sonarqube\projects\log4net-2.0.7\src\ILog.cs
	namespace 	
log4net
 
{ 
publicBB 
	interfaceBB 
ILogBB 
:BB 
ILoggerWrapperBB '
{CC 
void]] 
Debug]] 
(]] 
object]] 
message]] 
)]] 
;]] 
voidmm 
Debugmm 
(mm 
objectmm 
messagemm 
,mm 
	Exceptionmm &
	exceptionmm' 0
)mm0 1
;mm1 2
void
ÉÉ 
DebugFormat
ÉÉ 
(
ÉÉ 
string
ÉÉ 
format
ÉÉ  
,
ÉÉ  !
params
ÉÉ" (
object
ÉÉ) /
[
ÉÉ/ 0
]
ÉÉ0 1
args
ÉÉ2 6
)
ÉÉ6 7
;
ÉÉ7 8
void
òò 
DebugFormat
òò 
(
òò 
string
òò 
format
òò  
,
òò  !
object
òò" (
arg0
òò) -
)
òò- .
;
òò. /
void
ÆÆ 
DebugFormat
ÆÆ 
(
ÆÆ 
string
ÆÆ 
format
ÆÆ  
,
ÆÆ  !
object
ÆÆ" (
arg0
ÆÆ) -
,
ÆÆ- .
object
ÆÆ/ 5
arg1
ÆÆ6 :
)
ÆÆ: ;
;
ÆÆ; <
void
≈≈ 
DebugFormat
≈≈ 
(
≈≈ 
string
≈≈ 
format
≈≈  
,
≈≈  !
object
≈≈" (
arg0
≈≈) -
,
≈≈- .
object
≈≈/ 5
arg1
≈≈6 :
,
≈≈: ;
object
≈≈< B
arg2
≈≈C G
)
≈≈G H
;
≈≈H I
void
€€ 
DebugFormat
€€ 
(
€€ 
IFormatProvider
€€ "
provider
€€# +
,
€€+ ,
string
€€- 3
format
€€4 :
,
€€: ;
params
€€< B
object
€€C I
[
€€I J
]
€€J K
args
€€L P
)
€€P Q
;
€€Q R
void
ˆˆ 
Info
ˆˆ 
(
ˆˆ 
object
ˆˆ 
message
ˆˆ 
)
ˆˆ 
;
ˆˆ 
void
ÜÜ 
Info
ÜÜ 
(
ÜÜ 
object
ÜÜ 
message
ÜÜ 
,
ÜÜ 
	Exception
ÜÜ %
	exception
ÜÜ& /
)
ÜÜ/ 0
;
ÜÜ0 1
void
úú 

InfoFormat
úú 
(
úú 
string
úú 
format
úú 
,
úú  
params
úú! '
object
úú( .
[
úú. /
]
úú/ 0
args
úú1 5
)
úú5 6
;
úú6 7
void
±± 

InfoFormat
±± 
(
±± 
string
±± 
format
±± 
,
±±  
object
±±! '
arg0
±±( ,
)
±±, -
;
±±- .
void
«« 

InfoFormat
«« 
(
«« 
string
«« 
format
«« 
,
««  
object
««! '
arg0
««( ,
,
««, -
object
««. 4
arg1
««5 9
)
««9 :
;
««: ;
void
ﬁﬁ 

InfoFormat
ﬁﬁ 
(
ﬁﬁ 
string
ﬁﬁ 
format
ﬁﬁ 
,
ﬁﬁ  
object
ﬁﬁ! '
arg0
ﬁﬁ( ,
,
ﬁﬁ, -
object
ﬁﬁ. 4
arg1
ﬁﬁ5 9
,
ﬁﬁ9 :
object
ﬁﬁ; A
arg2
ﬁﬁB F
)
ﬁﬁF G
;
ﬁﬁG H
void
ÙÙ 

InfoFormat
ÙÙ 
(
ÙÙ 
IFormatProvider
ÙÙ !
provider
ÙÙ" *
,
ÙÙ* +
string
ÙÙ, 2
format
ÙÙ3 9
,
ÙÙ9 :
params
ÙÙ; A
object
ÙÙB H
[
ÙÙH I
]
ÙÙI J
args
ÙÙK O
)
ÙÙO P
;
ÙÙP Q
void
èè 
Warn
èè 
(
èè 
object
èè 
message
èè 
)
èè 
;
èè 
void
üü 
Warn
üü 
(
üü 
object
üü 
message
üü 
,
üü 
	Exception
üü %
	exception
üü& /
)
üü/ 0
;
üü0 1
void
µµ 

WarnFormat
µµ 
(
µµ 
string
µµ 
format
µµ 
,
µµ  
params
µµ! '
object
µµ( .
[
µµ. /
]
µµ/ 0
args
µµ1 5
)
µµ5 6
;
µµ6 7
void
   

WarnFormat
   
(
   
string
   
format
   
,
    
object
  ! '
arg0
  ( ,
)
  , -
;
  - .
void
‡‡ 

WarnFormat
‡‡ 
(
‡‡ 
string
‡‡ 
format
‡‡ 
,
‡‡  
object
‡‡! '
arg0
‡‡( ,
,
‡‡, -
object
‡‡. 4
arg1
‡‡5 9
)
‡‡9 :
;
‡‡: ;
void
˜˜ 

WarnFormat
˜˜ 
(
˜˜ 
string
˜˜ 
format
˜˜ 
,
˜˜  
object
˜˜! '
arg0
˜˜( ,
,
˜˜, -
object
˜˜. 4
arg1
˜˜5 9
,
˜˜9 :
object
˜˜; A
arg2
˜˜B F
)
˜˜F G
;
˜˜G H
void
çç 

WarnFormat
çç 
(
çç 
IFormatProvider
çç !
provider
çç" *
,
çç* +
string
çç, 2
format
çç3 9
,
çç9 :
params
çç; A
object
ççB H
[
ççH I
]
ççI J
args
ççK O
)
ççO P
;
ççP Q
void
®® 
Error
®® 
(
®® 
object
®® 
message
®® 
)
®® 
;
®® 
void
∏∏ 
Error
∏∏ 
(
∏∏ 
object
∏∏ 
message
∏∏ 
,
∏∏ 
	Exception
∏∏ &
	exception
∏∏' 0
)
∏∏0 1
;
∏∏1 2
void
ŒŒ 
ErrorFormat
ŒŒ 
(
ŒŒ 
string
ŒŒ 
format
ŒŒ  
,
ŒŒ  !
params
ŒŒ" (
object
ŒŒ) /
[
ŒŒ/ 0
]
ŒŒ0 1
args
ŒŒ2 6
)
ŒŒ6 7
;
ŒŒ7 8
void
„„ 
ErrorFormat
„„ 
(
„„ 
string
„„ 
format
„„  
,
„„  !
object
„„" (
arg0
„„) -
)
„„- .
;
„„. /
void
˘˘ 
ErrorFormat
˘˘ 
(
˘˘ 
string
˘˘ 
format
˘˘  
,
˘˘  !
object
˘˘" (
arg0
˘˘) -
,
˘˘- .
object
˘˘/ 5
arg1
˘˘6 :
)
˘˘: ;
;
˘˘; <
void
êê 
ErrorFormat
êê 
(
êê 
string
êê 
format
êê  
,
êê  !
object
êê" (
arg0
êê) -
,
êê- .
object
êê/ 5
arg1
êê6 :
,
êê: ;
object
êê< B
arg2
êêC G
)
êêG H
;
êêH I
void
¶¶ 
ErrorFormat
¶¶ 
(
¶¶ 
IFormatProvider
¶¶ "
provider
¶¶# +
,
¶¶+ ,
string
¶¶- 3
format
¶¶4 :
,
¶¶: ;
params
¶¶< B
object
¶¶C I
[
¶¶I J
]
¶¶J K
args
¶¶L P
)
¶¶P Q
;
¶¶Q R
void
¡¡ 
Fatal
¡¡ 
(
¡¡ 
object
¡¡ 
message
¡¡ 
)
¡¡ 
;
¡¡ 
void
—— 
Fatal
—— 
(
—— 
object
—— 
message
—— 
,
—— 
	Exception
—— &
	exception
——' 0
)
——0 1
;
——1 2
void
ÁÁ 
FatalFormat
ÁÁ 
(
ÁÁ 
string
ÁÁ 
format
ÁÁ  
,
ÁÁ  !
params
ÁÁ" (
object
ÁÁ) /
[
ÁÁ/ 0
]
ÁÁ0 1
args
ÁÁ2 6
)
ÁÁ6 7
;
ÁÁ7 8
void
¸¸ 
FatalFormat
¸¸ 
(
¸¸ 
string
¸¸ 
format
¸¸  
,
¸¸  !
object
¸¸" (
arg0
¸¸) -
)
¸¸- .
;
¸¸. /
void
íí 
FatalFormat
íí 
(
íí 
string
íí 
format
íí  
,
íí  !
object
íí" (
arg0
íí) -
,
íí- .
object
íí/ 5
arg1
íí6 :
)
íí: ;
;
íí; <
void
©© 
FatalFormat
©© 
(
©© 
string
©© 
format
©©  
,
©©  !
object
©©" (
arg0
©©) -
,
©©- .
object
©©/ 5
arg1
©©6 :
,
©©: ;
object
©©< B
arg2
©©C G
)
©©G H
;
©©H I
void
øø 
FatalFormat
øø 
(
øø 
IFormatProvider
øø "
provider
øø# +
,
øø+ ,
string
øø- 3
format
øø4 :
,
øø: ;
params
øø< B
object
øøC I
[
øøI J
]
øøJ K
args
øøL P
)
øøP Q
;
øøQ R
bool
ÜÜ 
IsDebugEnabled
ÜÜ 
{
ÜÜ 
get
ÜÜ 
;
ÜÜ 
}
ÜÜ 
bool
îî 
IsInfoEnabled
îî 
{
îî 
get
îî 
;
îî 
}
îî 
bool
¢¢ 
IsWarnEnabled
¢¢ 
{
¢¢ 
get
¢¢ 
;
¢¢ 
}
¢¢ 
bool
∞∞ 
IsErrorEnabled
∞∞ 
{
∞∞ 
get
∞∞ 
;
∞∞ 
}
∞∞ 
bool
ææ 
IsFatalEnabled
ææ 
{
ææ 
get
ææ 
;
ææ 
}
ææ 
}
øø 
}¿¿ Ú
FC:\sonarqube\projects\log4net-2.0.7\src\Layout\DynamicPatternLayout.cs
	namespace 	
log4net
 
. 
Layout 
{ 
public55 
class55  
DynamicPatternLayout55 "
:55" #
PatternLayout55$ 1
{66 
private;; 	
PatternString;;
 !
m_headerPatternString;; -
=;;. /
new;;0 3
PatternString;;4 A
(;;A B
$str;;B D
);;D E
;;;E F
private@@ 	
PatternString@@
 !
m_footerPatternString@@ -
=@@/ 0
new@@1 4
PatternString@@5 B
(@@B C
$str@@C E
)@@E F
;@@F G
publicLL  
DynamicPatternLayoutLL	 
(LL 
)LL 
:MM 
baseMM 	
(MM	 

)MM
 
{NN 
}OO 
publicWW  
DynamicPatternLayoutWW	 
(WW 
stringWW %
patternWW& -
)WW- .
:XX 
baseXX 	
(XX	 

patternXX
 
)XX 
{YY 
}ZZ 
publicii 
overrideii	 
stringii 
Headerii 
{jj 
getkk 
{ll 
returnmm 
!
m_headerPatternStringmm  
.mm  !
Formatmm! '
(mm' (
)mm( )
;mm) *
}nn 
setoo 
{pp 
baseqq 
.qq 	
Headerqq	 
=qq 
valueqq 
;qq !
m_headerPatternStringrr 
=rr 
newrr 
PatternStringrr  -
(rr- .
valuerr. 3
)rr3 4
;rr4 5
}ss 
}tt 
public
ÅÅ 
override
ÅÅ	 
string
ÅÅ 
Footer
ÅÅ 
{
ÇÇ 
get
ÉÉ 
{
ÑÑ 
return
ÖÖ 
#
m_footerPatternString
ÖÖ  
.
ÖÖ  !
Format
ÖÖ! '
(
ÖÖ' (
)
ÖÖ( )
;
ÖÖ) *
}
ÜÜ 
set
áá 
{
àà 
base
ââ 
.
ââ 	
Footer
ââ	 
=
ââ 
value
ââ 
;
ââ #
m_footerPatternString
ää 
=
ää 
new
ää 
PatternString
ää  -
(
ää- .
value
ää. 3
)
ää3 4
;
ää4 5
}
ãã 
}
åå 
}
éé 
}èè ¸

AC:\sonarqube\projects\log4net-2.0.7\src\Layout\ExceptionLayout.cs
	namespace 	
log4net
 
. 
Layout 
{ 
public++ 
class++ 
ExceptionLayout++ 
:++ 
LayoutSkeleton++  .
{,, 
public77 
ExceptionLayout77	 
(77 
)77 
{88 
this99 
.99 
IgnoresException99 
=99 
false99  
;99  !
}:: 
overrideLL 

publicLL 
voidLL 
ActivateOptionsLL &
(LL& '
)LL' (
{MM 
}OO 
override`` 

public`` 
void`` 
Format`` 
(`` 

TextWriter`` (
writer``) /
,``/ 0
LoggingEvent``1 =
loggingEvent``> J
)``J K
{aa 
ifbb 
(bb 
loggingEventbb 
==bb 
nullbb 
)bb 
{cc 
throwdd 	
newdd
 !
ArgumentNullExceptiondd #
(dd# $
$strdd$ 2
)dd2 3
;dd3 4
}ee 
writergg 	
.gg	 

Writegg
 
(gg 
loggingEventgg 
.gg 
GetExceptionStringgg /
(gg/ 0
)gg0 1
)gg1 2
;gg2 3
}hh 
}kk 
}ll Á
9C:\sonarqube\projects\log4net-2.0.7\src\Layout\ILayout.cs
	namespace 	
log4net
 
. 
Layout 
{ 
public,, 
	interface,, 
ILayout,, 
{-- 
voidCC 
FormatCC 
(CC 

TextWriterCC 
writerCC 
,CC  
LoggingEventCC! -
loggingEventCC. :
)CC: ;
;CC; <
stringQQ 
ContentTypeQQ	 
{QQ 
getQQ 
;QQ 
}QQ 
string]] 
Header]]	 
{]] 
get]] 
;]] 
}]] 
stringii 
Footerii	 
{ii 
getii 
;ii 
}ii 
boolww 
IgnoresExceptionww 
{ww 
getww 
;ww 
}ww  
}xx 
}yy ∏
<C:\sonarqube\projects\log4net-2.0.7\src\Layout\IRawLayout.cs
	namespace 	
log4net
 
. 
Layout 
{ 
[.. 
TypeConverter.. 
(.. 
typeof.. 
(.. 
RawLayoutConverter.. )
)..) *
)..* +
]..+ ,
public// 
	interface// 

IRawLayout// 
{00 
object;; 
Format;;	 
(;; 
LoggingEvent;; 
loggingEvent;; )
);;) *
;;;* +
}<< 
}== ˛

IC:\sonarqube\projects\log4net-2.0.7\src\Layout\Layout2RawLayoutAdapter.cs
	namespace 	
log4net
 
. 
Layout 
{ 
public'' 
class'' #
Layout2RawLayoutAdapter'' %
:''& '

IRawLayout''( 2
{(( 
private.. 	
ILayout..
 
m_layout.. 
;.. 
public== #
Layout2RawLayoutAdapter==	  
(==  !
ILayout==! (
layout==) /
)==/ 0
{>> 
m_layout?? 
=?? 
layout?? 
;?? 
}@@ 
virtualTT 	
publicTT
 
objectTT 
FormatTT 
(TT 
LoggingEventTT +
loggingEventTT, 8
)TT8 9
{UU 
StringWriterVV 
writerVV 
=VV 
newVV 
StringWriterVV )
(VV) *
SystemVV* 0
.VV0 1
GlobalizationVV1 >
.VV> ?
CultureInfoVV? J
.VVJ K
InvariantCultureVVK [
)VV[ \
;VV\ ]
m_layoutWW 
.WW 
FormatWW 
(WW 
writerWW 
,WW 
loggingEventWW '
)WW' (
;WW( )
returnXX 	
writerXX
 
.XX 
ToStringXX 
(XX 
)XX 
;XX 
}YY 
}\\ 
}]] æ
@C:\sonarqube\projects\log4net-2.0.7\src\Layout\LayoutSkeleton.cs
	namespace 	
log4net
 
. 
Layout 
{ 
public33 
abstract33 
class33 
LayoutSkeleton33 %
:33& '
ILayout33( /
,33/ 0
IOptionHandler331 ?
{44 
private?? 	
string??
 
m_header?? 
=?? 
null??  
;??  !
privateII 	
stringII
 
m_footerII 
=II 
nullII  
;II  !
privateSS 	
boolSS
 
m_ignoresExceptionSS !
=SS" #
trueSS$ (
;SS( )
	protectedaa 
LayoutSkeletonaa 
(aa 
)aa 
{bb 
}cc 
abstract|| 

public|| 
void|| 
ActivateOptions|| &
(||& '
)||' (
;||( )
abstract
çç 

public
çç 
void
çç 
Format
çç 
(
çç 

TextWriter
çç (
writer
çç) /
,
çç/ 0
LoggingEvent
çç1 =
loggingEvent
çç> J
)
ççJ K
;
ççK L
public
ññ 
string
ññ 
Format
ññ 
(
ññ 
LoggingEvent
ññ )
loggingEvent
ññ* 6
)
ññ6 7
{
óó 	
StringWriter
òò 
writer
òò 
=
òò  !
new
òò" %
StringWriter
òò& 2
(
òò2 3
System
òò3 9
.
òò9 :
Globalization
òò: G
.
òòG H
CultureInfo
òòH S
.
òòS T
InvariantCulture
òòT d
)
òòd e
;
òòe f
Format
ôô 
(
ôô 
writer
ôô 
,
ôô 
loggingEvent
ôô '
)
ôô' (
;
ôô( )
return
öö 
writer
öö 
.
öö 
ToString
öö "
(
öö" #
)
öö# $
;
öö$ %
}
õõ 	
virtual
´´ 
public
´´ 
string
´´ 
ContentType
´´ &
{
¨¨ 
get
≠≠	 
{
≠≠ 
return
≠≠ 
$str
≠≠ "
;
≠≠" #
}
≠≠$ %
}
ÆÆ 
virtual
∫∫ 
public
∫∫ 
string
∫∫ 
Header
∫∫ !
{
ªª 
get
ºº	 
{
ºº 
return
ºº 
m_header
ºº 
;
ºº 
}
ºº  !
set
ΩΩ	 
{
ΩΩ 
m_header
ΩΩ 
=
ΩΩ 
value
ΩΩ 
;
ΩΩ  
}
ΩΩ! "
}
ææ 
virtual
   
public
   
string
   
Footer
   !
{
ÀÀ 
get
ÃÃ	 
{
ÃÃ 
return
ÃÃ 
m_footer
ÃÃ 
;
ÃÃ 
}
ÃÃ  !
set
ÕÕ	 
{
ÕÕ 
m_footer
ÕÕ 
=
ÕÕ 
value
ÕÕ 
;
ÕÕ  
}
ÕÕ! "
}
ŒŒ 
virtual
‡‡ 
public
‡‡ 
bool
‡‡ 
IgnoresException
‡‡ )
{
·· 
get
‚‚	 
{
‚‚ 
return
‚‚  
m_ignoresException
‚‚ (
;
‚‚( )
}
‚‚* +
set
„„	 
{
„„  
m_ignoresException
„„ !
=
„„" #
value
„„$ )
;
„„) *
}
„„+ ,
}
‰‰ 
}
ÁÁ 
}ËË Ê±
?C:\sonarqube\projects\log4net-2.0.7\src\Layout\PatternLayout.cs
	namespace&& 	
log4net&&
 
.&& 
Layout&& 
{'' 
public
ëë 
class
ëë 
PatternLayout
ëë 
:
ëë 
LayoutSkeleton
ëë ,
{
íí 
public
üü 
const
üü	 
string
üü &
DefaultConversionPattern
üü .
=
üü/ 0
$str
üü0 B
;
üüB C
public
™™ 
const
™™	 
string
™™ %
DetailConversionPattern
™™ -
=
™™. /
$str
™™0 m
;
™™m n
private
∏∏ 	
static
∏∏
 
	Hashtable
∏∏ #
s_globalRulesRegistry
∏∏ 0
;
∏∏0 1
private
¡¡ 	
string
¡¡
 
	m_pattern
¡¡ 
;
¡¡ 
private
∆∆ 	
PatternConverter
∆∆
 
m_head
∆∆ !
;
∆∆! "
private
ÀÀ 	
	Hashtable
ÀÀ
 %
m_instanceRulesRegistry
ÀÀ +
=
ÀÀ, -
new
ÀÀ. 1
	Hashtable
ÀÀ2 ;
(
ÀÀ; <
)
ÀÀ< =
;
ÀÀ= >
static
ŸŸ 
PatternLayout
ŸŸ	 
(
ŸŸ 
)
ŸŸ 
{
⁄⁄ #
s_globalRulesRegistry
€€ 
=
€€ 
new
€€ 
	Hashtable
€€ (
(
€€( )
$num
€€) +
)
€€+ ,
;
€€, -#
s_globalRulesRegistry
›› 
.
›› 
Add
›› 
(
›› 
$str
›› &
,
››& '
typeof
››( .
(
››. /%
LiteralPatternConverter
››/ F
)
››F G
)
››G H
;
››H I#
s_globalRulesRegistry
ﬁﬁ 
.
ﬁﬁ 
Add
ﬁﬁ 
(
ﬁﬁ 
$str
ﬁﬁ &
,
ﬁﬁ& '
typeof
ﬁﬁ( .
(
ﬁﬁ. /%
NewLinePatternConverter
ﬁﬁ/ F
)
ﬁﬁF G
)
ﬁﬁG H
;
ﬁﬁH I#
s_globalRulesRegistry
ﬂﬂ 
.
ﬂﬂ 
Add
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ  
,
ﬂﬂ  !
typeof
ﬂﬂ" (
(
ﬂﬂ( )%
NewLinePatternConverter
ﬂﬂ) @
)
ﬂﬂ@ A
)
ﬂﬂA B
;
ﬂﬂB C#
s_globalRulesRegistry
‰‰ 
.
‰‰ 
Add
‰‰ 
(
‰‰ 
$str
‰‰ +
,
‰‰+ ,
typeof
‰‰- 3
(
‰‰3 4)
AspNetCachePatternConverter
‰‰4 O
)
‰‰O P
)
‰‰P Q
;
‰‰Q R#
s_globalRulesRegistry
ÂÂ 
.
ÂÂ 
Add
ÂÂ 
(
ÂÂ 
$str
ÂÂ -
,
ÂÂ- .
typeof
ÂÂ/ 5
(
ÂÂ5 6+
AspNetContextPatternConverter
ÂÂ6 S
)
ÂÂS T
)
ÂÂT U
;
ÂÂU V#
s_globalRulesRegistry
ÊÊ 
.
ÊÊ 
Add
ÊÊ 
(
ÊÊ 
$str
ÊÊ -
,
ÊÊ- .
typeof
ÊÊ/ 5
(
ÊÊ5 6+
AspNetRequestPatternConverter
ÊÊ6 S
)
ÊÊS T
)
ÊÊT U
;
ÊÊU V#
s_globalRulesRegistry
ÁÁ 
.
ÁÁ 
Add
ÁÁ 
(
ÁÁ 
$str
ÁÁ -
,
ÁÁ- .
typeof
ÁÁ/ 5
(
ÁÁ5 6+
AspNetSessionPatternConverter
ÁÁ6 S
)
ÁÁS T
)
ÁÁT U
;
ÁÁU V#
s_globalRulesRegistry
ÍÍ 
.
ÍÍ 
Add
ÍÍ 
(
ÍÍ 
$str
ÍÍ  
,
ÍÍ  !
typeof
ÍÍ" (
(
ÍÍ( )$
LoggerPatternConverter
ÍÍ) ?
)
ÍÍ? @
)
ÍÍ@ A
;
ÍÍA B#
s_globalRulesRegistry
ÎÎ 
.
ÎÎ 
Add
ÎÎ 
(
ÎÎ 
$str
ÎÎ %
,
ÎÎ% &
typeof
ÎÎ' -
(
ÎÎ- .$
LoggerPatternConverter
ÎÎ. D
)
ÎÎD E
)
ÎÎE F
;
ÎÎF G#
s_globalRulesRegistry
ÌÌ 
.
ÌÌ 
Add
ÌÌ 
(
ÌÌ 
$str
ÌÌ  
,
ÌÌ  !
typeof
ÌÌ" (
(
ÌÌ( )&
TypeNamePatternConverter
ÌÌ) A
)
ÌÌA B
)
ÌÌB C
;
ÌÌC D#
s_globalRulesRegistry
ÓÓ 
.
ÓÓ 
Add
ÓÓ 
(
ÓÓ 
$str
ÓÓ $
,
ÓÓ$ %
typeof
ÓÓ& ,
(
ÓÓ, -&
TypeNamePatternConverter
ÓÓ- E
)
ÓÓE F
)
ÓÓF G
;
ÓÓG H#
s_globalRulesRegistry
ÔÔ 
.
ÔÔ 
Add
ÔÔ 
(
ÔÔ 
$str
ÔÔ #
,
ÔÔ# $
typeof
ÔÔ% +
(
ÔÔ+ ,&
TypeNamePatternConverter
ÔÔ, D
)
ÔÔD E
)
ÔÔE F
;
ÔÔF G#
s_globalRulesRegistry
ÒÒ 
.
ÒÒ 
Add
ÒÒ 
(
ÒÒ 
$str
ÒÒ  
,
ÒÒ  !
typeof
ÒÒ" (
(
ÒÒ( )"
DatePatternConverter
ÒÒ) =
)
ÒÒ= >
)
ÒÒ> ?
;
ÒÒ? @#
s_globalRulesRegistry
ÚÚ 
.
ÚÚ 
Add
ÚÚ 
(
ÚÚ 
$str
ÚÚ #
,
ÚÚ# $
typeof
ÚÚ% +
(
ÚÚ+ ,"
DatePatternConverter
ÚÚ, @
)
ÚÚ@ A
)
ÚÚA B
;
ÚÚB C#
s_globalRulesRegistry
ÙÙ 
.
ÙÙ 
Add
ÙÙ 
(
ÙÙ 
$str
ÙÙ (
,
ÙÙ( )
typeof
ÙÙ* 0
(
ÙÙ0 1'
ExceptionPatternConverter
ÙÙ1 J
)
ÙÙJ K
)
ÙÙK L
;
ÙÙL M#
s_globalRulesRegistry
ˆˆ 
.
ˆˆ 
Add
ˆˆ 
(
ˆˆ 
$str
ˆˆ  
,
ˆˆ  !
typeof
ˆˆ" (
(
ˆˆ( )*
FileLocationPatternConverter
ˆˆ) E
)
ˆˆE F
)
ˆˆF G
;
ˆˆG H#
s_globalRulesRegistry
˜˜ 
.
˜˜ 
Add
˜˜ 
(
˜˜ 
$str
˜˜ #
,
˜˜# $
typeof
˜˜% +
(
˜˜+ ,*
FileLocationPatternConverter
˜˜, H
)
˜˜H I
)
˜˜I J
;
˜˜J K#
s_globalRulesRegistry
˘˘ 
.
˘˘ 
Add
˘˘ 
(
˘˘ 
$str
˘˘  
,
˘˘  !
typeof
˘˘" (
(
˘˘( )*
FullLocationPatternConverter
˘˘) E
)
˘˘E F
)
˘˘F G
;
˘˘G H#
s_globalRulesRegistry
˙˙ 
.
˙˙ 
Add
˙˙ 
(
˙˙ 
$str
˙˙ '
,
˙˙' (
typeof
˙˙) /
(
˙˙/ 0*
FullLocationPatternConverter
˙˙0 L
)
˙˙L M
)
˙˙M N
;
˙˙N O#
s_globalRulesRegistry
¸¸ 
.
¸¸ 
Add
¸¸ 
(
¸¸ 
$str
¸¸  
,
¸¸  !
typeof
¸¸" (
(
¸¸( )*
LineLocationPatternConverter
¸¸) E
)
¸¸E F
)
¸¸F G
;
¸¸G H#
s_globalRulesRegistry
˝˝ 
.
˝˝ 
Add
˝˝ 
(
˝˝ 
$str
˝˝ #
,
˝˝# $
typeof
˝˝% +
(
˝˝+ ,*
LineLocationPatternConverter
˝˝, H
)
˝˝H I
)
˝˝I J
;
˝˝J K#
s_globalRulesRegistry
ˇˇ 
.
ˇˇ 
Add
ˇˇ 
(
ˇˇ 
$str
ˇˇ  
,
ˇˇ  !
typeof
ˇˇ" (
(
ˇˇ( )%
MessagePatternConverter
ˇˇ) @
)
ˇˇ@ A
)
ˇˇA B
;
ˇˇB C#
s_globalRulesRegistry
ÄÄ 
.
ÄÄ 
Add
ÄÄ 
(
ÄÄ 
$str
ÄÄ &
,
ÄÄ& '
typeof
ÄÄ( .
(
ÄÄ. /%
MessagePatternConverter
ÄÄ/ F
)
ÄÄF G
)
ÄÄG H
;
ÄÄH I#
s_globalRulesRegistry
ÇÇ 
.
ÇÇ 
Add
ÇÇ 
(
ÇÇ 
$str
ÇÇ  
,
ÇÇ  !
typeof
ÇÇ" (
(
ÇÇ( ),
MethodLocationPatternConverter
ÇÇ) G
)
ÇÇG H
)
ÇÇH I
;
ÇÇI J#
s_globalRulesRegistry
ÉÉ 
.
ÉÉ 
Add
ÉÉ 
(
ÉÉ 
$str
ÉÉ %
,
ÉÉ% &
typeof
ÉÉ' -
(
ÉÉ- .,
MethodLocationPatternConverter
ÉÉ. L
)
ÉÉL M
)
ÉÉM N
;
ÉÉN O#
s_globalRulesRegistry
ÖÖ 
.
ÖÖ 
Add
ÖÖ 
(
ÖÖ 
$str
ÖÖ  
,
ÖÖ  !
typeof
ÖÖ" (
(
ÖÖ( )#
LevelPatternConverter
ÖÖ) >
)
ÖÖ> ?
)
ÖÖ? @
;
ÖÖ@ A#
s_globalRulesRegistry
ÜÜ 
.
ÜÜ 
Add
ÜÜ 
(
ÜÜ 
$str
ÜÜ $
,
ÜÜ$ %
typeof
ÜÜ& ,
(
ÜÜ, -#
LevelPatternConverter
ÜÜ- B
)
ÜÜB C
)
ÜÜC D
;
ÜÜD E#
s_globalRulesRegistry
àà 
.
àà 
Add
àà 
(
àà 
$str
àà  
,
àà  !
typeof
àà" (
(
àà( )&
PropertyPatternConverter
àà) A
)
ààA B
)
ààB C
;
ààC D#
s_globalRulesRegistry
ââ 
.
ââ 
Add
ââ 
(
ââ 
$str
ââ '
,
ââ' (
typeof
ââ) /
(
ââ/ 0&
PropertyPatternConverter
ââ0 H
)
ââH I
)
ââI J
;
ââJ K#
s_globalRulesRegistry
ää 
.
ää 
Add
ää 
(
ää 
$str
ää )
,
ää) *
typeof
ää+ 1
(
ää1 2&
PropertyPatternConverter
ää2 J
)
ääJ K
)
ääK L
;
ääL M#
s_globalRulesRegistry
åå 
.
åå 
Add
åå 
(
åå 
$str
åå  
,
åå  !
typeof
åå" (
(
åå( )*
RelativeTimePatternConverter
åå) E
)
ååE F
)
ååF G
;
ååG H#
s_globalRulesRegistry
çç 
.
çç 
Add
çç 
(
çç 
$str
çç (
,
çç( )
typeof
çç* 0
(
çç0 1*
RelativeTimePatternConverter
çç1 M
)
ççM N
)
ççN O
;
ççO P#
s_globalRulesRegistry
êê 
.
êê 
Add
êê 
(
êê 
$str
êê )
,
êê) *
typeof
êê+ 1
(
êê1 2(
StackTracePatternConverter
êê2 L
)
êêL M
)
êêM N
;
êêN O#
s_globalRulesRegistry
ëë !
.
ëë! "
Add
ëë" %
(
ëë% &
$str
ëë& 8
,
ëë8 9
typeof
ëë: @
(
ëë@ A.
 StackTraceDetailPatternConverter
ëëA a
)
ëëa b
)
ëëb c
;
ëëc d#
s_globalRulesRegistry
îî 
.
îî 
Add
îî 
(
îî 
$str
îî  
,
îî  !
typeof
îî" (
(
îî( )$
ThreadPatternConverter
îî) ?
)
îî? @
)
îî@ A
;
îîA B#
s_globalRulesRegistry
ïï 
.
ïï 
Add
ïï 
(
ïï 
$str
ïï %
,
ïï% &
typeof
ïï' -
(
ïï- .$
ThreadPatternConverter
ïï. D
)
ïïD E
)
ïïE F
;
ïïF G#
s_globalRulesRegistry
òò 
.
òò 
Add
òò 
(
òò 
$str
òò  
,
òò  !
typeof
òò" (
(
òò( )!
NdcPatternConverter
òò) <
)
òò< =
)
òò= >
;
òò> ?#
s_globalRulesRegistry
ôô 
.
ôô 
Add
ôô 
(
ôô 
$str
ôô "
,
ôô" #
typeof
ôô$ *
(
ôô* +!
NdcPatternConverter
ôô+ >
)
ôô> ?
)
ôô? @
;
ôô@ A#
s_globalRulesRegistry
úú 
.
úú 
Add
úú 
(
úú 
$str
úú  
,
úú  !
typeof
úú" (
(
úú( )&
PropertyPatternConverter
úú) A
)
úúA B
)
úúB C
;
úúC D#
s_globalRulesRegistry
ùù 
.
ùù 
Add
ùù 
(
ùù 
$str
ùù "
,
ùù" #
typeof
ùù$ *
(
ùù* +&
PropertyPatternConverter
ùù+ C
)
ùùC D
)
ùùD E
;
ùùE F#
s_globalRulesRegistry
üü 
.
üü 
Add
üü 
(
üü 
$str
üü  
,
üü  !
typeof
üü" (
(
üü( )'
AppDomainPatternConverter
üü) B
)
üüB C
)
üüC D
;
üüD E#
s_globalRulesRegistry
†† 
.
†† 
Add
†† 
(
†† 
$str
†† (
,
††( )
typeof
††* 0
(
††0 1'
AppDomainPatternConverter
††1 J
)
††J K
)
††K L
;
††L M#
s_globalRulesRegistry
¢¢ 
.
¢¢ 
Add
¢¢ 
(
¢¢ 
$str
¢¢  
,
¢¢  !
typeof
¢¢" (
(
¢¢( )&
IdentityPatternConverter
¢¢) A
)
¢¢A B
)
¢¢B C
;
¢¢C D#
s_globalRulesRegistry
££ 
.
££ 
Add
££ 
(
££ 
$str
££ '
,
££' (
typeof
££) /
(
££/ 0&
IdentityPatternConverter
££0 H
)
££H I
)
££I J
;
££J K#
s_globalRulesRegistry
•• 
.
•• 
Add
•• 
(
•• 
$str
•• &
,
••& '
typeof
••( .
(
••. /%
UtcDatePatternConverter
••/ F
)
••F G
)
••G H
;
••H I#
s_globalRulesRegistry
¶¶ 
.
¶¶ 
Add
¶¶ 
(
¶¶ 
$str
¶¶ &
,
¶¶& '
typeof
¶¶( .
(
¶¶. /%
UtcDatePatternConverter
¶¶/ F
)
¶¶F G
)
¶¶G H
;
¶¶H I#
s_globalRulesRegistry
ßß 
.
ßß 
Add
ßß 
(
ßß 
$str
ßß &
,
ßß& '
typeof
ßß( .
(
ßß. /%
UtcDatePatternConverter
ßß/ F
)
ßßF G
)
ßßG H
;
ßßH I#
s_globalRulesRegistry
©© 
.
©© 
Add
©© 
(
©© 
$str
©©  
,
©©  !
typeof
©©" (
(
©©( )&
UserNamePatternConverter
©©) A
)
©©A B
)
©©B C
;
©©C D#
s_globalRulesRegistry
™™ 
.
™™ 
Add
™™ 
(
™™ 
$str
™™ '
,
™™' (
typeof
™™) /
(
™™/ 0&
UserNamePatternConverter
™™0 H
)
™™H I
)
™™I J
;
™™J K
}
´´ 
public
√√ 
PatternLayout
√√	 
(
√√ 
)
√√ 
:
√√ 
this
√√ 
(
√√  &
DefaultConversionPattern
√√  8
)
√√8 9
{
ƒƒ 
}
≈≈ 
public
÷÷ 
PatternLayout
÷÷	 
(
÷÷ 
string
÷÷ 
pattern
÷÷ %
)
÷÷% &
{
◊◊ 
IgnoresException
ŸŸ 
=
ŸŸ 
true
ŸŸ 
;
ŸŸ 
	m_pattern
€€ 
=
€€ 
pattern
€€ 
;
€€ 
if
‹‹ 
(
‹‹ 
	m_pattern
‹‹ 
==
‹‹ 
null
‹‹ 
)
‹‹ 
{
›› 
	m_pattern
ﬁﬁ 
=
ﬁﬁ &
DefaultConversionPattern
ﬁﬁ (
;
ﬁﬁ( )
}
ﬂﬂ 
ActivateOptions
·· 
(
·· 
)
·· 
;
·· 
}
‚‚ 
public
 
string
	 
ConversionPattern
 !
{
ÒÒ 
get
ÚÚ 
{
ÚÚ 
return
ÚÚ	 
	m_pattern
ÚÚ 
;
ÚÚ 
}
ÚÚ 
set
ÛÛ 
{
ÛÛ 
	m_pattern
ÛÛ	 
=
ÛÛ 
value
ÛÛ 
;
ÛÛ 
}
ÛÛ 
}
ÙÙ 
virtual
ÅÅ 	
	protected
ÅÅ
 
PatternParser
ÅÅ !!
CreatePatternParser
ÅÅ" 5
(
ÅÅ5 6
string
ÅÅ6 <
pattern
ÅÅ= D
)
ÅÅD E
{
ÇÇ 
PatternParser
ÉÉ 
patternParser
ÉÉ 
=
ÉÉ  
new
ÉÉ! $
PatternParser
ÉÉ% 2
(
ÉÉ2 3
pattern
ÉÉ3 :
)
ÉÉ: ;
;
ÉÉ; <
foreach
ÜÜ 

(
ÜÜ
 
DictionaryEntry
ÜÜ 
entry
ÜÜ  
in
ÜÜ! ##
s_globalRulesRegistry
ÜÜ$ 9
)
ÜÜ9 :
{
áá 
ConverterInfo
àà 
converterInfo
àà +
=
àà, -
new
àà. 1
ConverterInfo
àà2 ?
(
àà? @
)
àà@ A
;
ààA B
converterInfo
ââ 
.
ââ 
Name
ââ "
=
ââ# $
(
ââ% &
string
ââ& ,
)
ââ, -
entry
ââ- 2
.
ââ2 3
Key
ââ3 6
;
ââ6 7
converterInfo
ää 
.
ää 
Type
ää "
=
ää# $
(
ää% &
Type
ää& *
)
ää* +
entry
ää+ 0
.
ää0 1
Value
ää1 6
;
ää6 7
patternParser
ãã 
.
ãã 
PatternConverters
ãã /
[
ãã/ 0
entry
ãã0 5
.
ãã5 6
Key
ãã6 9
]
ãã9 :
=
ãã; <
converterInfo
ãã= J
;
ããJ K
}
åå 
foreach
éé 

(
éé
 
DictionaryEntry
éé 
entry
éé  
in
éé! #%
m_instanceRulesRegistry
éé$ ;
)
éé; <
{
èè 
patternParser
êê 
.
êê 
PatternConverters
êê #
[
êê# $
entry
êê$ )
.
êê) *
Key
êê* -
]
êê- .
=
êê/ 0
entry
êê1 6
.
êê6 7
Value
êê7 <
;
êê< =
}
ëë 
return
ìì 	
patternParser
ìì
 
;
ìì 
}
îî 
override
®® 

public
®® 
void
®® 
ActivateOptions
®® &
(
®®& '
)
®®' (
{
©© 
m_head
™™ 	
=
™™
 !
CreatePatternParser
™™ 
(
™™  
	m_pattern
™™  )
)
™™) *
.
™™* +
Parse
™™+ 0
(
™™0 1
)
™™1 2
;
™™2 3
PatternConverter
¨¨ 
curConverter
¨¨  
=
¨¨! "
m_head
¨¨# )
;
¨¨) *
while
≠≠ 
(
≠≠ 	
curConverter
≠≠	 
!=
≠≠ 
null
≠≠ 
)
≠≠ 
{
ÆÆ $
PatternLayoutConverter
ØØ 
layoutConverter
ØØ *
=
ØØ+ ,
curConverter
ØØ- 9
as
ØØ: <$
PatternLayoutConverter
ØØ= S
;
ØØS T
if
∞∞ 
(
∞∞ 
layoutConverter
∞∞ 
!=
∞∞ 
null
∞∞ 
)
∞∞  
{
±± 
if
≤≤ 
(
≤≤ 	
!
≤≤	 

layoutConverter
≤≤
 
.
≤≤ 
IgnoresException
≤≤ *
)
≤≤* +
{
≥≥ 
this
µµ 

.
µµ
 
IgnoresException
µµ 
=
µµ 
false
µµ #
;
µµ# $
break
∑∑ 
;
∑∑ 
}
∏∏ 
}
ππ 
curConverter
∫∫ 
=
∫∫ 
curConverter
∫∫ 
.
∫∫  
Next
∫∫  $
;
∫∫$ %
}
ªª 
}
ºº 
override
ÕÕ 

public
ÕÕ 
void
ÕÕ 
Format
ÕÕ 
(
ÕÕ 

TextWriter
ÕÕ (
writer
ÕÕ) /
,
ÕÕ/ 0
LoggingEvent
ÕÕ1 =
loggingEvent
ÕÕ> J
)
ÕÕJ K
{
ŒŒ 
if
œœ 
(
œœ 
writer
œœ 
==
œœ 
null
œœ 
)
œœ 
{
–– 
throw
—— 	
new
——
 #
ArgumentNullException
—— #
(
——# $
$str
——$ ,
)
——, -
;
——- .
}
““ 
if
”” 
(
”” 
loggingEvent
”” 
==
”” 
null
”” 
)
”” 
{
‘‘ 
throw
’’ 	
new
’’
 #
ArgumentNullException
’’ #
(
’’# $
$str
’’$ 2
)
’’2 3
;
’’3 4
}
÷÷ 
PatternConverter
ÿÿ 
c
ÿÿ 
=
ÿÿ 
m_head
ÿÿ 
;
ÿÿ 
while
€€ 
(
€€ 	
c
€€	 

!=
€€ 
null
€€ 
)
€€ 
{
‹‹ 
c
›› 
.
›› 
Format
›› 
(
›› 
writer
›› 
,
›› 
loggingEvent
›› !
)
››! "
;
››" #
c
ﬁﬁ 
=
ﬁﬁ 
c
ﬁﬁ 	
.
ﬁﬁ	 

Next
ﬁﬁ
 
;
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 
public
ÓÓ 
void
ÓÓ	 
AddConverter
ÓÓ 
(
ÓÓ 
ConverterInfo
ÓÓ (
converterInfo
ÓÓ) 6
)
ÓÓ6 7
{
ÔÔ 
if
 
(
 
converterInfo
 
==
  
null
! %
)
% &
throw
' ,
new
- 0#
ArgumentNullException
1 F
(
F G
$str
G V
)
V W
;
W X
if
ÚÚ 
(
ÚÚ 
!
ÚÚ 
typeof
ÚÚ 
(
ÚÚ 
PatternConverter
ÚÚ (
)
ÚÚ( )
.
ÚÚ) *
IsAssignableFrom
ÚÚ* :
(
ÚÚ: ;
converterInfo
ÚÚ; H
.
ÚÚH I
Type
ÚÚI M
)
ÚÚM N
)
ÚÚN O
{
ÛÛ 
throw
ÙÙ 
new
ÙÙ 
ArgumentException
ÙÙ +
(
ÙÙ+ ,
$str
ÙÙ, L
+
ÙÙM N
converterInfo
ÙÙO \
.
ÙÙ\ ]
Type
ÙÙ] a
+
ÙÙb c
$strÙÙd õ
,ÙÙõ ú
$strÙÙù ¨
)ÙÙ¨ ≠
;ÙÙ≠ Æ
}
ıı %
m_instanceRulesRegistry
ˆˆ #
[
ˆˆ# $
converterInfo
ˆˆ$ 1
.
ˆˆ1 2
Name
ˆˆ2 6
]
ˆˆ6 7
=
ˆˆ8 9
converterInfo
ˆˆ: G
;
ˆˆG H
}
˜˜ 
public
â	â	 
void
â	â		 
AddConverter
â	â	 
(
â	â	 
string
â	â	 !
name
â	â	" &
,
â	â	& '
Type
â	â	( ,
type
â	â	- 1
)
â	â	1 2
{
ä	ä	 
if
ã	ã	 
(
ã	ã	 
name
ã	ã	 
==
ã	ã	 
null
ã	ã	 
)
ã	ã	 
throw
ã	ã	 #
new
ã	ã	$ '#
ArgumentNullException
ã	ã	( =
(
ã	ã	= >
$str
ã	ã	> D
)
ã	ã	D E
;
ã	ã	E F
if
å	å	 
(
å	å	 
type
å	å	 
==
å	å	 
null
å	å	 
)
å	å	 
throw
å	å	 #
new
å	å	$ '#
ArgumentNullException
å	å	( =
(
å	å	= >
$str
å	å	> D
)
å	å	D E
;
å	å	E F
ConverterInfo
é	é	 
converterInfo
é	é	 '
=
é	é	( )
new
é	é	* -
ConverterInfo
é	é	. ;
(
é	é	; <
)
é	é	< =
;
é	é	= >
converterInfo
è	è	 
.
è	è	 
Name
è	è	 
=
è	è	  
name
è	è	! %
;
è	è	% &
converterInfo
ê	ê	 
.
ê	ê	 
Type
ê	ê	 
=
ê	ê	  
type
ê	ê	! %
;
ê	ê	% &
AddConverter
í	í	 
(
í	í	 
converterInfo
í	í	 &
)
í	í	& '
;
í	í	' (
}
ì	ì	 
}
î	î	 
}ï	ï	 ¥
SC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\AppDomainPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal&& 	
sealed&&
 
class&& %
AppDomainPatternConverter&& 0
:&&1 2"
PatternLayoutConverter&&3 I
{'' 
override22 

	protected22 
void22 
Convert22 !
(22! "

TextWriter22" ,
writer22- 3
,223 4
LoggingEvent225 A
loggingEvent22B N
)22N O
{33 
writer44 	
.44	 

Write44
 
(44 
loggingEvent44 
.44 
Domain44 #
)44# $
;44$ %
}55 
}66 
}77 Ù
UC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\AspNetCachePatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal(( 	
sealed((
 
class(( '
AspNetCachePatternConverter(( 2
:((3 4(
AspNetPatternLayoutConverter((5 Q
{)) 
	protected88 
override88 
void88 
Convert88 !
(88! "

TextWriter88" ,
writer88- 3
,883 4
LoggingEvent885 A
loggingEvent88B N
,88N O
HttpContext88P [
httpContext88\ g
)88g h
{99 
if:: 
(:: 
HttpRuntime:: 
.:: 
Cache:: 
!=:: 
null::  
)::  !
{;; 
if<< 
(<< 
Option<< 
!=<< 
null<< 
)<< 
{== 
WriteObject>> 
(>> 
writer>> 
,>> 
loggingEvent>> %
.>>% &

Repository>>& 0
,>>0 1
HttpRuntime>>2 =
.>>= >
Cache>>> C
[>>C D
Option>>D J
]>>J K
)>>K L
;>>L M
}?? 
else@@ 
{AA 
WriteObjectBB 
(BB 
writerBB 
,BB 
loggingEventBB %
.BB% &

RepositoryBB& 0
,BB0 1
HttpRuntimeBB2 =
.BB= >
CacheBB> C
.BBC D
GetEnumeratorBBD Q
(BBQ R
)BBR S
)BBS T
;BBT U
}CC 
}DD 
elseEE 
{FF 
writerGG 

.GG
 
WriteGG 
(GG 

SystemInfoGG 
.GG 
NotAvailableTextGG ,
)GG, -
;GG- .
}HH 
}II 
}JJ 
}KK Ø
WC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\AspNetContextPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal'' 	
sealed''
 
class'' )
AspNetContextPatternConverter'' 4
:''5 6(
AspNetPatternLayoutConverter''7 S
{(( 
	protected66 
override66 
void66 
Convert66 !
(66! "

TextWriter66" ,
writer66- 3
,663 4
LoggingEvent665 A
loggingEvent66B N
,66N O
HttpContext66P [
httpContext66\ g
)66g h
{77 
if88 
(88 
Option88 
!=88 
null88 
)88 
{99 
WriteObject:: 
(:: 
writer:: 
,:: 
loggingEvent:: $
.::$ %

Repository::% /
,::/ 0
httpContext::1 <
.::< =
Items::= B
[::B C
Option::C I
]::I J
)::J K
;::K L
};; 
else<< 
{== 
WriteObject>> 
(>> 
writer>> 
,>> 
loggingEvent>> $
.>>$ %

Repository>>% /
,>>/ 0
httpContext>>1 <
.>>< =
Items>>= B
)>>B C
;>>C D
}?? 
}@@ 
}AA 
}BB ï
PC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\AspNetPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal(( 	
abstract((
 
class(( (
AspNetPatternLayoutConverter(( 5
:((6 7"
PatternLayoutConverter((8 N
{)) 
	protected** 
override** 
void** 
Convert** !
(**! "

TextWriter**" ,
writer**- 3
,**3 4
LoggingEvent**5 A
loggingEvent**B N
)**N O
{++ 
if,, 
(,, 
HttpContext,, 
.,, 
Current,, 
==,, 
null,, "
),," #
{-- 
writer.. 

...
 
Write.. 
(.. 

SystemInfo.. 
... 
NotAvailableText.. ,
).., -
;..- .
}// 
else00 
{11 
Convert22 
(22 
writer22 
,22 
loggingEvent22  
,22  !
HttpContext22" -
.22- .
Current22. 5
)225 6
;226 7
}33 
}44 
	protected== 
abstract== 
void== 
Convert== !
(==! "

TextWriter==" ,
writer==- 3
,==3 4
LoggingEvent==5 A
loggingEvent==B N
,==N O
HttpContext==P [
httpContext==\ g
)==g h
;==h i
}>> 
}?? ª
WC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\AspNetRequestPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal(( 	
sealed((
 
class(( )
AspNetRequestPatternConverter(( 4
:((5 6(
AspNetPatternLayoutConverter((7 S
{)) 
	protected77 
override77 
void77 
Convert77 !
(77! "

TextWriter77" ,
writer77- 3
,773 4
LoggingEvent775 A
loggingEvent77B N
,77N O
HttpContext77P [
httpContext77\ g
)77g h
{88 
HttpRequest99 
request99 
=99 
null99  
;99  !
try:: 	
{::
 
request;; 

=;; 
httpContext;; 
.;; 
Request;;  
;;;  !
}<< 
catch<< 
(<< 
HttpException<< 
)<< 
{<< 
}AA 
ifCC 
(CC 
requestCC 
!=CC 
nullCC 
)CC 
{DD 
ifEE 
(EE 
OptionEE 
!=EE 
nullEE 
)EE 
{FF 
WriteObjectGG 
(GG 
writerGG 
,GG 
loggingEventGG %
.GG% &

RepositoryGG& 0
,GG0 1
httpContextGG2 =
.GG= >
RequestGG> E
.GGE F
ParamsGGF L
[GGL M
OptionGGM S
]GGS T
)GGT U
;GGU V
}HH 
elseII 
{JJ 
WriteObjectKK 
(KK 
writerKK 
,KK 
loggingEventKK %
.KK% &

RepositoryKK& 0
,KK0 1
httpContextKK2 =
.KK= >
RequestKK> E
.KKE F
ParamsKKF L
)KKL M
;KKM N
}LL 
}MM 
elseNN 
{OO 
writerPP 

.PP
 
WritePP 
(PP 

SystemInfoPP 
.PP 
NotAvailableTextPP ,
)PP, -
;PP- .
}QQ 
}RR 
}SS 
}TT €
WC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\AspNetSessionPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal(( 	
sealed((
 
class(( )
AspNetSessionPatternConverter(( 4
:((5 6(
AspNetPatternLayoutConverter((7 S
{)) 
	protected88 
override88 
void88 
Convert88 !
(88! "

TextWriter88" ,
writer88- 3
,883 4
LoggingEvent885 A
loggingEvent88B N
,88N O
HttpContext88P [
httpContext88\ g
)88g h
{99 
if:: 
(:: 
httpContext:: 
.:: 
Session:: 
!=:: 
null:: "
)::" #
{;; 
if<< 
(<< 
Option<< 
!=<< 
null<< 
)<< 
{== 
WriteObject>> 
(>> 
writer>> 
,>> 
loggingEvent>> %
.>>% &

Repository>>& 0
,>>0 1
httpContext>>2 =
.>>= >
Session>>> E
.>>E F
Contents>>F N
[>>N O
Option>>O U
]>>U V
)>>V W
;>>W X
}?? 
else@@ 
{AA 
WriteObjectBB 
(BB 
writerBB 
,BB 
loggingEventBB %
.BB% &

RepositoryBB& 0
,BB0 1
httpContextBB2 =
.BB= >
SessionBB> E
)BBE F
;BBF G
}CC 
}DD 
elseEE 
{FF 
writerGG 

.GG
 
WriteGG 
(GG 

SystemInfoGG 
.GG 
NotAvailableTextGG ,
)GG, -
;GG- .
}HH 
}II 
}JJ 
}KK ì#
NC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\DatePatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internalTT 	
classTT
  
DatePatternConverterTT $
:TT% &"
PatternLayoutConverterTT' =
,TT= >
IOptionHandlerTT? M
{UU 
	protected^^ 
IDateFormatter^^ 
m_dateFormatter^^ *
;^^* +
publicrr 
voidrr	 
ActivateOptionsrr 
(rr 
)rr 
{ss 
stringtt 	
dateFormatStrtt
 
=tt 
Optiontt  
;tt  !
ifuu 
(uu 
dateFormatStruu 
==uu 
nulluu 
)uu 
{vv 
dateFormatStrww 
=ww %
AbsoluteTimeDateFormatterww -
.ww- .!
Iso8601TimeDateFormatww. C
;wwC D
}xx 
ifzz 
(zz 

SystemInfozz 
.zz 
EqualsIgnoringCasezz $
(zz$ %
dateFormatStrzz% 2
,zz2 3%
AbsoluteTimeDateFormatterzz4 M
.zzM N!
Iso8601TimeDateFormatzzN c
)zzc d
)zzd e
{{{ 
m_dateFormatter|| 
=|| 
new||  
Iso8601DateFormatter|| .
(||. /
)||/ 0
;||0 1
}}} 
else~~ 
if~~ 

(~~ 

SystemInfo~~ 
.~~ 
EqualsIgnoringCase~~ )
(~~) *
dateFormatStr~~* 7
,~~7 8%
AbsoluteTimeDateFormatter~~9 R
.~~R S"
AbsoluteTimeDateFormat~~S i
)~~i j
)~~j k
{ 
m_dateFormatter
ÄÄ 
=
ÄÄ 
new
ÄÄ '
AbsoluteTimeDateFormatter
ÄÄ 3
(
ÄÄ3 4
)
ÄÄ4 5
;
ÄÄ5 6
}
ÅÅ 
else
ÇÇ 
if
ÇÇ 

(
ÇÇ 

SystemInfo
ÇÇ 
.
ÇÇ  
EqualsIgnoringCase
ÇÇ )
(
ÇÇ) *
dateFormatStr
ÇÇ* 7
,
ÇÇ7 8'
AbsoluteTimeDateFormatter
ÇÇ9 R
.
ÇÇR S#
DateAndTimeDateFormat
ÇÇS h
)
ÇÇh i
)
ÇÇi j
{
ÉÉ 
m_dateFormatter
ÑÑ 
=
ÑÑ 
new
ÑÑ #
DateTimeDateFormatter
ÑÑ /
(
ÑÑ/ 0
)
ÑÑ0 1
;
ÑÑ1 2
}
ÖÖ 
else
ÜÜ 
{
áá 
try
àà 
{
ââ 
m_dateFormatter
ää 
=
ää 
new
ää !
SimpleDateFormatter
ää .
(
ää. /
dateFormatStr
ää/ <
)
ää< =
;
ää= >
}
ãã 
catch
åå 	
(
åå
 
	Exception
åå 
e
åå 
)
åå 
{
çç 
LogLog
éé 
.
éé 
Error
éé 
(
éé 
declaringType
éé 
,
éé  
$str
éé! S
+
ééS T
dateFormatStr
ééT a
+
ééa b
$str
ééb e
,
éée f
e
éég h
)
ééh i
;
ééi j
m_dateFormatter
èè 
=
èè 
new
èè "
Iso8601DateFormatter
èè /
(
èè/ 0
)
èè0 1
;
èè1 2
}
êê 
}
ëë 
}
íí 
override
§§ 

	protected
§§ 
void
§§ 
Convert
§§ !
(
§§! "

TextWriter
§§" ,
writer
§§- 3
,
§§3 4
LoggingEvent
§§5 A
loggingEvent
§§B N
)
§§N O
{
•• 
try
¶¶ 
{
ßß 
m_dateFormatter
®® 
.
®® 

FormatDate
®® 
(
®® 
loggingEvent
®® +
.
®®+ ,
	TimeStamp
®®, 5
,
®®5 6
writer
®®7 =
)
®®= >
;
®®> ?
}
©© 
catch
™™ 
(
™™	 

	Exception
™™
 
ex
™™ 
)
™™ 
{
´´ 
LogLog
¨¨ 

.
¨¨
 
Error
¨¨ 
(
¨¨ 
declaringType
¨¨ 
,
¨¨ 
$str
¨¨  G
,
¨¨G H
ex
¨¨I K
)
¨¨K L
;
¨¨L M
}
≠≠ 
}
ÆÆ 
private
ππ 
readonly
ππ 
static
ππ 
Type
ππ !
declaringType
ππ" /
=
ππ0 1
typeof
ππ2 8
(
ππ8 9"
DatePatternConverter
ππ9 M
)
ππM N
;
ππN O
}
ºº 
}ΩΩ ∫
SC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\ExceptionPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal++ 	
sealed++
 
class++ %
ExceptionPatternConverter++ 0
:++1 2"
PatternLayoutConverter++3 I
{,, 
public00 %
ExceptionPatternConverter00	 "
(00" #
)00# $
{11 
IgnoresException33 
=33 
false33 
;33 
}44 
override]] 

	protected]] 
void]] 
Convert]] !
(]]! "

TextWriter]]" ,
writer]]- 3
,]]3 4
LoggingEvent]]5 A
loggingEvent]]B N
)]]N O
{^^ 
if__ 
(__ 
loggingEvent__ 
.__ 
ExceptionObject__ #
!=__$ &
null__' +
&&__, .
Option__/ 5
!=__6 8
null__9 =
&&__> @
Option__A G
.__G H
Length__H N
>__O P
$num__Q R
)__R S
{`` 
switchaa 

(aa 
Optionaa 
.aa 
ToLoweraa 
(aa 
)aa 
)aa 
{bb 
casecc 	
$strcc
 
:cc 
WriteObjectdd 
(dd 
writerdd 
,dd 
loggingEventdd &
.dd& '

Repositorydd' 1
,dd1 2
loggingEventdd3 ?
.dd? @
ExceptionObjectdd@ O
.ddO P
MessageddP W
)ddW X
;ddX Y
breakee 
;ee 
casegg 	
$strgg
 
:gg 
WriteObjecthh 
(hh 
writerhh 
,hh 
loggingEventhh &
.hh& '

Repositoryhh' 1
,hh1 2
loggingEventhh3 ?
.hh? @
ExceptionObjecthh@ O
.hhO P
SourcehhP V
)hhV W
;hhW X
breakii 
;ii 
casejj 	
$strjj
 
:jj 
WriteObjectkk 
(kk 
writerkk 
,kk 
loggingEventkk &
.kk& '

Repositorykk' 1
,kk1 2
loggingEventkk3 ?
.kk? @
ExceptionObjectkk@ O
.kkO P

StackTracekkP Z
)kkZ [
;kk[ \
breakll 
;ll 
casenn 	
$strnn
 
:nn 
WriteObjectoo 
(oo 
writeroo 
,oo 
loggingEventoo &
.oo& '

Repositoryoo' 1
,oo1 2
loggingEventoo3 ?
.oo? @
ExceptionObjectoo@ O
.ooO P

TargetSiteooP Z
)ooZ [
;oo[ \
breakpp 
;pp 
caserr 	
$strrr
 
:rr 
WriteObjectss 
(ss 
writerss 
,ss 
loggingEventss &
.ss& '

Repositoryss' 1
,ss1 2
loggingEventss3 ?
.ss? @
ExceptionObjectss@ O
.ssO P
HelpLinkssP X
)ssX Y
;ssY Z
breaktt 
;tt 
defaultvv 
:vv 
breakxx 
;xx 
}yy 
}zz 
else{{ 
{|| 
string}} 

exceptionString}} 
=}} 
loggingEvent}} )
.}}) *
GetExceptionString}}* <
(}}< =
)}}= >
;}}> ?
if~~ 
(~~ 
exceptionString~~ 
!=~~ 
null~~ 
&&~~  "
exceptionString~~# 2
.~~2 3
Length~~3 9
>~~: ;
$num~~< =
)~~= >
{ 
writer
ÄÄ 
.
ÄÄ 
	WriteLine
ÄÄ 
(
ÄÄ 
exceptionString
ÄÄ %
)
ÄÄ% &
;
ÄÄ& '
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
}
ÖÖ 
}
ÜÜ 
}
áá 
}
àà 
}ââ Ï
VC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\FileLocationPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal&& 	
sealed&&
 
class&& (
FileLocationPatternConverter&& 3
:&&4 5"
PatternLayoutConverter&&6 L
{'' 
override33 

	protected33 
void33 
Convert33 !
(33! "

TextWriter33" ,
writer33- 3
,333 4
LoggingEvent335 A
loggingEvent33B N
)33N O
{44 
writer55 	
.55	 

Write55
 
(55 
loggingEvent55 
.55 
LocationInformation55 0
.550 1
FileName551 9
)559 :
;55: ;
}66 
}77 
}88 Ï
VC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\FullLocationPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal%% 	
sealed%%
 
class%% (
FullLocationPatternConverter%% 3
:%%4 5"
PatternLayoutConverter%%6 L
{&& 
override11 

	protected11 
void11 
Convert11 !
(11! "

TextWriter11" ,
writer11- 3
,113 4
LoggingEvent115 A
loggingEvent11B N
)11N O
{22 
writer33 	
.33	 

Write33
 
(33 
loggingEvent33 
.33 
LocationInformation33 1
.331 2
FullInfo332 :
)33; <
;33< =
}44 
}55 
}66 ¥
RC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\IdentityPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal'' 	
sealed''
 
class'' $
IdentityPatternConverter'' /
:''0 1"
PatternLayoutConverter''2 H
{(( 
override55 

	protected55 
void55 
Convert55 !
(55! "

TextWriter55" ,
writer55- 3
,553 4
LoggingEvent555 A
loggingEvent55B N
)55N O
{66 
writer77 	
.77	 

Write77
 
(77 
loggingEvent77 
.77 
Identity77 %
)77% &
;77& '
}88 
}99 
}:: ”
OC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\LevelPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal&& 	
sealed&&
 
class&& !
LevelPatternConverter&& ,
:&&- ."
PatternLayoutConverter&&/ E
{'' 
override33 

	protected33 
void33 
Convert33 !
(33! "

TextWriter33" ,
writer33- 3
,333 4
LoggingEvent335 A
loggingEvent33B N
)33N O
{44 
writer55 	
.55	 

Write55
 
(55 
loggingEvent55 
.55 
Level55 #
.55# $
DisplayName55$ /
)550 1
;551 2
}66 
}77 
}88 Ó
VC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\LineLocationPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal&& 	
sealed&&
 
class&& (
LineLocationPatternConverter&& 3
:&&4 5"
PatternLayoutConverter&&6 L
{'' 
override33 

	protected33 
void33 
Convert33 !
(33! "

TextWriter33" ,
writer33- 3
,333 4
LoggingEvent335 A
loggingEvent33B N
)33N O
{44 
writer55 	
.55	 

Write55
 
(55 
loggingEvent55 
.55 
LocationInformation55 0
.550 1

LineNumber551 ;
)55; <
;55< =
}66 
}77 
}88 ∆
PC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\LoggerPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal%% 	
sealed%%
 
class%% "
LoggerPatternConverter%% -
:%%. /!
NamedPatternConverter%%0 E
{&& 
override11 

	protected11 
string11 !
GetFullyQualifiedName11 1
(111 2
LoggingEvent112 >
loggingEvent11? K
)11K L
{22 
return33 	
loggingEvent33
 
.33 

LoggerName33 !
;33! "
}44 
}55 
}66 ú
QC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\MessagePatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal&& 	
sealed&&
 
class&& #
MessagePatternConverter&& .
:&&/ 0"
PatternLayoutConverter&&1 G
{'' 
override33 

	protected33 
void33 
Convert33 !
(33! "

TextWriter33" ,
writer33- 3
,333 4
LoggingEvent335 A
loggingEvent33B N
)33N O
{44 
loggingEvent55 
.55  
WriteRenderedMessage55 $
(55$ %
writer55% +
)55+ ,
;55, -
}66 
}77 
}88 Ú
XC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\MethodLocationPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal&& 	
sealed&&
 
class&& *
MethodLocationPatternConverter&& 5
:&&6 7"
PatternLayoutConverter&&8 N
{'' 
override33 

	protected33 
void33 
Convert33 !
(33! "

TextWriter33" ,
writer33- 3
,333 4
LoggingEvent335 A
loggingEvent33B N
)33N O
{44 
writer55 	
.55	 

Write55
 
(55 
loggingEvent55 
.55 
LocationInformation55 0
.550 1

MethodName551 ;
)55; <
;55< =
}66 
}77 
}88 €0
OC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\NamedPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
public-- 
abstract-- 
class-- !
NamedPatternConverter-- ,
:--- ."
PatternLayoutConverter--/ E
,--E F
IOptionHandler--G U
{.. 
private// 	
int//
 
m_precision// 
=// 
$num// 
;// 
publicCC 
voidCC	 
ActivateOptionsCC 
(CC 
)CC 
{DD 
m_precisionEE 
=EE 
$numEE 
;EE 
ifGG 
(GG 
OptionGG 
!=GG 
nullGG 
)GG 
{HH 
stringII 

optStrII 
=II 
OptionII 
.II 
TrimII 
(II  
)II  !
;II! "
ifJJ 
(JJ 
optStrJJ 
.JJ 
LengthJJ 
>JJ 
$numJJ 
)JJ 
{KK 
intLL 
precisionValLL	 
;LL 
ifMM 
(MM 	

SystemInfoMM	 
.MM 
TryParseMM 
(MM 
optStrMM #
,MM# $
outMM% (
precisionValMM) 5
)MM5 6
)MM6 7
{NN 
ifOO 
(OO	 

precisionValOO
 
<=OO 
$numOO 
)OO 
{PP 
LogLogQQ 
.QQ 
ErrorQQ 
(QQ 
declaringTypeQQ !
,QQ! "
$strQQ# N
+QQO P
optStrQQQ W
+QQX Y
$strQQZ w
)QQw x
;QQx y
}RR 
elseSS 

{TT 
m_precisionUU 
=UU 
precisionValUU !
;UU! "
}VV 
}WW 
elseXX 	
{YY 
LogLogZZ 
.ZZ 
ErrorZZ 
(ZZ 
declaringTypeZZ  
,ZZ  !
$strZZ" N
+ZZO P
optStrZZQ W
+ZZX Y
$strZZZ u
)ZZu v
;ZZv w
}[[ 
}\\ 
}]] 
}^^ 
abstractpp 

	protectedpp 
stringpp !
GetFullyQualifiedNamepp 1
(pp1 2
LoggingEventpp2 >
loggingEventpp? K
)ppK L
;ppL M
sealed{{ 
override{{	 
	protected{{ 
void{{  
Convert{{! (
({{( )

TextWriter{{) 3
writer{{4 :
,{{: ;
LoggingEvent{{< H
loggingEvent{{I U
){{U V
{|| 
string}} 	
name}}
 
=}} !
GetFullyQualifiedName}} &
(}}& '
loggingEvent}}' 3
)}}3 4
;}}4 5
if~~ 
(~~ 
m_precision~~ 
<=~~ 
$num~~ 
||~~ 
name~~ 
==~~  "
null~~# '
||~~( *
name~~+ /
.~~/ 0
Length~~0 6
<~~7 8
$num~~9 :
)~~: ;
{ 
writer
ÄÄ 

.
ÄÄ
 
Write
ÄÄ 
(
ÄÄ 
name
ÄÄ 
)
ÄÄ 
;
ÄÄ 
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
int
ÑÑ 
len
ÑÑ 
=
ÑÑ 
name
ÑÑ 
.
ÑÑ 
Length
ÑÑ 
;
ÑÑ 
string
ÖÖ 
trailingDot
ÖÖ "
=
ÖÖ# $
string
ÖÖ% +
.
ÖÖ+ ,
Empty
ÖÖ, 1
;
ÖÖ1 2
if
ÜÜ 
(
ÜÜ 
name
ÜÜ 
.
ÜÜ 
EndsWith
ÜÜ !
(
ÜÜ! "
DOT
ÜÜ" %
)
ÜÜ% &
)
ÜÜ& '
{
áá 
trailingDot
àà 
=
àà  !
DOT
àà" %
;
àà% &
name
ââ 
=
ââ 
name
ââ 
.
ââ  
	Substring
ââ  )
(
ââ) *
$num
ââ* +
,
ââ+ ,
len
ââ- 0
-
ââ1 2
$num
ââ3 4
)
ââ4 5
;
ââ5 6
len
ää 
--
ää 
;
ää 
}
ãã 
int
çç 
end
çç 
=
çç 
name
çç 
.
çç 
LastIndexOf
çç *
(
çç* +
DOT
çç+ .
)
çç. /
;
çç/ 0
for
éé 
(
éé 
int
éé 
i
éé 
=
éé 
$num
éé 
;
éé 
end
éé 
>
éé 
$num
éé 
&&
éé 
i
éé 
<
éé  !
m_precision
éé" -
;
éé- .
i
éé/ 0
++
éé0 2
)
éé2 3
{
èè 
end
êê 
=
êê 
name
êê 
.
êê 
LastIndexOf
êê *
(
êê* +
$char
êê+ .
,
êê. /
end
êê0 3
-
êê4 5
$num
êê6 7
)
êê7 8
;
êê8 9
}
ëë 
if
íí 
(
íí 
end
íí 
==
íí 
-
íí 
$num
íí 
)
íí 
{
ìì 
writer
îî 
.
îî 
Write
îî  
(
îî  !
name
îî! %
+
îî& '
trailingDot
îî( 3
)
îî3 4
;
îî4 5
}
ïï 
else
ññ 
{
óó 
writer
òò 
.
òò 
Write
òò  
(
òò  !
name
òò! %
.
òò% &
	Substring
òò& /
(
òò/ 0
end
òò0 3
+
òò4 5
$num
òò6 7
,
òò7 8
len
òò9 <
-
òò= >
end
òò? B
-
òòC D
$num
òòE F
)
òòF G
+
òòH I
trailingDot
òòJ U
)
òòU V
;
òòV W
}
ôô 
}
öö 
}
õõ 
private
¶¶ 
readonly
¶¶ 
static
¶¶ 
Type
¶¶ !
declaringType
¶¶" /
=
¶¶0 1
typeof
¶¶2 8
(
¶¶8 9#
NamedPatternConverter
¶¶9 N
)
¶¶N O
;
¶¶O P
private
®® 
const
®® 
string
®® 
DOT
®®  
=
®®! "
$str
®®# &
;
®®& '
}
™™ 
}´´ ∂
MC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\NdcPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal(( 	
sealed((
 
class(( 
NdcPatternConverter(( *
:((+ ,"
PatternLayoutConverter((- C
{)) 
override88 

	protected88 
void88 
Convert88 !
(88! "

TextWriter88" ,
writer88- 3
,883 4
LoggingEvent885 A
loggingEvent88B N
)88N O
{99 
WriteObject;; 
(;; 
writer;; 
,;; 
loggingEvent;; #
.;;# $

Repository;;$ .
,;;. /
loggingEvent;;0 <
.;;< =
LookupProperty;;= K
(;;K L
$str;;L Q
);;Q R
);;R S
;;;S T
}<< 
}== 
}>> Ã
PC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\PatternLayoutConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
public)) 
abstract)) 
class)) "
PatternLayoutConverter)) -
:)). /
PatternConverter))0 @
{** 
	protected00 "
PatternLayoutConverter00 "
(00" #
)00# $
{11 
}22 
virtualHH 	
publicHH
 
boolHH 
IgnoresExceptionHH &
{II 
getJJ 
{JJ 
returnJJ	 
m_ignoresExceptionJJ "
;JJ" #
}JJ$ %
setKK 
{KK 
m_ignoresExceptionKK	 
=KK 
valueKK #
;KK# $
}KK% &
}LL 
abstractXX 

	protectedXX 
voidXX 
ConvertXX !
(XX! "

TextWriterXX" ,
writerXX- 3
,XX3 4
LoggingEventXX5 A
loggingEventXXB N
)XXN O
;XXO P
overridedd 

	protecteddd 
voiddd 
Convertdd !
(dd! "

TextWriterdd" ,
writerdd- 3
,dd3 4
objectdd5 ;
statedd< A
)ddA B
{ee 
LoggingEventff 
loggingEventff 
=ff 
stateff $
asff% '
LoggingEventff( 4
;ff4 5
ifgg 
(gg 
loggingEventgg 
!=gg 
nullgg 
)gg 
{hh 
Convertii 
(ii 
writerii 
,ii 
loggingEventii  
)ii  !
;ii! "
}jj 
elsekk 
{ll 
throwmm 	
newmm
 
ArgumentExceptionmm 
(mm  
$strmm  9
+mm9 :
typeofmm: @
(mm@ A
LoggingEventmmA M
)mmM N
.mmN O
FullNamemmO W
+mmW X
$strmmX [
,mm[ \
$strmm] d
)mmd e
;mme f
}nn 
}oo 
privateyy 	
boolyy
 
m_ignoresExceptionyy !
=yy" #
trueyy$ (
;yy( )
}zz 
}{{ ì
RC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\PropertyPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal-- 	
sealed--
 
class-- $
PropertyPatternConverter-- /
:--0 1"
PatternLayoutConverter--2 H
{.. 
override?? 

	protected?? 
void?? 
Convert?? !
(??! "

TextWriter??" ,
writer??- 3
,??3 4
LoggingEvent??5 A
loggingEvent??B N
)??N O
{@@ 
ifAA 
(AA 
OptionAA 
!=AA 
nullAA 
)AA 
{BB 
WriteObjectDD 
(DD 
writerDD 
,DD 
loggingEventDD $
.DD$ %

RepositoryDD% /
,DD/ 0
loggingEventDD1 =
.DD= >
LookupPropertyDD> L
(DDL M
OptionDDM S
)DDS T
)DDT U
;DDU V
}EE 
elseFF 
{GG 
WriteDictionaryII 
(II 
writerII 
,II 
loggingEventII (
.II( )

RepositoryII) 3
,II3 4
loggingEventII5 A
.IIA B
GetPropertiesIIB O
(IIO P
)IIP Q
)IIQ R
;IIR S
}JJ 
}KK 
}LL 
}MM ó
VC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\RelativeTimePatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal%% 	
sealed%%
 
class%% (
RelativeTimePatternConverter%% 3
:%%4 5"
PatternLayoutConverter%%6 L
{&& 
override33 

	protected33 
void33 
Convert33 !
(33! "

TextWriter33" ,
writer33- 3
,333 4
LoggingEvent335 A
loggingEvent33B N
)33N O
{44 
writer55 	
.55	 

Write55
 
(55 "
TimeDifferenceInMillis55 '
(55' (
LoggingEvent55( 4
.554 5
StartTimeUtc555 A
,55A B
loggingEvent55C O
.55O P
TimeStampUtc55P \
)55\ ]
.55] ^
ToString55^ f
(55f g
System55g m
.55m n
Globalization55n {
.55{ |
NumberFormatInfo	55| å
.
55å ç
InvariantInfo
55ç ö
)
55ö õ
)
55ú ù
;
55ù û
}66 
private>> 	
static>>
 
long>> "
TimeDifferenceInMillis>> ,
(>>, -
DateTime>>- 5
start>>6 ;
,>>; <
DateTime>>= E
end>>F I
)>>I J
{?? 
returnCC 	
(CC
 
longCC 
)CC 
(CC 
endCC 
.CC 
ToUniversalTimeCC $
(CC$ %
)CC% &
-CC' (
startCC) .
.CC. /
ToUniversalTimeCC/ >
(CC> ?
)CC? @
)CC@ A
.CCA B
TotalMillisecondsCCB S
;CCS T
}DD 
}EE 
}FF ã
ZC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\StackTraceDetailPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal** 
class** ,
 StackTraceDetailPatternConverter** 3
:**4 5&
StackTracePatternConverter**6 P
{++ 
internal,, 
override,, 
string,,   
GetMethodInformation,,! 5
(,,5 6

MethodItem,,6 @
method,,A G
),,G H
{-- 	
string.. 
returnValue.. 
=.. 
$str.. !
;..! "
try00 
{11 
string22 
param22 
=22 
$str22 !
;22! "
string33 
[33 
]33 
names33 
=33  
method33! '
.33' (

Parameters33( 2
;332 3
StringBuilder44 
sb44  
=44! "
new44# &
StringBuilder44' 4
(444 5
)445 6
;446 7
if55 
(55 
names55 
!=55 
null55 !
&&55" $
names55% *
.55* +
GetUpperBound55+ 8
(558 9
$num559 :
)55: ;
>55< =
$num55> ?
)55? @
{66 
for77 
(77 
int77 
i77 
=77  
$num77! "
;77" #
i77$ %
<=77& (
names77) .
.77. /
GetUpperBound77/ <
(77< =
$num77= >
)77> ?
;77? @
i77A B
++77B D
)77D E
{88 
sb99 
.99 
AppendFormat99 '
(99' (
$str99( /
,99/ 0
names991 6
[996 7
i997 8
]998 9
)999 :
;99: ;
}:: 
};; 
if== 
(== 
sb== 
.== 
Length== 
>== 
$num==  !
)==! "
{>> 
sb?? 
.?? 
Remove?? 
(?? 
sb??  
.??  !
Length??! '
-??( )
$num??* +
,??+ ,
$num??- .
)??. /
;??/ 0
param@@ 
=@@ 
sb@@ 
.@@ 
ToString@@ '
(@@' (
)@@( )
;@@) *
}AA 
returnValueCC 
=CC 
baseCC  
.CC  ! 
GetMethodInformationCC! 5
(CC5 6
methodCC6 <
)CC< =
+CC> ?
$strCC@ C
+CCD E
paramCCF K
+CCL M
$strCCN Q
;CCQ R
}DD 
catchEE 
(EE 
	ExceptionEE 
exEE 
)EE  
{FF 
LogLogGG 
.GG 
ErrorGG 
(GG 
declaringTypeGG *
,GG* +
$strGG, g
,GGg h
exGGi k
)GGk l
;GGl m
}HH 
returnJJ 
returnValueJJ 
;JJ 
}KK 	
privateVV 
readonlyVV 
staticVV 
TypeVV  $
declaringTypeVV% 2
=VV3 4
typeofVV5 ;
(VV; <&
StackTracePatternConverterVV< V
)VVV W
;VVW X
}YY 
}ZZ ñ(
TC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\StackTracePatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal'' 	
class''
 &
StackTracePatternConverter'' *
:''+ ,"
PatternLayoutConverter''- C
,''C D
IOptionHandler''E S
{(( 
private)) 	
int))
 
m_stackFrameLevel)) 
=))  !
$num))" #
;))# $
public;; 
void;;	 
ActivateOptions;; 
(;; 
);; 
{<< 
if== 
(== 
Option== 
==== 
null== 
)== 
return>> 

;>>
 
string@@ 	
optStr@@
 
=@@ 
Option@@ 
.@@ 
Trim@@ 
(@@ 
)@@  
;@@  !
ifAA 
(AA 
optStrAA 
.AA 
LengthAA 
!=AA 
$numAA 
)AA 
{BB 
intCC 
stackLevelValCC 
;CC 
ifDD 
(DD 

SystemInfoDD 
.DD 
TryParseDD 
(DD 
optStrDD "
,DD" #
outDD$ '
stackLevelValDD( 5
)DD5 6
)DD6 7
{EE 
ifFF 
(FF 	
stackLevelValFF	 
<=FF 
$numFF 
)FF 
{GG 
LogLogHH 
.HH 
ErrorHH 
(HH 
declaringTypeHH  
,HH  !
$strHH" Y
+HHZ [
optStrHH\ b
+HHc d
$str	HHe Ç
)
HHÇ É
;
HHÉ Ñ
}II 
elseJJ 	
{KK 
m_stackFrameLevelLL 
=LL 
stackLevelValLL '
;LL' (
}MM 
}NN 
elseOO 
{PP 
LogLogQQ 
.QQ 
ErrorQQ 
(QQ 
declaringTypeQQ 
,QQ  
$strQQ! X
+QQY Z
optStrQQ[ a
+QQb c
$strQQd 
)	QQ Ä
;
QQÄ Å
}RR 
}SS 
}TT 
override`` 

	protected`` 
void`` 
Convert`` !
(``! "

TextWriter``" ,
writer``- 3
,``3 4
LoggingEvent``5 A
loggingEvent``B N
)``N O
{aa 
StackFrameItembb 
[bb 
]bb 
stackframesbb 
=bb  !
loggingEventbb" .
.bb. /
LocationInformationbb/ B
.bbB C
StackFramesbbC N
;bbN O
ifcc 
(cc 
(cc 
stackframescc 
==cc 
nullcc 
)cc 
||cc 
(cc  !
stackframescc! ,
.cc, -
Lengthcc- 3
<=cc4 6
$numcc7 8
)cc8 9
)cc9 :
{dd 
LogLogee 

.ee
 
Erroree 
(ee 
declaringTypeee 
,ee 
$stree  a
)eea b
;eeb c
returnff 

;ff
 
}gg 
intii 
stackFrameIndexii 
=ii 
m_stackFrameLevelii *
-ii+ ,
$numii- .
;ii. /
whilejj 
(jj	 

stackFrameIndexjj
 
>=jj 
$numjj 
)jj 
{kk 
ifll 
(ll 
stackFrameIndexll 
>=ll 
stackframesll &
.ll& '
Lengthll' -
)ll- .
{mm 
stackFrameIndexnn 
--nn 
;nn 
continueoo 
;oo 
}pp 
StackFrameItemrr 

stackFramerr 
=rr 
stackframesrr  +
[rr+ ,
stackFrameIndexrr, ;
]rr; <
;rr< =
writerss 
.ss 
Writess 
(ss 
$strss &
,ss& '

stackFramess( 2
.ss2 3
	ClassNamess3 <
,ss< = 
GetMethodInformationss> R
(ssR S

stackFramessS ]
.ss] ^
Methodss^ d
)ssd e
)sse f
;ssf g
iftt 
(tt 
stackFrameIndextt 
>tt 
$numtt 
)tt 
{uu 
writerww 
.ww 
Writeww 
(ww 
$strww 
)ww 
;ww 
}xx 
stackFrameIndexyy 
--yy 
;yy 
}zz 
}{{ 
internal
ÉÉ 
virtual
ÉÉ 
string
ÉÉ "
GetMethodInformation
ÉÉ  4
(
ÉÉ4 5

MethodItem
ÉÉ5 ?
method
ÉÉ@ F
)
ÉÉF G
{
ÑÑ 	
return
ÖÖ 
method
ÖÖ 
.
ÖÖ 
Name
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
private
ëë 
readonly
ëë 
static
ëë 
Type
ëë !
declaringType
ëë" /
=
ëë0 1
typeof
ëë2 8
(
ëë8 9(
StackTracePatternConverter
ëë9 S
)
ëëS T
;
ëëT U
}
îî 
}ïï ≤
PC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\ThreadPatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal%% 	
sealed%%
 
class%% "
ThreadPatternConverter%% -
:%%. /"
PatternLayoutConverter%%0 F
{&& 
override11 

	protected11 
void11 
Convert11 !
(11! "

TextWriter11" ,
writer11- 3
,113 4
LoggingEvent115 A
loggingEvent11B N
)11N O
{22 
writer33 	
.33	 

Write33
 
(33 
loggingEvent33 
.33 

ThreadName33 '
)33' (
;33( )
}44 
}55 
}66 ˘
RC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\TypeNamePatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal%% 	
sealed%%
 
class%% $
TypeNamePatternConverter%% /
:%%0 1!
NamedPatternConverter%%2 G
{&& 
override11 

	protected11 
string11 !
GetFullyQualifiedName11 1
(111 2
LoggingEvent112 >
loggingEvent11? K
)11K L
{22 
return33 	
loggingEvent33
 
.33 
LocationInformation33 *
.33* +
	ClassName33+ 4
;334 5
}44 
}55 
}66 ¥
RC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\UserNamePatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal!! 	
sealed!!
 
class!! $
UserNamePatternConverter!! /
:!!0 1"
PatternLayoutConverter!!2 H
{"" 
override(( 

	protected(( 
void(( 
Convert(( !
(((! "

TextWriter((" ,
writer((- 3
,((3 4
LoggingEvent((5 A
loggingEvent((B N
)((N O
{)) 
writer** 	
.**	 

Write**
 
(** 
loggingEvent** 
.** 
UserName** &
)**' (
;**( )
}++ 
},, 
}-- ï
QC:\sonarqube\projects\log4net-2.0.7\src\Layout\Pattern\UtcDatePatternConverter.cs
	namespace 	
log4net
 
. 
Layout 
. 
Pattern  
{ 
internal00 	
class00
 #
UtcDatePatternConverter00 '
:00( ) 
DatePatternConverter00* >
{11 
overrideBB 

	protectedBB 
voidBB 
ConvertBB !
(BB! "

TextWriterBB" ,
writerBB- 3
,BB3 4
LoggingEventBB5 A
loggingEventBBB N
)BBN O
{CC 
tryDD 
{EE 
m_dateFormatterFF 
.FF 

FormatDateFF 
(FF 
loggingEventFF +
.FF+ ,
TimeStampUtcFF, 8
,FF8 9
writerFF: @
)FF@ A
;FFA B
}GG 
catchHH 
(HH	 

	ExceptionHH
 
exHH 
)HH 
{II 
LogLogJJ 

.JJ
 
ErrorJJ 
(JJ 
declaringTypeJJ 
,JJ 
$strJJ  G
,JJG H
exJJI K
)JJK L
;JJL M
}KK 
}LL 
privateWW 
readonlyWW 
staticWW 
TypeWW !
declaringTypeWW" /
=WW0 1
typeofWW2 8
(WW8 9#
UtcDatePatternConverterWW9 P
)WWP Q
;WWQ R
}ZZ 
}[[ ˝
DC:\sonarqube\projects\log4net-2.0.7\src\Layout\RawLayoutConverter.cs
	namespace 	
log4net
 
. 
Layout 
{ 
public++ 
class++ 
RawLayoutConverter++  
:++! "
IConvertFrom++# /
{,, 
public;; 
bool;;	 
CanConvertFrom;; 
(;; 
Type;; !

sourceType;;" ,
);;, -
{<< 
return>> 	
(>>
 
typeof>> 
(>> 
ILayout>> 
)>> 
.>> 
IsAssignableFrom>> +
(>>+ ,

sourceType>>, 6
)>>6 7
)>>7 8
;>>8 9
}?? 
publicOO 
objectOO	 
ConvertFromOO 
(OO 
objectOO "
sourceOO# )
)OO) *
{PP 
ILayoutQQ 

layoutQQ 
=QQ 
sourceQQ 
asQQ 
ILayoutQQ %
;QQ% &
ifRR 
(RR 
layoutRR 
!=RR 
nullRR 
)RR 
{SS 
returnTT 

newTT #
Layout2RawLayoutAdapterTT &
(TT& '
layoutTT' -
)TT- .
;TT. /
}UU 
throwVV +
ConversionNotSupportedExceptionVV	 (
.VV( )
CreateVV) /
(VV/ 0
typeofVV0 6
(VV6 7

IRawLayoutVV7 A
)VVA B
,VVB C
sourceVVD J
)VVJ K
;VVK L
}WW 
}ZZ 
}[[ ˙
CC:\sonarqube\projects\log4net-2.0.7\src\Layout\RawPropertyLayout.cs
	namespace 	
log4net
 
. 
Layout 
{ 
public%% 
class%% 
RawPropertyLayout%% 
:%%  !

IRawLayout%%" ,
{&& 
public,, 
RawPropertyLayout,,	 
(,, 
),, 
{-- 
}.. 
private22 	
string22
 
m_key22 
;22 
public?? 
string??	 
Key?? 
{@@ 
getAA 
{AA 
returnAA	 
m_keyAA 
;AA 
}AA 
setBB 
{BB 
m_keyBB	 
=BB 
valueBB 
;BB 
}BB 
}CC 
publicSS 
virtualSS	 
objectSS 
FormatSS 
(SS 
LoggingEventSS +
loggingEventSS, 8
)SS8 9
{TT 
returnUU 	
loggingEventUU
 
.UU 
LookupPropertyUU %
(UU% &
m_keyUU& +
)UU+ ,
;UU, -
}VV 
}YY 
}ZZ Õ
DC:\sonarqube\projects\log4net-2.0.7\src\Layout\RawTimeStampLayout.cs
	namespace 	
log4net
 
. 
Layout 
{ 
public&& 
class&& 
RawTimeStampLayout&&  
:&&! "

IRawLayout&&# -
{'' 
public-- 
RawTimeStampLayout--	 
(-- 
)-- 
{.. 
}// 
publicCC 
virtualCC	 
objectCC 
FormatCC 
(CC 
LoggingEventCC +
loggingEventCC, 8
)CC8 9
{DD 
returnEE 	
loggingEventEE
 
.EE 
	TimeStampEE  
;EE  !
}FF 
}II 
}JJ Ÿ
GC:\sonarqube\projects\log4net-2.0.7\src\Layout\RawUtcTimeStampLayout.cs
	namespace 	
log4net
 
. 
Layout 
{ 
public&& 
class&& !
RawUtcTimeStampLayout&& #
:&&$ %

IRawLayout&&& 0
{'' 
public-- !
RawUtcTimeStampLayout--	 
(-- 
)--  
{.. 
}// 
publicCC 
virtualCC	 
objectCC 
FormatCC 
(CC 
LoggingEventCC +
loggingEventCC, 8
)CC8 9
{DD 
returnEE 	
loggingEventEE
 
.EE 
TimeStampUtcEE #
;EE# $
}FF 
}II 
}JJ ∂
>C:\sonarqube\projects\log4net-2.0.7\src\Layout\SimpleLayout.cs
	namespace 	
log4net
 
. 
Layout 
{ 
public++ 
class++ 
SimpleLayout++ 
:++ 
LayoutSkeleton++ +
{,, 
public22 
SimpleLayout22	 
(22 
)22 
{33 
IgnoresException44 
=44 
true44 
;44 
}55 
overrideKK 

publicKK 
voidKK 
ActivateOptionsKK &
(KK& '
)KK' (
{LL 
}NN 
override`` 

public`` 
void`` 
Format`` 
(`` 

TextWriter`` (
writer``) /
,``/ 0
LoggingEvent``1 =
loggingEvent``> J
)``J K
{aa 
ifbb 
(bb 
loggingEventbb 
==bb 
nullbb 
)bb 
{cc 
throwdd 	
newdd
 !
ArgumentNullExceptiondd #
(dd# $
$strdd$ 2
)dd2 3
;dd3 4
}ee 
writergg 	
.gg	 

Writegg
 
(gg 
loggingEventgg 
.gg 
Levelgg "
.gg" #
DisplayNamegg# .
)gg. /
;gg/ 0
writerhh 	
.hh	 

Writehh
 
(hh 
$strhh 
)hh 
;hh 
loggingEventii 
.ii  
WriteRenderedMessageii $
(ii$ %
writerii% +
)ii+ ,
;ii, -
writerjj 	
.jj	 

	WriteLinejj
 
(jj 
)jj 
;jj 
}kk 
}nn 
}oo ¸î
;C:\sonarqube\projects\log4net-2.0.7\src\Layout\XmlLayout.cs
	namespace 	
log4net
 
. 
Layout 
{ 
publicHH 
classHH 
	XmlLayoutHH 
:HH 
XmlLayoutBaseHH '
{II 
publicOO 
	XmlLayoutOO	 
(OO 
)OO 
:OO 
baseOO 
(OO 
)OO 
{PP 
}QQ 
publicdd 
	XmlLayoutdd	 
(dd 
booldd 
locationInfodd $
)dd$ %
:dd& '
basedd) -
(dd- .
locationInfodd. :
)dd: ;
{ee 
}ff 
publicvv 
stringvv	 
Prefixvv 
{ww 
getxx 
{xx 
returnxx	 
m_prefixxx 
;xx 
}xx 
setyy 
{yy 
m_prefixyy	 
=yy 
valueyy 
;yy 
}yy 
}zz 
public
ää 
bool
ää	 !
Base64EncodeMessage
ää !
{
ãã 
get
åå 
{
åå 
return
åå 
m_base64Message
åå 
;
åå 
}
åå  
set
çç 
{
çç 
m_base64Message
çç 
=
çç 
value
çç 
;
çç 
}
çç 
}
éé 
public
ùù 
bool
ùù	 $
Base64EncodeProperties
ùù $
{
ûû 
get
üü 
{
üü 
return
üü  
m_base64Properties
üü !
;
üü! "
}
üü" #
set
†† 
{
††  
m_base64Properties
†† 
=
†† 
value
††  
;
††  !
}
††! "
}
°° 
override
ªª 

public
ªª 
void
ªª 
ActivateOptions
ªª &
(
ªª& '
)
ªª' (
{
ºº 
base
ΩΩ 
.
ΩΩ 
ActivateOptions
ΩΩ 
(
ΩΩ 
)
ΩΩ 
;
ΩΩ 
if
¿¿ 
(
¿¿ 
m_prefix
¿¿ 
!=
¿¿ 
null
¿¿ 
&&
¿¿ 
m_prefix
¿¿ #
.
¿¿# $
Length
¿¿$ *
>
¿¿+ ,
$num
¿¿- .
)
¿¿. /
{
¡¡ 

m_elmEvent
¬¬ 
=
¬¬ 
m_prefix
¬¬ 
+
¬¬ 
$str
¬¬ 
+
¬¬  !
	ELM_EVENT
¬¬" +
;
¬¬+ ,
m_elmMessage
√√ 
=
√√ 
m_prefix
√√ 
+
√√ 
$str
√√ !
+
√√" #
ELM_MESSAGE
√√$ /
;
√√/ 0
m_elmProperties
ƒƒ 
=
ƒƒ 
m_prefix
ƒƒ 
+
ƒƒ  
$str
ƒƒ! $
+
ƒƒ% &
ELM_PROPERTIES
ƒƒ' 5
;
ƒƒ5 6
	m_elmData
≈≈ 
=
≈≈ 
m_prefix
≈≈ 
+
≈≈ 
$str
≈≈ 
+
≈≈  
ELM_DATA
≈≈! )
;
≈≈) *
m_elmException
∆∆ 
=
∆∆ 
m_prefix
∆∆ 
+
∆∆ 
$str
∆∆  #
+
∆∆$ %
ELM_EXCEPTION
∆∆& 3
;
∆∆3 4
m_elmLocation
«« 
=
«« 
m_prefix
«« 
+
«« 
$str
«« "
+
««# $
ELM_LOCATION
««% 1
;
««1 2
}
»» 
}
…… 
override
⁄⁄ 

	protected
⁄⁄ 
void
⁄⁄ 
	FormatXml
⁄⁄ #
(
⁄⁄# $
	XmlWriter
⁄⁄$ -
writer
⁄⁄. 4
,
⁄⁄4 5
LoggingEvent
⁄⁄6 B
loggingEvent
⁄⁄C O
)
⁄⁄O P
{
€€ 
writer
‹‹ 	
.
‹‹	 

WriteStartElement
‹‹
 
(
‹‹ 

m_elmEvent
‹‹ &
)
‹‹& '
;
‹‹' (
writer
›› 	
.
››	 
"
WriteAttributeString
››
 
(
›› 
ATTR_LOGGER
›› *
,
››* +
loggingEvent
››, 8
.
››8 9

LoggerName
››9 C
)
››C D
;
››D E
writer
‡‡ 	
.
‡‡	 
"
WriteAttributeString
‡‡
 
(
‡‡ 
ATTR_TIMESTAMP
‡‡ -
,
‡‡- .

XmlConvert
‡‡/ 9
.
‡‡9 :
ToString
‡‡: B
(
‡‡B C
loggingEvent
‡‡C O
.
‡‡O P
	TimeStamp
‡‡P Y
,
‡‡Y Z*
XmlDateTimeSerializationMode
‡‡[ w
.
‡‡w x
Local
‡‡x }
)
‡‡} ~
)
‡‡~ 
;‡‡ Ä
writer
ÂÂ 	
.
ÂÂ	 
"
WriteAttributeString
ÂÂ
 
(
ÂÂ 

ATTR_LEVEL
ÂÂ )
,
ÂÂ) *
loggingEvent
ÂÂ+ 7
.
ÂÂ7 8
Level
ÂÂ8 =
.
ÂÂ= >
DisplayName
ÂÂ> I
)
ÂÂI J
;
ÂÂJ K
writer
ÊÊ 	
.
ÊÊ	 
"
WriteAttributeString
ÊÊ
 
(
ÊÊ 
ATTR_THREAD
ÊÊ *
,
ÊÊ* +
loggingEvent
ÊÊ, 8
.
ÊÊ8 9

ThreadName
ÊÊ9 C
)
ÊÊC D
;
ÊÊD E
if
ËË 
(
ËË 
loggingEvent
ËË 
.
ËË 
Domain
ËË 
!=
ËË 
null
ËË "
&&
ËË# %
loggingEvent
ËË& 2
.
ËË2 3
Domain
ËË3 9
.
ËË9 :
Length
ËË: @
>
ËËA B
$num
ËËC D
)
ËËD E
{
ÈÈ 
writer
ÍÍ 

.
ÍÍ
 "
WriteAttributeString
ÍÍ 
(
ÍÍ  
ATTR_DOMAIN
ÍÍ  +
,
ÍÍ+ ,
loggingEvent
ÍÍ- 9
.
ÍÍ9 :
Domain
ÍÍ: @
)
ÍÍ@ A
;
ÍÍA B
}
ÎÎ 
if
ÏÏ 
(
ÏÏ 
loggingEvent
ÏÏ 
.
ÏÏ 
Identity
ÏÏ 
!=
ÏÏ 
null
ÏÏ  $
&&
ÏÏ% '
loggingEvent
ÏÏ( 4
.
ÏÏ4 5
Identity
ÏÏ5 =
.
ÏÏ= >
Length
ÏÏ> D
>
ÏÏE F
$num
ÏÏG H
)
ÏÏH I
{
ÌÌ 
writer
ÓÓ 

.
ÓÓ
 "
WriteAttributeString
ÓÓ 
(
ÓÓ  
ATTR_IDENTITY
ÓÓ  -
,
ÓÓ- .
loggingEvent
ÓÓ/ ;
.
ÓÓ; <
Identity
ÓÓ< D
)
ÓÓD E
;
ÓÓE F
}
ÔÔ 
if
 
(
 
loggingEvent
 
.
 
UserName
 
!=
 
null
  $
&&
% '
loggingEvent
( 4
.
4 5
UserName
5 =
.
= >
Length
> D
>
E F
$num
G H
)
H I
{
ÒÒ 
writer
ÚÚ 

.
ÚÚ
 "
WriteAttributeString
ÚÚ 
(
ÚÚ  
ATTR_USERNAME
ÚÚ  -
,
ÚÚ- .
loggingEvent
ÚÚ/ ;
.
ÚÚ; <
UserName
ÚÚ< D
)
ÚÚD E
;
ÚÚE F
}
ÛÛ 
writer
ˆˆ 	
.
ˆˆ	 

WriteStartElement
ˆˆ
 
(
ˆˆ 
m_elmMessage
ˆˆ (
)
ˆˆ( )
;
ˆˆ) *
if
˜˜ 
(
˜˜ 
!
˜˜ 
this
˜˜ 
.
˜˜ !
Base64EncodeMessage
˜˜  
)
˜˜  !
{
¯¯ 
	Transform
˘˘ 
.
˘˘ #
WriteEscapedXmlString
˘˘ #
(
˘˘# $
writer
˘˘$ *
,
˘˘* +
loggingEvent
˘˘, 8
.
˘˘8 9
RenderedMessage
˘˘9 H
,
˘˘H I
this
˘˘J N
.
˘˘N O$
InvalidCharReplacement
˘˘O e
)
˘˘e f
;
˘˘f g
}
˙˙ 
else
˚˚ 
{
¸¸ 
byte
˝˝ 
[
˝˝ 	
]
˝˝	 

messageBytes
˝˝ 
=
˝˝ 
Encoding
˝˝ "
.
˝˝" #
UTF8
˝˝# '
.
˝˝' (
GetBytes
˝˝( 0
(
˝˝0 1
loggingEvent
˝˝1 =
.
˝˝= >
RenderedMessage
˝˝> M
)
˝˝M N
;
˝˝N O
string
˛˛ 

base64Message
˛˛ 
=
˛˛ 
Convert
˛˛ "
.
˛˛" #
ToBase64String
˛˛# 1
(
˛˛1 2
messageBytes
˛˛2 >
,
˛˛> ?
$num
˛˛@ A
,
˛˛A B
messageBytes
˛˛C O
.
˛˛O P
Length
˛˛P V
)
˛˛V W
;
˛˛W X
	Transform
ˇˇ 
.
ˇˇ #
WriteEscapedXmlString
ˇˇ #
(
ˇˇ# $
writer
ˇˇ$ *
,
ˇˇ* +
base64Message
ˇˇ, 9
,
ˇˇ9 :
this
ˇˇ: >
.
ˇˇ> ?$
InvalidCharReplacement
ˇˇ? U
)
ˇˇU V
;
ˇˇV W
}
ÄÄ 
writer
ÅÅ 	
.
ÅÅ	 

WriteEndElement
ÅÅ
 
(
ÅÅ 
)
ÅÅ 
;
ÅÅ "
PropertiesDictionary
ÉÉ 

properties
ÉÉ "
=
ÉÉ# $
loggingEvent
ÉÉ% 1
.
ÉÉ1 2
GetProperties
ÉÉ2 ?
(
ÉÉ? @
)
ÉÉ@ A
;
ÉÉA B
if
ÜÜ 
(
ÜÜ 

properties
ÜÜ 
.
ÜÜ 
Count
ÜÜ 
>
ÜÜ 
$num
ÜÜ 
)
ÜÜ 
{
áá 
writer
àà 

.
àà
 
WriteStartElement
àà 
(
àà 
m_elmProperties
àà ,
)
àà, -
;
àà- .
foreach
ââ 
(
ââ 
System
ââ 
.
ââ 
Collections
ââ 
.
ââ 
DictionaryEntry
ââ .
entry
ââ/ 4
in
ââ5 7

properties
ââ8 B
)
ââB C
{
ää 
writer
ãã 
.
ãã 
WriteStartElement
ãã 
(
ãã 
	m_elmData
ãã '
)
ãã' (
;
ãã( )
writer
åå 
.
åå "
WriteAttributeString
åå  
(
åå  !
	ATTR_NAME
åå! *
,
åå* +
	Transform
åå, 5
.
åå5 6&
MaskXmlInvalidCharacters
åå6 N
(
ååN O
(
ååO P
string
ååP V
)
ååV W
entry
ååW \
.
åå\ ]
Key
åå] `
,
åå` a
this
ååa e
.
ååe f$
InvalidCharReplacement
ååf |
)
åå| }
)
åå} ~
;
åå~ 
string
èè 
valueStr
èè 
=
èè 
null
èè 
;
èè 
if
êê 
(
êê 	
!
êê	 

this
êê
 
.
êê $
Base64EncodeProperties
êê %
)
êê% &
{
ëë 
valueStr
íí 
=
íí 
	Transform
íí 
.
íí &
MaskXmlInvalidCharacters
íí 3
(
íí3 4
loggingEvent
íí4 @
.
íí@ A

Repository
ííA K
.
ííK L
RendererMap
ííL W
.
ííW X
FindAndRender
ííX e
(
ííe f
entry
ííf k
.
íík l
Value
ííl q
)
ííq r
,
íír s
this
íís w
.
ííw x%
InvalidCharReplacementííx é
)ííé è
;ííè ê
}
ìì 
else
îî 	
{
ïï 
byte
ññ 

[
ññ
 
]
ññ  
propertyValueBytes
ññ 
=
ññ  !
Encoding
ññ" *
.
ññ* +
UTF8
ññ+ /
.
ññ/ 0
GetBytes
ññ0 8
(
ññ8 9
loggingEvent
ññ9 E
.
ññE F

Repository
ññF P
.
ññP Q
RendererMap
ññQ \
.
ññ\ ]
FindAndRender
ññ] j
(
ññj k
entry
ññk p
.
ññp q
Value
ññq v
)
ññv w
)
ññw x
;
ññx y
valueStr
óó 
=
óó 
Convert
óó 
.
óó 
ToBase64String
óó '
(
óó' ( 
propertyValueBytes
óó( :
,
óó: ;
$num
óó< =
,
óó= > 
propertyValueBytes
óó? Q
.
óóQ R
Length
óóR X
)
óóX Y
;
óóY Z
}
òò 
writer
ôô 
.
ôô "
WriteAttributeString
ôô  
(
ôô  !

ATTR_VALUE
ôô! +
,
ôô+ ,
valueStr
ôô- 5
)
ôô5 6
;
ôô6 7
writer
õõ 
.
õõ 
WriteEndElement
õõ 
(
õõ 
)
õõ 
;
õõ 
}
úú 
writer
ùù 

.
ùù
 
WriteEndElement
ùù 
(
ùù 
)
ùù 
;
ùù 
}
ûû 
string
†† 	
exceptionStr
††
 
=
†† 
loggingEvent
†† %
.
††% & 
GetExceptionString
††& 8
(
††8 9
)
††9 :
;
††: ;
if
°° 
(
°° 
exceptionStr
°° 
!=
°° 
null
°° 
&&
°° 
exceptionStr
°° +
.
°°+ ,
Length
°°, 2
>
°°3 4
$num
°°5 6
)
°°6 7
{
¢¢ 
writer
§§ 

.
§§
 
WriteStartElement
§§ 
(
§§ 
m_elmException
§§ +
)
§§+ ,
;
§§, -
	Transform
•• 
.
•• #
WriteEscapedXmlString
•• #
(
••# $
writer
••$ *
,
••* +
exceptionStr
••, 8
,
••8 9
this
••9 =
.
••= >$
InvalidCharReplacement
••> T
)
••T U
;
••U V
writer
¶¶ 

.
¶¶
 
WriteEndElement
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 
}
ßß 
if
©© 
(
©© 
LocationInfo
©© 
)
©© 
{
™™ 
LocationInfo
´´ 
locationInfo
´´ 
=
´´ 
loggingEvent
´´  ,
.
´´, -!
LocationInformation
´´- @
;
´´@ A
writer
≠≠ 

.
≠≠
 
WriteStartElement
≠≠ 
(
≠≠ 
m_elmLocation
≠≠ *
)
≠≠* +
;
≠≠+ ,
writer
ÆÆ 

.
ÆÆ
 "
WriteAttributeString
ÆÆ 
(
ÆÆ  

ATTR_CLASS
ÆÆ  *
,
ÆÆ* +
locationInfo
ÆÆ, 8
.
ÆÆ8 9
	ClassName
ÆÆ9 B
)
ÆÆB C
;
ÆÆC D
writer
ØØ 

.
ØØ
 "
WriteAttributeString
ØØ 
(
ØØ  
ATTR_METHOD
ØØ  +
,
ØØ+ ,
locationInfo
ØØ- 9
.
ØØ9 :

MethodName
ØØ: D
)
ØØD E
;
ØØE F
writer
∞∞ 

.
∞∞
 "
WriteAttributeString
∞∞ 
(
∞∞  
	ATTR_FILE
∞∞  )
,
∞∞) *
locationInfo
∞∞+ 7
.
∞∞7 8
FileName
∞∞8 @
)
∞∞@ A
;
∞∞A B
writer
±± 

.
±±
 "
WriteAttributeString
±± 
(
±±  
	ATTR_LINE
±±  )
,
±±) *
locationInfo
±±+ 7
.
±±7 8

LineNumber
±±8 B
)
±±B C
;
±±C D
writer
≤≤ 

.
≤≤
 
WriteEndElement
≤≤ 
(
≤≤ 
)
≤≤ 
;
≤≤ 
}
≥≥ 
writer
µµ 	
.
µµ	 

WriteEndElement
µµ
 
(
µµ 
)
µµ 
;
µµ 
}
∂∂ 
private
øø 	
string
øø
 
m_prefix
øø 
=
øø 
PREFIX
øø "
;
øø" #
private
¡¡ 	
string
¡¡
 

m_elmEvent
¡¡ 
=
¡¡ 
	ELM_EVENT
¡¡ '
;
¡¡' (
private
¬¬ 	
string
¬¬
 
m_elmMessage
¬¬ 
=
¬¬ 
ELM_MESSAGE
¬¬  +
;
¬¬+ ,
private
√√ 	
string
√√
 
	m_elmData
√√ 
=
√√ 
ELM_DATA
√√ %
;
√√% &
private
ƒƒ 	
string
ƒƒ
 
m_elmProperties
ƒƒ  
=
ƒƒ! "
ELM_PROPERTIES
ƒƒ# 1
;
ƒƒ1 2
private
≈≈ 	
string
≈≈
 
m_elmException
≈≈ 
=
≈≈  !
ELM_EXCEPTION
≈≈" /
;
≈≈/ 0
private
∆∆ 	
string
∆∆
 
m_elmLocation
∆∆ 
=
∆∆  
ELM_LOCATION
∆∆! -
;
∆∆- .
private
»» 	
bool
»»
 
m_base64Message
»» 
=
»» 
false
»» $
;
»»$ %
private
…… 	
bool
……
  
m_base64Properties
…… !
=
……! "
false
……" '
;
……' (
private
œœ 	
const
œœ
 
string
œœ 
PREFIX
œœ 
=
œœ 
$str
œœ  )
;
œœ) *
private
—— 	
const
——
 
string
—— 
	ELM_EVENT
——  
=
——! "
$str
——# *
;
——* +
private
““ 	
const
““
 
string
““ 
ELM_MESSAGE
““ "
=
““# $
$str
““% .
;
““. /
private
”” 	
const
””
 
string
”” 
ELM_PROPERTIES
”” %
=
””& '
$str
””( 4
;
””4 5
private
‘‘ 	
const
‘‘
 
string
‘‘ #
ELM_GLOBAL_PROPERTIES
‘‘ ,
=
‘‘- .
$str
‘‘/ B
;
‘‘B C
private
’’ 	
const
’’
 
string
’’ 
ELM_DATA
’’ 
=
’’  !
$str
’’" (
;
’’( )
private
÷÷ 	
const
÷÷
 
string
÷÷ 
ELM_EXCEPTION
÷÷ $
=
÷÷% &
$str
÷÷' 2
;
÷÷2 3
private
◊◊ 	
const
◊◊
 
string
◊◊ 
ELM_LOCATION
◊◊ #
=
◊◊$ %
$str
◊◊& 4
;
◊◊4 5
private
ŸŸ 	
const
ŸŸ
 
string
ŸŸ 
ATTR_LOGGER
ŸŸ "
=
ŸŸ# $
$str
ŸŸ% -
;
ŸŸ- .
private
⁄⁄ 	
const
⁄⁄
 
string
⁄⁄ 
ATTR_TIMESTAMP
⁄⁄ %
=
⁄⁄& '
$str
⁄⁄( 3
;
⁄⁄3 4
private
€€ 	
const
€€
 
string
€€ 

ATTR_LEVEL
€€ !
=
€€" #
$str
€€$ +
;
€€+ ,
private
‹‹ 	
const
‹‹
 
string
‹‹ 
ATTR_THREAD
‹‹ "
=
‹‹# $
$str
‹‹% -
;
‹‹- .
private
›› 	
const
››
 
string
›› 
ATTR_DOMAIN
›› "
=
››# $
$str
››% -
;
››- .
private
ﬁﬁ 	
const
ﬁﬁ
 
string
ﬁﬁ 
ATTR_IDENTITY
ﬁﬁ $
=
ﬁﬁ% &
$str
ﬁﬁ' 1
;
ﬁﬁ1 2
private
ﬂﬂ 	
const
ﬂﬂ
 
string
ﬂﬂ 
ATTR_USERNAME
ﬂﬂ $
=
ﬂﬂ% &
$str
ﬂﬂ' 1
;
ﬂﬂ1 2
private
‡‡ 	
const
‡‡
 
string
‡‡ 

ATTR_CLASS
‡‡ !
=
‡‡" #
$str
‡‡$ +
;
‡‡+ ,
private
·· 	
const
··
 
string
·· 
ATTR_METHOD
·· "
=
··# $
$str
··% -
;
··- .
private
‚‚ 	
const
‚‚
 
string
‚‚ 
	ATTR_FILE
‚‚  
=
‚‚! "
$str
‚‚# )
;
‚‚) *
private
„„ 	
const
„„
 
string
„„ 
	ATTR_LINE
„„  
=
„„! "
$str
„„# )
;
„„) *
private
‰‰ 	
const
‰‰
 
string
‰‰ 
	ATTR_NAME
‰‰  
=
‰‰! "
$str
‰‰# )
;
‰‰) *
private
ÂÂ 	
const
ÂÂ
 
string
ÂÂ 

ATTR_VALUE
ÂÂ !
=
ÂÂ" #
$str
ÂÂ$ +
;
ÂÂ+ ,
}
ÈÈ 
}ÍÍ œ 
?C:\sonarqube\projects\log4net-2.0.7\src\Layout\XmlLayoutBase.cs
	namespace 	
log4net
 
. 
Layout 
{ 
abstract,, 	
public,,
 
class,, 
XmlLayoutBase,, $
:,,% &
LayoutSkeleton,,' 5
{-- 
	protected99 
XmlLayoutBase99 
(99 
)99 
:99 
this99 "
(99" #
false99# (
)99( )
{:: 
IgnoresException;; 
=;; 
false;; 
;;; 
}<< 
	protectedOO 
XmlLayoutBaseOO 
(OO 
boolOO 
locationInfoOO +
)OO+ ,
{PP 
IgnoresExceptionQQ 
=QQ 
falseQQ 
;QQ 
m_locationInfoRR 
=RR 
locationInfoRR  
;RR  !
}SS 
publicmm 
boolmm	 
LocationInfomm 
{nn 
getoo 
{oo 
returnoo	 
m_locationInfooo 
;oo 
}oo  !
setpp 
{pp 
m_locationInfopp	 
=pp 
valuepp 
;pp  
}pp! "
}qq 
public 
string	 "
InvalidCharReplacement &
{
ÄÄ 
get
ÅÅ 
{
ÅÅ 
return
ÅÅ &
m_invalidCharReplacement
ÅÅ '
;
ÅÅ' (
}
ÅÅ( )
set
ÇÇ 
{
ÇÇ &
m_invalidCharReplacement
ÇÇ  
=
ÇÇ  !
value
ÇÇ! &
;
ÇÇ& '
}
ÇÇ' (
}
ÉÉ 
override
òò 

public
òò 
void
òò 
ActivateOptions
òò &
(
òò& '
)
òò' (
{
ôô 
}
õõ 
override
¨¨ 

public
¨¨ 
string
¨¨ 
ContentType
¨¨ $
{
≠≠ 
get
ÆÆ 
{
ÆÆ 
return
ÆÆ	 
$str
ÆÆ 
;
ÆÆ 
}
ÆÆ 
}
ØØ 
override
¡¡ 

public
¡¡ 
void
¡¡ 
Format
¡¡ 
(
¡¡ 

TextWriter
¡¡ (
writer
¡¡) /
,
¡¡/ 0
LoggingEvent
¡¡1 =
loggingEvent
¡¡> J
)
¡¡J K
{
¬¬ 
if
√√ 
(
√√ 
loggingEvent
√√ 
==
√√ 
null
√√ 
)
√√ 
{
ƒƒ 
throw
≈≈ 	
new
≈≈
 #
ArgumentNullException
≈≈ #
(
≈≈# $
$str
≈≈$ 2
)
≈≈2 3
;
≈≈3 4
}
∆∆ 
XmlTextWriter
œœ 
	xmlWriter
œœ 
=
œœ 
new
œœ  
XmlTextWriter
œœ! .
(
œœ. /
new
œœ/ 2$
ProtectCloseTextWriter
œœ3 I
(
œœI J
writer
œœJ P
)
œœP Q
)
œœQ R
;
œœR S
	xmlWriter
–– 
.
–– 

Formatting
–– 
=
–– 

Formatting
–– $
.
––$ %
None
––% )
;
––) *
	xmlWriter
—— 
.
—— 

Namespaces
—— 
=
—— 
false
—— 
;
——  
	FormatXml
‘‘ 
(
‘‘ 
	xmlWriter
‘‘ 
,
‘‘ 
loggingEvent
‘‘ $
)
‘‘$ %
;
‘‘% &
	xmlWriter
÷÷ 
.
÷÷ 
WriteWhitespace
÷÷ 
(
÷÷ 

SystemInfo
÷÷ '
.
÷÷' (
NewLine
÷÷( /
)
÷÷/ 0
;
÷÷0 1
	xmlWriter
⁄⁄ 
.
⁄⁄ 
Close
⁄⁄ 
(
⁄⁄ 
)
⁄⁄ 
;
⁄⁄ 
}
€€ 
abstract
ÏÏ 

	protected
ÏÏ 
void
ÏÏ 
	FormatXml
ÏÏ #
(
ÏÏ# $
	XmlWriter
ÏÏ$ -
writer
ÏÏ. 4
,
ÏÏ4 5
LoggingEvent
ÏÏ6 B
loggingEvent
ÏÏC O
)
ÏÏO P
;
ÏÏP Q
private
ˆˆ 	
bool
ˆˆ
 
m_locationInfo
ˆˆ 
=
ˆˆ 
false
ˆˆ  %
;
ˆˆ% &
private
˚˚ 	
string
˚˚
 &
m_invalidCharReplacement
˚˚ )
=
˚˚) *
$str
˚˚* -
;
˚˚- .
}
˛˛ 
}ˇˇ ∫i
FC:\sonarqube\projects\log4net-2.0.7\src\Layout\XmlLayoutSchemaLog4j.cs
	namespace 	
log4net
 
. 
Layout 
{ 
public'' 
class''  
XmlLayoutSchemaLog4j'' "
:''# $
XmlLayoutBase''% 2
{(( 
private.. 	
static..
 
readonly.. 
DateTime.. "

s_date1970..# -
=... /
new..0 3
DateTime..4 <
(..< =
$num..= A
,..A B
$num..C D
,..D E
$num..F G
)..G H
;..H I
public77  
XmlLayoutSchemaLog4j77	 
(77 
)77 
:77  !
base77" &
(77& '
)77' (
{88 
}99 
publicLL  
XmlLayoutSchemaLog4jLL	 
(LL 
boolLL "
locationInfoLL# /
)LL/ 0
:LL1 2
baseLL4 8
(LL8 9
locationInfoLL9 E
)LLE F
{MM 
}NN 
public\\ 
string\\	 
Version\\ 
{]] 
get^^ 
{^^ 
return^^	 
$str^^ 
;^^ 
}^^ 
set__ 
{`` 
ifaa 
(aa 
valueaa 
!=aa 
$straa 
)aa 
{bb 
throwcc 

newcc 
ArgumentExceptioncc  
(cc  !
$strcc! ^
)cc^ _
;cc_ `
}dd 
}ee 
}ff 
override
ãã 

	protected
ãã 
void
ãã 
	FormatXml
ãã #
(
ãã# $
	XmlWriter
ãã$ -
writer
ãã. 4
,
ãã4 5
LoggingEvent
ãã6 B
loggingEvent
ããC O
)
ããO P
{
åå 
if
êê 
(
êê 
loggingEvent
êê 
.
êê 
LookupProperty
êê "
(
êê" #
LoggingEvent
êê# /
.
êê/ 0
HostNameProperty
êê0 @
)
êê@ A
!=
êêB D
null
êêE I
&&
êêJ L
loggingEvent
ëë 
.
ëë 
LookupProperty
ëë 
(
ëë  
$str
ëë  2
)
ëë2 3
==
ëë4 6
null
ëë7 ;
)
ëë; <
{
íí 
loggingEvent
ìì 
.
ìì 
GetProperties
ìì 
(
ìì 
)
ìì  
[
ìì  !
$str
ìì! 3
]
ìì3 4
=
ìì5 6
loggingEvent
ìì7 C
.
ììC D
LookupProperty
ììD R
(
ììR S
LoggingEvent
ììS _
.
ìì_ `
HostNameProperty
ìì` p
)
ììp q
;
ììq r
}
îî 
if
óó 
(
óó 
loggingEvent
óó 
.
óó 
LookupProperty
óó "
(
óó" #
$str
óó# -
)
óó- .
==
óó/ 1
null
óó2 6
&&
óó7 9
loggingEvent
òò 
.
òò 
Domain
òò 
!=
òò 
null
òò 
&&
òò  "
loggingEvent
ôô 
.
ôô 
Domain
ôô 
.
ôô 
Length
ôô 
>
ôô  
$num
ôô! "
)
ôô" #
{
öö 
loggingEvent
õõ 
.
õõ 
GetProperties
õõ 
(
õõ 
)
õõ  
[
õõ  !
$str
õõ! +
]
õõ+ ,
=
õõ- .
loggingEvent
õõ/ ;
.
õõ; <
Domain
õõ< B
;
õõB C
}
úú 
if
üü 
(
üü 
loggingEvent
üü 
.
üü 
Identity
üü 
!=
üü 
null
üü  $
&&
üü% '
loggingEvent
†† 
.
†† 
Identity
†† 
.
†† 
Length
††  
>
††! "
$num
††# $
&&
††% '
loggingEvent
°° 
.
°° 
LookupProperty
°° 
(
°°  
LoggingEvent
°°  ,
.
°°, -
IdentityProperty
°°- =
)
°°= >
==
°°? A
null
°°B F
)
°°F G
{
¢¢ 
loggingEvent
££ 
.
££ 
GetProperties
££ 
(
££ 
)
££  
[
££  !
LoggingEvent
££! -
.
££- .
IdentityProperty
££. >
]
££> ?
=
££@ A
loggingEvent
££B N
.
££N O
Identity
££O W
;
££W X
}
§§ 
if
ßß 
(
ßß 
loggingEvent
ßß 
.
ßß 
UserName
ßß 
!=
ßß 
null
ßß  $
&&
ßß% '
loggingEvent
®® 
.
®® 
UserName
®® 
.
®® 
Length
®®  
>
®®! "
$num
®®# $
&&
®®% '
loggingEvent
©© 
.
©© 
LookupProperty
©© 
(
©©  
LoggingEvent
©©  ,
.
©©, -
UserNameProperty
©©- =
)
©©= >
==
©©? A
null
©©B F
)
©©F G
{
™™ 
loggingEvent
´´ 
.
´´ 
GetProperties
´´ 
(
´´ 
)
´´  
[
´´  !
LoggingEvent
´´! -
.
´´- .
UserNameProperty
´´. >
]
´´> ?
=
´´@ A
loggingEvent
´´B N
.
´´N O
UserName
´´O W
;
´´W X
}
¨¨ 
writer
ØØ 	
.
ØØ	 

WriteStartElement
ØØ
 
(
ØØ 
$str
ØØ )
)
ØØ) *
;
ØØ* +
writer
∞∞ 	
.
∞∞	 
"
WriteAttributeString
∞∞
 
(
∞∞ 
$str
∞∞ '
,
∞∞' (
loggingEvent
∞∞) 5
.
∞∞5 6

LoggerName
∞∞6 @
)
∞∞@ A
;
∞∞A B
TimeSpan
∑∑ 
timeSince1970
∑∑ 
=
∑∑ 
loggingEvent
∑∑ (
.
∑∑( )
TimeStampUtc
∑∑) 5
-
∑∑6 7

s_date1970
∑∑8 B
;
∑∑B C
writer
ππ 	
.
ππ	 
"
WriteAttributeString
ππ
 
(
ππ 
$str
ππ *
,
ππ* +

XmlConvert
ππ, 6
.
ππ6 7
ToString
ππ7 ?
(
ππ? @
(
ππ@ A
long
ππA E
)
ππE F
timeSince1970
ππF S
.
ππS T
TotalMilliseconds
ππT e
)
ππe f
)
ππf g
;
ππg h
writer
∫∫ 	
.
∫∫	 
"
WriteAttributeString
∫∫
 
(
∫∫ 
$str
∫∫ &
,
∫∫& '
loggingEvent
∫∫( 4
.
∫∫4 5
Level
∫∫5 :
.
∫∫: ;
DisplayName
∫∫; F
)
∫∫F G
;
∫∫G H
writer
ªª 	
.
ªª	 
"
WriteAttributeString
ªª
 
(
ªª 
$str
ªª '
,
ªª' (
loggingEvent
ªª) 5
.
ªª5 6

ThreadName
ªª6 @
)
ªª@ A
;
ªªA B
writer
ææ 	
.
ææ	 

WriteStartElement
ææ
 
(
ææ 
$str
ææ +
)
ææ+ ,
;
ææ, -
	Transform
øø 
.
øø #
WriteEscapedXmlString
øø "
(
øø" #
writer
øø# )
,
øø) *
loggingEvent
øø+ 7
.
øø7 8
RenderedMessage
øø8 G
,
øøG H
this
øøH L
.
øøL M$
InvalidCharReplacement
øøM c
)
øøc d
;
øød e
writer
¿¿ 	
.
¿¿	 

WriteEndElement
¿¿
 
(
¿¿ 
)
¿¿ 
;
¿¿ 
object
¬¬ 	
ndcObj
¬¬
 
=
¬¬ 
loggingEvent
¬¬ 
.
¬¬  
LookupProperty
¬¬  .
(
¬¬. /
$str
¬¬/ 4
)
¬¬4 5
;
¬¬5 6
if
√√ 
(
√√ 
ndcObj
√√ 
!=
√√ 
null
√√ 
)
√√ 
{
ƒƒ 
string
≈≈ 

valueStr
≈≈ 
=
≈≈ 
loggingEvent
≈≈ "
.
≈≈" #

Repository
≈≈# -
.
≈≈- .
RendererMap
≈≈. 9
.
≈≈9 :
FindAndRender
≈≈: G
(
≈≈G H
ndcObj
≈≈H N
)
≈≈N O
;
≈≈O P
if
«« 
(
«« 
valueStr
«« 
!=
«« 
null
«« 
&&
«« 
valueStr
«« $
.
««$ %
Length
««% +
>
««, -
$num
««. /
)
««/ 0
{
»» 
writer
   
.
   
WriteStartElement
   
(
   
$str
   )
)
  ) *
;
  * +
	Transform
ÀÀ 
.
ÀÀ #
WriteEscapedXmlString
ÀÀ $
(
ÀÀ$ %
writer
ÀÀ% +
,
ÀÀ+ ,
valueStr
ÀÀ- 5
,
ÀÀ5 6
this
ÀÀ6 :
.
ÀÀ: ;$
InvalidCharReplacement
ÀÀ; Q
)
ÀÀQ R
;
ÀÀR S
writer
ÃÃ 
.
ÃÃ 
WriteEndElement
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 
}
ŒŒ "
PropertiesDictionary
—— 

properties
—— "
=
——# $
loggingEvent
——% 1
.
——1 2
GetProperties
——2 ?
(
——? @
)
——@ A
;
——A B
if
““ 
(
““ 

properties
““ 
.
““ 
Count
““ 
>
““ 
$num
““ 
)
““ 
{
”” 
writer
‘‘ 

.
‘‘
 
WriteStartElement
‘‘ 
(
‘‘ 
$str
‘‘ /
)
‘‘/ 0
;
‘‘0 1
foreach
’’ 
(
’’ 
System
’’ 
.
’’ 
Collections
’’ 
.
’’ 
DictionaryEntry
’’ .
entry
’’/ 4
in
’’5 7

properties
’’8 B
)
’’B C
{
÷÷ 
writer
◊◊ 
.
◊◊ 
WriteStartElement
◊◊ 
(
◊◊ 
$str
◊◊ *
)
◊◊* +
;
◊◊+ ,
writer
ÿÿ 
.
ÿÿ "
WriteAttributeString
ÿÿ  
(
ÿÿ  !
$str
ÿÿ! '
,
ÿÿ' (
(
ÿÿ) *
string
ÿÿ* 0
)
ÿÿ0 1
entry
ÿÿ1 6
.
ÿÿ6 7
Key
ÿÿ7 :
)
ÿÿ: ;
;
ÿÿ; <
string
€€ 
valueStr
€€ 
=
€€ 
loggingEvent
€€ #
.
€€# $

Repository
€€$ .
.
€€. /
RendererMap
€€/ :
.
€€: ;
FindAndRender
€€; H
(
€€H I
entry
€€I N
.
€€N O
Value
€€O T
)
€€T U
;
€€U V
writer
‹‹ 
.
‹‹ "
WriteAttributeString
‹‹  
(
‹‹  !
$str
‹‹! (
,
‹‹( )
valueStr
‹‹* 2
)
‹‹2 3
;
‹‹3 4
writer
ﬁﬁ 
.
ﬁﬁ 
WriteEndElement
ﬁﬁ 
(
ﬁﬁ 
)
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
writer
‡‡ 

.
‡‡
 
WriteEndElement
‡‡ 
(
‡‡ 
)
‡‡ 
;
‡‡ 
}
·· 
string
„„ 	
exceptionStr
„„
 
=
„„ 
loggingEvent
„„ %
.
„„% & 
GetExceptionString
„„& 8
(
„„8 9
)
„„9 :
;
„„: ;
if
‰‰ 
(
‰‰ 
exceptionStr
‰‰ 
!=
‰‰ 
null
‰‰ 
&&
‰‰ 
exceptionStr
‰‰ +
.
‰‰+ ,
Length
‰‰, 2
>
‰‰3 4
$num
‰‰5 6
)
‰‰6 7
{
ÂÂ 
writer
ÁÁ 

.
ÁÁ
 
WriteStartElement
ÁÁ 
(
ÁÁ 
$str
ÁÁ .
)
ÁÁ. /
;
ÁÁ/ 0
	Transform
ËË 
.
ËË #
WriteEscapedXmlString
ËË #
(
ËË# $
writer
ËË$ *
,
ËË* +
exceptionStr
ËË, 8
,
ËË8 9
this
ËË9 =
.
ËË= >$
InvalidCharReplacement
ËË> T
)
ËËT U
;
ËËU V
writer
ÈÈ 

.
ÈÈ
 
WriteEndElement
ÈÈ 
(
ÈÈ 
)
ÈÈ 
;
ÈÈ 
}
ÍÍ 
if
ÏÏ 
(
ÏÏ 
LocationInfo
ÏÏ 
)
ÏÏ 
{
ÌÌ 
LocationInfo
ÓÓ 
locationInfo
ÓÓ 
=
ÓÓ 
loggingEvent
ÓÓ  ,
.
ÓÓ, -!
LocationInformation
ÓÓ- @
;
ÓÓ@ A
writer
 

.

 
WriteStartElement
 
(
 
$str
 1
)
1 2
;
2 3
writer
ÒÒ 

.
ÒÒ
 "
WriteAttributeString
ÒÒ 
(
ÒÒ  
$str
ÒÒ  '
,
ÒÒ' (
locationInfo
ÒÒ) 5
.
ÒÒ5 6
	ClassName
ÒÒ6 ?
)
ÒÒ? @
;
ÒÒ@ A
writer
ÚÚ 

.
ÚÚ
 "
WriteAttributeString
ÚÚ 
(
ÚÚ  
$str
ÚÚ  (
,
ÚÚ( )
locationInfo
ÚÚ* 6
.
ÚÚ6 7

MethodName
ÚÚ7 A
)
ÚÚA B
;
ÚÚB C
writer
ÛÛ 

.
ÛÛ
 "
WriteAttributeString
ÛÛ 
(
ÛÛ  
$str
ÛÛ  &
,
ÛÛ& '
locationInfo
ÛÛ( 4
.
ÛÛ4 5
FileName
ÛÛ5 =
)
ÛÛ= >
;
ÛÛ> ?
writer
ÙÙ 

.
ÙÙ
 "
WriteAttributeString
ÙÙ 
(
ÙÙ  
$str
ÙÙ  &
,
ÙÙ& '
locationInfo
ÙÙ( 4
.
ÙÙ4 5

LineNumber
ÙÙ5 ?
)
ÙÙ? @
;
ÙÙ@ A
writer
ıı 

.
ıı
 
WriteEndElement
ıı 
(
ıı 
)
ıı 
;
ıı 
}
ˆˆ 
writer
¯¯ 	
.
¯¯	 

WriteEndElement
¯¯
 
(
¯¯ 
)
¯¯ 
;
¯¯ 
}
˘˘ 
}
˙˙ 
}˚˚ ß
?C:\sonarqube\projects\log4net-2.0.7\src\LogicalThreadContext.cs
	namespace 	
log4net
 
{ 
publicPP 
sealedPP 
classPP  
LogicalThreadContextPP )
{QQ 
private\\ 	 
LogicalThreadContext\\
 
(\\ 
)\\  
{]] 
}^^ 
publicpp 
staticpp	 *
LogicalThreadContextPropertiespp .

Propertiespp/ 9
{qq 
getrr 
{rr 
returnrr	 
s_propertiesrr 
;rr 
}rr 
}ss 
public
ÄÄ 
static
ÄÄ	 (
LogicalThreadContextStacks
ÄÄ *
Stacks
ÄÄ+ 1
{
ÅÅ 
get
ÇÇ 
{
ÇÇ 
return
ÇÇ	 
s_stacks
ÇÇ 
;
ÇÇ 
}
ÇÇ 
}
ÉÉ 
private
åå 	
readonly
åå
 
static
åå ,
LogicalThreadContextProperties
åå 8
s_properties
åå9 E
=
ååF G
new
ååH K,
LogicalThreadContextProperties
ååL j
(
ååj k
)
ååk l
;
åål m
private
ëë 	
readonly
ëë
 
static
ëë (
LogicalThreadContextStacks
ëë 4
s_stacks
ëë5 =
=
ëë> ?
new
ëë@ C(
LogicalThreadContextStacks
ëëD ^
(
ëë^ _
s_properties
ëë_ k
)
ëëk l
;
ëël m
}
îî 
}ïï àò
5C:\sonarqube\projects\log4net-2.0.7\src\LogManager.cs
	namespace 	
log4net
 
{ 
public:: 
sealed:: 
class:: 

LogManager:: 
{;; 
privateDD 	

LogManagerDD
 
(DD 
)DD 
{EE 
}FF 
publicYY 
staticYY	 
ILogYY 
ExistsYY 
(YY 
stringYY "
nameYY# '
)YY' (
{ZZ 
return[[ 	
Exists[[
 
([[ 
Assembly[[ 
.[[ 
GetCallingAssembly[[ ,
([[, -
)[[- .
,[[. /
name[[0 4
)[[4 5
;[[5 6
}\\ 
publicff 
staticff	 
ILogff 
[ff 
]ff 
GetCurrentLoggersff (
(ff( )
)ff) *
{gg 
returnhh 	
GetCurrentLoggershh
 
(hh 
Assemblyhh $
.hh$ %
GetCallingAssemblyhh% 7
(hh7 8
)hh8 9
)hh9 :
;hh: ;
}ii 
public}} 
static}}	 
ILog}} 
	GetLogger}} 
(}} 
string}} %
name}}& *
)}}* +
{~~ 
return 	
	GetLogger
 
( 
Assembly 
. 
GetCallingAssembly /
(/ 0
)0 1
,1 2
name3 7
)7 8
;8 9
}
ÄÄ 
public
ìì 
static
ìì 
ILog
ìì 
Exists
ìì !
(
ìì! "
string
ìì" (

repository
ìì) 3
,
ìì3 4
string
ìì5 ;
name
ìì< @
)
ìì@ A
{
îî 
return
ïï 	

WrapLogger
ïï
 
(
ïï 
LoggerManager
ïï "
.
ïï" #
Exists
ïï# )
(
ïï) *

repository
ïï* 4
,
ïï4 5
name
ïï6 :
)
ïï: ;
)
ïï; <
;
ïï< =
}
ññ 
public
®® 
static
®®	 
ILog
®® 
Exists
®® 
(
®® 
Assembly
®® $ 
repositoryAssembly
®®% 7
,
®®7 8
string
®®9 ?
name
®®@ D
)
®®D E
{
©© 
return
™™ 	

WrapLogger
™™
 
(
™™ 
LoggerManager
™™ "
.
™™" #
Exists
™™# )
(
™™) * 
repositoryAssembly
™™* <
,
™™< =
name
™™> B
)
™™B C
)
™™C D
;
™™D E
}
´´ 
public
µµ 
static
µµ	 
ILog
µµ 
[
µµ 
]
µµ 
GetCurrentLoggers
µµ (
(
µµ( )
string
µµ) /

repository
µµ0 :
)
µµ: ;
{
∂∂ 
return
∑∑ 	
WrapLoggers
∑∑
 
(
∑∑ 
LoggerManager
∑∑ #
.
∑∑# $
GetCurrentLoggers
∑∑$ 5
(
∑∑5 6

repository
∑∑6 @
)
∑∑@ A
)
∑∑A B
;
∑∑B C
}
∏∏ 
public
¬¬ 
static
¬¬	 
ILog
¬¬ 
[
¬¬ 
]
¬¬ 
GetCurrentLoggers
¬¬ (
(
¬¬( )
Assembly
¬¬) 1 
repositoryAssembly
¬¬2 D
)
¬¬D E
{
√√ 
return
ƒƒ 	
WrapLoggers
ƒƒ
 
(
ƒƒ 
LoggerManager
ƒƒ #
.
ƒƒ# $
GetCurrentLoggers
ƒƒ$ 5
(
ƒƒ5 6 
repositoryAssembly
ƒƒ6 H
)
ƒƒH I
)
ƒƒI J
;
ƒƒJ K
}
≈≈ 
public
⁄⁄ 
static
⁄⁄	 
ILog
⁄⁄ 
	GetLogger
⁄⁄ 
(
⁄⁄ 
string
⁄⁄ %

repository
⁄⁄& 0
,
⁄⁄0 1
string
⁄⁄2 8
name
⁄⁄9 =
)
⁄⁄= >
{
€€ 
return
‹‹ 	

WrapLogger
‹‹
 
(
‹‹ 
LoggerManager
‹‹ "
.
‹‹" #
	GetLogger
‹‹# ,
(
‹‹, -

repository
‹‹- 7
,
‹‹7 8
name
‹‹9 =
)
‹‹= >
)
‹‹> ?
;
‹‹? @
}
›› 
public
ÚÚ 
static
ÚÚ	 
ILog
ÚÚ 
	GetLogger
ÚÚ 
(
ÚÚ 
Assembly
ÚÚ ' 
repositoryAssembly
ÚÚ( :
,
ÚÚ: ;
string
ÚÚ< B
name
ÚÚC G
)
ÚÚG H
{
ÛÛ 
return
ÙÙ 	

WrapLogger
ÙÙ
 
(
ÙÙ 
LoggerManager
ÙÙ "
.
ÙÙ" #
	GetLogger
ÙÙ# ,
(
ÙÙ, - 
repositoryAssembly
ÙÙ- ?
,
ÙÙ? @
name
ÙÙA E
)
ÙÙE F
)
ÙÙF G
;
ÙÙG H
}
ıı 
public
ˇˇ 
static
ˇˇ	 
ILog
ˇˇ 
	GetLogger
ˇˇ 
(
ˇˇ 
Type
ˇˇ #
type
ˇˇ$ (
)
ˇˇ( )
{
ÄÄ 
return
ÑÑ 	
	GetLogger
ÑÑ
 
(
ÑÑ 
Assembly
ÑÑ 
.
ÑÑ  
GetCallingAssembly
ÑÑ /
(
ÑÑ/ 0
)
ÑÑ0 1
,
ÑÑ1 2
type
ÑÑ3 7
.
ÑÑ7 8
FullName
ÑÑ8 @
)
ÑÑ@ A
;
ÑÑA B
}
ÜÜ 
public
ëë 
static
ëë	 
ILog
ëë 
	GetLogger
ëë 
(
ëë 
string
ëë %

repository
ëë& 0
,
ëë0 1
Type
ëë2 6
type
ëë7 ;
)
ëë; <
{
íí 
return
ìì 	

WrapLogger
ìì
 
(
ìì 
LoggerManager
ìì "
.
ìì" #
	GetLogger
ìì# ,
(
ìì, -

repository
ìì- 7
,
ìì7 8
type
ìì9 =
)
ìì= >
)
ìì> ?
;
ìì? @
}
îî 
public
üü 
static
üü	 
ILog
üü 
	GetLogger
üü 
(
üü 
Assembly
üü ' 
repositoryAssembly
üü( :
,
üü: ;
Type
üü< @
type
üüA E
)
üüE F
{
†† 
return
°° 	

WrapLogger
°°
 
(
°° 
LoggerManager
°° "
.
°°" #
	GetLogger
°°# ,
(
°°, - 
repositoryAssembly
°°- ?
,
°°? @
type
°°A E
)
°°E F
)
°°F G
;
°°G H
}
¢¢ 
public
ªª 
static
ªª	 
void
ªª 
Shutdown
ªª 
(
ªª 
)
ªª 
{
ºº 
LoggerManager
ΩΩ 
.
ΩΩ 
Shutdown
ΩΩ 
(
ΩΩ 
)
ΩΩ 
;
ΩΩ 
}
ææ 
public
‘‘ 
static
‘‘	 
void
‘‘  
ShutdownRepository
‘‘ '
(
‘‘' (
)
‘‘( )
{
’’  
ShutdownRepository
÷÷ 
(
÷÷ 
Assembly
÷÷ 
.
÷÷  
GetCallingAssembly
÷÷ 1
(
÷÷1 2
)
÷÷2 3
)
÷÷3 4
;
÷÷4 5
}
◊◊ 
public
ÓÓ 
static
ÓÓ	 
void
ÓÓ  
ShutdownRepository
ÓÓ '
(
ÓÓ' (
string
ÓÓ( .

repository
ÓÓ/ 9
)
ÓÓ9 :
{
ÔÔ 
LoggerManager
 
.
  
ShutdownRepository
 #
(
# $

repository
$ .
)
. /
;
/ 0
}
ÒÒ 
public
ââ 
static
ââ	 
void
ââ  
ShutdownRepository
ââ '
(
ââ' (
Assembly
ââ( 0 
repositoryAssembly
ââ1 C
)
ââC D
{
ää 
LoggerManager
ãã 
.
ãã  
ShutdownRepository
ãã #
(
ãã# $ 
repositoryAssembly
ãã$ 6
)
ãã6 7
;
ãã7 8
}
åå 
public
ùù 
static
ùù	 
void
ùù  
ResetConfiguration
ùù '
(
ùù' (
)
ùù( )
{
ûû  
ResetConfiguration
üü 
(
üü 
Assembly
üü 
.
üü  
GetCallingAssembly
üü 1
(
üü1 2
)
üü2 3
)
üü3 4
;
üü4 5
}
†† 
public
±± 
static
±±	 
void
±±  
ResetConfiguration
±± '
(
±±' (
string
±±( .

repository
±±/ 9
)
±±9 :
{
≤≤ 
LoggerManager
≥≥ 
.
≥≥  
ResetConfiguration
≥≥ #
(
≥≥# $

repository
≥≥$ .
)
≥≥. /
;
≥≥/ 0
}
¥¥ 
public
ƒƒ 
static
ƒƒ	 
void
ƒƒ  
ResetConfiguration
ƒƒ '
(
ƒƒ' (
Assembly
ƒƒ( 0 
repositoryAssembly
ƒƒ1 C
)
ƒƒC D
{
≈≈ 
LoggerManager
∆∆ 
.
∆∆  
ResetConfiguration
∆∆ #
(
∆∆# $ 
repositoryAssembly
∆∆$ 6
)
∆∆6 7
;
∆∆7 8
}
«« 
[
’’ 
Obsolete
’’ 
(
’’ 
$str
’’ >
)
’’> ?
]
’’? @
public
÷÷ 
static
÷÷	 
ILoggerRepository
÷÷ !!
GetLoggerRepository
÷÷" 5
(
÷÷5 6
)
÷÷6 7
{
◊◊ 
return
ÿÿ 	
GetRepository
ÿÿ
 
(
ÿÿ 
Assembly
ÿÿ  
.
ÿÿ  ! 
GetCallingAssembly
ÿÿ! 3
(
ÿÿ3 4
)
ÿÿ4 5
)
ÿÿ5 6
;
ÿÿ6 7
}
ŸŸ 
[
ÁÁ 
Obsolete
ÁÁ 
(
ÁÁ 
$str
ÁÁ >
)
ÁÁ> ?
]
ÁÁ? @
public
ËË 
static
ËË	 
ILoggerRepository
ËË !!
GetLoggerRepository
ËË" 5
(
ËË5 6
string
ËË6 <

repository
ËË= G
)
ËËG H
{
ÈÈ 
return
ÍÍ 	
GetRepository
ÍÍ
 
(
ÍÍ 

repository
ÍÍ "
)
ÍÍ" #
;
ÍÍ# $
}
ÎÎ 
[
¯¯ 
Obsolete
¯¯ 
(
¯¯ 
$str
¯¯ >
)
¯¯> ?
]
¯¯? @
public
˘˘ 
static
˘˘	 
ILoggerRepository
˘˘ !!
GetLoggerRepository
˘˘" 5
(
˘˘5 6
Assembly
˘˘6 > 
repositoryAssembly
˘˘? Q
)
˘˘Q R
{
˙˙ 
return
˚˚ 	
GetRepository
˚˚
 
(
˚˚  
repositoryAssembly
˚˚ *
)
˚˚* +
;
˚˚+ ,
}
¸¸ 
public
ää 
static
ää	 
ILoggerRepository
ää !
GetRepository
ää" /
(
ää/ 0
)
ää0 1
{
ãã 
return
åå 	
GetRepository
åå
 
(
åå 
Assembly
åå  
.
åå  ! 
GetCallingAssembly
åå! 3
(
åå3 4
)
åå4 5
)
åå5 6
;
åå6 7
}
çç 
public
õõ 
static
õõ	 
ILoggerRepository
õõ !
GetRepository
õõ" /
(
õõ/ 0
string
õõ0 6

repository
õõ7 A
)
õõA B
{
úú 
return
ùù 	
LoggerManager
ùù
 
.
ùù 
GetRepository
ùù %
(
ùù% &

repository
ùù& 0
)
ùù0 1
;
ùù1 2
}
ûû 
public
´´ 
static
´´	 
ILoggerRepository
´´ !
GetRepository
´´" /
(
´´/ 0
Assembly
´´0 8 
repositoryAssembly
´´9 K
)
´´K L
{
¨¨ 
return
≠≠ 	
LoggerManager
≠≠
 
.
≠≠ 
GetRepository
≠≠ %
(
≠≠% & 
repositoryAssembly
≠≠& 8
)
≠≠8 9
;
≠≠9 :
}
ÆÆ 
[
√√ 
Obsolete
√√ 
(
√√ 
$str
√√ :
)
√√: ;
]
√√; <
public
ƒƒ 
static
ƒƒ	 
ILoggerRepository
ƒƒ !
CreateDomain
ƒƒ" .
(
ƒƒ. /
Type
ƒƒ/ 3
repositoryType
ƒƒ4 B
)
ƒƒB C
{
≈≈ 
return
∆∆ 	
CreateRepository
∆∆
 
(
∆∆ 
Assembly
∆∆ #
.
∆∆# $ 
GetCallingAssembly
∆∆$ 6
(
∆∆6 7
)
∆∆7 8
,
∆∆8 9
repositoryType
∆∆: H
)
∆∆H I
;
∆∆I J
}
«« 
public
ÿÿ 
static
ÿÿ	 
ILoggerRepository
ÿÿ !
CreateRepository
ÿÿ" 2
(
ÿÿ2 3
Type
ÿÿ3 7
repositoryType
ÿÿ8 F
)
ÿÿF G
{
ŸŸ 
return
⁄⁄ 	
CreateRepository
⁄⁄
 
(
⁄⁄ 
Assembly
⁄⁄ #
.
⁄⁄# $ 
GetCallingAssembly
⁄⁄$ 6
(
⁄⁄6 7
)
⁄⁄7 8
,
⁄⁄8 9
repositoryType
⁄⁄: H
)
⁄⁄H I
;
⁄⁄I J
}
€€ 
[
ÒÒ 
Obsolete
ÒÒ 
(
ÒÒ 
$str
ÒÒ :
)
ÒÒ: ;
]
ÒÒ; <
public
ÚÚ 
static
ÚÚ	 
ILoggerRepository
ÚÚ !
CreateDomain
ÚÚ" .
(
ÚÚ. /
string
ÚÚ/ 5

repository
ÚÚ6 @
)
ÚÚ@ A
{
ÛÛ 
return
ÙÙ 	
LoggerManager
ÙÙ
 
.
ÙÙ 
CreateRepository
ÙÙ (
(
ÙÙ( )

repository
ÙÙ) 3
)
ÙÙ3 4
;
ÙÙ4 5
}
ıı 
public
áá 
static
áá	 
ILoggerRepository
áá !
CreateRepository
áá" 2
(
áá2 3
string
áá3 9

repository
áá: D
)
ááD E
{
àà 
return
ââ 	
LoggerManager
ââ
 
.
ââ 
CreateRepository
ââ (
(
ââ( )

repository
ââ) 3
)
ââ3 4
;
ââ4 5
}
ää 
[
ûû 
Obsolete
ûû 
(
ûû 
$str
ûû :
)
ûû: ;
]
ûû; <
public
üü 
static
üü	 
ILoggerRepository
üü !
CreateDomain
üü" .
(
üü. /
string
üü/ 5

repository
üü6 @
,
üü@ A
Type
üüB F
repositoryType
üüG U
)
üüU V
{
†† 
return
°° 	
LoggerManager
°°
 
.
°° 
CreateRepository
°° (
(
°°( )

repository
°°) 3
,
°°3 4
repositoryType
°°5 C
)
°°C D
;
°°D E
}
¢¢ 
public
≥≥ 
static
≥≥	 
ILoggerRepository
≥≥ !
CreateRepository
≥≥" 2
(
≥≥2 3
string
≥≥3 9

repository
≥≥: D
,
≥≥D E
Type
≥≥F J
repositoryType
≥≥K Y
)
≥≥Y Z
{
¥¥ 
return
µµ 	
LoggerManager
µµ
 
.
µµ 
CreateRepository
µµ (
(
µµ( )

repository
µµ) 3
,
µµ3 4
repositoryType
µµ5 C
)
µµC D
;
µµD E
}
∂∂ 
[
   
Obsolete
   
(
   
$str
   :
)
  : ;
]
  ; <
public
ÀÀ 
static
ÀÀ	 
ILoggerRepository
ÀÀ !
CreateDomain
ÀÀ" .
(
ÀÀ. /
Assembly
ÀÀ/ 7 
repositoryAssembly
ÀÀ8 J
,
ÀÀJ K
Type
ÀÀL P
repositoryType
ÀÀQ _
)
ÀÀ_ `
{
ÃÃ 
return
ÕÕ 	
LoggerManager
ÕÕ
 
.
ÕÕ 
CreateRepository
ÕÕ (
(
ÕÕ( ) 
repositoryAssembly
ÕÕ) ;
,
ÕÕ; <
repositoryType
ÕÕ= K
)
ÕÕK L
;
ÕÕL M
}
ŒŒ 
public
ﬂﬂ 
static
ﬂﬂ	 
ILoggerRepository
ﬂﬂ !
CreateRepository
ﬂﬂ" 2
(
ﬂﬂ2 3
Assembly
ﬂﬂ3 ; 
repositoryAssembly
ﬂﬂ< N
,
ﬂﬂN O
Type
ﬂﬂP T
repositoryType
ﬂﬂU c
)
ﬂﬂc d
{
‡‡ 
return
·· 	
LoggerManager
··
 
.
·· 
CreateRepository
·· (
(
··( ) 
repositoryAssembly
··) ;
,
··; <
repositoryType
··= K
)
··K L
;
··L M
}
‚‚ 
public
ÌÌ 
static
ÌÌ	 
ILoggerRepository
ÌÌ !
[
ÌÌ! "
]
ÌÌ" # 
GetAllRepositories
ÌÌ$ 6
(
ÌÌ6 7
)
ÌÌ7 8
{
ÓÓ 
return
ÔÔ 	
LoggerManager
ÔÔ
 
.
ÔÔ  
GetAllRepositories
ÔÔ *
(
ÔÔ* +
)
ÔÔ+ ,
;
ÔÔ, -
}
 
public
˜˜ 
static
˜˜ 
bool
˜˜ 
Flush
˜˜ $
(
˜˜$ %
int
˜˜% (!
millisecondsTimeout
˜˜) <
)
˜˜< =
{
¯¯ 
Appender
˙˙ 
.
˙˙ 

IFlushable
˙˙ #!
flushableRepository
˙˙$ 7
=
˙˙8 9
LoggerManager
˙˙: G
.
˙˙G H
GetRepository
˙˙H U
(
˙˙U V
Assembly
˙˙V ^
.
˙˙^ _ 
GetCallingAssembly
˙˙_ q
(
˙˙q r
)
˙˙r s
)
˙˙s t
as
˙˙u w
Appender˙˙x Ä
.˙˙Ä Å

IFlushable˙˙Å ã
;˙˙ã å
if
˚˚ 
(
˚˚ !
flushableRepository
˚˚ '
==
˚˚( *
null
˚˚+ /
)
˚˚/ 0
{
¸¸ 
return
˝˝ 
false
˝˝  
;
˝˝  !
}
˛˛ 
else
ˇˇ 
{
ÄÄ 
return
ÅÅ !
flushableRepository
ÅÅ .
.
ÅÅ. /
Flush
ÅÅ/ 4
(
ÅÅ4 5!
millisecondsTimeout
ÅÅ5 H
)
ÅÅH I
;
ÅÅI J
}
ÇÇ 
}
ÜÜ 
private
ëë 	
static
ëë
 
ILog
ëë 

WrapLogger
ëë  
(
ëë  !
ILogger
ëë! (
logger
ëë) /
)
ëë/ 0
{
íí 
return
ìì 	
(
ìì
 
ILog
ìì 
)
ìì 
s_wrapperMap
ìì 
.
ìì 

GetWrapper
ìì '
(
ìì' (
logger
ìì( .
)
ìì. /
;
ìì/ 0
}
îî 
private
õõ 	
static
õõ
 
ILog
õõ 
[
õõ 
]
õõ 
WrapLoggers
õõ #
(
õõ# $
ILogger
õõ$ +
[
õõ+ ,
]
õõ, -
loggers
õõ. 5
)
õõ5 6
{
úú 
ILog
ùù 
[
ùù 
]
ùù 	
results
ùù
 
=
ùù 
new
ùù 
ILog
ùù 
[
ùù 
loggers
ùù $
.
ùù$ %
Length
ùù% +
]
ùù+ ,
;
ùù, -
for
ûû 
(
ûû 
int
ûû 

i
ûû 
=
ûû 
$num
ûû 
;
ûû 
i
ûû 
<
ûû 
loggers
ûû 
.
ûû 
Length
ûû  
;
ûû  !
i
ûû" #
++
ûû# %
)
ûû% &
{
üü 
results
†† 
[
†† 
i
†† 
]
†† 
=
†† 

WrapLogger
†† 
(
†† 
loggers
†† #
[
††# $
i
††$ %
]
††% &
)
††& '
;
††' (
}
°° 
return
¢¢ 	
results
¢¢
 
;
¢¢ 
}
££ 
private
´´ 	
static
´´
 
ILoggerWrapper
´´ $
WrapperCreationHandler
´´  6
(
´´6 7
ILogger
´´7 >
logger
´´? E
)
´´E F
{
¨¨ 
return
≠≠ 	
new
≠≠
 
LogImpl
≠≠ 
(
≠≠ 
logger
≠≠ 
)
≠≠ 
;
≠≠ 
}
ÆÆ 
private
∑∑ 	
static
∑∑
 
readonly
∑∑ 

WrapperMap
∑∑ $
s_wrapperMap
∑∑% 1
=
∑∑2 3
new
∑∑4 7

WrapperMap
∑∑8 B
(
∑∑B C
new
∑∑C F$
WrapperCreationHandler
∑∑G ]
(
∑∑] ^$
WrapperCreationHandler
∑∑^ t
)
∑∑t u
)
∑∑u v
;
∑∑v w
}
∫∫ 
}ªª á
.C:\sonarqube\projects\log4net-2.0.7\src\MDC.cs
	namespace 	
log4net
 
{ 
public33 
sealed33 
class33 
MDC33 
{44 
private== 	
MDC==
 
(== 
)== 
{>> 
}?? 
publicWW 
staticWW	 
stringWW 
GetWW 
(WW 
stringWW !
keyWW" %
)WW% &
{XX 
objectYY 	
objYY
 
=YY 
ThreadContextYY 
.YY 

PropertiesYY (
[YY( )
keyYY) ,
]YY, -
;YY- .
ifZZ 
(ZZ 
objZZ 

==ZZ 
nullZZ 
)ZZ 
{[[ 
return\\ 

null\\ 
;\\ 
}]] 
return^^ 	
obj^^
 
.^^ 
ToString^^ 
(^^ 
)^^ 
;^^ 
}__ 
publicyy 
staticyy	 
voidyy 
Setyy 
(yy 
stringyy 
keyyy  #
,yy# $
stringyy% +
valueyy, 1
)yy1 2
{zz 
ThreadContext{{ 
.{{ 

Properties{{ 
[{{ 
key{{ 
]{{  
={{! "
value{{# (
;{{( )
}|| 
public
éé 
static
éé	 
void
éé 
Remove
éé 
(
éé 
string
éé "
key
éé# &
)
éé& '
{
èè 
ThreadContext
êê 
.
êê 

Properties
êê 
.
êê 
Remove
êê "
(
êê" #
key
êê# &
)
êê& '
;
êê' (
}
ëë 
public
¢¢ 
static
¢¢	 
void
¢¢ 
Clear
¢¢ 
(
¢¢ 
)
¢¢ 
{
££ 
ThreadContext
§§ 
.
§§ 

Properties
§§ 
.
§§ 
Clear
§§ !
(
§§! "
)
§§" #
;
§§# $
}
•• 
}
®® 
}©© õ$
.C:\sonarqube\projects\log4net-2.0.7\src\NDC.cs
	namespace 	
log4net
 
{ 
publicEE 
sealedEE 
classEE 
NDCEE 
{FF 
privateOO 	
NDCOO
 
(OO 
)OO 
{PP 
}QQ 
publicll 
staticll	 
intll 
Depthll 
{mm 
getnn 
{nn 
returnnn	 
ThreadContextnn 
.nn 
Stacksnn $
[nn$ %
$strnn% *
]nn* +
.nn+ ,
Countnn, 1
;nn1 2
}nn3 4
}oo 
public
ÑÑ 
static
ÑÑ	 
void
ÑÑ 
Clear
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
ThreadContext
ÜÜ 
.
ÜÜ 
Stacks
ÜÜ 
[
ÜÜ 
$str
ÜÜ 
]
ÜÜ 
.
ÜÜ 
Clear
ÜÜ $
(
ÜÜ$ %
)
ÜÜ% &
;
ÜÜ& '
}
áá 
public
õõ 
static
õõ	 
Stack
õõ 

CloneStack
õõ  
(
õõ  !
)
õõ! "
{
úú 
return
ùù 	
ThreadContext
ùù
 
.
ùù 
Stacks
ùù 
[
ùù 
$str
ùù $
]
ùù$ %
.
ùù% &
InternalStack
ùù& 3
;
ùù3 4
}
ûû 
public
∂∂ 
static
∂∂	 
void
∂∂ 
Inherit
∂∂ 
(
∂∂ 
Stack
∂∂ "
stack
∂∂# (
)
∂∂( )
{
∑∑ 
ThreadContext
∏∏ 
.
∏∏ 
Stacks
∏∏ 
[
∏∏ 
$str
∏∏ 
]
∏∏ 
.
∏∏ 
InternalStack
∏∏ ,
=
∏∏- .
stack
∏∏/ 4
;
∏∏4 5
}
ππ 
public
–– 
static
––	 
string
–– 
Pop
–– 
(
–– 
)
–– 
{
—— 
return
““ 	
ThreadContext
““
 
.
““ 
Stacks
““ 
[
““ 
$str
““ $
]
““$ %
.
““% &
Pop
““& )
(
““) *
)
““* +
;
““+ ,
}
”” 
public
ÙÙ 
static
ÙÙ	 
IDisposable
ÙÙ 
Push
ÙÙ  
(
ÙÙ  !
string
ÙÙ! '
message
ÙÙ( /
)
ÙÙ/ 0
{
ıı 
return
ˆˆ 	
ThreadContext
ˆˆ
 
.
ˆˆ 
Stacks
ˆˆ 
[
ˆˆ 
$str
ˆˆ $
]
ˆˆ$ %
.
ˆˆ% &
Push
ˆˆ& *
(
ˆˆ* +
message
ˆˆ+ 2
)
ˆˆ2 3
;
ˆˆ3 4
}
˜˜ 
public
öö 
static
öö	 
IDisposable
öö 

PushFormat
öö &
(
öö& '
string
öö' -
messageFormat
öö. ;
,
öö; <
params
öö= C
object
ööD J
[
ööJ K
]
ööK L
args
ööM Q
)
ööQ R
{
õõ 
return
úú 	
Push
úú
 
(
úú 
string
úú 
.
úú 
Format
úú 
(
úú 
messageFormat
úú *
,
úú* +
args
úú, 0
)
úú0 1
)
úú1 2
;
úú2 3
}
ùù 
public
ØØ 
static
ØØ	 
void
ØØ 
Remove
ØØ 
(
ØØ 
)
ØØ 
{
∞∞ 
}
±± 
public
«« 
static
««	 
void
«« 
SetMaxDepth
««  
(
««  !
int
««! $
maxDepth
««% -
)
««- .
{
»» 
if
…… 
(
…… 
maxDepth
…… 
>=
…… 
$num
…… 
)
…… 
{
   
log4net
ÀÀ 
.
ÀÀ 
Util
ÀÀ 
.
ÀÀ  
ThreadContextStack
ÀÀ #
stack
ÀÀ$ )
=
ÀÀ* +
ThreadContext
ÀÀ, 9
.
ÀÀ9 :
Stacks
ÀÀ: @
[
ÀÀ@ A
$str
ÀÀA F
]
ÀÀF G
;
ÀÀG H
if
ÕÕ 
(
ÕÕ 
maxDepth
ÕÕ 
==
ÕÕ 
$num
ÕÕ 
)
ÕÕ 
{
ŒŒ 
stack
œœ 

.
œœ
 
Clear
œœ 
(
œœ 
)
œœ 
;
œœ 
}
–– 
else
—— 
{
““ 
while
”” 

(
””
 
stack
”” 
.
”” 
Count
”” 
>
”” 
maxDepth
”” !
)
””! "
{
‘‘ 
stack
’’ 
.
’’ 
Pop
’’ 
(
’’ 
)
’’ 
;
’’ 
}
÷÷ 
}
◊◊ 
}
ÿÿ 
}
ŸŸ 
}
‹‹ 
}›› ıO
IC:\sonarqube\projects\log4net-2.0.7\src\ObjectRenderer\DefaultRenderer.cs
	namespace 	
log4net
 
. 
ObjectRenderer  
{ 
public** 
sealed** 
class** 
DefaultRenderer** $
:**% &
IObjectRenderer**' 6
{++ 
public66 
DefaultRenderer66	 
(66 
)66 
{77 
}88 
public
îî 
void
îî	 
RenderObject
îî 
(
îî 
RendererMap
îî &
rendererMap
îî' 2
,
îî2 3
object
îî4 :
obj
îî; >
,
îî> ?

TextWriter
îî@ J
writer
îîK Q
)
îîQ R
{
ïï 
if
ññ 
(
ññ 
rendererMap
ññ 
==
ññ 
null
ññ 
)
ññ 
{
óó 
throw
òò 	
new
òò
 #
ArgumentNullException
òò #
(
òò# $
$str
òò$ 1
)
òò1 2
;
òò2 3
}
ôô 
if
õõ 
(
õõ 
obj
õõ 

==
õõ 
null
õõ 
)
õõ 
{
úú 
writer
ùù 

.
ùù
 
Write
ùù 
(
ùù 

SystemInfo
ùù 
.
ùù 
NullText
ùù $
)
ùù$ %
;
ùù% &
return
ûû 

;
ûû
 
}
üü 
Array
°° 
objArray
°°	 
=
°° 
obj
°° 
as
°° 
Array
°°  
;
°°  !
if
¢¢ 
(
¢¢ 
objArray
¢¢ 
!=
¢¢ 
null
¢¢ 
)
¢¢ 
{
££ 
RenderArray
§§ 
(
§§ 
rendererMap
§§ 
,
§§ 
objArray
§§ %
,
§§% &
writer
§§' -
)
§§- .
;
§§. /
return
•• 

;
••
 
}
¶¶ 
IEnumerable
©© 
objEnumerable
©© 
=
©© 
obj
©© "
as
©©# %
IEnumerable
©©& 1
;
©©1 2
if
™™ 
(
™™ 
objEnumerable
™™ 
!=
™™ 
null
™™ 
)
™™ 
{
´´ 
ICollection
ÆÆ 
objCollection
ÆÆ 
=
ÆÆ 
obj
ÆÆ  #
as
ÆÆ$ &
ICollection
ÆÆ' 2
;
ÆÆ2 3
if
ØØ 
(
ØØ 
objCollection
ØØ 
!=
ØØ 
null
ØØ 
&&
ØØ  
objCollection
ØØ! .
.
ØØ. /
Count
ØØ/ 4
==
ØØ5 7
$num
ØØ8 9
)
ØØ9 :
{
∞∞ 
writer
±± 
.
±± 
Write
±± 
(
±± 
$str
±± 
)
±± 
;
±± 
return
≤≤ 
;
≤≤ 
}
≥≥ 
IDictionary
∫∫ 
objDictionary
∫∫ 
=
∫∫ 
obj
∫∫  #
as
∫∫$ &
IDictionary
∫∫' 2
;
∫∫2 3
if
ªª 
(
ªª 
objDictionary
ªª 
!=
ªª 
null
ªª 
)
ªª 
{
ºº 
RenderEnumerator
ΩΩ 
(
ΩΩ 
rendererMap
ΩΩ !
,
ΩΩ! "
objDictionary
ΩΩ# 0
.
ΩΩ0 1
GetEnumerator
ΩΩ1 >
(
ΩΩ> ?
)
ΩΩ? @
,
ΩΩ@ A
writer
ΩΩB H
)
ΩΩH I
;
ΩΩI J
return
ææ 
;
ææ 
}
øø 
RenderEnumerator
¡¡ 
(
¡¡ 
rendererMap
¡¡  
,
¡¡  !
objEnumerable
¡¡" /
.
¡¡/ 0
GetEnumerator
¡¡0 =
(
¡¡= >
)
¡¡> ?
,
¡¡? @
writer
¡¡A G
)
¡¡G H
;
¡¡H I
return
¬¬ 

;
¬¬
 
}
√√ 
IEnumerator
≈≈ 
objEnumerator
≈≈ 
=
≈≈ 
obj
≈≈ "
as
≈≈# %
IEnumerator
≈≈& 1
;
≈≈1 2
if
∆∆ 
(
∆∆ 
objEnumerator
∆∆ 
!=
∆∆ 
null
∆∆ 
)
∆∆ 
{
«« 
RenderEnumerator
»» 
(
»» 
rendererMap
»»  
,
»»  !
objEnumerator
»»" /
,
»»/ 0
writer
»»1 7
)
»»7 8
;
»»8 9
return
…… 

;
……
 
}
   
if
ÃÃ 
(
ÃÃ 
obj
ÃÃ 

is
ÃÃ 
DictionaryEntry
ÃÃ 
)
ÃÃ 
{
ÕÕ #
RenderDictionaryEntry
ŒŒ 
(
ŒŒ 
rendererMap
ŒŒ %
,
ŒŒ% &
(
ŒŒ' (
DictionaryEntry
ŒŒ( 7
)
ŒŒ7 8
obj
ŒŒ8 ;
,
ŒŒ; <
writer
ŒŒ= C
)
ŒŒC D
;
ŒŒD E
return
œœ 

;
œœ
 
}
–– 
string
““ 	
str
““
 
=
““ 
obj
““ 
.
““ 
ToString
““ 
(
““ 
)
““ 
;
““ 
writer
”” 	
.
””	 

Write
””
 
(
”” 
(
”” 
str
”” 
==
”” 
null
”” 
)
”” 
?
”” 

SystemInfo
”” )
.
””) *
NullText
””* 2
:
””3 4
str
””5 8
)
””9 :
;
””: ;
}
‘‘ 
private
ÎÎ 	
void
ÎÎ
 
RenderArray
ÎÎ 
(
ÎÎ 
RendererMap
ÎÎ &
rendererMap
ÎÎ' 2
,
ÎÎ2 3
Array
ÎÎ4 9
array
ÎÎ: ?
,
ÎÎ? @

TextWriter
ÎÎA K
writer
ÎÎL R
)
ÎÎR S
{
ÏÏ 
if
ÌÌ 
(
ÌÌ 
array
ÌÌ 
.
ÌÌ 
Rank
ÌÌ 
!=
ÌÌ 
$num
ÌÌ 
)
ÌÌ 
{
ÓÓ 
writer
ÔÔ 

.
ÔÔ
 
Write
ÔÔ 
(
ÔÔ 
array
ÔÔ 
.
ÔÔ 
ToString
ÔÔ 
(
ÔÔ  
)
ÔÔ  !
)
ÔÔ! "
;
ÔÔ" #
}
 
else
ÒÒ 
{
ÚÚ 
writer
ÛÛ 

.
ÛÛ
 
Write
ÛÛ 
(
ÛÛ 
array
ÛÛ 
.
ÛÛ 
GetType
ÛÛ 
(
ÛÛ 
)
ÛÛ  
.
ÛÛ  !
Name
ÛÛ! %
+
ÛÛ& '
$str
ÛÛ( ,
)
ÛÛ, -
;
ÛÛ- .
int
ÙÙ 
len
ÙÙ 
=
ÙÙ 
array
ÙÙ 
.
ÙÙ 
Length
ÙÙ 
;
ÙÙ 
if
ˆˆ 
(
ˆˆ 
len
ˆˆ 
>
ˆˆ 
$num
ˆˆ 
)
ˆˆ 
{
˜˜ 
rendererMap
¯¯ 
.
¯¯ 
FindAndRender
¯¯ 
(
¯¯ 
array
¯¯ $
.
¯¯$ %
GetValue
¯¯% -
(
¯¯- .
$num
¯¯. /
)
¯¯/ 0
,
¯¯0 1
writer
¯¯2 8
)
¯¯8 9
;
¯¯9 :
for
˘˘ 
(
˘˘ 	
int
˘˘	 
i
˘˘ 
=
˘˘ 
$num
˘˘ 
;
˘˘ 
i
˘˘ 
<
˘˘ 
len
˘˘ 
;
˘˘ 
i
˘˘ 
++
˘˘ 
)
˘˘ 
{
˙˙ 
writer
˚˚ 
.
˚˚ 
Write
˚˚ 
(
˚˚ 
$str
˚˚ 
)
˚˚ 
;
˚˚ 
rendererMap
¸¸ 
.
¸¸ 
FindAndRender
¸¸ 
(
¸¸  
array
¸¸  %
.
¸¸% &
GetValue
¸¸& .
(
¸¸. /
i
¸¸/ 0
)
¸¸0 1
,
¸¸1 2
writer
¸¸3 9
)
¸¸9 :
;
¸¸: ;
}
˝˝ 
}
˛˛ 
writer
ˇˇ 

.
ˇˇ
 
Write
ˇˇ 
(
ˇˇ 
$str
ˇˇ 
)
ˇˇ 
;
ˇˇ 
}
ÄÄ 
}
ÅÅ 
private
ëë 	
void
ëë
 
RenderEnumerator
ëë 
(
ëë  
RendererMap
ëë  +
rendererMap
ëë, 7
,
ëë7 8
IEnumerator
ëë9 D

enumerator
ëëE O
,
ëëO P

TextWriter
ëëQ [
writer
ëë\ b
)
ëëb c
{
íí 
writer
ìì 	
.
ìì	 

Write
ìì
 
(
ìì 
$str
ìì 
)
ìì 
;
ìì 
if
ïï 
(
ïï 

enumerator
ïï 
!=
ïï 
null
ïï 
&&
ïï 

enumerator
ïï '
.
ïï' (
MoveNext
ïï( 0
(
ïï0 1
)
ïï1 2
)
ïï2 3
{
ññ 
rendererMap
óó 
.
óó 
FindAndRender
óó 
(
óó 

enumerator
óó (
.
óó( )
Current
óó) 0
,
óó0 1
writer
óó2 8
)
óó8 9
;
óó9 :
while
ôô 	
(
ôô
 

enumerator
ôô 
.
ôô 
MoveNext
ôô 
(
ôô 
)
ôô  
)
ôô  !
{
öö 
writer
õõ 
.
õõ 
Write
õõ 
(
õõ 
$str
õõ 
)
õõ 
;
õõ 
rendererMap
úú 
.
úú 
FindAndRender
úú 
(
úú 

enumerator
úú )
.
úú) *
Current
úú* 1
,
úú1 2
writer
úú3 9
)
úú9 :
;
úú: ;
}
ùù 
}
ûû 
writer
†† 	
.
††	 

Write
††
 
(
†† 
$str
†† 
)
†† 
;
†† 
}
°° 
private
ØØ 	
void
ØØ
 #
RenderDictionaryEntry
ØØ $
(
ØØ$ %
RendererMap
ØØ% 0
rendererMap
ØØ1 <
,
ØØ< =
DictionaryEntry
ØØ> M
entry
ØØN S
,
ØØS T

TextWriter
ØØU _
writer
ØØ` f
)
ØØf g
{
∞∞ 
rendererMap
±± 
.
±± 
FindAndRender
±± 
(
±± 
entry
±± "
.
±±" #
Key
±±# &
,
±±& '
writer
±±( .
)
±±. /
;
±±/ 0
writer
≤≤ 	
.
≤≤	 

Write
≤≤
 
(
≤≤ 
$str
≤≤ 
)
≤≤ 
;
≤≤ 
rendererMap
≥≥ 
.
≥≥ 
FindAndRender
≥≥ 
(
≥≥ 
entry
≥≥ "
.
≥≥" #
Value
≥≥# (
,
≥≥( )
writer
≥≥* 0
)
≥≥0 1
;
≥≥1 2
}
¥¥ 
}
µµ 
}∂∂ ö
IC:\sonarqube\projects\log4net-2.0.7\src\ObjectRenderer\IObjectRenderer.cs
	namespace 	
log4net
 
. 
ObjectRenderer  
{ 
public&& 
	interface&& 
IObjectRenderer&& !
{'' 
void;; 
RenderObject;; 
(;; 
RendererMap;; 
rendererMap;;  +
,;;+ ,
object;;- 3
obj;;4 7
,;;7 8

TextWriter;;9 C
writer;;D J
);;J K
;;;K L
}<< 
}== ›]
EC:\sonarqube\projects\log4net-2.0.7\src\ObjectRenderer\RendererMap.cs
	namespace 	
log4net
 
. 
ObjectRenderer  
{ 
public.. 
class.. 
RendererMap.. 
{// 
private00 
readonly00 
static00 
Type00  $
declaringType00% 2
=003 4
typeof005 ;
(00; <
RendererMap00< G
)00G H
;00H I
private44 	
System44
 
.44 
Collections44 
.44 
	Hashtable44 &
m_map44' ,
;44, -
private55 	
System55
 
.55 
Collections55 
.55 
	Hashtable55 &
m_cache55' .
=55/ 0
new551 4
System555 ;
.55; <
Collections55< G
.55G H
	Hashtable55H Q
(55Q R
)55R S
;55S T
private77 	
static77
 
IObjectRenderer77  
s_defaultRenderer77! 2
=773 4
new775 8
DefaultRenderer779 H
(77H I
)77I J
;77J K
publicEE 
RendererMapEE	 
(EE 
)EE 
{FF 
m_mapGG 
=GG	 

SystemGG 
.GG 
CollectionsGG 
.GG 
	HashtableGG '
.GG' (
SynchronizedGG( 4
(GG4 5
newGG5 8
SystemGG9 ?
.GG? @
CollectionsGG@ K
.GGK L
	HashtableGGL U
(GGU V
)GGV W
)GGW X
;GGX Y
}HH 
publicXX 
stringXX	 
FindAndRenderXX 
(XX 
objectXX $
objXX% (
)XX( )
{YY 
string[[ 	
strData[[
 
=[[ 
obj[[ 
as[[ 
String[[ !
;[[! "
if\\ 
(\\ 
strData\\ 
!=\\ 
null\\ 
)\\ 
{]] 
return^^ 

strData^^ 
;^^ 
}__ 
StringWriteraa 
stringWriteraa 
=aa 
newaa "
StringWriteraa# /
(aa/ 0
Systemaa0 6
.aa6 7
Globalizationaa7 D
.aaD E
CultureInfoaaE P
.aaP Q
InvariantCultureaaQ a
)aaa b
;aab c
FindAndRenderbb 
(bb 
objbb 
,bb 
stringWriterbb "
)bb" #
;bb# $
returncc 	
stringWritercc
 
.cc 
ToStringcc 
(cc  
)cc  !
;cc! "
}dd 
publictt 
voidtt	 
FindAndRendertt 
(tt 
objecttt "
objtt# &
,tt& '

TextWritertt( 2
writertt3 9
)tt9 :
{uu 
ifvv 
(vv 
objvv 

==vv 
nullvv 
)vv 
{ww 
writerxx 

.xx
 
Writexx 
(xx 

SystemInfoxx 
.xx 
NullTextxx $
)xx$ %
;xx% &
}yy 
elsezz 
{{{ 
string}} 

str}} 
=}} 
obj}} 
as}} 
string}} 
;}} 
if~~ 
(~~ 
str~~ 
!=~~ 
null~~ 
)~~ 
{ 
writer
ÄÄ 
.
ÄÄ 
Write
ÄÄ 
(
ÄÄ 
str
ÄÄ 
)
ÄÄ 
;
ÄÄ 
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
try
ÖÖ 
{
ÜÜ 
Get
áá 	
(
áá	 

obj
áá
 
.
áá 
GetType
áá 
(
áá 
)
áá 
)
áá 
.
áá 
RenderObject
áá %
(
áá% &
this
áá& *
,
áá* +
obj
áá, /
,
áá/ 0
writer
áá1 7
)
áá7 8
;
áá8 9
}
àà 
catch
ââ 

(
ââ
 
	Exception
ââ 
ex
ââ 
)
ââ 
{
ää 
log4net
åå 
.
åå 
Util
åå 
.
åå 
LogLog
åå 
.
åå 
Error
åå 
(
åå  
declaringType
åå  -
,
åå- .
$str
åå/ [
+
åå[ \
obj
åå\ _
.
åå_ `
GetType
åå` g
(
ååg h
)
ååh i
.
ååi j
FullName
ååj r
+
åår s
$str
åås v
,
ååv w
ex
ååx z
)
ååz {
;
åå{ |
string
èè 
objectTypeName
èè 
=
èè 
$str
èè  
;
èè  !
if
êê 
(
êê	 

obj
êê
 
!=
êê 
null
êê 
&&
êê 
obj
êê 
.
êê 
GetType
êê $
(
êê$ %
)
êê% &
!=
êê' )
null
êê* .
)
êê. /
{
ëë 
objectTypeName
íí 
=
íí 
obj
íí 
.
íí 
GetType
íí #
(
íí# $
)
íí$ %
.
íí% &
FullName
íí& .
;
íí. /
}
ìì 
writer
ïï 
.
ïï 
Write
ïï 
(
ïï 
$str
ïï E
+
ïïE F
objectTypeName
ïïF T
+
ïïT U
$str
ïïU X
)
ïïX Y
;
ïïY Z
if
ññ 
(
ññ	 

ex
ññ
 
!=
ññ 
null
ññ 
)
ññ 
{
óó 
string
òò 
exceptionText
òò 
=
òò 
null
òò "
;
òò" #
try
öö 

{
õõ 
exceptionText
úú 
=
úú 
ex
úú 
.
úú 
ToString
úú #
(
úú# $
)
úú$ %
;
úú% &
}
ùù 
catch
ûû 
{
üü 
}
°° 
writer
££ 
.
££ 
Write
££ 
(
££ 
$str
££ "
+
££# $
exceptionText
££% 2
+
££3 4
$str
££5 D
)
££D E
;
££E F
}
§§ 
writer
•• 
.
•• 
Write
•• 
(
•• 
$str
•• %
)
••% &
;
••& '
}
¶¶ 
}
ßß 
}
®® 
}
©© 
public
ππ 
IObjectRenderer
ππ	 
Get
ππ 
(
ππ 
Object
ππ #
obj
ππ$ '
)
ππ' (
{
∫∫ 
if
ªª 
(
ªª 
obj
ªª 

==
ªª 
null
ªª 
)
ªª 
{
ºº 
return
ΩΩ 

null
ΩΩ 
;
ΩΩ 
}
ææ 
else
øø 
{
¿¿ 
return
¡¡ 

Get
¡¡ 
(
¡¡ 
obj
¡¡ 
.
¡¡ 
GetType
¡¡ 
(
¡¡ 
)
¡¡ 
)
¡¡ 
;
¡¡ 
}
¬¬ 
}
√√ 
public
—— 
IObjectRenderer
——	 
Get
—— 
(
—— 
Type
—— !
type
——" &
)
——& '
{
““ 
if
”” 
(
”” 
type
”” 
==
”” 
null
”” 
)
”” 
{
‘‘ 
throw
’’ 	
new
’’
 #
ArgumentNullException
’’ #
(
’’# $
$str
’’$ *
)
’’* +
;
’’+ ,
}
÷÷ 
IObjectRenderer
ÿÿ 
result
ÿÿ 
=
ÿÿ 
null
ÿÿ  
;
ÿÿ  !
result
€€ 	
=
€€
 
(
€€ 
IObjectRenderer
€€ 
)
€€ 
m_cache
€€ $
[
€€$ %
type
€€% )
]
€€) *
;
€€* +
if
›› 
(
›› 
result
›› 
==
›› 
null
›› 
)
›› 
{
ﬁﬁ 
for
‚‚ 
(
‚‚ 
Type
‚‚ 
cur
‚‚ 
=
‚‚ 
type
‚‚ 
;
‚‚ 
cur
‚‚ 
!=
‚‚ 
null
‚‚  $
;
‚‚$ %
cur
‚‚& )
=
‚‚* +
cur
‚‚, /
.
‚‚/ 0
BaseType
‚‚0 8
)
‚‚8 9
{
‰‰ 
result
ÊÊ 
=
ÊÊ %
SearchTypeAndInterfaces
ÊÊ %
(
ÊÊ% &
cur
ÊÊ& )
)
ÊÊ) *
;
ÊÊ* +
if
ÁÁ 
(
ÁÁ 	
result
ÁÁ	 
!=
ÁÁ 
null
ÁÁ 
)
ÁÁ 
{
ËË 
break
ÈÈ 
;
ÈÈ 
}
ÍÍ 
}
ÎÎ 
if
ÓÓ 
(
ÓÓ 
result
ÓÓ 
==
ÓÓ 
null
ÓÓ 
)
ÓÓ 
{
ÔÔ 
result
 
=
 
s_defaultRenderer
 
;
  
}
ÒÒ 
m_cache
ÙÙ 
[
ÙÙ 
type
ÙÙ 
]
ÙÙ 
=
ÙÙ 
result
ÙÙ 
;
ÙÙ 
}
ıı 
return
˜˜ 	
result
˜˜
 
;
˜˜ 
}
¯¯ 
private
ˇˇ 	
IObjectRenderer
ˇˇ
 %
SearchTypeAndInterfaces
ˇˇ 1
(
ˇˇ1 2
Type
ˇˇ2 6
type
ˇˇ7 ;
)
ˇˇ; <
{
ÄÄ 
IObjectRenderer
ÅÅ 
r
ÅÅ 
=
ÅÅ 
(
ÅÅ 
IObjectRenderer
ÅÅ '
)
ÅÅ' (
m_map
ÅÅ( -
[
ÅÅ- .
type
ÅÅ. 2
]
ÅÅ2 3
;
ÅÅ3 4
if
ÇÇ 
(
ÇÇ 
r
ÇÇ 
!=
ÇÇ	 
null
ÇÇ 
)
ÇÇ 
{
ÉÉ 
return
ÑÑ 

r
ÑÑ 
;
ÑÑ 
}
ÖÖ 
else
ÜÜ 
{
áá 
foreach
àà 
(
àà 
Type
àà 
t
àà 
in
àà 
type
àà 
.
àà 
GetInterfaces
àà (
(
àà( )
)
àà) *
)
àà* +
{
ââ 
r
ää 
=
ää %
SearchTypeAndInterfaces
ää	  
(
ää  !
t
ää! "
)
ää" #
;
ää# $
if
ãã 
(
ãã 	
r
ãã	 

!=
ãã 
null
ãã 
)
ãã 
{
åå 
return
çç 
r
çç 
;
çç 
}
éé 
}
èè 
}
êê 
return
ëë 	
null
ëë
 
;
ëë 
}
íí 
public
ùù 
IObjectRenderer
ùù	 
DefaultRenderer
ùù (
{
ûû 
get
üü 
{
üü 
return
üü	 
s_defaultRenderer
üü !
;
üü! "
}
üü# $
}
†† 
public
¨¨ 
void
¨¨	 
Clear
¨¨ 
(
¨¨ 
)
¨¨ 
{
≠≠ 
m_map
ÆÆ 
.
ÆÆ 	
Clear
ÆÆ	 
(
ÆÆ 
)
ÆÆ 
;
ÆÆ 
m_cache
ØØ 

.
ØØ
 
Clear
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
}
∞∞ 
public
ææ 
void
ææ	 
Put
ææ 
(
ææ 
Type
ææ 
typeToRender
ææ #
,
ææ# $
IObjectRenderer
ææ% 4
renderer
ææ5 =
)
ææ= >
{
øø 
m_cache
¿¿ 

.
¿¿
 
Clear
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
if
¬¬ 
(
¬¬ 
typeToRender
¬¬ 
==
¬¬ 
null
¬¬ 
)
¬¬ 
{
√√ 
throw
ƒƒ 	
new
ƒƒ
 #
ArgumentNullException
ƒƒ #
(
ƒƒ# $
$str
ƒƒ$ 2
)
ƒƒ2 3
;
ƒƒ3 4
}
≈≈ 
if
∆∆ 
(
∆∆ 
renderer
∆∆ 
==
∆∆ 
null
∆∆ 
)
∆∆ 
{
«« 
throw
»» 	
new
»»
 #
ArgumentNullException
»» #
(
»»# $
$str
»»$ .
)
»». /
;
»»/ 0
}
…… 
m_map
ÀÀ 
[
ÀÀ 	
typeToRender
ÀÀ	 
]
ÀÀ 
=
ÀÀ 
renderer
ÀÀ !
;
ÀÀ! "
}
ÃÃ 
}
ÕÕ 
}ŒŒ √
9C:\sonarqube\projects\log4net-2.0.7\src\Plugin\IPlugin.cs
	namespace 	
log4net
 
. 
Plugin 
{ 
public** 
	interface** 
IPlugin** 
{++ 
string99 
Name99	 
{99 
get99 
;99 
}99 
voidGG 
AttachGG 
(GG 
ILoggerRepositoryGG 

repositoryGG  *
)GG* +
;GG+ ,
voidSS 
ShutdownSS 
(SS 
)SS 
;SS 
}TT 
}UU Í
@C:\sonarqube\projects\log4net-2.0.7\src\Plugin\IPluginFactory.cs
	namespace 	
log4net
 
. 
Plugin 
{ 
public   
	interface   
IPluginFactory    
{!! 
IPlugin++ 	
CreatePlugin++
 
(++ 
)++ 
;++ 
},, 
}-- ñ•
BC:\sonarqube\projects\log4net-2.0.7\src\Plugin\PluginCollection.cs
	namespace 	
log4net
 
. 
Plugin 
{ 
public 
class 
PluginCollection 
:  
ICollection! ,
,, -
IList. 3
,3 4
IEnumerable5 @
, 

ICloneable 
{!! 
public(( 
	interface((	 '
IPluginCollectionEnumerator(( .
{)) 
IPlugin-- 

Current-- 
{-- 
get-- 
;-- 
}-- 
bool99 
MoveNext99 
(99 
)99 
;99 
void>> 
Reset>> 
(>> 
)>> 
;>> 
}?? 
privateCC 	
constCC
 
intCC 
DEFAULT_CAPACITYCC $
=CC% &
$numCC' )
;CC) *
privateGG 	
IPluginGG
 
[GG 
]GG 
m_arrayGG 
;GG 
privateHH 	
intHH
 
m_countHH 
=HH 
$numHH 
;HH 
privateII 	
intII
 
	m_versionII 
=II 
$numII 
;II 
publicVV 
staticVV	 
PluginCollectionVV  
ReadOnlyVV! )
(VV) *
PluginCollectionVV* :
listVV; ?
)VV? @
{WW 
ifXX 
(XX 
listXX 

==XX 
nullXX 
)XX 
throwXX 
newXX !
ArgumentNullExceptionXX 3
(XX3 4
$strXX4 :
)XX: ;
;XX; <
returnZZ 	
newZZ
 $
ReadOnlyPluginCollectionZZ &
(ZZ& '
listZZ' +
)ZZ+ ,
;ZZ, -
}[[ 
publicee 
PluginCollectionee	 
(ee 
)ee 
{ff 
m_arraygg 

=gg 
newgg 
IPlugingg 
[gg 
DEFAULT_CAPACITYgg )
]gg) *
;gg* +
}hh 
publicqq 
PluginCollectionqq	 
(qq 
intqq 
capacityqq &
)qq& '
{rr 
m_arrayss 

=ss 
newss 
IPluginss 
[ss 
capacityss !
]ss! "
;ss" #
}tt 
public{{ 
PluginCollection{{	 
({{ 
PluginCollection{{ *
c{{+ ,
){{, -
{|| 
m_array}} 

=}} 
new}} 
IPlugin}} 
[}} 
c}} 
.}} 
Count}}  
]}}  !
;}}! "
AddRange~~ 
(~~ 
c~~ 
)~~ 
;~~ 
} 
public
ÜÜ 
PluginCollection
ÜÜ	 
(
ÜÜ 
IPlugin
ÜÜ !
[
ÜÜ! "
]
ÜÜ" #
a
ÜÜ$ %
)
ÜÜ% &
{
áá 
m_array
àà 

=
àà 
new
àà 
IPlugin
àà 
[
àà 
a
àà 
.
àà 
Length
àà !
]
àà! "
;
àà" #
AddRange
ââ 
(
ââ 
a
ââ 
)
ââ 
;
ââ 
}
ää 
public
ëë 
PluginCollection
ëë	 
(
ëë 
ICollection
ëë %
col
ëë& )
)
ëë) *
{
íí 
m_array
ìì 

=
ìì 
new
ìì 
IPlugin
ìì 
[
ìì 
col
ìì 
.
ìì 
Count
ìì "
]
ìì" #
;
ìì# $
AddRange
îî 
(
îî 
col
îî 
)
îî 
;
îî 
}
ïï 
	protected
úú 
internal
úú 
enum
úú 
Tag
úú 
{
ùù 
Default
°° 

}
¢¢ 
	protected
©© 
internal
©© 
PluginCollection
©© %
(
©©% &
Tag
©©& )
tag
©©* -
)
©©- .
{
™™ 
m_array
´´ 

=
´´ 
null
´´ 
;
´´ 
}
¨¨ 
public
µµ 
virtual
µµ	 
int
µµ 
Count
µµ 
{
∂∂ 
get
∑∑ 
{
∑∑ 
return
∑∑	 
m_count
∑∑ 
;
∑∑ 
}
∑∑ 
}
∏∏ 
public
øø 
virtual
øø	 
void
øø 
CopyTo
øø 
(
øø 
IPlugin
øø $
[
øø$ %
]
øø% &
array
øø' ,
)
øø, -
{
¿¿ 
this
¡¡ 
.
¡¡ 
CopyTo
¡¡ 
(
¡¡ 
array
¡¡ 
,
¡¡ 
$num
¡¡ 
)
¡¡ 
;
¡¡ 
}
¬¬ 
public
   
virtual
  	 
void
   
CopyTo
   
(
   
IPlugin
   $
[
  $ %
]
  % &
array
  ' ,
,
  , -
int
  . 1
start
  2 7
)
  7 8
{
ÀÀ 
if
ÃÃ 
(
ÃÃ 
m_count
ÃÃ 
>
ÃÃ 
array
ÃÃ 
.
ÃÃ 
GetUpperBound
ÃÃ $
(
ÃÃ$ %
$num
ÃÃ% &
)
ÃÃ& '
+
ÃÃ( )
$num
ÃÃ* +
-
ÃÃ, -
start
ÃÃ. 3
)
ÃÃ3 4
{
ÕÕ 
throw
ŒŒ 	
new
ŒŒ
 
System
ŒŒ 
.
ŒŒ 
ArgumentException
ŒŒ &
(
ŒŒ& '
$str
ŒŒ' O
)
ŒŒO P
;
ŒŒP Q
}
œœ 
Array
—— 
.
—— 	
Copy
——	 
(
—— 
m_array
—— 
,
—— 
$num
—— 
,
—— 
array
—— 
,
——  
start
——! &
,
——& '
m_count
——( /
)
——/ 0
;
——0 1
}
““ 
public
ÿÿ 
virtual
ÿÿ	 
bool
ÿÿ 
IsSynchronized
ÿÿ $
{
ŸŸ 
get
⁄⁄ 
{
⁄⁄ 
return
⁄⁄	 
false
⁄⁄ 
;
⁄⁄ 
}
⁄⁄ 
}
€€ 
public
„„ 
virtual
„„	 
object
„„ 
SyncRoot
„„  
{
‰‰ 
get
ÂÂ 
{
ÂÂ 
return
ÂÂ	 
m_array
ÂÂ 
;
ÂÂ 
}
ÂÂ 
}
ÊÊ 
public
¯¯ 
virtual
¯¯	 
IPlugin
¯¯ 
this
¯¯ 
[
¯¯ 
int
¯¯ !
index
¯¯" '
]
¯¯' (
{
˘˘ 
get
˙˙ 
{
˚˚ 
ValidateIndex
¸¸ 
(
¸¸ 
index
¸¸ 
)
¸¸ 
;
¸¸ 
return
˝˝ 

m_array
˝˝ 
[
˝˝ 
index
˝˝ 
]
˝˝ 
;
˝˝ 
}
˛˛ 
set
ˇˇ 
{
ÄÄ 
ValidateIndex
ÅÅ 
(
ÅÅ 
index
ÅÅ 
)
ÅÅ 
;
ÅÅ 
++
ÇÇ 
	m_version
ÇÇ 
;
ÇÇ 
m_array
ÉÉ 
[
ÉÉ 
index
ÉÉ 
]
ÉÉ 
=
ÉÉ 
value
ÉÉ 
;
ÉÉ 
}
ÑÑ 
}
ÖÖ 
public
åå 
virtual
åå	 
int
åå 
Add
åå 
(
åå 
IPlugin
åå  
item
åå! %
)
åå% &
{
çç 
if
éé 
(
éé 
m_count
éé 
==
éé 
m_array
éé 
.
éé 
Length
éé  
)
éé  !
{
èè 
EnsureCapacity
êê 
(
êê 
m_count
êê 
+
êê 
$num
êê 
)
êê 
;
êê  
}
ëë 
m_array
ìì 

[
ìì
 
m_count
ìì 
]
ìì 
=
ìì 
item
ìì 
;
ìì 
	m_version
îî 
++
îî 
;
îî 
return
ññ 	
m_count
ññ
 
++
ññ 
;
ññ 
}
óó 
public
úú 
virtual
úú	 
void
úú 
Clear
úú 
(
úú 
)
úú 
{
ùù 
++
ûû 
	m_version
ûû 
;
ûû 
m_array
üü 

=
üü 
new
üü 
IPlugin
üü 
[
üü 
DEFAULT_CAPACITY
üü )
]
üü) *
;
üü* +
m_count
†† 

=
†† 
$num
†† 
;
†† 
}
°° 
public
ßß 
virtual
ßß	 
object
ßß 
Clone
ßß 
(
ßß 
)
ßß 
{
®® 
PluginCollection
©© 
newCol
©© 
=
©© 
new
©©  
PluginCollection
©©! 1
(
©©1 2
m_count
©©2 9
)
©©9 :
;
©©: ;
Array
™™ 
.
™™ 	
Copy
™™	 
(
™™ 
m_array
™™ 
,
™™ 
$num
™™ 
,
™™ 
newCol
™™  
.
™™  !
m_array
™™! (
,
™™( )
$num
™™* +
,
™™+ ,
m_count
™™- 4
)
™™4 5
;
™™5 6
newCol
´´ 	
.
´´	 

m_count
´´
 
=
´´ 
m_count
´´ 
;
´´ 
newCol
¨¨ 	
.
¨¨	 

	m_version
¨¨
 
=
¨¨ 
	m_version
¨¨ 
;
¨¨  
return
ÆÆ 	
newCol
ÆÆ
 
;
ÆÆ 
}
ØØ 
public
∂∂ 
virtual
∂∂	 
bool
∂∂ 
Contains
∂∂ 
(
∂∂ 
IPlugin
∂∂ &
item
∂∂' +
)
∂∂+ ,
{
∑∑ 
for
∏∏ 
(
∏∏ 
int
∏∏ 
i
∏∏ 
=
∏∏ 
$num
∏∏ 
;
∏∏ 
i
∏∏ 
!=
∏∏ 
m_count
∏∏ 
;
∏∏ 
++
∏∏ !
i
∏∏! "
)
∏∏" #
{
ππ 
if
∫∫ 
(
∫∫ 
m_array
∫∫ 
[
∫∫ 
i
∫∫ 
]
∫∫ 
.
∫∫ 
Equals
∫∫ 
(
∫∫ 
item
∫∫ 
)
∫∫ 
)
∫∫  
{
ªª 
return
ºº 
true
ºº 
;
ºº 
}
ΩΩ 
}
ææ 
return
øø 	
false
øø
 
;
øø 
}
¿¿ 
public
ÀÀ 
virtual
ÀÀ	 
int
ÀÀ 
IndexOf
ÀÀ 
(
ÀÀ 
IPlugin
ÀÀ $
item
ÀÀ% )
)
ÀÀ) *
{
ÃÃ 
for
ÕÕ 
(
ÕÕ 
int
ÕÕ 
i
ÕÕ 
=
ÕÕ 
$num
ÕÕ 
;
ÕÕ 
i
ÕÕ 
!=
ÕÕ 
m_count
ÕÕ 
;
ÕÕ 
++
ÕÕ !
i
ÕÕ! "
)
ÕÕ" #
{
ŒŒ 
if
œœ 
(
œœ 
m_array
œœ 
[
œœ 
i
œœ 
]
œœ 
.
œœ 
Equals
œœ 
(
œœ 
item
œœ 
)
œœ 
)
œœ  
{
–– 
return
—— 
i
—— 
;
—— 
}
““ 
}
”” 
return
‘‘ 	
-
‘‘
 
$num
‘‘ 
;
‘‘ 
}
’’ 
public
·· 
virtual
··	 
void
·· 
Insert
·· 
(
·· 
int
··  
index
··! &
,
··& '
IPlugin
··( /
item
··0 4
)
··4 5
{
‚‚ 
ValidateIndex
„„ 
(
„„ 
index
„„ 
,
„„ 
true
„„ 
)
„„ 
;
„„ 
if
ÂÂ 
(
ÂÂ 
m_count
ÂÂ 
==
ÂÂ 
m_array
ÂÂ 
.
ÂÂ 
Length
ÂÂ  
)
ÂÂ  !
{
ÊÊ 
EnsureCapacity
ÁÁ 
(
ÁÁ 
m_count
ÁÁ 
+
ÁÁ 
$num
ÁÁ 
)
ÁÁ 
;
ÁÁ  
}
ËË 
if
ÍÍ 
(
ÍÍ 
index
ÍÍ 
<
ÍÍ 
m_count
ÍÍ 
)
ÍÍ 
{
ÎÎ 
Array
ÏÏ 	
.
ÏÏ	 

Copy
ÏÏ
 
(
ÏÏ 
m_array
ÏÏ 
,
ÏÏ 
index
ÏÏ 
,
ÏÏ 
m_array
ÏÏ &
,
ÏÏ& '
index
ÏÏ( -
+
ÏÏ. /
$num
ÏÏ0 1
,
ÏÏ1 2
m_count
ÏÏ3 :
-
ÏÏ; <
index
ÏÏ= B
)
ÏÏB C
;
ÏÏC D
}
ÌÌ 
m_array
ÔÔ 

[
ÔÔ
 
index
ÔÔ 
]
ÔÔ 
=
ÔÔ 
item
ÔÔ 
;
ÔÔ 
m_count
 

++

 
;
 
	m_version
ÒÒ 
++
ÒÒ 
;
ÒÒ 
}
ÚÚ 
public
˚˚ 
virtual
˚˚	 
void
˚˚ 
Remove
˚˚ 
(
˚˚ 
IPlugin
˚˚ $
item
˚˚% )
)
˚˚) *
{
¸¸ 
int
˝˝ 
i
˝˝ 
=
˝˝	 

IndexOf
˝˝ 
(
˝˝ 
item
˝˝ 
)
˝˝ 
;
˝˝ 
if
˛˛ 
(
˛˛ 
i
˛˛ 
<
˛˛	 

$num
˛˛ 
)
˛˛ 
{
ˇˇ 
throw
ÄÄ 	
new
ÄÄ
 
System
ÄÄ 
.
ÄÄ 
ArgumentException
ÄÄ &
(
ÄÄ& '
$str
ÄÄ' 
)ÄÄ Ä
;ÄÄÄ Å
}
ÅÅ 
++
ÇÇ 
	m_version
ÇÇ 
;
ÇÇ 
RemoveAt
ÉÉ 
(
ÉÉ 
i
ÉÉ 
)
ÉÉ 
;
ÉÉ 
}
ÑÑ 
public
èè 
virtual
èè	 
void
èè 
RemoveAt
èè 
(
èè 
int
èè "
index
èè# (
)
èè( )
{
êê 
ValidateIndex
ëë 
(
ëë 
index
ëë 
)
ëë 
;
ëë 
m_count
ìì 

--
ìì
 
;
ìì 
if
ïï 
(
ïï 
index
ïï 
<
ïï 
m_count
ïï 
)
ïï 
{
ññ 
Array
óó 	
.
óó	 

Copy
óó
 
(
óó 
m_array
óó 
,
óó 
index
óó 
+
óó 
$num
óó  !
,
óó! "
m_array
óó# *
,
óó* +
index
óó, 1
,
óó1 2
m_count
óó3 :
-
óó; <
index
óó= B
)
óóB C
;
óóC D
}
òò 
IPlugin
ùù 

[
ùù
 
]
ùù 
temp
ùù 
=
ùù 
new
ùù 
IPlugin
ùù 
[
ùù  
$num
ùù  !
]
ùù! "
;
ùù" #
Array
ûû 
.
ûû 	
Copy
ûû	 
(
ûû 
temp
ûû 
,
ûû 
$num
ûû 
,
ûû 
m_array
ûû 
,
ûû 
m_count
ûû  '
,
ûû' (
$num
ûû) *
)
ûû* +
;
ûû+ ,
	m_version
üü 
++
üü 
;
üü 
}
†† 
public
¶¶ 
virtual
¶¶	 
bool
¶¶ 
IsFixedSize
¶¶ !
{
ßß 
get
®® 
{
®® 
return
®®	 
false
®® 
;
®® 
}
®® 
}
©© 
public
ØØ 
virtual
ØØ	 
bool
ØØ 

IsReadOnly
ØØ  
{
∞∞ 
get
±± 
{
±± 
return
±±	 
false
±± 
;
±± 
}
±± 
}
≤≤ 
public
ºº 
virtual
ºº	 )
IPluginCollectionEnumerator
ºº ,
GetEnumerator
ºº- :
(
ºº: ;
)
ºº; <
{
ΩΩ 
return
ææ 	
new
ææ
 

Enumerator
ææ 
(
ææ 
this
ææ 
)
ææ 
;
ææ 
}
øø 
public
ÀÀ 
virtual
ÀÀ	 
int
ÀÀ 
Capacity
ÀÀ 
{
ÃÃ 
get
ÕÕ 
{
ŒŒ 
return
œœ 

m_array
œœ 
.
œœ 
Length
œœ 
;
œœ 
}
–– 
set
—— 
{
““ 
if
”” 
(
”” 
value
”” 
<
”” 
m_count
”” 
)
”” 
{
‘‘ 
value
’’ 

=
’’ 
m_count
’’ 
;
’’ 
}
÷÷ 
if
ÿÿ 
(
ÿÿ 
value
ÿÿ 
!=
ÿÿ 
m_array
ÿÿ 
.
ÿÿ 
Length
ÿÿ 
)
ÿÿ  
{
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 	
value
⁄⁄	 
>
⁄⁄ 
$num
⁄⁄ 
)
⁄⁄ 
{
€€ 
IPlugin
‹‹ 
[
‹‹ 
]
‹‹ 
temp
‹‹ 
=
‹‹ 
new
‹‹ 
IPlugin
‹‹ "
[
‹‹" #
value
‹‹# (
]
‹‹( )
;
‹‹) *
Array
›› 
.
›› 
Copy
›› 
(
›› 
m_array
›› 
,
›› 
$num
›› 
,
›› 
temp
›› !
,
››! "
$num
››# $
,
››$ %
m_count
››& -
)
››- .
;
››. /
m_array
ﬁﬁ 
=
ﬁﬁ 
temp
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
else
‡‡ 	
{
·· 
m_array
‚‚ 
=
‚‚ 
new
‚‚ 
IPlugin
‚‚ 
[
‚‚ 
DEFAULT_CAPACITY
‚‚ ,
]
‚‚, -
;
‚‚- .
}
„„ 
}
‰‰ 
}
ÂÂ 
}
ÊÊ 
public
ÌÌ 
virtual
ÌÌ	 
int
ÌÌ 
AddRange
ÌÌ 
(
ÌÌ 
PluginCollection
ÌÌ .
x
ÌÌ/ 0
)
ÌÌ0 1
{
ÓÓ 
if
ÔÔ 
(
ÔÔ 
m_count
ÔÔ 
+
ÔÔ 
x
ÔÔ 
.
ÔÔ 
Count
ÔÔ 
>=
ÔÔ 
m_array
ÔÔ #
.
ÔÔ# $
Length
ÔÔ$ *
)
ÔÔ* +
{
 
EnsureCapacity
ÒÒ 
(
ÒÒ 
m_count
ÒÒ 
+
ÒÒ 
x
ÒÒ 
.
ÒÒ 
Count
ÒÒ $
)
ÒÒ$ %
;
ÒÒ% &
}
ÚÚ 
Array
ÙÙ 
.
ÙÙ 	
Copy
ÙÙ	 
(
ÙÙ 
x
ÙÙ 
.
ÙÙ 
m_array
ÙÙ 
,
ÙÙ 
$num
ÙÙ 
,
ÙÙ 
m_array
ÙÙ #
,
ÙÙ# $
m_count
ÙÙ% ,
,
ÙÙ, -
x
ÙÙ. /
.
ÙÙ/ 0
Count
ÙÙ0 5
)
ÙÙ5 6
;
ÙÙ6 7
m_count
ıı 

+=
ıı 
x
ıı 
.
ıı 
Count
ıı 
;
ıı 
	m_version
ˆˆ 
++
ˆˆ 
;
ˆˆ 
return
¯¯ 	
m_count
¯¯
 
;
¯¯ 
}
˘˘ 
public
ÄÄ 
virtual
ÄÄ	 
int
ÄÄ 
AddRange
ÄÄ 
(
ÄÄ 
IPlugin
ÄÄ %
[
ÄÄ% &
]
ÄÄ& '
x
ÄÄ( )
)
ÄÄ) *
{
ÅÅ 
if
ÇÇ 
(
ÇÇ 
m_count
ÇÇ 
+
ÇÇ 
x
ÇÇ 
.
ÇÇ 
Length
ÇÇ 
>=
ÇÇ 
m_array
ÇÇ $
.
ÇÇ$ %
Length
ÇÇ% +
)
ÇÇ+ ,
{
ÉÉ 
EnsureCapacity
ÑÑ 
(
ÑÑ 
m_count
ÑÑ 
+
ÑÑ 
x
ÑÑ 
.
ÑÑ 
Length
ÑÑ %
)
ÑÑ% &
;
ÑÑ& '
}
ÖÖ 
Array
áá 
.
áá 	
Copy
áá	 
(
áá 
x
áá 
,
áá 
$num
áá 
,
áá 
m_array
áá 
,
áá 
m_count
áá $
,
áá$ %
x
áá& '
.
áá' (
Length
áá( .
)
áá. /
;
áá/ 0
m_count
àà 

+=
àà 
x
àà 
.
àà 
Length
àà 
;
àà 
	m_version
ââ 
++
ââ 
;
ââ 
return
ãã 	
m_count
ãã
 
;
ãã 
}
åå 
public
ìì 
virtual
ìì	 
int
ìì 
AddRange
ìì 
(
ìì 
ICollection
ìì )
col
ìì* -
)
ìì- .
{
îî 
if
ïï 
(
ïï 
m_count
ïï 
+
ïï 
col
ïï 
.
ïï 
Count
ïï 
>=
ïï 
m_array
ïï %
.
ïï% &
Length
ïï& ,
)
ïï, -
{
ññ 
EnsureCapacity
óó 
(
óó 
m_count
óó 
+
óó 
col
óó  
.
óó  !
Count
óó! &
)
óó& '
;
óó' (
}
òò 
foreach
öö 

(
öö
 
object
öö 
item
öö 
in
öö 
col
öö 
)
öö 
{
õõ 
Add
úú 
(
úú 
(
úú 	
IPlugin
úú	 
)
úú 
item
úú 
)
úú 
;
úú 
}
ùù 
return
üü 	
m_count
üü
 
;
üü 
}
†† 
public
•• 
virtual
••	 
void
•• 

TrimToSize
••  
(
••  !
)
••! "
{
¶¶ 
this
ßß 
.
ßß 
Capacity
ßß 
=
ßß 
m_count
ßß 
;
ßß 
}
®® 
private
≥≥ 	
void
≥≥
 
ValidateIndex
≥≥ 
(
≥≥ 
int
≥≥  
i
≥≥! "
)
≥≥" #
{
¥¥ 
ValidateIndex
µµ 
(
µµ 
i
µµ 
,
µµ 
false
µµ 
)
µµ 
;
µµ 
}
∂∂ 
private
ΩΩ 	
void
ΩΩ
 
ValidateIndex
ΩΩ 
(
ΩΩ 
int
ΩΩ  
i
ΩΩ! "
,
ΩΩ" #
bool
ΩΩ$ (
allowEqualEnd
ΩΩ) 6
)
ΩΩ6 7
{
ææ 
int
øø 
max
øø 

=
øø 
(
øø 
allowEqualEnd
øø 
)
øø 
?
øø 
(
øø  
m_count
øø  '
)
øø' (
:
øø) *
(
øø+ ,
m_count
øø, 3
-
øø3 4
$num
øø4 5
)
øø5 6
;
øø6 7
if
¿¿ 
(
¿¿ 
i
¿¿ 
<
¿¿	 

$num
¿¿ 
||
¿¿ 
i
¿¿ 
>
¿¿ 
max
¿¿ 
)
¿¿ 
{
¡¡ 
throw
¬¬ 	
log4net
¬¬
 
.
¬¬ 
Util
¬¬ 
.
¬¬ 

SystemInfo
¬¬ !
.
¬¬! "/
!CreateArgumentOutOfRangeException
¬¬" C
(
¬¬C D
$str
¬¬D G
,
¬¬G H
(
¬¬I J
object
¬¬J P
)
¬¬P Q
i
¬¬Q R
,
¬¬R S
$str¬¬T Æ
+¬¬Ø ∞
(¬¬± ≤
object¬¬≤ ∏
)¬¬∏ π
i¬¬π ∫
+¬¬ª º
$str¬¬Ω ˘
)¬¬˘ ˙
;¬¬˙ ˚
}
√√ 
}
ƒƒ 
private
∆∆ 	
void
∆∆
 
EnsureCapacity
∆∆ 
(
∆∆ 
int
∆∆ !
min
∆∆" %
)
∆∆% &
{
«« 
int
»» 
newCapacity
»» 
=
»» 
(
»» 
(
»» 
m_array
»» 
.
»» 
Length
»» %
==
»»& (
$num
»») *
)
»»* +
?
»», -
DEFAULT_CAPACITY
»». >
:
»»? @
m_array
»»A H
.
»»H I
Length
»»I O
*
»»P Q
$num
»»R S
)
»»S T
;
»»T U
if
…… 
(
…… 
newCapacity
…… 
<
…… 
min
…… 
)
…… 
{
   
newCapacity
ÀÀ 
=
ÀÀ 
min
ÀÀ 
;
ÀÀ 
}
ÃÃ 
this
ŒŒ 
.
ŒŒ 
Capacity
ŒŒ 
=
ŒŒ 
newCapacity
ŒŒ 
;
ŒŒ 
}
œœ 
void
’’ 
ICollection
’’ 
.
’’ 
CopyTo
’’ 
(
’’ 
Array
’’ 
array
’’  %
,
’’% &
int
’’' *
start
’’+ 0
)
’’0 1
{
÷÷ 
Array
◊◊ 
.
◊◊ 	
Copy
◊◊	 
(
◊◊ 
m_array
◊◊ 
,
◊◊ 
$num
◊◊ 
,
◊◊ 
array
◊◊ 
,
◊◊  
start
◊◊! &
,
◊◊& '
m_count
◊◊( /
)
◊◊/ 0
;
◊◊0 1
}
ÿÿ 
object
ﬁﬁ 
IList
ﬁﬁ	 
.
ﬁﬁ 
this
ﬁﬁ 
[
ﬁﬁ 
int
ﬁﬁ 
i
ﬁﬁ 
]
ﬁﬁ 
{
ﬂﬂ 
get
‡‡ 
{
‡‡ 
return
‡‡	 
(
‡‡ 
object
‡‡ 
)
‡‡ 
this
‡‡ 
[
‡‡ 
i
‡‡ 
]
‡‡ 
;
‡‡  
}
‡‡! "
set
·· 
{
·· 
this
··	 
[
·· 
i
·· 
]
·· 
=
·· 
(
·· 
IPlugin
·· 
)
·· 
value
·· !
;
··! "
}
··# $
}
‚‚ 
int
‰‰ 
IList
‰‰ 
.
‰‰ 
Add
‰‰ 
(
‰‰ 
object
‰‰ 
x
‰‰ 
)
‰‰ 
{
ÂÂ 
return
ÊÊ 	
this
ÊÊ
 
.
ÊÊ 
Add
ÊÊ 
(
ÊÊ 
(
ÊÊ 
IPlugin
ÊÊ 
)
ÊÊ 
x
ÊÊ 
)
ÊÊ 
;
ÊÊ 
}
ÁÁ 
bool
ÈÈ 
IList
ÈÈ 
.
ÈÈ 
Contains
ÈÈ 
(
ÈÈ 
object
ÈÈ 
x
ÈÈ 
)
ÈÈ 
{
ÍÍ 
return
ÎÎ 	
this
ÎÎ
 
.
ÎÎ 
Contains
ÎÎ 
(
ÎÎ 
(
ÎÎ 
IPlugin
ÎÎ  
)
ÎÎ  !
x
ÎÎ! "
)
ÎÎ" #
;
ÎÎ# $
}
ÏÏ 
int
ÓÓ 
IList
ÓÓ 
.
ÓÓ 
IndexOf
ÓÓ 
(
ÓÓ 
object
ÓÓ 
x
ÓÓ 
)
ÓÓ 
{
ÔÔ 
return
 	
this

 
.
 
IndexOf
 
(
 
(
 
IPlugin
 
)
  
x
  !
)
! "
;
" #
}
ÒÒ 
void
ÛÛ 
IList
ÛÛ 
.
ÛÛ 
Insert
ÛÛ 
(
ÛÛ 
int
ÛÛ 
pos
ÛÛ 
,
ÛÛ 
object
ÛÛ #
x
ÛÛ$ %
)
ÛÛ% &
{
ÙÙ 
this
ıı 
.
ıı 
Insert
ıı 
(
ıı 
pos
ıı 
,
ıı 
(
ıı 
IPlugin
ıı 
)
ıı 
x
ıı 
)
ıı 
;
ıı  
}
ˆˆ 
void
¯¯ 
IList
¯¯ 
.
¯¯ 
Remove
¯¯ 
(
¯¯ 
object
¯¯ 
x
¯¯ 
)
¯¯ 
{
˘˘ 
this
˙˙ 
.
˙˙ 
Remove
˙˙ 
(
˙˙ 
(
˙˙ 
IPlugin
˙˙ 
)
˙˙ 
x
˙˙ 
)
˙˙ 
;
˙˙ 
}
˚˚ 
void
˝˝ 
IList
˝˝ 
.
˝˝ 
RemoveAt
˝˝ 
(
˝˝ 
int
˝˝ 
pos
˝˝ 
)
˝˝ 
{
˛˛ 
this
ˇˇ 
.
ˇˇ 
RemoveAt
ˇˇ 
(
ˇˇ 
pos
ˇˇ 
)
ˇˇ 
;
ˇˇ 
}
ÄÄ 
IEnumerator
ÜÜ 
IEnumerable
ÜÜ 
.
ÜÜ 
GetEnumerator
ÜÜ '
(
ÜÜ' (
)
ÜÜ( )
{
áá 
return
àà 	
(
àà
 
IEnumerator
àà 
)
àà 
(
àà 
this
àà 
.
àà 
GetEnumerator
àà *
(
àà* +
)
àà+ ,
)
àà, -
;
àà- .
}
ââ 
private
ìì 	
sealed
ìì
 
class
ìì 

Enumerator
ìì !
:
ìì" #
IEnumerator
ìì$ /
,
ìì/ 0)
IPluginCollectionEnumerator
ìì1 L
{
îî 
private
óó 

readonly
óó 
PluginCollection
óó $
m_collection
óó% 1
;
óó1 2
private
òò 

int
òò 
m_index
òò 
;
òò 
private
ôô 

int
ôô 
	m_version
ôô 
;
ôô 
internal
££ 

Enumerator
££ 
(
££ 
PluginCollection
££ '
tc
££( *
)
££* +
{
§§ 
m_collection
•• 
=
•• 
tc
•• 
;
•• 
m_index
¶¶ 
=
¶¶ 
-
¶¶ 
$num
¶¶ 
;
¶¶ 
	m_version
ßß 
=
ßß 
tc
ßß 
.
ßß 
	m_version
ßß 
;
ßß 
}
®® 
public
¥¥ 	
IPlugin
¥¥
 
Current
¥¥ 
{
µµ 
get
∂∂ 
{
∂∂ 	
return
∂∂
 
m_collection
∂∂ 
[
∂∂ 
m_index
∂∂ %
]
∂∂% &
;
∂∂& '
}
∂∂( )
}
∑∑ 
public
√√ 	
bool
√√
 
MoveNext
√√ 
(
√√ 
)
√√ 
{
ƒƒ 
if
≈≈ 
(
≈≈ 
	m_version
≈≈ 
!=
≈≈ 
m_collection
≈≈ !
.
≈≈! "
	m_version
≈≈" +
)
≈≈+ ,
{
∆∆ 
throw
«« 

new
«« 
System
«« 
.
«« '
InvalidOperationException
«« /
(
««/ 0
$str
««0 q
)
««q r
;
««r s
}
»» 
++
   
m_index
   
;
   
return
ÀÀ 

(
ÀÀ 
m_index
ÀÀ 
<
ÀÀ 
m_collection
ÀÀ "
.
ÀÀ" #
Count
ÀÀ# (
)
ÀÀ( )
;
ÀÀ) *
}
ÃÃ 
public
—— 	
void
——
 
Reset
—— 
(
—— 
)
—— 
{
““ 
m_index
”” 
=
”” 
-
”” 
$num
”” 
;
”” 
}
‘‘ 
object
⁄⁄ 	
IEnumerator
⁄⁄
 
.
⁄⁄ 
Current
⁄⁄ 
{
€€ 
get
‹‹ 
{
‹‹ 	
return
‹‹
 
this
‹‹ 
.
‹‹ 
Current
‹‹ 
;
‹‹ 
}
‹‹  
}
›› 
}
‡‡ 
private
ÁÁ 	
sealed
ÁÁ
 
class
ÁÁ &
ReadOnlyPluginCollection
ÁÁ /
:
ÁÁ0 1
PluginCollection
ÁÁ2 B
{
ËË 
private
ÎÎ 

readonly
ÎÎ 
PluginCollection
ÎÎ $
m_collection
ÎÎ% 1
;
ÎÎ1 2
internal
ÒÒ &
ReadOnlyPluginCollection
ÒÒ $
(
ÒÒ$ %
PluginCollection
ÒÒ% 5
list
ÒÒ6 :
)
ÒÒ: ;
:
ÒÒ< =
base
ÒÒ> B
(
ÒÒB C
Tag
ÒÒC F
.
ÒÒF G
Default
ÒÒG N
)
ÒÒN O
{
ÚÚ 
m_collection
ÛÛ 
=
ÛÛ 
list
ÛÛ 
;
ÛÛ 
}
ÙÙ 
public
˙˙ 	
override
˙˙
 
void
˙˙ 
CopyTo
˙˙ 
(
˙˙ 
IPlugin
˙˙ &
[
˙˙& '
]
˙˙' (
array
˙˙) .
)
˙˙. /
{
˚˚ 
m_collection
¸¸ 
.
¸¸ 
CopyTo
¸¸ 
(
¸¸ 
array
¸¸ 
)
¸¸ 
;
¸¸ 
}
˝˝ 
public
ˇˇ 	
override
ˇˇ
 
void
ˇˇ 
CopyTo
ˇˇ 
(
ˇˇ 
IPlugin
ˇˇ &
[
ˇˇ& '
]
ˇˇ' (
array
ˇˇ) .
,
ˇˇ. /
int
ˇˇ0 3
start
ˇˇ4 9
)
ˇˇ9 :
{
ÄÄ 
m_collection
ÅÅ 
.
ÅÅ 
CopyTo
ÅÅ 
(
ÅÅ 
array
ÅÅ 
,
ÅÅ 
start
ÅÅ #
)
ÅÅ# $
;
ÅÅ$ %
}
ÇÇ 
public
ÉÉ 	
override
ÉÉ
 
int
ÉÉ 
Count
ÉÉ 
{
ÑÑ 
get
ÖÖ 
{
ÖÖ 	
return
ÖÖ
 
m_collection
ÖÖ 
.
ÖÖ 
Count
ÖÖ #
;
ÖÖ# $
}
ÖÖ% &
}
ÜÜ 
public
àà 	
override
àà
 
bool
àà 
IsSynchronized
àà &
{
ââ 
get
ää 
{
ää 	
return
ää
 
m_collection
ää 
.
ää 
IsSynchronized
ää ,
;
ää, -
}
ää. /
}
ãã 
public
çç 	
override
çç
 
object
çç 
SyncRoot
çç "
{
éé 
get
èè 
{
èè 	
return
èè
 
this
èè 
.
èè 
m_collection
èè "
.
èè" #
SyncRoot
èè# +
;
èè+ ,
}
èè- .
}
êê 
public
ññ 	
override
ññ
 
IPlugin
ññ 
this
ññ 
[
ññ  
int
ññ  #
i
ññ$ %
]
ññ% &
{
óó 
get
òò 
{
òò 	
return
òò
 
m_collection
òò 
[
òò 
i
òò 
]
òò  
;
òò  !
}
òò" #
set
ôô 
{
ôô 	
throw
ôô
 
new
ôô #
NotSupportedException
ôô )
(
ôô) *
$str
ôô* b
)
ôôb c
;
ôôc d
}
ôôe f
}
öö 
public
úú 	
override
úú
 
int
úú 
Add
úú 
(
úú 
IPlugin
úú "
x
úú# $
)
úú$ %
{
ùù 
throw
ûû 	
new
ûû
 #
NotSupportedException
ûû #
(
ûû# $
$str
ûû$ \
)
ûû\ ]
;
ûû] ^
}
üü 
public
°° 	
override
°°
 
void
°° 
Clear
°° 
(
°° 
)
°° 
{
¢¢ 
throw
££ 	
new
££
 #
NotSupportedException
££ #
(
££# $
$str
££$ \
)
££\ ]
;
££] ^
}
§§ 
public
¶¶ 	
override
¶¶
 
bool
¶¶ 
Contains
¶¶  
(
¶¶  !
IPlugin
¶¶! (
x
¶¶) *
)
¶¶* +
{
ßß 
return
®® 

m_collection
®® 
.
®® 
Contains
®®  
(
®®  !
x
®®! "
)
®®" #
;
®®# $
}
©© 
public
´´ 	
override
´´
 
int
´´ 
IndexOf
´´ 
(
´´ 
IPlugin
´´ &
x
´´' (
)
´´( )
{
¨¨ 
return
≠≠ 

m_collection
≠≠ 
.
≠≠ 
IndexOf
≠≠ 
(
≠≠  
x
≠≠  !
)
≠≠! "
;
≠≠" #
}
ÆÆ 
public
∞∞ 	
override
∞∞
 
void
∞∞ 
Insert
∞∞ 
(
∞∞ 
int
∞∞ "
pos
∞∞# &
,
∞∞& '
IPlugin
∞∞( /
x
∞∞0 1
)
∞∞1 2
{
±± 
throw
≤≤ 	
new
≤≤
 #
NotSupportedException
≤≤ #
(
≤≤# $
$str
≤≤$ \
)
≤≤\ ]
;
≤≤] ^
}
≥≥ 
public
µµ 	
override
µµ
 
void
µµ 
Remove
µµ 
(
µµ 
IPlugin
µµ &
x
µµ' (
)
µµ( )
{
∂∂ 
throw
∑∑ 	
new
∑∑
 #
NotSupportedException
∑∑ #
(
∑∑# $
$str
∑∑$ \
)
∑∑\ ]
;
∑∑] ^
}
∏∏ 
public
∫∫ 	
override
∫∫
 
void
∫∫ 
RemoveAt
∫∫  
(
∫∫  !
int
∫∫! $
pos
∫∫% (
)
∫∫( )
{
ªª 
throw
ºº 	
new
ºº
 #
NotSupportedException
ºº #
(
ºº# $
$str
ºº$ \
)
ºº\ ]
;
ºº] ^
}
ΩΩ 
public
øø 	
override
øø
 
bool
øø 
IsFixedSize
øø #
{
¿¿ 
get
¡¡ 
{
¡¡ 	
return
¡¡
 
true
¡¡ 
;
¡¡ 
}
¡¡ 
}
¬¬ 
public
ƒƒ 	
override
ƒƒ
 
bool
ƒƒ 

IsReadOnly
ƒƒ "
{
≈≈ 
get
∆∆ 
{
∆∆ 	
return
∆∆
 
true
∆∆ 
;
∆∆ 
}
∆∆ 
}
«« 
public
ÕÕ 	
override
ÕÕ
 )
IPluginCollectionEnumerator
ÕÕ .
GetEnumerator
ÕÕ/ <
(
ÕÕ< =
)
ÕÕ= >
{
ŒŒ 
return
œœ 

m_collection
œœ 
.
œœ 
GetEnumerator
œœ %
(
œœ% &
)
œœ& '
;
œœ' (
}
–– 
public
◊◊ 	
override
◊◊
 
int
◊◊ 
Capacity
◊◊ 
{
ÿÿ 
get
ŸŸ 
{
ŸŸ 	
return
ŸŸ
 
m_collection
ŸŸ 
.
ŸŸ 
Capacity
ŸŸ &
;
ŸŸ& '
}
ŸŸ( )
set
⁄⁄ 
{
⁄⁄ 	
throw
⁄⁄
 
new
⁄⁄ #
NotSupportedException
⁄⁄ )
(
⁄⁄) *
$str
⁄⁄* b
)
⁄⁄b c
;
⁄⁄c d
}
⁄⁄e f
}
€€ 
public
›› 	
override
››
 
int
›› 
AddRange
›› 
(
››  
PluginCollection
››  0
x
››1 2
)
››2 3
{
ﬁﬁ 
throw
ﬂﬂ 	
new
ﬂﬂ
 #
NotSupportedException
ﬂﬂ #
(
ﬂﬂ# $
$str
ﬂﬂ$ \
)
ﬂﬂ\ ]
;
ﬂﬂ] ^
}
‡‡ 
public
‚‚ 	
override
‚‚
 
int
‚‚ 
AddRange
‚‚ 
(
‚‚  
IPlugin
‚‚  '
[
‚‚' (
]
‚‚( )
x
‚‚* +
)
‚‚+ ,
{
„„ 
throw
‰‰ 	
new
‰‰
 #
NotSupportedException
‰‰ #
(
‰‰# $
$str
‰‰$ \
)
‰‰\ ]
;
‰‰] ^
}
ÂÂ 
}
ËË 
}
ÎÎ 
}ÏÏ £!
;C:\sonarqube\projects\log4net-2.0.7\src\Plugin\PluginMap.cs
	namespace 	
log4net
 
. 
Plugin 
{ 
public'' 
sealed'' 
class'' 
	PluginMap'' 
{(( 
public55 
	PluginMap55	 
(55 
ILoggerRepository55 $

repository55% /
)55/ 0
{66 
m_repository77 
=77 

repository77 
;77 
}88 
publicLL 
IPluginLL	 
thisLL 
[LL 
stringLL 
nameLL !
]LL! "
{MM 
getNN 
{OO 
ifPP 
(PP 
namePP 
==PP 
nullPP 
)PP 
{QQ 
throwRR 

newRR !
ArgumentNullExceptionRR $
(RR$ %
$strRR% +
)RR+ ,
;RR, -
}SS 
lockUU 
(UU 	
thisUU	 
)UU 
{VV 
returnWW 
(WW 
IPluginWW 
)WW 
m_mapName2PluginWW %
[WW% &
nameWW& *
]WW* +
;WW+ ,
}XX 
}YY 
}ZZ 
publicee 
PluginCollectionee	 

AllPluginsee $
{ff 
getgg 
{hh 
lockii 
(ii 	
thisii	 
)ii 
{jj 
returnkk 
newkk 
PluginCollectionkk  
(kk  !
m_mapName2Pluginkk! 1
.kk1 2
Valueskk2 8
)kk8 9
;kk9 :
}ll 
}mm 
}nn 
public
ÉÉ 
void
ÉÉ	 
Add
ÉÉ 
(
ÉÉ 
IPlugin
ÉÉ 
plugin
ÉÉ  
)
ÉÉ  !
{
ÑÑ 
if
ÖÖ 
(
ÖÖ 
plugin
ÖÖ 
==
ÖÖ 
null
ÖÖ 
)
ÖÖ 
{
ÜÜ 
throw
áá 	
new
áá
 #
ArgumentNullException
áá #
(
áá# $
$str
áá$ ,
)
áá, -
;
áá- .
}
àà 
IPlugin
ää 

	curPlugin
ää 
=
ää 
null
ää 
;
ää 
lock
åå 
(
åå 
this
åå 
)
åå 
{
çç 
	curPlugin
èè 
=
èè 
m_mapName2Plugin
èè  
[
èè  !
plugin
èè! '
.
èè' (
Name
èè( ,
]
èè, -
as
èè. 0
IPlugin
èè1 8
;
èè8 9
m_mapName2Plugin
íí 
[
íí 
plugin
íí 
.
íí 
Name
íí  
]
íí  !
=
íí" #
plugin
íí$ *
;
íí* +
}
ìì 
if
ññ 
(
ññ 
	curPlugin
ññ 
!=
ññ 
null
ññ 
)
ññ 
{
óó 
	curPlugin
òò 
.
òò 
Shutdown
òò 
(
òò 
)
òò 
;
òò 
}
ôô 
plugin
úú 	
.
úú	 

Attach
úú
 
(
úú 
m_repository
úú 
)
úú 
;
úú 
}
ùù 
public
®® 
void
®®	 
Remove
®® 
(
®® 
IPlugin
®® 
plugin
®® #
)
®®# $
{
©© 
if
™™ 
(
™™ 
plugin
™™ 
==
™™ 
null
™™ 
)
™™ 
{
´´ 
throw
¨¨ 	
new
¨¨
 #
ArgumentNullException
¨¨ #
(
¨¨# $
$str
¨¨$ ,
)
¨¨, -
;
¨¨- .
}
≠≠ 
lock
ÆÆ 
(
ÆÆ 
this
ÆÆ 
)
ÆÆ 
{
ØØ 
m_mapName2Plugin
∞∞ 
.
∞∞ 
Remove
∞∞ 
(
∞∞ 
plugin
∞∞ "
.
∞∞" #
Name
∞∞# '
)
∞∞' (
;
∞∞( )
}
±± 
}
≤≤ 
private
∏∏ 	
readonly
∏∏
 
	Hashtable
∏∏ 
m_mapName2Plugin
∏∏ -
=
∏∏. /
new
∏∏0 3
	Hashtable
∏∏4 =
(
∏∏= >
)
∏∏> ?
;
∏∏? @
private
ππ 	
readonly
ππ
 
ILoggerRepository
ππ $
m_repository
ππ% 1
;
ππ1 2
}
ºº 
}ΩΩ ì
@C:\sonarqube\projects\log4net-2.0.7\src\Plugin\PluginSkeleton.cs
	namespace 	
log4net
 
. 
Plugin 
{ 
public$$ 
abstract$$ 
class$$ 
PluginSkeleton$$ %
:$$& '
IPlugin$$( /
{%% 
	protected// 
PluginSkeleton// 
(// 
string// !
name//" &
)//& '
{00 
m_name11 	
=11
 
name11 
;11 
}22 
publicII 
virtualII	 
stringII 
NameII 
{JJ 
getKK 
{KK 
returnKK	 
m_nameKK 
;KK 
}KK 
setLL 
{LL 
m_nameLL	 
=LL 
valueLL 
;LL 
}LL 
}MM 
public[[ 
virtual[[	 
void[[ 
Attach[[ 
([[ 
ILoggerRepository[[ .

repository[[/ 9
)[[9 :
{\\ 
m_repository]] 
=]] 

repository]] 
;]] 
}^^ 
publicjj 
virtualjj	 
voidjj 
Shutdownjj 
(jj 
)jj  
{kk 
}ll 
	protected~~ 
virtual~~ 
ILoggerRepository~~ %
LoggerRepository~~& 6
{ 
get
ÄÄ 
{
ÄÄ 
return
ÄÄ	 
this
ÄÄ 
.
ÄÄ 
m_repository
ÄÄ !
;
ÄÄ! "
}
ÄÄ# $
set
ÅÅ 
{
ÅÅ 
this
ÅÅ	 
.
ÅÅ 
m_repository
ÅÅ 
=
ÅÅ 
value
ÅÅ "
;
ÅÅ" #
}
ÅÅ$ %
}
ÇÇ 
private
ãã 	
string
ãã
 
m_name
ãã 
;
ãã 
private
êê 	
ILoggerRepository
êê
 
m_repository
êê (
;
êê( )
}
ìì 
}îî Ã*
KC:\sonarqube\projects\log4net-2.0.7\src\Plugin\RemoteLoggingServerPlugin.cs
	namespace 	
log4net
 
. 
Plugin 
{   
public11 
class11 %
RemoteLoggingServerPlugin11 '
:11( )
PluginSkeleton11* 8
{22 
public@@ %
RemoteLoggingServerPlugin@@	 "
(@@" #
)@@# $
:@@% &
base@@' +
(@@+ ,
$str@@, Q
)@@Q R
{AA 
}BB 
publicOO %
RemoteLoggingServerPluginOO	 "
(OO" #
stringOO# )
sinkUriOO* 1
)OO1 2
:OO3 4
baseOO5 9
(OO9 :
$strOO: V
+OOV W
sinkUriOOW ^
)OO^ _
{PP 
	m_sinkUriQQ 
=QQ 
sinkUriQQ 
;QQ 
}RR 
publicdd 
virtualdd	 
stringdd 
SinkUridd 
{ee 
getff 
{ff 
returnff	 
	m_sinkUriff 
;ff 
}ff 
setgg 
{gg 
	m_sinkUrigg	 
=gg 
valuegg 
;gg 
}gg 
}hh 
[{{ 
System{{ 	
.{{	 

Security{{
 
.{{  
SecuritySafeCritical{{ '
]{{' (
override}} 

public}} 
void}} 
Attach}} 
(}} 
ILoggerRepository}} /

repository}}0 :
)}}: ;
{~~ 
base 
. 
Attach 
( 

repository 
) 
; 
m_sink
ÇÇ 	
=
ÇÇ
 
new
ÇÇ #
RemoteLoggingSinkImpl
ÇÇ %
(
ÇÇ% &

repository
ÇÇ& 0
)
ÇÇ0 1
;
ÇÇ1 2
try
ÑÑ 
{
ÖÖ 
RemotingServices
ÜÜ 
.
ÜÜ 
Marshal
ÜÜ 
(
ÜÜ 
m_sink
ÜÜ #
,
ÜÜ# $
	m_sinkUri
ÜÜ% .
,
ÜÜ. /
typeof
ÜÜ0 6
(
ÜÜ6 7 
IRemoteLoggingSink
ÜÜ7 I
)
ÜÜI J
)
ÜÜJ K
;
ÜÜK L
}
áá 
catch
àà 
(
àà 	
	Exception
àà	 
ex
àà 
)
àà 
{
ââ 
LogLog
ää 

.
ää
 
Error
ää 
(
ää 
declaringType
ää 
,
ää 
$str
ää  A
,
ääA B
ex
ääC E
)
ääE F
;
ääF G
}
ãã 
}
åå 
[
òò 	
System
òò	 
.
òò 
Security
òò 
.
òò "
SecuritySafeCritical
òò -
]
òò- .
override
öö 
public
öö 
void
öö 
Shutdown
öö %
(
öö% &
)
öö& '
{
õõ 
RemotingServices
ùù 
.
ùù 

Disconnect
ùù 
(
ùù 
m_sink
ùù %
)
ùù% &
;
ùù& '
m_sink
ûû 	
=
ûû
 
null
ûû 
;
ûû 
base
†† 
.
†† 
Shutdown
†† 
(
†† 
)
†† 
;
†† 
}
°° 
private
ßß 	#
RemoteLoggingSinkImpl
ßß
 
m_sink
ßß  &
;
ßß& '
private
®® 	
string
®®
 
	m_sinkUri
®® 
;
®® 
private
µµ 
readonly
µµ 
static
µµ 
Type
µµ !
declaringType
µµ" /
=
µµ0 1
typeof
µµ2 8
(
µµ8 9'
RemoteLoggingServerPlugin
µµ9 R
)
µµR S
;
µµS T
private
¬¬ 	
class
¬¬
 #
RemoteLoggingSinkImpl
¬¬ %
:
¬¬& ' 
MarshalByRefObject
¬¬( :
,
¬¬: ; 
IRemoteLoggingSink
¬¬< N
{
√√ 
public
–– 	#
RemoteLoggingSinkImpl
––
 
(
––  
ILoggerRepository
––  1

repository
––2 <
)
––< =
{
—— 
m_repository
““ 
=
““ 

repository
““ 
;
““ 
}
”” 
public
‚‚ 	
void
‚‚
 
	LogEvents
‚‚ 
(
‚‚ 
LoggingEvent
‚‚ %
[
‚‚% &
]
‚‚& '
events
‚‚( .
)
‚‚. /
{
„„ 
if
‰‰ 
(
‰‰ 
events
‰‰ 
!=
‰‰ 
null
‰‰ 
)
‰‰ 
{
ÂÂ 
foreach
ÊÊ 
(
ÊÊ 
LoggingEvent
ÊÊ 
logEvent
ÊÊ "
in
ÊÊ# %
events
ÊÊ& ,
)
ÊÊ, -
{
ÁÁ 
if
ËË 
(
ËË	 

logEvent
ËË
 
!=
ËË 
null
ËË 
)
ËË 
{
ÈÈ 
m_repository
ÍÍ 
.
ÍÍ 
Log
ÍÍ 
(
ÍÍ 
logEvent
ÍÍ  
)
ÍÍ  !
;
ÍÍ! "
}
ÎÎ 
}
ÏÏ 
}
ÌÌ 
}
ÓÓ 
[
ÅÅ 
System
ÅÅ 
.
ÅÅ 
Security
ÅÅ 
.
ÅÅ 
SecurityCritical
ÅÅ -
]
ÅÅ- .
public
ÉÉ 
override
ÉÉ 
object
ÉÉ "'
InitializeLifetimeService
ÉÉ# <
(
ÉÉ< =
)
ÉÉ= >
{
ÑÑ 
return
ÖÖ 

null
ÖÖ 
;
ÖÖ 
}
ÜÜ 
private
êê 

readonly
êê 
ILoggerRepository
êê %
m_repository
êê& 2
;
êê2 3
}
ìì 
}
îî 
}ïï Î
SC:\sonarqube\projects\log4net-2.0.7\src\Repository\ConfigurationChangedEventArgs.cs
	namespace 	
log4net
 
. 

Repository 
{ 
public 

class )
ConfigurationChangedEventArgs .
:/ 0
	EventArgs1 :
{ 
private   
readonly   
ICollection   $!
configurationMessages  % :
;  : ;
public&& )
ConfigurationChangedEventArgs&& ,
(&&, -
ICollection&&- 8!
configurationMessages&&9 N
)&&N O
{'' 	
this(( 
.(( !
configurationMessages(( &
=((' (!
configurationMessages(() >
;((> ?
})) 	
public.. 
ICollection.. !
ConfigurationMessages.. 0
{// 	
get00 
{00 
return00 !
configurationMessages00 .
;00. /
}000 1
}11 	
}22 
}33 Ù
TC:\sonarqube\projects\log4net-2.0.7\src\Repository\Hierarchy\DefaultLoggerFactory.cs
	namespace 	
log4net
 
. 

Repository 
. 
	Hierarchy &
{ 
internal$$ 	
class$$
  
DefaultLoggerFactory$$ $
:$$% &
ILoggerFactory$$' 5
{%% 
internal00 
 
DefaultLoggerFactory00 
(00  
)00  !
{11 
}22 
publicLL 
LoggerLL	 
CreateLoggerLL 
(LL 
ILoggerRepositoryLL .

repositoryLL/ 9
,LL9 :
stringLL; A
nameLLB F
)LLF G
{MM 
ifNN 
(NN 
nameNN 
==NN 
nullNN 
)NN 
{OO 
returnPP 

newPP 

RootLoggerPP 
(PP 

repositoryPP $
.PP$ %
LevelMapPP% -
.PP- .
LookupWithDefaultPP. ?
(PP? @
LevelPP@ E
.PPE F
DebugPPF K
)PPK L
)PPL M
;PPM N
}QQ 
returnRR 	
newRR
 

LoggerImplRR 
(RR 
nameRR 
)RR 
;RR 
}SS 
internalaa 

sealedaa 
classaa 

LoggerImplaa "
:aa# $
Loggeraa% +
{bb 
internalmm 

LoggerImplmm 
(mm 
stringmm 
namemm "
)mm" #
:mm$ %
basemm& *
(mm* +
namemm+ /
)mm/ 0
{nn 
}oo 
}pp 
}qq 
}rr ƒ™
IC:\sonarqube\projects\log4net-2.0.7\src\Repository\Hierarchy\Hierarchy.cs
	namespace 	
log4net
 
. 

Repository 
. 
	Hierarchy &
{ 
public)) 
delegate)) 
void)) &
LoggerCreationEventHandler)) 0
())0 1
object))1 7
sender))8 >
,))> ?#
LoggerCreationEventArgs))@ W
e))X Y
)))Y Z
;))Z [
public44 
class44 #
LoggerCreationEventArgs44 %
:44& '
	EventArgs44( 1
{55 
private99 	
Logger99
 
m_log99 
;99 
publicEE #
LoggerCreationEventArgsEE	  
(EE  !
LoggerEE! '
logEE( +
)EE+ ,
{FF 
m_logGG 
=GG	 

logGG 
;GG 
}HH 
publicUU 
LoggerUU	 
LoggerUU 
{VV 
getWW 
{WW 
returnWW	 
m_logWW 
;WW 
}WW 
}XX 
}YY 
publiczz 
classzz 
	Hierarchyzz 
:zz $
LoggerRepositorySkeletonzz 2
,zz2 3(
IBasicRepositoryConfiguratorzz4 P
,zzP Q&
IXmlRepositoryConfiguratorzzR l
{{{ 
public
ÜÜ 
event
ÜÜ	 (
LoggerCreationEventHandler
ÜÜ ) 
LoggerCreatedEvent
ÜÜ* <
{
áá 
add
àà 
{
àà "
m_loggerCreatedEvent
àà	 
+=
àà  
value
àà! &
;
àà& '
}
àà( )
remove
ââ 	
{
ââ
 "
m_loggerCreatedEvent
ââ  
-=
ââ! #
value
ââ$ )
;
ââ) *
}
ââ+ ,
}
ää 
public
òò 
	Hierarchy
òò	 
(
òò 
)
òò 
:
òò 
this
òò 
(
òò 
new
òò "
DefaultLoggerFactory
òò  4
(
òò4 5
)
òò5 6
)
òò6 7
{
ôô 
}
öö 
public
•• 
	Hierarchy
••	 
(
•• "
PropertiesDictionary
•• '

properties
••( 2
)
••2 3
:
••4 5
this
••6 :
(
••: ;

properties
••; E
,
••E F
new
••G J"
DefaultLoggerFactory
••K _
(
••_ `
)
••` a
)
••a b
{
¶¶ 
}
ßß 
public
≥≥ 
	Hierarchy
≥≥	 
(
≥≥ 
ILoggerFactory
≥≥ !
loggerFactory
≥≥" /
)
≥≥/ 0
:
≥≥1 2
this
≥≥3 7
(
≥≥7 8
new
≥≥8 ;"
PropertiesDictionary
≥≥< P
(
≥≥P Q
)
≥≥Q R
,
≥≥R S
loggerFactory
≥≥T a
)
≥≥a b
{
¥¥ 
}
µµ 
public
¬¬ 
	Hierarchy
¬¬	 
(
¬¬ "
PropertiesDictionary
¬¬ '

properties
¬¬( 2
,
¬¬2 3
ILoggerFactory
¬¬4 B
loggerFactory
¬¬C P
)
¬¬P Q
:
¬¬R S
base
¬¬T X
(
¬¬X Y

properties
¬¬Y c
)
¬¬c d
{
√√ 
if
ƒƒ 
(
ƒƒ 
loggerFactory
ƒƒ 
==
ƒƒ 
null
ƒƒ 
)
ƒƒ 
{
≈≈ 
throw
∆∆ 	
new
∆∆
 #
ArgumentNullException
∆∆ #
(
∆∆# $
$str
∆∆$ 3
)
∆∆3 4
;
∆∆4 5
}
«« 
m_defaultFactory
…… 
=
…… 
loggerFactory
…… #
;
……# $
m_ht
ÀÀ 
=
ÀÀ 	
System
ÀÀ
 
.
ÀÀ 
Collections
ÀÀ 
.
ÀÀ 
	Hashtable
ÀÀ &
.
ÀÀ& '
Synchronized
ÀÀ' 3
(
ÀÀ3 4
new
ÀÀ4 7
System
ÀÀ8 >
.
ÀÀ> ?
Collections
ÀÀ? J
.
ÀÀJ K
	Hashtable
ÀÀK T
(
ÀÀT U
)
ÀÀU V
)
ÀÀV W
;
ÀÀW X
}
ÃÃ 
public
€€ 
bool
€€	 &
EmittedNoAppenderWarning
€€ &
{
‹‹ 
get
›› 
{
›› 
return
››	 (
m_emittedNoAppenderWarning
›› *
;
››* +
}
››, -
set
ﬁﬁ 
{
ﬁﬁ (
m_emittedNoAppenderWarning
ﬁﬁ	 #
=
ﬁﬁ$ %
value
ﬁﬁ& +
;
ﬁﬁ+ ,
}
ﬁﬁ- .
}
ﬂﬂ 
public
ÈÈ 
Logger
ÈÈ	 
Root
ÈÈ 
{
ÍÍ 
get
ÎÎ 
{
ÏÏ 
if
ÌÌ 
(
ÌÌ 
m_root
ÌÌ 
==
ÌÌ 
null
ÌÌ 
)
ÌÌ 
{
ÓÓ 
lock
ÔÔ 	
(
ÔÔ	 

this
ÔÔ
 
)
ÔÔ 
{
 
if
ÒÒ 
(
ÒÒ	 

m_root
ÒÒ
 
==
ÒÒ 
null
ÒÒ 
)
ÒÒ 
{
ÚÚ 
Logger
ÙÙ 
root
ÙÙ 
=
ÙÙ 
m_defaultFactory
ÙÙ %
.
ÙÙ% &
CreateLogger
ÙÙ& 2
(
ÙÙ2 3
this
ÙÙ3 7
,
ÙÙ7 8
null
ÙÙ9 =
)
ÙÙ= >
;
ÙÙ> ?
root
ıı 
.
ıı 
	Hierarchy
ıı 
=
ıı 
this
ıı 
;
ıı 
m_root
¯¯ 
=
¯¯ 
root
¯¯ 
;
¯¯ 
}
˘˘ 
}
˙˙ 
}
˚˚ 
return
¸¸ 

m_root
¸¸ 
;
¸¸ 
}
˝˝ 
}
˛˛ 
public
ââ 
ILoggerFactory
ââ	 
LoggerFactory
ââ %
{
ää 
get
ãã 
{
ãã 
return
ãã	 
m_defaultFactory
ãã  
;
ãã  !
}
ãã" #
set
åå 
{
çç 
if
éé 
(
éé 
value
éé 
==
éé 
null
éé 
)
éé 
{
èè 
throw
êê 

new
êê #
ArgumentNullException
êê $
(
êê$ %
$str
êê% ,
)
êê, -
;
êê- .
}
ëë 
m_defaultFactory
íí 
=
íí 
value
íí 
;
íí 
}
ìì 
}
îî 
override
•• 

public
•• 
ILogger
•• 
Exists
••  
(
••  !
string
••! '
name
••( ,
)
••, -
{
¶¶ 
if
ßß 
(
ßß 
name
ßß 
==
ßß 
null
ßß 
)
ßß 
{
®® 
throw
©© 	
new
©©
 #
ArgumentNullException
©© #
(
©©# $
$str
©©$ *
)
©©* +
;
©©+ ,
}
™™ 
lock
¨¨ 
(
¨¨ 
m_ht
¨¨ 
)
¨¨ 
{
≠≠ 
return
ÆÆ 

m_ht
ÆÆ 
[
ÆÆ 
new
ÆÆ 
	LoggerKey
ÆÆ 
(
ÆÆ 
name
ÆÆ "
)
ÆÆ" #
]
ÆÆ# $
as
ÆÆ% '
Logger
ÆÆ( .
;
ÆÆ. /
}
ØØ 
}
∞∞ 
override
ΩΩ 

public
ΩΩ 
ILogger
ΩΩ 
[
ΩΩ 
]
ΩΩ 
GetCurrentLoggers
ΩΩ -
(
ΩΩ- .
)
ΩΩ. /
{
ææ 
lock
¬¬ 
(
¬¬ 
m_ht
¬¬ 
)
¬¬ 
{
√√ 
System
ƒƒ 

.
ƒƒ
 
Collections
ƒƒ 
.
ƒƒ 
	ArrayList
ƒƒ  
loggers
ƒƒ! (
=
ƒƒ) *
new
ƒƒ+ .
System
ƒƒ/ 5
.
ƒƒ5 6
Collections
ƒƒ6 A
.
ƒƒA B
	ArrayList
ƒƒB K
(
ƒƒK L
m_ht
ƒƒL P
.
ƒƒP Q
Count
ƒƒQ V
)
ƒƒV W
;
ƒƒW X
foreach
«« 
(
«« 
object
«« 
node
«« 
in
«« 
m_ht
«« 
.
««  
Values
««  &
)
««& '
{
»» 
if
…… 
(
…… 	
node
……	 
is
…… 
Logger
…… 
)
…… 
{
   
loggers
ÀÀ 
.
ÀÀ 
Add
ÀÀ 
(
ÀÀ 
node
ÀÀ 
)
ÀÀ 
;
ÀÀ 
}
ÃÃ 
}
ÕÕ 
return
ŒŒ 

(
ŒŒ 
Logger
ŒŒ 
[
ŒŒ 
]
ŒŒ 
)
ŒŒ 
loggers
ŒŒ 
.
ŒŒ 
ToArray
ŒŒ $
(
ŒŒ$ %
typeof
ŒŒ% +
(
ŒŒ+ ,
Logger
ŒŒ, 2
)
ŒŒ2 3
)
ŒŒ3 4
;
ŒŒ4 5
}
œœ 
}
–– 
override
„„ 

public
„„ 
ILogger
„„ 
	GetLogger
„„ #
(
„„# $
string
„„$ *
name
„„+ /
)
„„/ 0
{
‰‰ 
if
ÂÂ 
(
ÂÂ 
name
ÂÂ 
==
ÂÂ 
null
ÂÂ 
)
ÂÂ 
{
ÊÊ 
throw
ÁÁ 	
new
ÁÁ
 #
ArgumentNullException
ÁÁ #
(
ÁÁ# $
$str
ÁÁ$ *
)
ÁÁ* +
;
ÁÁ+ ,
}
ËË 
return
ÍÍ 	
	GetLogger
ÍÍ
 
(
ÍÍ 
name
ÍÍ 
,
ÍÍ 
m_defaultFactory
ÍÍ *
)
ÍÍ* +
;
ÍÍ+ ,
}
ÎÎ 
override
ÇÇ 

public
ÇÇ 
void
ÇÇ 
Shutdown
ÇÇ 
(
ÇÇ  
)
ÇÇ  !
{
ÉÉ 
LogLog
ÑÑ 	
.
ÑÑ	 

Debug
ÑÑ
 
(
ÑÑ 
declaringType
ÑÑ 
,
ÑÑ 
$str
ÑÑ ?
+
ÑÑ? @
this
ÑÑ@ D
.
ÑÑD E
Name
ÑÑE I
+
ÑÑI J
$str
ÑÑJ M
)
ÑÑM N
;
ÑÑN O
Root
áá 
.
áá "
CloseNestedAppenders
áá 
(
áá 
)
áá 
;
áá 
lock
ââ 
(
ââ 
m_ht
ââ 
)
ââ 
{
ää 
ILogger
ãã 
[
ãã 
]
ãã 
currentLoggers
ãã 
=
ãã 
this
ãã #
.
ãã# $
GetCurrentLoggers
ãã$ 5
(
ãã5 6
)
ãã6 7
;
ãã7 8
foreach
çç 
(
çç 
Logger
çç 
logger
çç 
in
çç 
currentLoggers
çç +
)
çç+ ,
{
éé 
logger
èè 
.
èè "
CloseNestedAppenders
èè  
(
èè  !
)
èè! "
;
èè" #
}
êê 
Root
ìì 
.
ìì 	 
RemoveAllAppenders
ìì	 
(
ìì 
)
ìì 
;
ìì 
foreach
ïï 
(
ïï 
Logger
ïï 
logger
ïï 
in
ïï 
currentLoggers
ïï +
)
ïï+ ,
{
ññ 
logger
óó 
.
óó  
RemoveAllAppenders
óó 
(
óó 
)
óó  
;
óó  !
}
òò 
}
ôô 
base
õõ 
.
õõ 
Shutdown
õõ 
(
õõ 
)
õõ 
;
õõ 
}
úú 
override
≤≤ 

public
≤≤ 
void
≤≤  
ResetConfiguration
≤≤ )
(
≤≤) *
)
≤≤* +
{
≥≥ 
Root
¥¥ 
.
¥¥ 
Level
¥¥ 
=
¥¥ 
LevelMap
¥¥ 
.
¥¥ 
LookupWithDefault
¥¥ *
(
¥¥* +
Level
¥¥+ 0
.
¥¥0 1
Debug
¥¥1 6
)
¥¥6 7
;
¥¥7 8
	Threshold
µµ 
=
µµ 
LevelMap
µµ 
.
µµ 
LookupWithDefault
µµ )
(
µµ) *
Level
µµ* /
.
µµ/ 0
All
µµ0 3
)
µµ3 4
;
µµ4 5
lock
∏∏ 
(
∏∏ 
m_ht
∏∏ 
)
∏∏ 
{
ππ 
Shutdown
∫∫ 
(
∫∫ 
)
∫∫ 
;
∫∫ 
foreach
ºº 
(
ºº 
Logger
ºº 
l
ºº 
in
ºº 
this
ºº 
.
ºº 
GetCurrentLoggers
ºº .
(
ºº. /
)
ºº/ 0
)
ºº0 1
{
ΩΩ 
l
ææ 
.
ææ 
Level
ææ 
=
ææ 
null
ææ 
;
ææ 
l
øø 
.
øø 

Additivity
øø 
=
øø 
true
øø 
;
øø 
}
¿¿ 
}
¡¡ 
base
√√ 
.
√√  
ResetConfiguration
√√ 
(
√√ 
)
√√ 
;
√√ $
OnConfigurationChanged
∆∆ 
(
∆∆ 
null
∆∆ 
)
∆∆ 
;
∆∆  
}
«« 
override
ŸŸ 

public
ŸŸ 
void
ŸŸ 
Log
ŸŸ 
(
ŸŸ 
LoggingEvent
ŸŸ '
logEvent
ŸŸ( 0
)
ŸŸ0 1
{
⁄⁄ 
if
€€ 
(
€€ 
logEvent
€€ 
==
€€ 
null
€€ 
)
€€ 
{
‹‹ 
throw
›› 	
new
››
 #
ArgumentNullException
›› #
(
››# $
$str
››$ .
)
››. /
;
››/ 0
}
ﬁﬁ 
this
‡‡ 
.
‡‡ 
	GetLogger
‡‡ 
(
‡‡ 
logEvent
‡‡ 
.
‡‡ 

LoggerName
‡‡ %
,
‡‡% &
m_defaultFactory
‡‡' 7
)
‡‡7 8
.
‡‡8 9
Log
‡‡9 <
(
‡‡< =
logEvent
‡‡= E
)
‡‡E F
;
‡‡F G
}
·· 
override
ÒÒ 

public
ÒÒ 
Appender
ÒÒ 
.
ÒÒ 
	IAppender
ÒÒ $
[
ÒÒ$ %
]
ÒÒ% &
GetAppenders
ÒÒ' 3
(
ÒÒ3 4
)
ÒÒ4 5
{
ÚÚ 
System
ÛÛ 	
.
ÛÛ	 

Collections
ÛÛ
 
.
ÛÛ 
	ArrayList
ÛÛ 
appenderList
ÛÛ  ,
=
ÛÛ- .
new
ÛÛ/ 2
System
ÛÛ3 9
.
ÛÛ9 :
Collections
ÛÛ: E
.
ÛÛE F
	ArrayList
ÛÛF O
(
ÛÛO P
)
ÛÛP Q
;
ÛÛQ R
CollectAppenders
ıı 
(
ıı 
appenderList
ıı  
,
ıı  !
Root
ıı" &
)
ıı& '
;
ıı' (
foreach
˜˜ 

(
˜˜
 
Logger
˜˜ 
logger
˜˜ 
in
˜˜ 
GetCurrentLoggers
˜˜ -
(
˜˜- .
)
˜˜. /
)
˜˜/ 0
{
¯¯ 
CollectAppenders
˘˘ 
(
˘˘ 
appenderList
˘˘ !
,
˘˘! "
logger
˘˘# )
)
˘˘) *
;
˘˘* +
}
˙˙ 
return
¸¸ 	
(
¸¸
 
Appender
¸¸ 
.
¸¸ 
	IAppender
¸¸ 
[
¸¸ 
]
¸¸ 
)
¸¸  
appenderList
¸¸  ,
.
¸¸, -
ToArray
¸¸- 4
(
¸¸4 5
typeof
¸¸5 ;
(
¸¸; <
Appender
¸¸< D
.
¸¸D E
	IAppender
¸¸E N
)
¸¸N O
)
¸¸O P
;
¸¸P Q
}
˝˝ 
private
ââ 	
static
ââ
 
void
ââ 
CollectAppender
ââ %
(
ââ% &
System
ââ& ,
.
ââ, -
Collections
ââ- 8
.
ââ8 9
	ArrayList
ââ9 B
appenderList
ââC O
,
ââO P
Appender
ââQ Y
.
ââY Z
	IAppender
ââZ c
appender
ââd l
)
ââl m
{
ää 
if
ãã 
(
ãã 
!
ãã 
appenderList
ãã 
.
ãã 
Contains
ãã 
(
ãã 
appender
ãã &
)
ãã& '
)
ãã' (
{
åå 
appenderList
çç 
.
çç 
Add
çç 
(
çç 
appender
çç 
)
çç 
;
çç !
IAppenderAttachable
èè 
	container
èè !
=
èè" #
appender
èè$ ,
as
èè- /!
IAppenderAttachable
èè0 C
;
èèC D
if
êê 
(
êê 
	container
êê 
!=
êê 
null
êê 
)
êê 
{
ëë 
CollectAppenders
íí 
(
íí 
appenderList
íí "
,
íí" #
	container
íí$ -
)
íí- .
;
íí. /
}
ìì 
}
îî 
}
ïï 
private
úú 	
static
úú
 
void
úú 
CollectAppenders
úú &
(
úú& '
System
úú' -
.
úú- .
Collections
úú. 9
.
úú9 :
	ArrayList
úú: C
appenderList
úúD P
,
úúP Q!
IAppenderAttachable
úúR e
	container
úúf o
)
úúo p
{
ùù 
foreach
ûû 

(
ûû
 
Appender
ûû 
.
ûû 
	IAppender
ûû 
appender
ûû &
in
ûû' )
	container
ûû* 3
.
ûû3 4
	Appenders
ûû4 =
)
ûû= >
{
üü 
CollectAppender
†† 
(
†† 
appenderList
††  
,
††  !
appender
††" *
)
††* +
;
††+ ,
}
°° 
}
¢¢ 	
void
¨¨ *
IBasicRepositoryConfigurator
¨¨ #
.
¨¨# $
	Configure
¨¨$ -
(
¨¨- .
	IAppender
¨¨. 7
appender
¨¨8 @
)
¨¨@ A
{
≠≠ &
BasicRepositoryConfigure
ÆÆ 
(
ÆÆ 
appender
ÆÆ $
)
ÆÆ$ %
;
ÆÆ% &
}
ØØ 
void
µµ *
IBasicRepositoryConfigurator
µµ )
.
µµ) *
	Configure
µµ* 3
(
µµ3 4
params
µµ4 :
	IAppender
µµ; D
[
µµD E
]
µµE F
	appenders
µµG P
)
µµP Q
{
∂∂ 	&
BasicRepositoryConfigure
∑∑ $
(
∑∑$ %
	appenders
∑∑% .
)
∑∑. /
;
∑∑/ 0
}
∏∏ 	
	protected
≈≈ 
void
≈≈ &
BasicRepositoryConfigure
≈≈ )
(
≈≈) *
params
≈≈* 0
	IAppender
≈≈1 :
[
≈≈: ;
]
≈≈; <
	appenders
≈≈= F
)
≈≈F G
{
∆∆ 
	ArrayList
«« #
configurationMessages
«« +
=
««, -
new
««. 1
	ArrayList
««2 ;
(
««; <
)
««< =
;
««= >
using
…… 
(
…… 
new
…… 
LogLog
…… 
.
……  
LogReceivedAdapter
…… 0
(
……0 1#
configurationMessages
……1 F
)
……F G
)
……G H
{
   
foreach
ÀÀ 
(
ÀÀ 
	IAppender
ÀÀ "
appender
ÀÀ# +
in
ÀÀ, .
	appenders
ÀÀ/ 8
)
ÀÀ8 9
{
ÃÃ 
Root
ÕÕ 
.
ÕÕ 
AddAppender
ÕÕ $
(
ÕÕ$ %
appender
ÕÕ% -
)
ÕÕ- .
;
ÕÕ. /
}
ŒŒ 
}
œœ 

Configured
—— 
=
—— 
true
—— 
;
—— #
ConfigurationMessages
”” !
=
””" ##
configurationMessages
””$ 9
;
””9 :$
OnConfigurationChanged
÷÷ "
(
÷÷" #
new
÷÷# &+
ConfigurationChangedEventArgs
÷÷' D
(
÷÷D E#
configurationMessages
÷÷E Z
)
÷÷Z [
)
÷÷[ \
;
÷÷\ ]
}
◊◊ 
void
·· (
IXmlRepositoryConfigurator
·· !
.
··! "
	Configure
··" +
(
··+ ,
System
··, 2
.
··2 3
Xml
··3 6
.
··6 7

XmlElement
··7 A
element
··B I
)
··I J
{
‚‚ $
XmlRepositoryConfigure
„„ 
(
„„ 
element
„„ !
)
„„! "
;
„„" #
}
‰‰ 
	protected
ÒÒ 
void
ÒÒ $
XmlRepositoryConfigure
ÒÒ '
(
ÒÒ' (
System
ÒÒ( .
.
ÒÒ. /
Xml
ÒÒ/ 2
.
ÒÒ2 3

XmlElement
ÒÒ3 =
element
ÒÒ> E
)
ÒÒE F
{
ÚÚ 
	ArrayList
ÛÛ #
configurationMessages
ÛÛ +
=
ÛÛ, -
new
ÛÛ. 1
	ArrayList
ÛÛ2 ;
(
ÛÛ; <
)
ÛÛ< =
;
ÛÛ= >
using
ıı 
(
ıı 
new
ıı 
LogLog
ıı 
.
ıı  
LogReceivedAdapter
ıı 0
(
ıı0 1#
configurationMessages
ıı1 F
)
ııF G
)
ııG H
{
ˆˆ &
XmlHierarchyConfigurator
˜˜
 "
config
˜˜# )
=
˜˜* +
new
˜˜, /&
XmlHierarchyConfigurator
˜˜0 H
(
˜˜H I
this
˜˜I M
)
˜˜M N
;
˜˜N O
config
¯¯ 
.
¯¯ 
	Configure
¯¯  
(
¯¯  !
element
¯¯! (
)
¯¯( )
;
¯¯) *
}
˘˘ 

Configured
˚˚ 
=
˚˚ 
true
˚˚ 
;
˚˚ #
ConfigurationMessages
˝˝ !
=
˝˝" ##
configurationMessages
˝˝$ 9
;
˝˝9 :$
OnConfigurationChanged
ÄÄ "
(
ÄÄ" #
new
ÄÄ# &+
ConfigurationChangedEventArgs
ÄÄ' D
(
ÄÄD E#
configurationMessages
ÄÄE Z
)
ÄÄZ [
)
ÄÄ[ \
;
ÄÄ\ ]
}
ÅÅ 
public
úú 
bool
úú	 

IsDisabled
úú 
(
úú 
Level
úú 
level
úú $
)
úú$ %
{
ùù 
if
üü 
(
üü 
(
üü 
object
üü 
)
üü 
level
üü 
==
üü 
null
üü 
)
üü 
{
†† 
throw
°° 	
new
°°
 #
ArgumentNullException
°° #
(
°°# $
$str
°°$ +
)
°°+ ,
;
°°, -
}
¢¢ 
if
§§ 
(
§§ 

Configured
§§ 
)
§§ 
{
•• 
return
¶¶ 

	Threshold
¶¶ 
>
¶¶ 
level
¶¶ 
;
¶¶ 
}
ßß 
else
®® 
{
©© 
return
´´ 

true
´´ 
;
´´ 
}
¨¨ 
}
≠≠ 
public
ΩΩ 
void
ΩΩ	 
Clear
ΩΩ 
(
ΩΩ 
)
ΩΩ 
{
ææ 
lock
øø 
(
øø 
m_ht
øø 
)
øø 
{
¿¿ 
m_ht
¡¡ 
.
¡¡ 	
Clear
¡¡	 
(
¡¡ 
)
¡¡ 
;
¡¡ 
}
¬¬ 
}
√√ 
public
‘‘ 
Logger
‘‘	 
	GetLogger
‘‘ 
(
‘‘ 
string
‘‘  
name
‘‘! %
,
‘‘% &
ILoggerFactory
‘‘' 5
factory
‘‘6 =
)
‘‘= >
{
’’ 
if
÷÷ 
(
÷÷ 
name
÷÷ 
==
÷÷ 
null
÷÷ 
)
÷÷ 
{
◊◊ 
throw
ÿÿ 	
new
ÿÿ
 #
ArgumentNullException
ÿÿ #
(
ÿÿ# $
$str
ÿÿ$ *
)
ÿÿ* +
;
ÿÿ+ ,
}
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 
factory
⁄⁄ 
==
⁄⁄ 
null
⁄⁄ 
)
⁄⁄ 
{
€€ 
throw
‹‹ 	
new
‹‹
 #
ArgumentNullException
‹‹ #
(
‹‹# $
$str
‹‹$ -
)
‹‹- .
;
‹‹. /
}
›› 
	LoggerKey
ﬂﬂ 
key
ﬂﬂ 
=
ﬂﬂ 
new
ﬂﬂ 
	LoggerKey
ﬂﬂ  
(
ﬂﬂ  !
name
ﬂﬂ! %
)
ﬂﬂ% &
;
ﬂﬂ& '
lock
ÂÂ 
(
ÂÂ 
m_ht
ÂÂ 
)
ÂÂ 
{
ÊÊ 
Logger
ÁÁ 

logger
ÁÁ 
=
ÁÁ 
null
ÁÁ 
;
ÁÁ 
Object
ÈÈ 

node
ÈÈ 
=
ÈÈ 
m_ht
ÈÈ 
[
ÈÈ 
key
ÈÈ 
]
ÈÈ 
;
ÈÈ 
if
ÍÍ 
(
ÍÍ 
node
ÍÍ 
==
ÍÍ 
null
ÍÍ 
)
ÍÍ 
{
ÎÎ 
logger
ÏÏ 
=
ÏÏ 
factory
ÏÏ 
.
ÏÏ 
CreateLogger
ÏÏ "
(
ÏÏ" #
this
ÏÏ# '
,
ÏÏ' (
name
ÏÏ) -
)
ÏÏ- .
;
ÏÏ. /
logger
ÌÌ 
.
ÌÌ 
	Hierarchy
ÌÌ 
=
ÌÌ 
this
ÌÌ 
;
ÌÌ 
m_ht
ÓÓ 	
[
ÓÓ	 

key
ÓÓ
 
]
ÓÓ 
=
ÓÓ 
logger
ÓÓ 
;
ÓÓ 
UpdateParents
ÔÔ 
(
ÔÔ 
logger
ÔÔ 
)
ÔÔ 
;
ÔÔ #
OnLoggerCreationEvent
 
(
 
logger
 !
)
! "
;
" #
return
ÒÒ 
logger
ÒÒ 
;
ÒÒ 
}
ÚÚ 
Logger
ÙÙ 


nodeLogger
ÙÙ 
=
ÙÙ 
node
ÙÙ 
as
ÙÙ 
Logger
ÙÙ  &
;
ÙÙ& '
if
ıı 
(
ıı 

nodeLogger
ıı 
!=
ıı 
null
ıı 
)
ıı 
{
ˆˆ 
return
˜˜ 

nodeLogger
˜˜ 
;
˜˜ 
}
¯¯ 
ProvisionNode
˙˙ 
nodeProvisionNode
˙˙ #
=
˙˙$ %
node
˙˙& *
as
˙˙+ -
ProvisionNode
˙˙. ;
;
˙˙; <
if
˚˚ 
(
˚˚ 
nodeProvisionNode
˚˚ 
!=
˚˚ 
null
˚˚ !
)
˚˚! "
{
¸¸ 
logger
˝˝ 
=
˝˝ 
factory
˝˝ 
.
˝˝ 
CreateLogger
˝˝ "
(
˝˝" #
this
˝˝# '
,
˝˝' (
name
˝˝) -
)
˝˝- .
;
˝˝. /
logger
˛˛ 
.
˛˛ 
	Hierarchy
˛˛ 
=
˛˛ 
this
˛˛ 
;
˛˛ 
m_ht
ˇˇ 	
[
ˇˇ	 

key
ˇˇ
 
]
ˇˇ 
=
ˇˇ 
logger
ˇˇ 
;
ˇˇ 
UpdateChildren
ÄÄ 
(
ÄÄ 
nodeProvisionNode
ÄÄ %
,
ÄÄ% &
logger
ÄÄ' -
)
ÄÄ- .
;
ÄÄ. /
UpdateParents
ÅÅ 
(
ÅÅ 
logger
ÅÅ 
)
ÅÅ 
;
ÅÅ #
OnLoggerCreationEvent
ÇÇ 
(
ÇÇ 
logger
ÇÇ !
)
ÇÇ! "
;
ÇÇ" #
return
ÉÉ 
logger
ÉÉ 
;
ÉÉ 
}
ÑÑ 
return
áá 

null
áá 
;
áá 
}
àà 
}
ââ 
	protected
ññ 
virtual
ññ 
void
ññ #
OnLoggerCreationEvent
ññ .
(
ññ. /
Logger
ññ/ 5
logger
ññ6 <
)
ññ< =
{
óó (
LoggerCreationEventHandler
òò 
handler
òò %
=
òò& '"
m_loggerCreatedEvent
òò( <
;
òò< =
if
ôô 
(
ôô 
handler
ôô 
!=
ôô 
null
ôô 
)
ôô 
{
öö 
handler
õõ 
(
õõ 
this
õõ 
,
õõ 
new
õõ %
LoggerCreationEventArgs
õõ -
(
õõ- .
logger
õõ. 4
)
õõ4 5
)
õõ5 6
;
õõ6 7
}
úú 
}
ùù 
private
∆∆ 	
void
∆∆
 
UpdateParents
∆∆ 
(
∆∆ 
Logger
∆∆ #
log
∆∆$ '
)
∆∆' (
{
«« 
string
»» 	
name
»»
 
=
»» 
log
»» 
.
»» 
Name
»» 
;
»» 
int
…… 
length
…… 
=
…… 
name
…… 
.
…… 
Length
…… 
;
…… 
bool
   
parentFound
   
=
   
false
   
;
   
for
ÕÕ 
(
ÕÕ 
int
ÕÕ 

i
ÕÕ 
=
ÕÕ 
name
ÕÕ 
.
ÕÕ 
LastIndexOf
ÕÕ 
(
ÕÕ  
$char
ÕÕ  #
,
ÕÕ# $
length
ÕÕ% +
-
ÕÕ+ ,
$num
ÕÕ, -
)
ÕÕ- .
;
ÕÕ. /
i
ÕÕ0 1
>=
ÕÕ2 4
$num
ÕÕ5 6
;
ÕÕ6 7
i
ÕÕ8 9
=
ÕÕ: ;
name
ÕÕ< @
.
ÕÕ@ A
LastIndexOf
ÕÕA L
(
ÕÕL M
$char
ÕÕM P
,
ÕÕP Q
i
ÕÕR S
-
ÕÕS T
$num
ÕÕT U
)
ÕÕU V
)
ÕÕV W
{
ŒŒ 
string
œœ 

substr
œœ 
=
œœ 
name
œœ 
.
œœ 
	Substring
œœ "
(
œœ" #
$num
œœ# $
,
œœ$ %
i
œœ& '
)
œœ' (
;
œœ( )
	LoggerKey
—— 
key
—— 
=
—— 
new
—— 
	LoggerKey
—— !
(
——! "
substr
——" (
)
——( )
;
——) *
Object
““ 

node
““ 
=
““ 
m_ht
““ 
[
““ 
key
““ 
]
““ 
;
““ 
if
‘‘ 
(
‘‘ 
node
‘‘ 
==
‘‘ 
null
‘‘ 
)
‘‘ 
{
’’ 
ProvisionNode
÷÷ 
pn
÷÷ 
=
÷÷ 
new
÷÷ 
ProvisionNode
÷÷ )
(
÷÷) *
log
÷÷* -
)
÷÷- .
;
÷÷. /
m_ht
◊◊ 	
[
◊◊	 

key
◊◊
 
]
◊◊ 
=
◊◊ 
pn
◊◊ 
;
◊◊ 
}
ÿÿ 
else
ŸŸ 
{
⁄⁄ 
Logger
€€ 

nodeLogger
€€ 
=
€€ 
node
€€ 
as
€€  
Logger
€€! '
;
€€' (
if
‹‹ 
(
‹‹ 	

nodeLogger
‹‹	 
!=
‹‹ 
null
‹‹ 
)
‹‹ 
{
›› 
parentFound
ﬁﬁ 
=
ﬁﬁ 
true
ﬁﬁ 
;
ﬁﬁ 
log
ﬂﬂ 	
.
ﬂﬂ	 

Parent
ﬂﬂ
 
=
ﬂﬂ 

nodeLogger
ﬂﬂ 
;
ﬂﬂ 
break
‡‡ 
;
‡‡ 
}
·· 
else
‚‚ 	
{
„„ 
ProvisionNode
‰‰ 
nodeProvisionNode
‰‰ %
=
‰‰& '
node
‰‰( ,
as
‰‰- /
ProvisionNode
‰‰0 =
;
‰‰= >
if
ÂÂ 
(
ÂÂ	 

nodeProvisionNode
ÂÂ
 
!=
ÂÂ 
null
ÂÂ #
)
ÂÂ# $
{
ÊÊ 
nodeProvisionNode
ÁÁ 
.
ÁÁ 
Add
ÁÁ 
(
ÁÁ 
log
ÁÁ  
)
ÁÁ  !
;
ÁÁ! "
}
ËË 
else
ÈÈ 

{
ÍÍ 
LogLog
ÎÎ 
.
ÎÎ 
Error
ÎÎ 
(
ÎÎ 
declaringType
ÎÎ !
,
ÎÎ! "
$str
ÎÎ# =
+
ÎÎ= >
node
ÎÎ> B
.
ÎÎB C
GetType
ÎÎC J
(
ÎÎJ K
)
ÎÎK L
+
ÎÎL M
$str
ÎÎM W
,
ÎÎW X
new
ÎÎY \
LogException
ÎÎ] i
(
ÎÎi j
)
ÎÎj k
)
ÎÎk l
;
ÎÎl m
}
ÏÏ 
}
ÌÌ 
}
ÓÓ 
if
ÔÔ 
(
ÔÔ 
i
ÔÔ 	
==
ÔÔ
 
$num
ÔÔ 
)
ÔÔ 
{
ÔÔ 
break
ÚÚ 
;
ÚÚ 
}
ÛÛ 
}
ÙÙ 
if
˜˜ 
(
˜˜ 
!
˜˜ 
parentFound
˜˜ 
)
˜˜ 
{
¯¯ 
log
˘˘ 
.
˘˘ 
Parent
˘˘ 
=
˘˘ 
this
˘˘ 
.
˘˘ 
Root
˘˘ 
;
˘˘ 
}
˙˙ 
}
˚˚ 
private
ïï 	
static
ïï
 
void
ïï 
UpdateChildren
ïï $
(
ïï$ %
ProvisionNode
ïï% 2
pn
ïï3 5
,
ïï5 6
Logger
ïï7 =
log
ïï> A
)
ïïA B
{
ññ 
for
óó 
(
óó 
int
óó 

i
óó 
=
óó 
$num
óó 
;
óó 
i
óó 
<
óó 
pn
óó 
.
óó 
Count
óó 
;
óó 
i
óó  !
++
óó! #
)
óó# $
{
òò 
Logger
ôô 

childLogger
ôô 
=
ôô 
(
ôô 
Logger
ôô  
)
ôô  !
pn
ôô! #
[
ôô# $
i
ôô$ %
]
ôô% &
;
ôô& '
if
ùù 
(
ùù 
!
ùù 	
childLogger
ùù	 
.
ùù 
Parent
ùù 
.
ùù 
Name
ùù  
.
ùù  !

StartsWith
ùù! +
(
ùù+ ,
log
ùù, /
.
ùù/ 0
Name
ùù0 4
)
ùù4 5
)
ùù5 6
{
ûû 
log
üü 
.
üü 	
Parent
üü	 
=
üü 
childLogger
üü 
.
üü 
Parent
üü $
;
üü$ %
childLogger
†† 
.
†† 
Parent
†† 
=
†† 
log
†† 
;
†† 
}
°° 
}
¢¢ 
}
££ 
internal
±± 

void
±± 
AddLevel
±± 
(
±± 

LevelEntry
±± #

levelEntry
±±$ .
)
±±. /
{
≤≤ 
if
≥≥ 
(
≥≥ 

levelEntry
≥≥ 
==
≥≥ 
null
≥≥ 
)
≥≥ 
throw
≥≥  
new
≥≥! $#
ArgumentNullException
≥≥% :
(
≥≥: ;
$str
≥≥; G
)
≥≥G H
;
≥≥H I
if
¥¥ 
(
¥¥ 

levelEntry
¥¥ 
.
¥¥ 
Name
¥¥ 
==
¥¥ 
null
¥¥ 
)
¥¥ 
throw
¥¥  %
new
¥¥& )#
ArgumentNullException
¥¥* ?
(
¥¥? @
$str
¥¥@ Q
)
¥¥Q R
;
¥¥R S
if
∑∑ 
(
∑∑ 

levelEntry
∑∑ 
.
∑∑ 
Value
∑∑ 
==
∑∑ 
-
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
Level
ππ 	
previousLevel
ππ
 
=
ππ 
LevelMap
ππ "
[
ππ" #

levelEntry
ππ# -
.
ππ- .
Name
ππ. 2
]
ππ2 3
;
ππ3 4
if
∫∫ 
(
∫∫ 
previousLevel
∫∫ 
==
∫∫ 
null
∫∫ 
)
∫∫ 
{
ªª 
throw
ºº 

new
ºº '
InvalidOperationException
ºº (
(
ºº( )
$str
ºº) B
+
ººB C

levelEntry
ººC M
.
ººM N
Name
ººN R
+
ººR S
$strººS ≠
)ºº≠ Æ
;ººÆ Ø
}
ΩΩ 

levelEntry
øø 
.
øø 
Value
øø 
=
øø 
previousLevel
øø $
.
øø$ %
Value
øø% *
;
øø* +
}
¿¿ 
LevelMap
¬¬ 
.
¬¬ 
Add
¬¬ 
(
¬¬ 

levelEntry
¬¬ 
.
¬¬ 
Name
¬¬ 
,
¬¬  

levelEntry
¬¬! +
.
¬¬+ ,
Value
¬¬, 1
,
¬¬1 2

levelEntry
¬¬3 =
.
¬¬= >
DisplayName
¬¬> I
)
¬¬I J
;
¬¬J K
}
√√ 
internal
ÕÕ 

class
ÕÕ 

LevelEntry
ÕÕ 
{
ŒŒ 
private
œœ 

int
œœ 
m_levelValue
œœ 
=
œœ 
-
œœ 
$num
œœ  
;
œœ  !
private
–– 

string
–– 
m_levelName
–– 
=
–– 
null
––  $
;
––$ %
private
—— 

string
——  
m_levelDisplayName
—— $
=
——% &
null
——' +
;
——+ ,
public
‹‹ 	
int
‹‹
 
Value
‹‹ 
{
›› 
get
ﬁﬁ 
{
ﬁﬁ 	
return
ﬁﬁ
 
m_levelValue
ﬁﬁ 
;
ﬁﬁ 
}
ﬁﬁ  
set
ﬂﬂ 
{
ﬂﬂ 	
m_levelValue
ﬂﬂ
 
=
ﬂﬂ 
value
ﬂﬂ 
;
ﬂﬂ 
}
ﬂﬂ  !
}
‡‡ 
public
ÌÌ 	
string
ÌÌ
 
Name
ÌÌ 
{
ÓÓ 
get
ÔÔ 
{
ÔÔ 	
return
ÔÔ
 
m_levelName
ÔÔ 
;
ÔÔ 
}
ÔÔ 
set
 
{
 	
m_levelName

 
=
 
value
 
;
 
}
  
}
ÒÒ 
public
˛˛ 	
string
˛˛
 
DisplayName
˛˛ 
{
ˇˇ 
get
ÄÄ 
{
ÄÄ 	
return
ÄÄ
  
m_levelDisplayName
ÄÄ #
;
ÄÄ# $
}
ÄÄ% &
set
ÅÅ 
{
ÅÅ 	 
m_levelDisplayName
ÅÅ
 
=
ÅÅ 
value
ÅÅ $
;
ÅÅ$ %
}
ÅÅ& '
}
ÇÇ 
public
àà 	
override
àà
 
string
àà 
ToString
àà "
(
àà" #
)
àà# $
{
ââ 
return
ää 

$str
ää 
+
ää 
m_levelValue
ää +
+
ää+ ,
$str
ää, 5
+
ää5 6
m_levelName
ää6 A
+
ääA B
$str
ääB R
+
ääR S 
m_levelDisplayName
ääS e
+
ääe f
$str
ääf i
;
ääi j
}
ãã 
}
åå 
internal
öö 

void
öö 
AddProperty
öö 
(
öö 
PropertyEntry
öö )
propertyEntry
öö* 7
)
öö7 8
{
õõ 
if
úú 
(
úú 
propertyEntry
úú 
==
úú 
null
úú 
)
úú 
throw
úú #
new
úú$ '#
ArgumentNullException
úú( =
(
úú= >
$str
úú> M
)
úúM N
;
úúN O
if
ùù 
(
ùù 
propertyEntry
ùù 
.
ùù 
Key
ùù 
==
ùù 
null
ùù  
)
ùù  !
throw
ùù" '
new
ùù( +#
ArgumentNullException
ùù, A
(
ùùA B
$str
ùùB U
)
ùùU V
;
ùùV W

Properties
üü 
[
üü 
propertyEntry
üü 
.
üü 
Key
üü 
]
üü  
=
üü! "
propertyEntry
üü# 0
.
üü0 1
Value
üü1 6
;
üü6 7
}
†† 
private
¶¶ 	
ILoggerFactory
¶¶
 
m_defaultFactory
¶¶ )
;
¶¶) *
private
®® 	
System
®®
 
.
®® 
Collections
®® 
.
®® 
	Hashtable
®® &
m_ht
®®' +
;
®®+ ,
private
©© 	
Logger
©©
 
m_root
©© 
;
©© 
private
´´ 	
bool
´´
 (
m_emittedNoAppenderWarning
´´ )
=
´´* +
false
´´, 1
;
´´1 2
private
≠≠ 
event
≠≠ (
LoggerCreationEventHandler
≠≠ -"
m_loggerCreatedEvent
≠≠. B
;
≠≠B C
private
∫∫ 
readonly
∫∫ 
static
∫∫ 
Type
∫∫ !
declaringType
∫∫" /
=
∫∫0 1
typeof
∫∫2 8
(
∫∫8 9
	Hierarchy
∫∫9 B
)
∫∫B C
;
∫∫C D
}
ΩΩ 
}ææ ç
NC:\sonarqube\projects\log4net-2.0.7\src\Repository\Hierarchy\ILoggerFactory.cs
	namespace 	
log4net
 
. 

Repository 
. 
	Hierarchy &
{ 
public(( 
	interface(( 
ILoggerFactory((  
{)) 
Logger>> 
CreateLogger>>	 
(>> 
ILoggerRepository>> '

repository>>( 2
,>>2 3
string>>4 :
name>>; ?
)>>? @
;>>@ A
}?? 
}@@ úµ
FC:\sonarqube\projects\log4net-2.0.7\src\Repository\Hierarchy\Logger.cs
	namespace 	
log4net
 
. 

Repository 
. 
	Hierarchy &
{ 
public66 
abstract66 
class66 
Logger66 
:66 
IAppenderAttachable66  3
,663 4
ILogger665 <
{77 
	protectedJJ 
LoggerJJ 
(JJ 
stringJJ 
nameJJ 
)JJ 
{KK 
m_namePP 	
=PP
 
stringPP 
.PP 
InternPP 
(PP 
namePP 
)PP 
;PP  
}RR 
virtualdd 	
publicdd
 
Loggerdd 
Parentdd 
{ee 
getff 
{ff 
returnff	 
m_parentff 
;ff 
}ff 
setgg 
{gg 
m_parentgg	 
=gg 
valuegg 
;gg 
}gg 
}hh 
virtual{{ 	
public{{
 
bool{{ 

Additivity{{  
{|| 
get}} 
{}} 
return}}	 

m_additive}} 
;}} 
}}} 
set~~ 
{~~ 

m_additive~~	 
=~~ 
value~~ 
;~~ 
}~~ 
} 
virtual
éé 	
public
éé
 
Level
éé 
EffectiveLevel
éé %
{
èè 
get
êê 
{
ëë 
for
íí 
(
íí 
Logger
íí 
c
íí 
=
íí 
this
íí 
;
íí 
c
íí 
!=
íí 
null
íí "
;
íí" #
c
íí$ %
=
íí& '
c
íí( )
.
íí) *
m_parent
íí* 2
)
íí2 3
{
ìì 
Level
îî 

level
îî 
=
îî 
c
îî 
.
îî 
m_level
îî 
;
îî 
if
óó 
(
óó 	
(
óó	 

object
óó
 
)
óó 
level
óó 
!=
óó 
null
óó 
)
óó 
{
òò 
return
ôô 
level
ôô 
;
ôô 
}
öö 
}
õõ 
return
úú 

null
úú 
;
úú 
}
ùù 
}
ûû 
virtual
™™ 	
public
™™
 
	Hierarchy
™™ 
	Hierarchy
™™ $
{
´´ 
get
¨¨ 
{
¨¨ 
return
¨¨	 
m_hierarchy
¨¨ 
;
¨¨ 
}
¨¨ 
set
≠≠ 
{
≠≠ 
m_hierarchy
≠≠	 
=
≠≠ 
value
≠≠ 
;
≠≠ 
}
≠≠ 
}
ÆÆ 
virtual
ªª 	
public
ªª
 
Level
ªª 
Level
ªª 
{
ºº 
get
ΩΩ 
{
ΩΩ 
return
ΩΩ	 
m_level
ΩΩ 
;
ΩΩ 
}
ΩΩ 
set
ææ 
{
ææ 
m_level
ææ	 
=
ææ 
value
ææ 
;
ææ 
}
ææ 
}
øø 
virtual
‘‘ 	
public
‘‘
 
void
‘‘ 
AddAppender
‘‘ !
(
‘‘! "
	IAppender
‘‘" +
newAppender
‘‘, 7
)
‘‘7 8
{
’’ 
if
÷÷ 
(
÷÷ 
newAppender
÷÷ 
==
÷÷ 
null
÷÷ 
)
÷÷ 
{
◊◊ 
throw
ÿÿ 	
new
ÿÿ
 #
ArgumentNullException
ÿÿ #
(
ÿÿ# $
$str
ÿÿ$ 1
)
ÿÿ1 2
;
ÿÿ2 3
}
ŸŸ 
m_appenderLock
€€ 
.
€€ 
AcquireWriterLock
€€ #
(
€€# $
)
€€$ %
;
€€% &
try
‹‹ 
{
›› 
if
ﬁﬁ 
(
ﬁﬁ $
m_appenderAttachedImpl
ﬁﬁ 
==
ﬁﬁ !
null
ﬁﬁ" &
)
ﬁﬁ& '
{
ﬂﬂ $
m_appenderAttachedImpl
‡‡ 
=
‡‡ 
new
‡‡ !
log4net
‡‡" )
.
‡‡) *
Util
‡‡* .
.
‡‡. /"
AppenderAttachedImpl
‡‡/ C
(
‡‡C D
)
‡‡D E
;
‡‡E F
}
·· $
m_appenderAttachedImpl
‚‚ 
.
‚‚ 
AddAppender
‚‚ &
(
‚‚& '
newAppender
‚‚' 2
)
‚‚2 3
;
‚‚3 4
}
„„ 
finally
‰‰ 

{
ÂÂ 
m_appenderLock
ÊÊ 
.
ÊÊ 
ReleaseWriterLock
ÊÊ $
(
ÊÊ$ %
)
ÊÊ% &
;
ÊÊ& '
}
ÁÁ 
}
ËË 
virtual
ˆˆ 	
public
ˆˆ
  
AppenderCollection
ˆˆ #
	Appenders
ˆˆ$ -
{
˜˜ 
get
¯¯ 
{
˘˘ 
m_appenderLock
˙˙ 
.
˙˙ 
AcquireReaderLock
˙˙ $
(
˙˙$ %
)
˙˙% &
;
˙˙& '
try
˚˚ 
{
¸¸ 
if
˝˝ 
(
˝˝ 	$
m_appenderAttachedImpl
˝˝	 
==
˝˝  "
null
˝˝# '
)
˝˝' (
{
˛˛ 
return
ˇˇ  
AppenderCollection
ˇˇ 
.
ˇˇ  
EmptyCollection
ˇˇ  /
;
ˇˇ/ 0
}
ÄÄ 
else
ÅÅ 	
{
ÇÇ 
return
ÉÉ $
m_appenderAttachedImpl
ÉÉ #
.
ÉÉ# $
	Appenders
ÉÉ$ -
;
ÉÉ- .
}
ÑÑ 
}
ÖÖ 
finally
ÜÜ 
{
áá 
m_appenderLock
àà 
.
àà 
ReleaseReaderLock
àà %
(
àà% &
)
àà& '
;
àà' (
}
ââ 
}
ää 
}
ãã 
virtual
óó 	
public
óó
 
	IAppender
óó 
GetAppender
óó &
(
óó& '
string
óó' -
name
óó. 2
)
óó2 3
{
òò 
m_appenderLock
ôô 
.
ôô 
AcquireReaderLock
ôô #
(
ôô# $
)
ôô$ %
;
ôô% &
try
öö 
{
õõ 
if
úú 
(
úú $
m_appenderAttachedImpl
úú 
==
úú !
null
úú" &
||
úú' )
name
úú* .
==
úú/ 1
null
úú2 6
)
úú6 7
{
ùù 
return
ûû 
null
ûû 
;
ûû 
}
üü 
return
°° 
$
m_appenderAttachedImpl
°° !
.
°°! "
GetAppender
°°" -
(
°°- .
name
°°. 2
)
°°2 3
;
°°3 4
}
¢¢ 
finally
££ 

{
§§ 
m_appenderLock
•• 
.
•• 
ReleaseReaderLock
•• $
(
••$ %
)
••% &
;
••& '
}
¶¶ 
}
ßß 
virtual
¥¥ 	
public
¥¥
 
void
¥¥  
RemoveAllAppenders
¥¥ (
(
¥¥( )
)
¥¥) *
{
µµ 
m_appenderLock
∂∂ 
.
∂∂ 
AcquireWriterLock
∂∂ #
(
∂∂# $
)
∂∂$ %
;
∂∂% &
try
∑∑ 
{
∏∏ 
if
ππ 
(
ππ $
m_appenderAttachedImpl
ππ 
!=
ππ !
null
ππ" &
)
ππ& '
{
∫∫ $
m_appenderAttachedImpl
ªª 
.
ªª  
RemoveAllAppenders
ªª .
(
ªª. /
)
ªª/ 0
;
ªª0 1$
m_appenderAttachedImpl
ºº 
=
ºº 
null
ºº "
;
ºº" #
}
ΩΩ 
}
ææ 
finally
øø 

{
¿¿ 
m_appenderLock
¡¡ 
.
¡¡ 
ReleaseWriterLock
¡¡ $
(
¡¡$ %
)
¡¡% &
;
¡¡& '
}
¬¬ 
}
√√ 
virtual
““ 	
public
““
 
	IAppender
““ 
RemoveAppender
““ )
(
““) *
	IAppender
““* 3
appender
““4 <
)
““< =
{
”” 
m_appenderLock
‘‘ 
.
‘‘ 
AcquireWriterLock
‘‘ #
(
‘‘# $
)
‘‘$ %
;
‘‘% &
try
’’ 
{
÷÷ 
if
◊◊ 
(
◊◊ 
appender
◊◊ 
!=
◊◊ 
null
◊◊ 
&&
◊◊ $
m_appenderAttachedImpl
◊◊ 2
!=
◊◊3 5
null
◊◊6 :
)
◊◊: ;
{
ÿÿ 
return
ŸŸ $
m_appenderAttachedImpl
ŸŸ "
.
ŸŸ" #
RemoveAppender
ŸŸ# 1
(
ŸŸ1 2
appender
ŸŸ2 :
)
ŸŸ: ;
;
ŸŸ; <
}
⁄⁄ 
}
€€ 
finally
‹‹ 

{
›› 
m_appenderLock
ﬁﬁ 
.
ﬁﬁ 
ReleaseWriterLock
ﬁﬁ $
(
ﬁﬁ$ %
)
ﬁﬁ% &
;
ﬁﬁ& '
}
ﬂﬂ 
return
‡‡ 	
null
‡‡
 
;
‡‡ 
}
·· 
virtual
 	
public

 
	IAppender
 
RemoveAppender
 )
(
) *
string
* 0
name
1 5
)
5 6
{
ÒÒ 
m_appenderLock
ÚÚ 
.
ÚÚ 
AcquireWriterLock
ÚÚ #
(
ÚÚ# $
)
ÚÚ$ %
;
ÚÚ% &
try
ÛÛ 
{
ÙÙ 
if
ıı 
(
ıı 
name
ıı 
!=
ıı 
null
ıı 
&&
ıı $
m_appenderAttachedImpl
ıı .
!=
ıı/ 1
null
ıı2 6
)
ıı6 7
{
ˆˆ 
return
˜˜ $
m_appenderAttachedImpl
˜˜ "
.
˜˜" #
RemoveAppender
˜˜# 1
(
˜˜1 2
name
˜˜2 6
)
˜˜6 7
;
˜˜7 8
}
¯¯ 
}
˘˘ 
finally
˙˙ 

{
˚˚ 
m_appenderLock
¸¸ 
.
¸¸ 
ReleaseWriterLock
¸¸ $
(
¸¸$ %
)
¸¸% &
;
¸¸& '
}
˝˝ 
return
˛˛ 	
null
˛˛
 
;
˛˛ 
}
ˇˇ 
virtual
êê 	
public
êê
 
string
êê 
Name
êê 
{
ëë 
get
íí 
{
íí 
return
íí	 
m_name
íí 
;
íí 
}
íí 
}
ìì 
virtual
¶¶ 	
public
¶¶
 
void
¶¶ 
Log
¶¶ 
(
¶¶ 
Type
¶¶ .
 callerStackBoundaryDeclaringType
¶¶ ?
,
¶¶? @
Level
¶¶A F
level
¶¶G L
,
¶¶L M
object
¶¶N T
message
¶¶U \
,
¶¶\ ]
	Exception
¶¶^ g
	exception
¶¶h q
)
¶¶q r
{
ßß 
try
®® 
{
©© 
if
™™ 
(
™™ 
IsEnabledFor
™™ 
(
™™ 
level
™™ 
)
™™ 
)
™™ 
{
´´ 
	ForcedLog
¨¨ 
(
¨¨ 
(
¨¨ .
 callerStackBoundaryDeclaringType
¨¨ ?
!=
¨¨@ B
null
¨¨C G
)
¨¨G H
?
¨¨I J.
 callerStackBoundaryDeclaringType
¨¨K k
:
¨¨l m
declaringType
¨¨n {
,
¨¨{ |
level¨¨} Ç
,¨¨Ç É
message¨¨Ñ ã
,¨¨ã å
	exception¨¨ç ñ
)¨¨ñ ó
;¨¨ó ò
}
≠≠ 
}
ÆÆ 
catch
ØØ 
(
ØØ	 

	Exception
ØØ
 
ex
ØØ 
)
ØØ 
{
∞∞ 
log4net
±± 
.
±± 
Util
±± 
.
±± 
LogLog
±± 
.
±± 
Error
±± 
(
±± 
declaringType
±± +
,
±±+ ,
$str
±±- F
,
±±F G
ex
±±H J
)
±±J K
;
±±K L
}
≤≤ 
}
ππ 
virtual
»» 	
public
»»
 
void
»» 
Log
»» 
(
»» 
LoggingEvent
»» &
logEvent
»»' /
)
»»/ 0
{
…… 
try
   
{
ÀÀ 
if
ÃÃ 
(
ÃÃ 
logEvent
ÃÃ 
!=
ÃÃ 
null
ÃÃ 
)
ÃÃ 
{
ÕÕ 
if
ŒŒ 
(
ŒŒ 	
IsEnabledFor
ŒŒ	 
(
ŒŒ 
logEvent
ŒŒ 
.
ŒŒ 
Level
ŒŒ $
)
ŒŒ$ %
)
ŒŒ% &
{
œœ 
	ForcedLog
–– 
(
–– 
logEvent
–– 
)
–– 
;
–– 
}
—— 
}
““ 
}
”” 
catch
‘‘ 
(
‘‘	 

	Exception
‘‘
 
ex
‘‘ 
)
‘‘ 
{
’’ 
log4net
÷÷ 
.
÷÷ 
Util
÷÷ 
.
÷÷ 
LogLog
÷÷ 
.
÷÷ 
Error
÷÷ 
(
÷÷ 
declaringType
÷÷ +
,
÷÷+ ,
$str
÷÷- F
,
÷÷F G
ex
÷÷H J
)
÷÷J K
;
÷÷K L
}
◊◊ 
}
ﬁﬁ 
virtual
ÔÔ 	
public
ÔÔ
 
bool
ÔÔ 
IsEnabledFor
ÔÔ "
(
ÔÔ" #
Level
ÔÔ# (
level
ÔÔ) .
)
ÔÔ. /
{
 
try
ÒÒ 
{
ÚÚ 
if
ÛÛ 
(
ÛÛ 
level
ÛÛ 
!=
ÛÛ 
null
ÛÛ 
)
ÛÛ 
{
ÙÙ 
if
ıı 
(
ıı 	
m_hierarchy
ıı	 
.
ıı 

IsDisabled
ıı 
(
ıı  
level
ıı  %
)
ıı% &
)
ıı& '
{
ˆˆ 
return
˜˜ 
false
˜˜ 
;
˜˜ 
}
¯¯ 
return
˘˘ 
level
˘˘ 
>=
˘˘ 
this
˘˘ 
.
˘˘ 
EffectiveLevel
˘˘ (
;
˘˘( )
}
˙˙ 
}
˚˚ 
catch
¸¸ 
(
¸¸	 

	Exception
¸¸
 
ex
¸¸ 
)
¸¸ 
{
˝˝ 
log4net
˛˛ 
.
˛˛ 
Util
˛˛ 
.
˛˛ 
LogLog
˛˛ 
.
˛˛ 
Error
˛˛ 
(
˛˛ 
declaringType
˛˛ +
,
˛˛+ ,
$str
˛˛- F
,
˛˛F G
ex
˛˛H J
)
˛˛J K
;
˛˛K L
}
ˇˇ 
return
ÜÜ 	
false
ÜÜ
 
;
ÜÜ 
}
áá 
public
ññ 
ILoggerRepository
ññ	 

Repository
ññ %
{
óó 
get
òò 
{
òò 
return
òò	 
m_hierarchy
òò 
;
òò 
}
òò 
}
ôô 
virtual
≠≠ 	
	protected
≠≠
 
void
≠≠ 
CallAppenders
≠≠ &
(
≠≠& '
LoggingEvent
≠≠' 3
loggingEvent
≠≠4 @
)
≠≠@ A
{
ÆÆ 
if
ØØ 
(
ØØ 
loggingEvent
ØØ 
==
ØØ 
null
ØØ 
)
ØØ 
{
∞∞ 
throw
±± 	
new
±±
 #
ArgumentNullException
±± #
(
±±# $
$str
±±$ 2
)
±±2 3
;
±±3 4
}
≤≤ 
int
¥¥ 
writes
¥¥ 
=
¥¥ 
$num
¥¥ 
;
¥¥ 
for
∂∂ 
(
∂∂ 
Logger
∂∂ 
c
∂∂ 
=
∂∂ 
this
∂∂ 
;
∂∂ 
c
∂∂ 
!=
∂∂ 
null
∂∂ 
;
∂∂  
c
∂∂! "
=
∂∂" #
c
∂∂# $
.
∂∂$ %
m_parent
∂∂% -
)
∂∂- .
{
∑∑ 
if
∏∏ 
(
∏∏ 
c
∏∏ 	
.
∏∏	 
$
m_appenderAttachedImpl
∏∏
  
!=
∏∏! #
null
∏∏$ (
)
∏∏( )
{
ππ 
c
ªª 
.
ªª 
m_appenderLock
ªª 
.
ªª 
AcquireReaderLock
ªª '
(
ªª' (
)
ªª( )
;
ªª) *
try
ºº 
{
ΩΩ 
if
ææ 
(
ææ	 

c
ææ
 
.
ææ $
m_appenderAttachedImpl
ææ "
!=
ææ# %
null
ææ& *
)
ææ* +
{
øø 
writes
¿¿ 
+=
¿¿ 
c
¿¿ 
.
¿¿ $
m_appenderAttachedImpl
¿¿ )
.
¿¿) *#
AppendLoopOnAppenders
¿¿* ?
(
¿¿? @
loggingEvent
¿¿@ L
)
¿¿L M
;
¿¿M N
}
¡¡ 
}
¬¬ 
finally
√√ 
{
ƒƒ 
c
≈≈ 
.
≈≈ 
m_appenderLock
≈≈ 
.
≈≈ 
ReleaseReaderLock
≈≈ (
(
≈≈( )
)
≈≈) *
;
≈≈* +
}
∆∆ 
}
«« 
if
…… 
(
…… 
!
…… 	
c
……	 

.
……
 

m_additive
…… 
)
…… 
{
   
break
ÀÀ 

;
ÀÀ
 
}
ÃÃ 
}
ÕÕ 
if
ÿÿ 
(
ÿÿ 
!
ÿÿ 
m_hierarchy
ÿÿ 
.
ÿÿ &
EmittedNoAppenderWarning
ÿÿ ,
&&
ÿÿ- /
writes
ÿÿ0 6
==
ÿÿ7 9
$num
ÿÿ: ;
)
ÿÿ; <
{
ŸŸ 
m_hierarchy
⁄⁄ 
.
⁄⁄ &
EmittedNoAppenderWarning
⁄⁄ (
=
⁄⁄) *
true
⁄⁄+ /
;
⁄⁄/ 0
LogLog
€€ 

.
€€
 
Debug
€€ 
(
€€ 
declaringType
€€ 
,
€€ 
$str
€€  J
+
€€K L
Name
€€M Q
+
€€R S
$str
€€T d
+
€€e f

Repository
€€g q
.
€€q r
Name
€€r v
+
€€w x
$str
€€y |
)
€€| }
;
€€} ~
LogLog
‹‹ 

.
‹‹
 
Debug
‹‹ 
(
‹‹ 
declaringType
‹‹ 
,
‹‹ 
$str
‹‹  P
)
‹‹P Q
;
‹‹Q R
try
›› 
{
ﬁﬁ 
LogLog
ﬂﬂ 
.
ﬂﬂ 
Debug
ﬂﬂ 
(
ﬂﬂ 
declaringType
ﬂﬂ 
,
ﬂﬂ  
$str
ﬂﬂ! N
)
ﬂﬂN O
;
ﬂﬂO P
LogLog
‡‡ 
.
‡‡ 
Debug
‡‡ 
(
‡‡ 
declaringType
‡‡ 
,
‡‡  
$str
‡‡! <
+
‡‡= >

SystemInfo
‡‡? I
.
‡‡I J&
ApplicationBaseDirectory
‡‡J b
)
‡‡b c
;
‡‡c d
LogLog
‚‚ 
.
‚‚ 
Debug
‚‚ 
(
‚‚ 
declaringType
‚‚ 
,
‚‚  
$str
‚‚! <
+
‚‚= >
	AppDomain
‚‚? H
.
‚‚H I
CurrentDomain
‚‚I V
.
‚‚V W
FriendlyName
‚‚W c
)
‚‚c d
;
‚‚d e
LogLog
„„ 
.
„„ 
Debug
„„ 
(
„„ 
declaringType
„„ 
,
„„  
$str
„„! <
+
„„= >
	AppDomain
„„? H
.
„„H I
CurrentDomain
„„I V
.
„„V W
DynamicDirectory
„„W g
)
„„g h
;
„„h i
}
ÂÂ 
catch
ÊÊ 	
(
ÊÊ	 

System
ÊÊ
 
.
ÊÊ 
Security
ÊÊ 
.
ÊÊ 
SecurityException
ÊÊ +
)
ÊÊ+ ,
{
ÁÁ 
}
ÈÈ 
}
ÍÍ 
}
ÎÎ 
virtual
ıı 	
public
ıı
 
void
ıı "
CloseNestedAppenders
ıı *
(
ıı* +
)
ıı+ ,
{
ˆˆ 
m_appenderLock
˜˜ 
.
˜˜ 
AcquireWriterLock
˜˜ #
(
˜˜# $
)
˜˜$ %
;
˜˜% &
try
¯¯ 
{
˘˘ 
if
˙˙ 
(
˙˙ $
m_appenderAttachedImpl
˙˙ 
!=
˙˙ !
null
˙˙" &
)
˙˙& '
{
˚˚  
AppenderCollection
¸¸ 
	appenders
¸¸ !
=
¸¸" #$
m_appenderAttachedImpl
¸¸$ :
.
¸¸: ;
	Appenders
¸¸; D
;
¸¸D E
foreach
˝˝ 
(
˝˝ 
	IAppender
˝˝ 
appender
˝˝ 
in
˝˝  "
	appenders
˝˝# ,
)
˝˝, -
{
˛˛ 
if
ˇˇ 
(
ˇˇ	 

appender
ˇˇ
 
is
ˇˇ !
IAppenderAttachable
ˇˇ )
)
ˇˇ) *
{
ÄÄ 
appender
ÅÅ 
.
ÅÅ 
Close
ÅÅ 
(
ÅÅ 
)
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 
}
ÖÖ 
finally
ÜÜ 

{
áá 
m_appenderLock
àà 
.
àà 
ReleaseWriterLock
àà $
(
àà$ %
)
àà% &
;
àà& '
}
ââ 
}
ää 
virtual
òò 	
public
òò
 
void
òò 
Log
òò 
(
òò 
Level
òò 
level
òò  %
,
òò% &
object
òò' -
message
òò. 5
,
òò5 6
	Exception
òò7 @
	exception
òòA J
)
òòJ K
{
ôô 
if
öö 
(
öö 
IsEnabledFor
öö 
(
öö 
level
öö 
)
öö 
)
öö 
{
õõ 
	ForcedLog
úú 
(
úú 
declaringType
úú '
,
úú' (
level
úú) .
,
úú. /
message
úú0 7
,
úú7 8
	exception
úú9 B
)
úúB C
;
úúC D
}
ùù 
}
ûû 
virtual
ÆÆ 	
	protected
ÆÆ
 
void
ÆÆ 
	ForcedLog
ÆÆ "
(
ÆÆ" #
Type
ÆÆ# '.
 callerStackBoundaryDeclaringType
ÆÆ( H
,
ÆÆH I
Level
ÆÆJ O
level
ÆÆP U
,
ÆÆU V
object
ÆÆW ]
message
ÆÆ^ e
,
ÆÆe f
	Exception
ÆÆg p
	exception
ÆÆq z
)
ÆÆz {
{
ØØ 
CallAppenders
∞∞ 
(
∞∞ 
new
∞∞ 
LoggingEvent
∞∞ !
(
∞∞! ".
 callerStackBoundaryDeclaringType
∞∞" B
,
∞∞B C
this
∞∞D H
.
∞∞H I
	Hierarchy
∞∞I R
,
∞∞R S
this
∞∞T X
.
∞∞X Y
Name
∞∞Y ]
,
∞∞] ^
level
∞∞_ d
,
∞∞d e
message
∞∞f m
,
∞∞m n
	exception
∞∞o x
)
∞∞x y
)
∞∞y z
;
∞∞z {
}
±± 
virtual
ºº 	
	protected
ºº
 
void
ºº 
	ForcedLog
ºº "
(
ºº" #
LoggingEvent
ºº# /
logEvent
ºº0 8
)
ºº8 9
{
ΩΩ 
logEvent
¡¡ 
.
¡¡ 
EnsureRepository
¡¡ 
(
¡¡ 
this
¡¡ !
.
¡¡! "
	Hierarchy
¡¡" +
)
¡¡+ ,
;
¡¡, -
CallAppenders
√√ 
(
√√ 
logEvent
√√ 
)
√√ 
;
√√ 
}
ƒƒ 
private
ÀÀ 
readonly
ÀÀ 
static
ÀÀ 
Type
ÀÀ  $
declaringType
ÀÀ% 2
=
ÀÀ3 4
typeof
ÀÀ5 ;
(
ÀÀ; <
Logger
ÀÀ< B
)
ÀÀB C
;
ÀÀC D
private
‘‘ 	
readonly
‘‘
 
string
‘‘ 
m_name
‘‘  
;
‘‘  !
private
‡‡ 	
Level
‡‡
 
m_level
‡‡ 
;
‡‡ 
private
ÎÎ 	
Logger
ÎÎ
 
m_parent
ÎÎ 
;
ÎÎ 
private
˜˜ 	
	Hierarchy
˜˜
 
m_hierarchy
˜˜ 
;
˜˜  
private
¸¸ 	
log4net
¸¸
 
.
¸¸ 
Util
¸¸ 
.
¸¸ "
AppenderAttachedImpl
¸¸ +$
m_appenderAttachedImpl
¸¸, B
;
¸¸B C
private
åå 	
bool
åå
 

m_additive
åå 
=
åå 
true
åå  
;
åå  !
private
ëë 	
readonly
ëë
 
ReaderWriterLock
ëë #
m_appenderLock
ëë$ 2
=
ëë3 4
new
ëë5 8
ReaderWriterLock
ëë9 I
(
ëëI J
)
ëëJ K
;
ëëK L
}
îî 
}ïï Ÿ
IC:\sonarqube\projects\log4net-2.0.7\src\Repository\Hierarchy\LoggerKey.cs
	namespace 	
log4net
 
. 

Repository 
. 
	Hierarchy &
{ 
internal)) 	
sealed))
 
class)) 
	LoggerKey))  
{** 
internalAA 

	LoggerKeyAA 
(AA 
stringAA 
nameAA  
)AA  !
{BB 
m_nameGG 	
=GG
 
stringGG 
.GG 
InternGG 
(GG 
nameGG 
)GG 
;GG  
m_hashCacheII 
=II 
nameII 
.II 
GetHashCodeII !
(II! "
)II" #
;II# $
}JJ 
overrideYY 

publicYY 
intYY 
GetHashCodeYY !
(YY! "
)YY" #
{ZZ 
return[[ 	
m_hashCache[[
 
;[[ 
}\\ 
overridekk 

publickk 
boolkk 
Equalskk 
(kk 
objectkk $
objkk% (
)kk( )
{ll 
ifnn 
(nn 
(nn 
(nn 	
objectnn	 
)nn 
thisnn 
)nn 
==nn 
objnn 
)nn 
{oo 
returnpp 

truepp 
;pp 
}qq 
	LoggerKeyss 
objKeyss 
=ss 
objss 
asss 
	LoggerKeyss &
;ss& '
iftt 
(tt 
objKeytt 
!=tt 
nulltt 
)tt 
{uu 
returnzz 

(zz 
(zz 
(zz 
objectzz 
)zz 
m_namezz 
)zz 
==zz  
(zz! "
(zz" #
objectzz# )
)zz) *
objKeyzz* 0
.zz0 1
m_namezz1 7
)zz7 8
)zz9 :
;zz: ;
}|| 
return}} 	
false}}
 
;}} 
}~~ 
private
ÑÑ 	
readonly
ÑÑ
 
string
ÑÑ 
m_name
ÑÑ  
;
ÑÑ  !
private
ÖÖ 	
readonly
ÖÖ
 
int
ÖÖ 
m_hashCache
ÖÖ "
;
ÖÖ" #
}
àà 
}ââ Ω
MC:\sonarqube\projects\log4net-2.0.7\src\Repository\Hierarchy\ProvisionNode.cs
	namespace 	
log4net
 
. 

Repository 
. 
	Hierarchy &
{ 
internal)) 	
sealed))
 
class)) 
ProvisionNode)) $
:))% &
	ArrayList))' 0
{** 
internal55 

ProvisionNode55 
(55 
Logger55 
log55  #
)55# $
:55% &
base55' +
(55+ ,
)55, -
{66 
this77 
.77 
Add77 
(77 
log77 
)77 
;77 
}88 
}99 
}:: º
JC:\sonarqube\projects\log4net-2.0.7\src\Repository\Hierarchy\RootLogger.cs
	namespace 	
log4net
 
. 

Repository 
. 
	Hierarchy &
{ 
public,, 
class,, 

RootLogger,, 
:,, 
Logger,, !
{-- 
public>> 

RootLogger>>	 
(>> 
Level>> 
level>> 
)>>  
:>>! "
base>># '
(>>' (
$str>>( .
)>>. /
{?? 
this@@ 
.@@ 
Level@@ 
=@@ 
level@@ 
;@@ 
}AA 
overrideRR 

publicRR 
LevelRR 
EffectiveLevelRR &
{SS 
getTT 
{UU 
returnVV 

baseVV 
.VV 
LevelVV 
;VV 
}WW 
}XX 
overrideff 

publicff 
Levelff 
Levelff 
{gg 
gethh 
{hh 
returnhh	 
basehh 
.hh 
Levelhh 
;hh 
}hh 
setii 
{jj 
ifkk 
(kk 
valuekk 
==kk 
nullkk 
)kk 
{ll 
LogLogmm 
.mm 
Errormm 
(mm 
declaringTypemm 
,mm  
$strmm! N
,mmN O
newmmP S
LogExceptionmmT `
(mm` a
)mma b
)mmb c
;mmc d
}nn 
elseoo 
{pp 
baseqq 	
.qq	 

Levelqq
 
=qq 
valueqq 
;qq 
}rr 
}ss 
}tt 
private
ÅÅ 
readonly
ÅÅ 
static
ÅÅ 
Type
ÅÅ !
declaringType
ÅÅ" /
=
ÅÅ0 1
typeof
ÅÅ2 8
(
ÅÅ8 9

RootLogger
ÅÅ9 C
)
ÅÅC D
;
ÅÅD E
}
ÑÑ 
}ÖÖ Ö¡
XC:\sonarqube\projects\log4net-2.0.7\src\Repository\Hierarchy\XmlHierarchyConfigurator.cs
	namespace 	
log4net
 
. 

Repository 
. 
	Hierarchy &
{   
public++ 
class++ $
XmlHierarchyConfigurator++ &
{,, 
private-- 	
enum--
 
ConfigUpdateMode-- 
{.. 
Merge// 
,// 	
	Overwrite00 
}11 
public?? $
XmlHierarchyConfigurator??	 !
(??! "
	Hierarchy??" +
	hierarchy??, 5
)??5 6
{@@ 
m_hierarchyAA 
=AA 
	hierarchyAA 
;AA 
m_appenderBagBB 
=BB 
newBB 
	HashtableBB  
(BB  !
)BB! "
;BB" #
}CC 
publicRR 
voidRR	 
	ConfigureRR 
(RR 

XmlElementRR "
elementRR# *
)RR* +
{SS 
ifTT 
(TT 
elementTT 
==TT 
nullTT 
||TT 
m_hierarchyTT %
==TT& (
nullTT) -
)TT- .
{UU 
returnVV 
;VV 
}WW 
stringYY 	
rootElementNameYY
 
=YY 
elementYY #
.YY# $
	LocalNameYY$ -
;YY- .
if[[ 
([[ 
rootElementName[[ 
!=[[ 
CONFIGURATION_TAG[[ +
)[[+ ,
{\\ 
LogLog]] 

.]]
 
Error]] 
(]] 
declaringType]] 
,]] 
$str]]  :
+]]; <
CONFIGURATION_TAG]]= N
+]]O P
$str]]Q ]
)]]] ^
;]]^ _
return^^ 
;^^ 
}__ 
ifaa 
(aa 
!aa 
LogLogaa 
.aa  
EmitInternalMessagesaa ,
)aa, -
{bb 
stringdd 
emitDebugAttributedd )
=dd* +
elementdd, 3
.dd3 4
GetAttributedd4 @
(dd@ A$
EMIT_INTERNAL_DEBUG_ATTRddA Y
)ddY Z
;ddZ [
LogLogee 
.ee 
Debugee 
(ee 
declaringTypeee *
,ee* +$
EMIT_INTERNAL_DEBUG_ATTRee, D
+eeE F
$streeG U
+eeV W
emitDebugAttributeeeX j
+eek l
$streem q
)eeq r
;eer s
ifgg 
(gg 
emitDebugAttributegg &
.gg& '
Lengthgg' -
>gg. /
$numgg0 1
&&gg2 4
emitDebugAttributegg5 G
!=ggH J
$strggK Q
)ggQ R
{hh 
LogLogii 
.ii  
EmitInternalMessagesii /
=ii0 1
OptionConverterii2 A
.iiA B
	ToBooleaniiB K
(iiK L
emitDebugAttributeiiL ^
,ii^ _
trueii` d
)iid e
;iie f
}jj 
elsekk 
{ll 
LogLogmm 
.mm 
Debugmm  
(mm  !
declaringTypemm! .
,mm. /
$strmm0 ;
+mm< =$
EMIT_INTERNAL_DEBUG_ATTRmm> V
+mmW X
$strmmY f
)mmf g
;mmg h
}nn 
}oo 
ifqq 
(qq	 

!qq
 
LogLogqq 
.qq 
InternalDebuggingqq #
)qq# $
{rr 
stringtt 

debugAttributett 
=tt 
elementtt #
.tt# $
GetAttributett$ 0
(tt0 1
INTERNAL_DEBUG_ATTRtt1 D
)ttD E
;ttE F
LogLoguu 

.uu
 
Debuguu 
(uu 
declaringTypeuu 
,uu 
INTERNAL_DEBUG_ATTRuu  3
+uu3 4
$struu4 B
+uuC D
debugAttributeuuE S
+uuT U
$struuV Z
)uuZ [
;uu[ \
ifww 
(ww 
debugAttributeww 
.ww 
Lengthww 
>ww 
$numww 
&&ww  "
debugAttributeww# 1
!=ww2 4
$strww5 ;
)ww; <
{xx 
LogLogyy 
.yy 
InternalDebuggingyy 
=yy 
OptionConverteryy  /
.yy/ 0
	ToBooleanyy0 9
(yy9 :
debugAttributeyy: H
,yyH I
trueyyJ N
)yyN O
;yyO P
}zz 
else{{ 
{|| 
LogLog}} 
.}} 
Debug}} 
(}} 
declaringType}} 
,}}  
$str}}! ,
+}}- .
INTERNAL_DEBUG_ATTR}}/ B
+}}C D
$str}}E R
)}}R S
;}}S T
}~~ 
string
ÄÄ 

	confDebug
ÄÄ 
=
ÄÄ 
element
ÄÄ 
.
ÄÄ 
GetAttribute
ÄÄ +
(
ÄÄ+ ,
CONFIG_DEBUG_ATTR
ÄÄ, =
)
ÄÄ= >
;
ÄÄ> ?
if
ÅÅ 
(
ÅÅ 
	confDebug
ÅÅ 
.
ÅÅ 
Length
ÅÅ 
>
ÅÅ 
$num
ÅÅ 
&&
ÅÅ 
	confDebug
ÅÅ '
!=
ÅÅ( *
$str
ÅÅ+ 1
)
ÅÅ1 2
{
ÇÇ 
LogLog
ÉÉ 
.
ÉÉ 
Warn
ÉÉ 
(
ÉÉ 
declaringType
ÉÉ 
,
ÉÉ 
$str
ÉÉ  (
+
ÉÉ) *
CONFIG_DEBUG_ATTR
ÉÉ+ <
+
ÉÉ= >
$str
ÉÉ? \
)
ÉÉ\ ]
;
ÉÉ] ^
LogLog
ÑÑ 
.
ÑÑ 
Warn
ÑÑ 
(
ÑÑ 
declaringType
ÑÑ 
,
ÑÑ 
$str
ÑÑ  ,
+
ÑÑ- .!
INTERNAL_DEBUG_ATTR
ÑÑ/ B
+
ÑÑC D
$str
ÑÑE \
)
ÑÑ\ ]
;
ÑÑ] ^
LogLog
ÖÖ 
.
ÖÖ 
InternalDebugging
ÖÖ 
=
ÖÖ 
OptionConverter
ÖÖ  /
.
ÖÖ/ 0
	ToBoolean
ÖÖ0 9
(
ÖÖ9 :
	confDebug
ÖÖ: C
,
ÖÖC D
true
ÖÖE I
)
ÖÖI J
;
ÖÖJ K
}
ÜÜ 
}
áá 
ConfigUpdateMode
ää 
configUpdateMode
ää $
=
ää% &
ConfigUpdateMode
ää' 7
.
ää7 8
Merge
ää8 =
;
ää= >
string
çç 	'
configUpdateModeAttribute
çç
 #
=
çç$ %
element
çç& -
.
çç- .
GetAttribute
çç. :
(
çç: ;%
CONFIG_UPDATE_MODE_ATTR
çç; R
)
ççR S
;
ççS T
if
éé 
(
éé '
configUpdateModeAttribute
éé  
!=
éé! #
null
éé$ (
&&
éé) +'
configUpdateModeAttribute
éé, E
.
ééE F
Length
ééF L
>
ééM N
$num
ééO P
)
ééP Q
{
èè 
try
ëë 
{
íí 
configUpdateMode
ìì 
=
ìì 
(
ìì 
ConfigUpdateMode
ìì )
)
ìì) *
OptionConverter
ìì* 9
.
ìì9 :
ConvertStringTo
ìì: I
(
ììI J
typeof
ììJ P
(
ììP Q
ConfigUpdateMode
ììQ a
)
ììa b
,
ììb c'
configUpdateModeAttribute
ììd }
)
ìì} ~
;
ìì~ 
}
îî 
catch
ïï 	
{
ññ 
LogLog
óó 
.
óó 
Error
óó 
(
óó 
declaringType
óó 
,
óó  
$str
óó! +
+
óó, -%
CONFIG_UPDATE_MODE_ATTR
óó. E
+
óóF G
$str
óóH \
+
óó] ^'
configUpdateModeAttribute
óó_ x
+
óóy z
$str
óó{ ~
)
óó~ 
;óó Ä
}
òò 
}
ôô 
LogLog
úú 	
.
úú	 

Debug
úú
 
(
úú 
declaringType
úú 
,
úú 
$str
úú <
+
úú= >
configUpdateMode
úú? O
.
úúO P
ToString
úúP X
(
úúX Y
)
úúY Z
+
úú[ \
$str
úú] a
)
úúa b
;
úúb c
if
üü 
(
üü 
configUpdateMode
üü 
==
üü 
ConfigUpdateMode
üü +
.
üü+ ,
	Overwrite
üü, 5
)
üü5 6
{
†† 
m_hierarchy
¢¢ 
.
¢¢  
ResetConfiguration
¢¢ "
(
¢¢" #
)
¢¢# $
;
¢¢$ %
LogLog
££ 

.
££
 
Debug
££ 
(
££ 
declaringType
££ 
,
££ 
$str
££  L
)
££L M
;
££M N
}
§§ 
foreach
´´ 

(
´´ 
XmlNode
´´ 
currentNode
´´ 
in
´´  "
element
´´# *
.
´´* +

ChildNodes
´´+ 5
)
´´5 6
{
¨¨ 
if
≠≠ 
(
≠≠ 
currentNode
≠≠ 
.
≠≠ 
NodeType
≠≠ 
==
≠≠ 
XmlNodeType
≠≠  +
.
≠≠+ ,
Element
≠≠, 3
)
≠≠3 4
{
ÆÆ 

XmlElement
ØØ 
currentElement
ØØ 
=
ØØ  
(
ØØ! "

XmlElement
ØØ" ,
)
ØØ, -
currentNode
ØØ- 8
;
ØØ8 9
if
±± 
(
±± 	
currentElement
±±	 
.
±± 
	LocalName
±± !
==
±±" $

LOGGER_TAG
±±% /
)
±±/ 0
{
≤≤ 
ParseLogger
≥≥ 
(
≥≥ 
currentElement
≥≥  
)
≥≥  !
;
≥≥! "
}
¥¥ 
else
µµ 	
if
µµ
 
(
µµ 
currentElement
µµ 
.
µµ 
	LocalName
µµ &
==
µµ' )
CATEGORY_TAG
µµ* 6
)
µµ6 7
{
∂∂ 
ParseLogger
∏∏ 
(
∏∏ 
currentElement
∏∏  
)
∏∏  !
;
∏∏! "
}
ππ 
else
∫∫ 	
if
∫∫
 
(
∫∫ 
currentElement
∫∫ 
.
∫∫ 
	LocalName
∫∫ &
==
∫∫' )
ROOT_TAG
∫∫* 2
)
∫∫2 3
{
ªª 
	ParseRoot
ºº 
(
ºº 
currentElement
ºº 
)
ºº 
;
ºº  
}
ΩΩ 
else
ææ 	
if
ææ
 
(
ææ 
currentElement
ææ 
.
ææ 
	LocalName
ææ &
==
ææ' )
RENDERER_TAG
ææ* 6
)
ææ6 7
{
øø 
ParseRenderer
¿¿ 
(
¿¿ 
currentElement
¿¿ "
)
¿¿" #
;
¿¿# $
}
¡¡ 
else
¬¬ 	
if
¬¬
 
(
¬¬ 
currentElement
¬¬ 
.
¬¬ 
	LocalName
¬¬ &
==
¬¬' )
APPENDER_TAG
¬¬* 6
)
¬¬6 7
{
√√ 
}
∆∆ 
else
«« 	
{
»» 
SetParameter
   
(
   
currentElement
   !
,
  ! "
m_hierarchy
  # .
)
  . /
;
  / 0
}
ÀÀ 
}
ÃÃ 
}
ÕÕ 
string
–– 	
thresholdStr
––
 
=
–– 
element
––  
.
––  !
GetAttribute
––! -
(
––- .
THRESHOLD_ATTR
––. <
)
––< =
;
––= >
LogLog
—— 	
.
——	 

Debug
——
 
(
—— 
declaringType
—— 
,
—— 
$str
—— 6
+
——7 8
thresholdStr
——9 E
+
——F G
$str
——H K
)
——K L
;
——L M
if
““ 
(
““ 
thresholdStr
““ 
.
““ 
Length
““ 
>
““ 
$num
““ 
&&
““ !
thresholdStr
““" .
!=
““/ 1
$str
““2 8
)
““8 9
{
”” 
Level
‘‘ 	
thresholdLevel
‘‘
 
=
‘‘ 
(
‘‘ 
Level
‘‘ !
)
‘‘! "
ConvertStringTo
‘‘# 2
(
‘‘2 3
typeof
‘‘3 9
(
‘‘9 :
Level
‘‘: ?
)
‘‘? @
,
‘‘@ A
thresholdStr
‘‘B N
)
‘‘N O
;
‘‘O P
if
’’ 
(
’’ 
thresholdLevel
’’ 
!=
’’ 
null
’’ 
)
’’ 
{
÷÷ 
m_hierarchy
◊◊ 
.
◊◊ 
	Threshold
◊◊ 
=
◊◊ 
thresholdLevel
◊◊ +
;
◊◊+ ,
}
ÿÿ 
else
ŸŸ 
{
⁄⁄ 
LogLog
€€ 
.
€€ 
Warn
€€ 
(
€€ 
declaringType
€€ 
,
€€ 
$str
€€  Q
+
€€R S
thresholdStr
€€T `
+
€€a b
$str€€c â
)€€â ä
;€€ä ã
}
‹‹ 
}
›› 
}
‡‡ 
	protected
ÒÒ 
	IAppender
ÒÒ %
FindAppenderByReference
ÒÒ -
(
ÒÒ- .

XmlElement
ÒÒ. 8
appenderRef
ÒÒ9 D
)
ÒÒD E
{
ÚÚ 
string
ÛÛ 	
appenderName
ÛÛ
 
=
ÛÛ 
appenderRef
ÛÛ $
.
ÛÛ$ %
GetAttribute
ÛÛ% 1
(
ÛÛ1 2
REF_ATTR
ÛÛ2 :
)
ÛÛ: ;
;
ÛÛ; <
	IAppender
ıı 
appender
ıı 
=
ıı 
(
ıı 
	IAppender
ıı "
)
ıı" #
m_appenderBag
ıı# 0
[
ıı0 1
appenderName
ıı1 =
]
ıı= >
;
ıı> ?
if
ˆˆ 
(
ˆˆ 
appender
ˆˆ 
!=
ˆˆ 
null
ˆˆ 
)
ˆˆ 
{
˜˜ 
return
¯¯ 

appender
¯¯ 
;
¯¯ 
}
˘˘ 
else
˙˙ 
{
˚˚ 

XmlElement
˝˝ 
element
˝˝ 
=
˝˝ 
null
˝˝ 
;
˝˝ 
if
ˇˇ 
(
ˇˇ 
appenderName
ˇˇ 
!=
ˇˇ 
null
ˇˇ 
&&
ˇˇ 
appenderName
ˇˇ  ,
.
ˇˇ, -
Length
ˇˇ- 3
>
ˇˇ4 5
$num
ˇˇ6 7
)
ˇˇ7 8
{
ÄÄ 
foreach
ÅÅ 
(
ÅÅ 

XmlElement
ÅÅ  
curAppenderElement
ÅÅ +
in
ÅÅ, .
appenderRef
ÅÅ/ :
.
ÅÅ: ;
OwnerDocument
ÅÅ; H
.
ÅÅH I"
GetElementsByTagName
ÅÅI ]
(
ÅÅ] ^
APPENDER_TAG
ÅÅ^ j
)
ÅÅj k
)
ÅÅk l
{
ÇÇ 
if
ÉÉ 
(
ÉÉ	 
 
curAppenderElement
ÉÉ
 
.
ÉÉ 
GetAttribute
ÉÉ )
(
ÉÉ) *
$str
ÉÉ* 0
)
ÉÉ0 1
==
ÉÉ2 4
appenderName
ÉÉ5 A
)
ÉÉA B
{
ÑÑ 
element
ÖÖ 
=
ÖÖ  
curAppenderElement
ÖÖ #
;
ÖÖ# $
break
ÜÜ 
;
ÜÜ 
}
áá 
}
àà 
}
ââ 
if
ãã 
(
ãã 
element
ãã 
==
ãã 
null
ãã 
)
ãã 
{
åå 
LogLog
çç 
.
çç 
Error
çç 
(
çç 
declaringType
çç 
,
çç  
$str
çç! P
+
ççQ R
appenderName
ççS _
+
çç` a
$str
ççb u
)
ççu v
;
ççv w
return
éé 
null
éé 
;
éé 
}
èè 
else
êê 
{
ëë 
appender
íí 
=
íí 
ParseAppender
íí 
(
íí 
element
íí %
)
íí% &
;
íí& '
if
ìì 
(
ìì 	
appender
ìì	 
!=
ìì 
null
ìì 
)
ìì 
{
îî 
m_appenderBag
ïï 
[
ïï 
appenderName
ïï  
]
ïï  !
=
ïï" #
appender
ïï$ ,
;
ïï, -
}
ññ 
return
óó 
appender
óó 
;
óó 
}
òò 
}
ôô 
}
öö 
	protected
ßß 
	IAppender
ßß 
ParseAppender
ßß #
(
ßß# $

XmlElement
ßß$ .
appenderElement
ßß/ >
)
ßß> ?
{
®® 
string
©© 	
appenderName
©©
 
=
©© 
appenderElement
©© (
.
©©( )
GetAttribute
©©) 5
(
©©5 6
	NAME_ATTR
©©6 ?
)
©©? @
;
©©@ A
string
™™ 	
typeName
™™
 
=
™™ 
appenderElement
™™ $
.
™™$ %
GetAttribute
™™% 1
(
™™1 2
	TYPE_ATTR
™™2 ;
)
™™; <
;
™™< =
LogLog
¨¨ 	
.
¨¨	 

Debug
¨¨
 
(
¨¨ 
declaringType
¨¨ 
,
¨¨ 
$str
¨¨ 3
+
¨¨4 5
appenderName
¨¨6 B
+
¨¨C D
$str
¨¨E P
+
¨¨Q R
typeName
¨¨S [
+
¨¨\ ]
$str
¨¨^ a
)
¨¨a b
;
¨¨b c
try
≠≠ 
{
ÆÆ 
	IAppender
≤≤ 
appender
≤≤ 
=
≤≤ 
(
≤≤ 
	IAppender
≤≤ #
)
≤≤# $
	Activator
≤≤$ -
.
≤≤- .
CreateInstance
≤≤. <
(
≤≤< =

SystemInfo
≤≤= G
.
≤≤G H
GetTypeFromString
≤≤H Y
(
≤≤Y Z
typeName
≤≤Z b
,
≤≤b c
true
≤≤d h
,
≤≤h i
true
≤≤j n
)
≤≤n o
)
≤≤o p
;
≤≤p q
appender
¥¥ 
.
¥¥ 
Name
¥¥ 
=
¥¥ 
appenderName
¥¥  
;
¥¥  !
foreach
∂∂ 
(
∂∂ 
XmlNode
∂∂ 
currentNode
∂∂  
in
∂∂! #
appenderElement
∂∂$ 3
.
∂∂3 4

ChildNodes
∂∂4 >
)
∂∂> ?
{
∑∑ 
if
ππ 
(
ππ 	
currentNode
ππ	 
.
ππ 
NodeType
ππ 
==
ππ  
XmlNodeType
ππ! ,
.
ππ, -
Element
ππ- 4
)
ππ4 5
{
∫∫ 

XmlElement
ªª 
currentElement
ªª 
=
ªª  !
(
ªª" #

XmlElement
ªª# -
)
ªª- .
currentNode
ªª. 9
;
ªª9 :
if
ææ 
(
ææ	 

currentElement
ææ
 
.
ææ 
	LocalName
ææ "
==
ææ# %
APPENDER_REF_TAG
ææ& 6
)
ææ6 7
{
øø 
string
¿¿ 
refName
¿¿ 
=
¿¿ 
currentElement
¿¿ &
.
¿¿& '
GetAttribute
¿¿' 3
(
¿¿3 4
REF_ATTR
¿¿4 <
)
¿¿< =
;
¿¿= >!
IAppenderAttachable
¬¬ 
appenderContainer
¬¬ ,
=
¬¬- .
appender
¬¬/ 7
as
¬¬8 :!
IAppenderAttachable
¬¬; N
;
¬¬N O
if
√√ 	
(
√√
 
appenderContainer
√√ 
!=
√√ 
null
√√  $
)
√√$ %
{
ƒƒ 
LogLog
≈≈ 
.
≈≈ 
Debug
≈≈ 
(
≈≈ 
declaringType
≈≈ "
,
≈≈" #
$str
≈≈$ @
+
≈≈A B
refName
≈≈C J
+
≈≈K L
$str
≈≈M d
+
≈≈e f
appender
≈≈g o
.
≈≈o p
Name
≈≈p t
+
≈≈u v
$str
≈≈w {
)
≈≈{ |
;
≈≈| }
	IAppender
««  
referencedAppender
«« $
=
««% &%
FindAppenderByReference
««' >
(
««> ?
currentElement
««? M
)
««M N
;
««N O
if
»» 

(
»»  
referencedAppender
»» 
!=
»» !
null
»»" &
)
»»& '
{
…… 	
appenderContainer
  	 
.
   
AddAppender
   &
(
  & ' 
referencedAppender
  ' 9
)
  9 :
;
  : ;
}
ÀÀ 	
}
ÃÃ 
else
ÕÕ 
{
ŒŒ 
LogLog
œœ 
.
œœ 
Error
œœ 
(
œœ 
declaringType
œœ "
,
œœ" #
$str
œœ$ O
+
œœO P
refName
œœP W
+
œœW X
$str
œœY p
+
œœq r
appender
œœs {
.
œœ{ |
Nameœœ| Ä
+œœÅ Ç
$strœœÉ ¡
)œœ¡ ¬
;œœ¬ √
}
–– 
}
—— 
else
““ 

{
”” 
SetParameter
’’ 
(
’’ 
currentElement
’’ "
,
’’" #
appender
’’$ ,
)
’’, -
;
’’- .
}
÷÷ 
}
◊◊ 
}
ÿÿ 
IOptionHandler
⁄⁄ 
optionHandler
⁄⁄  
=
⁄⁄! "
appender
⁄⁄# +
as
⁄⁄, .
IOptionHandler
⁄⁄/ =
;
⁄⁄= >
if
€€ 
(
€€ 
optionHandler
€€ 
!=
€€ 
null
€€ 
)
€€ 
{
‹‹ 
optionHandler
›› 
.
›› 
ActivateOptions
›› "
(
››" #
)
››# $
;
››$ %
}
ﬁﬁ 
LogLog
‡‡ 

.
‡‡
 
Debug
‡‡ 
(
‡‡ 
declaringType
‡‡ 
,
‡‡ 
$str
‡‡  4
+
‡‡5 6
appenderName
‡‡7 C
+
‡‡D E
$str
‡‡F I
)
‡‡I J
;
‡‡J K
return
·· 

appender
·· 
;
·· 
}
‚‚ 
catch
„„ 
(
„„	 

	Exception
„„
 
ex
„„ 
)
„„ 
{
‰‰ 
LogLog
ÁÁ 

.
ÁÁ
 
Error
ÁÁ 
(
ÁÁ 
declaringType
ÁÁ 
,
ÁÁ 
$str
ÁÁ  =
+
ÁÁ> ?
appenderName
ÁÁ@ L
+
ÁÁM N
$str
ÁÁO \
+
ÁÁ] ^
typeName
ÁÁ_ g
+
ÁÁh i
$strÁÁj Ü
,ÁÁÜ á
exÁÁà ä
)ÁÁä ã
;ÁÁã å
return
ËË 

null
ËË 
;
ËË 
}
ÈÈ 
}
ÍÍ 
	protected
ıı 
void
ıı 
ParseLogger
ıı 
(
ıı 

XmlElement
ıı '
loggerElement
ıı( 5
)
ıı5 6
{
ˆˆ 
string
¯¯ 	

loggerName
¯¯
 
=
¯¯ 
loggerElement
¯¯ $
.
¯¯$ %
GetAttribute
¯¯% 1
(
¯¯1 2
	NAME_ATTR
¯¯2 ;
)
¯¯; <
;
¯¯< =
LogLog
˙˙ 	
.
˙˙	 

Debug
˙˙
 
(
˙˙ 
declaringType
˙˙ 
,
˙˙ 
$str
˙˙ a
+
˙˙b c

loggerName
˙˙d n
+
˙˙o p
$str
˙˙q u
)
˙˙u v
;
˙˙v w
Logger
˚˚ 	
log
˚˚
 
=
˚˚ 
m_hierarchy
˚˚ 
.
˚˚ 
	GetLogger
˚˚ %
(
˚˚% &

loggerName
˚˚& 0
)
˚˚0 1
as
˚˚2 4
Logger
˚˚5 ;
;
˚˚; <
lock
ÄÄ 
(
ÄÄ 
log
ÄÄ 
)
ÄÄ 
{
ÅÅ 
bool
ÇÇ 

additivity
ÇÇ	 
=
ÇÇ 
OptionConverter
ÇÇ %
.
ÇÇ% &
	ToBoolean
ÇÇ& /
(
ÇÇ/ 0
loggerElement
ÇÇ0 =
.
ÇÇ= >
GetAttribute
ÇÇ> J
(
ÇÇJ K
ADDITIVITY_ATTR
ÇÇK Z
)
ÇÇZ [
,
ÇÇ[ \
true
ÇÇ] a
)
ÇÇa b
;
ÇÇb c
LogLog
ÑÑ 

.
ÑÑ
 
Debug
ÑÑ 
(
ÑÑ 
declaringType
ÑÑ 
,
ÑÑ 
$str
ÑÑ  +
+
ÑÑ, -
log
ÑÑ. 1
.
ÑÑ1 2
Name
ÑÑ2 6
+
ÑÑ7 8
$str
ÑÑ9 L
+
ÑÑM N

additivity
ÑÑO Y
+
ÑÑZ [
$str
ÑÑ\ `
)
ÑÑ` a
;
ÑÑa b
log
ÖÖ 
.
ÖÖ 

Additivity
ÖÖ 
=
ÖÖ 

additivity
ÖÖ 
;
ÖÖ  *
ParseChildrenOfLoggerElement
ÜÜ  
(
ÜÜ  !
loggerElement
ÜÜ! .
,
ÜÜ. /
log
ÜÜ0 3
,
ÜÜ3 4
false
ÜÜ5 :
)
ÜÜ: ;
;
ÜÜ; <
}
áá 
}
àà 
	protected
ìì 
void
ìì 
	ParseRoot
ìì 
(
ìì 

XmlElement
ìì %
rootElement
ìì& 1
)
ìì1 2
{
îî 
Logger
ïï 	
root
ïï
 
=
ïï 
m_hierarchy
ïï 
.
ïï 
Root
ïï !
;
ïï! "
lock
óó 
(
óó 
root
óó 
)
óó 
{
òò *
ParseChildrenOfLoggerElement
ôô  
(
ôô  !
rootElement
ôô! ,
,
ôô, -
root
ôô. 2
,
ôô2 3
true
ôô4 8
)
ôô8 9
;
ôô9 :
}
öö 
}
õõ 
	protected
®® 
void
®® *
ParseChildrenOfLoggerElement
®® -
(
®®- .

XmlElement
®®. 8

catElement
®®9 C
,
®®C D
Logger
®®E K
log
®®L O
,
®®O P
bool
®®Q U
isRoot
®®V \
)
®®\ ]
{
©© 
log
¨¨ 
.
¨¨  
RemoveAllAppenders
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
foreach
ÆÆ 

(
ÆÆ 
XmlNode
ÆÆ 
currentNode
ÆÆ 
in
ÆÆ  "

catElement
ÆÆ# -
.
ÆÆ- .

ChildNodes
ÆÆ. 8
)
ÆÆ8 9
{
ØØ 
if
∞∞ 
(
∞∞ 
currentNode
∞∞ 
.
∞∞ 
NodeType
∞∞ 
==
∞∞ 
XmlNodeType
∞∞  +
.
∞∞+ ,
Element
∞∞, 3
)
∞∞3 4
{
±± 

XmlElement
≤≤ 
currentElement
≤≤ 
=
≤≤  
(
≤≤! "

XmlElement
≤≤" ,
)
≤≤, -
currentNode
≤≤. 9
;
≤≤9 :
if
¥¥ 
(
¥¥ 	
currentElement
¥¥	 
.
¥¥ 
	LocalName
¥¥ !
==
¥¥" $
APPENDER_REF_TAG
¥¥% 5
)
¥¥5 6
{
µµ 
	IAppender
∂∂ 
appender
∂∂ 
=
∂∂ %
FindAppenderByReference
∂∂ 2
(
∂∂2 3
currentElement
∂∂3 A
)
∂∂A B
;
∂∂B C
string
∑∑ 
refName
∑∑ 
=
∑∑ 
currentElement
∑∑ &
.
∑∑& '
GetAttribute
∑∑' 3
(
∑∑3 4
REF_ATTR
∑∑4 <
)
∑∑< =
;
∑∑= >
if
∏∏ 
(
∏∏	 

appender
∏∏
 
!=
∏∏ 
null
∏∏ 
)
∏∏ 
{
ππ 
LogLog
∫∫ 
.
∫∫ 
Debug
∫∫ 
(
∫∫ 
declaringType
∫∫ !
,
∫∫! "
$str
∫∫# <
+
∫∫= >
refName
∫∫? F
+
∫∫G H
$str
∫∫I X
+
∫∫Y Z
log
∫∫[ ^
.
∫∫^ _
Name
∫∫_ c
+
∫∫d e
$str
∫∫f j
)
∫∫j k
;
∫∫k l
log
ªª 

.
ªª
 
AddAppender
ªª 
(
ªª 
appender
ªª 
)
ªª  
;
ªª  !
}
ºº 
else
ΩΩ 

{
ææ 
LogLog
øø 
.
øø 
Error
øø 
(
øø 
declaringType
øø !
,
øø! "
$str
øø# 5
+
øø6 7
refName
øø8 ?
+
øø@ A
$str
øøB P
)
øøP Q
;
øøQ R
}
¿¿ 
}
¡¡ 
else
¬¬ 	
if
¬¬
 
(
¬¬ 
currentElement
¬¬ 
.
¬¬ 
	LocalName
¬¬ &
==
¬¬' )
	LEVEL_TAG
¬¬* 3
||
¬¬4 6
currentElement
¬¬7 E
.
¬¬E F
	LocalName
¬¬F O
==
¬¬P R
PRIORITY_TAG
¬¬S _
)
¬¬_ `
{
√√ 

ParseLevel
ƒƒ 
(
ƒƒ 
currentElement
ƒƒ 
,
ƒƒ  
log
ƒƒ! $
,
ƒƒ$ %
isRoot
ƒƒ& ,
)
ƒƒ, -
;
ƒƒ- .
}
≈≈ 
else
∆∆ 	
{
«« 
SetParameter
»» 
(
»» 
currentElement
»» !
,
»»! "
log
»»# &
)
»»& '
;
»»' (
}
…… 
}
   
}
ÀÀ 
IOptionHandler
ÕÕ 
optionHandler
ÕÕ 
=
ÕÕ  !
log
ÕÕ" %
as
ÕÕ& (
IOptionHandler
ÕÕ) 7
;
ÕÕ7 8
if
ŒŒ 
(
ŒŒ 
optionHandler
ŒŒ 
!=
ŒŒ 
null
ŒŒ 
)
ŒŒ 
{
œœ 
optionHandler
–– 
.
–– 
ActivateOptions
–– !
(
––! "
)
––" #
;
––# $
}
—— 
}
““ 
	protected
›› 
void
›› 
ParseRenderer
›› 
(
›› 

XmlElement
›› )
element
››* 1
)
››1 2
{
ﬁﬁ 
string
ﬂﬂ 	 
renderingClassName
ﬂﬂ
 
=
ﬂﬂ 
element
ﬂﬂ &
.
ﬂﬂ& '
GetAttribute
ﬂﬂ' 3
(
ﬂﬂ3 4!
RENDERING_TYPE_ATTR
ﬂﬂ4 G
)
ﬂﬂG H
;
ﬂﬂH I
string
‡‡ 	
renderedClassName
‡‡
 
=
‡‡ 
element
‡‡ %
.
‡‡% &
GetAttribute
‡‡& 2
(
‡‡2 3 
RENDERED_TYPE_ATTR
‡‡3 E
)
‡‡E F
;
‡‡F G
LogLog
‚‚ 	
.
‚‚	 

Debug
‚‚
 
(
‚‚ 
declaringType
‚‚ 
,
‚‚ 
$str
‚‚ 2
+
‚‚3 4 
renderingClassName
‚‚5 G
+
‚‚H I
$str
‚‚J _
+
‚‚` a
renderedClassName
‚‚b s
+
‚‚t u
$str
‚‚v z
)
‚‚z {
;
‚‚{ |
IObjectRenderer
„„ 
renderer
„„ 
=
„„ 
(
„„ 
IObjectRenderer
„„ .
)
„„. /
OptionConverter
„„/ >
.
„„> ?$
InstantiateByClassName
„„? U
(
„„U V 
renderingClassName
„„V h
,
„„h i
typeof
„„j p
(
„„p q
IObjectRenderer„„q Ä
)„„Ä Å
,„„Å Ç
null„„É á
)„„á à
;„„à â
if
‰‰ 
(
‰‰ 
renderer
‰‰ 
==
‰‰ 
null
‰‰ 
)
‰‰ 
{
ÂÂ 
LogLog
ÊÊ 

.
ÊÊ
 
Error
ÊÊ 
(
ÊÊ 
declaringType
ÊÊ 
,
ÊÊ 
$str
ÊÊ  B
+
ÊÊC D 
renderingClassName
ÊÊE W
+
ÊÊX Y
$str
ÊÊZ ^
)
ÊÊ^ _
;
ÊÊ_ `
return
ÁÁ 

;
ÁÁ
 
}
ËË 
else
ÈÈ 
{
ÍÍ 
try
ÎÎ 
{
ÏÏ 
m_hierarchy
 
.
 
RendererMap
 
.
 
Put
  
(
  !

SystemInfo
! +
.
+ ,
GetTypeFromString
, =
(
= >
renderedClassName
> O
,
O P
true
Q U
,
U V
true
W [
)
[ \
,
\ ]
renderer
^ f
)
f g
;
g h
}
ÚÚ 
catch
ÛÛ 	
(
ÛÛ	 

	Exception
ÛÛ
 
e
ÛÛ 
)
ÛÛ 
{
ÙÙ 
LogLog
ıı 
.
ıı 
Error
ıı 
(
ıı 
declaringType
ıı 
,
ıı  
$str
ıı! 9
+
ıı: ;
renderedClassName
ıı< M
+
ııN O
$str
ııP T
,
ııT U
e
ııV W
)
ııW X
;
ııX Y
}
ˆˆ 
}
˜˜ 
}
¯¯ 
	protected
ÖÖ 
void
ÖÖ 

ParseLevel
ÖÖ 
(
ÖÖ 

XmlElement
ÖÖ &
element
ÖÖ' .
,
ÖÖ. /
Logger
ÖÖ0 6
log
ÖÖ7 :
,
ÖÖ: ;
bool
ÖÖ< @
isRoot
ÖÖA G
)
ÖÖG H
{
ÜÜ 
string
áá 	

loggerName
áá
 
=
áá 
log
áá 
.
áá 
Name
áá 
;
áá  
if
àà 
(
àà 
isRoot
àà 
)
àà 
{
ââ 

loggerName
ää 
=
ää 
$str
ää 
;
ää 
}
ãã 
string
çç 	
levelStr
çç
 
=
çç 
element
çç 
.
çç 
GetAttribute
çç )
(
çç) *

VALUE_ATTR
çç* 4
)
çç4 5
;
çç5 6
LogLog
éé 	
.
éé	 

Debug
éé
 
(
éé 
declaringType
éé 
,
éé 
$str
éé )
+
éé* +

loggerName
éé, 6
+
éé7 8
$str
éé9 N
+
ééO P
levelStr
ééQ Y
+
ééZ [
$str
éé\ `
)
éé` a
;
ééa b
if
êê 
(
êê 
	INHERITED
êê 
==
êê 
levelStr
êê 
)
êê 
{
ëë 
if
íí 
(
íí 
isRoot
íí 
)
íí 
{
ìì 
LogLog
îî 
.
îî 
Error
îî 
(
îî 
declaringType
îî 
,
îî  
$str
îî! V
)
îîV W
;
îîW X
}
ïï 
else
ññ 
{
óó 
LogLog
òò 
.
òò 
Debug
òò 
(
òò 
declaringType
òò 
,
òò  
$str
òò! +
+
òò, -

loggerName
òò. 8
+
òò9 :
$str
òò; `
)
òò` a
;
òòa b
log
ôô 
.
ôô 	
Level
ôô	 
=
ôô 
null
ôô 
;
ôô 
}
öö 
}
õõ 
else
úú 
{
ùù 
log
ûû 
.
ûû 
Level
ûû 
=
ûû 
log
ûû 
.
ûû 
	Hierarchy
ûû 
.
ûû 
LevelMap
ûû &
[
ûû& '
levelStr
ûû' /
]
ûû/ 0
;
ûû0 1
if
üü 
(
üü 
log
üü 
.
üü 
Level
üü 
==
üü 
null
üü 
)
üü 
{
†† 
LogLog
°° 
.
°° 
Error
°° 
(
°° 
declaringType
°° 
,
°°  
$str
°°! 4
+
°°5 6
levelStr
°°7 ?
+
°°@ A
$str
°°B Q
+
°°R S

loggerName
°°T ^
+
°°_ `
$str
°°a e
)
°°e f
;
°°f g
}
¢¢ 
else
££ 
{
§§ 
LogLog
•• 
.
•• 
Debug
•• 
(
•• 
declaringType
•• 
,
••  
$str
••! +
+
••, -

loggerName
••. 8
+
••9 :
$str
••; T
+
••U V
log
••W Z
.
••Z [
Level
••[ `
.
••` a
Name
••a e
+
••f g
$str
••h s
+
••t u
log
••v y
.
••y z
Level
••z 
.•• Ä
Value••Ä Ö
+••Ü á
$str••à å
)••å ç
;••ç é
}
¶¶ 
}
ßß 
}
®® 
	protected
∫∫ 
void
∫∫ 
SetParameter
∫∫ 
(
∫∫ 

XmlElement
∫∫ (
element
∫∫) 0
,
∫∫0 1
object
∫∫2 8
target
∫∫9 ?
)
∫∫? @
{
ªª 
string
ΩΩ 	
name
ΩΩ
 
=
ΩΩ 
element
ΩΩ 
.
ΩΩ 
GetAttribute
ΩΩ %
(
ΩΩ% &
	NAME_ATTR
ΩΩ& /
)
ΩΩ/ 0
;
ΩΩ0 1
if
¿¿ 
(
¿¿ 
element
¿¿ 
.
¿¿ 
	LocalName
¿¿ 
!=
¿¿ 
	PARAM_TAG
¿¿ %
||
¿¿& (
name
¿¿) -
==
¿¿. 0
null
¿¿1 5
||
¿¿6 8
name
¿¿9 =
.
¿¿= >
Length
¿¿> D
==
¿¿E G
$num
¿¿H I
)
¿¿I J
{
¡¡ 
name
¬¬ 
=
¬¬	 

element
¬¬ 
.
¬¬ 
	LocalName
¬¬ 
;
¬¬ 
}
√√ 
Type
∆∆ 

targetType
∆∆ 
=
∆∆ 
target
∆∆ 
.
∆∆ 
GetType
∆∆ #
(
∆∆# $
)
∆∆$ %
;
∆∆% &
Type
«« 
propertyType
«« 
=
«« 
null
«« 
;
«« 
PropertyInfo
…… 
propInfo
…… 
=
…… 
null
…… 
;
……  

MethodInfo
   
methInfo
   
=
   
null
   
;
   
propInfo
ÕÕ 
=
ÕÕ 

targetType
ÕÕ 
.
ÕÕ 
GetProperty
ÕÕ $
(
ÕÕ$ %
name
ÕÕ% )
,
ÕÕ) *
BindingFlags
ÕÕ+ 7
.
ÕÕ7 8
Instance
ÕÕ8 @
|
ÕÕA B
BindingFlags
ÕÕC O
.
ÕÕO P
Public
ÕÕP V
|
ÕÕW X
BindingFlags
ÕÕY e
.
ÕÕe f
	NonPublic
ÕÕf o
|
ÕÕp q
BindingFlags
ÕÕr ~
.
ÕÕ~ 

IgnoreCaseÕÕ â
)ÕÕâ ä
;ÕÕä ã
if
ŒŒ 
(
ŒŒ 
propInfo
ŒŒ 
!=
ŒŒ 
null
ŒŒ 
&&
ŒŒ 
propInfo
ŒŒ #
.
ŒŒ# $
CanWrite
ŒŒ$ ,
)
ŒŒ, -
{
œœ 
propertyType
—— 
=
—— 
propInfo
—— 
.
—— 
PropertyType
—— (
;
——( )
}
““ 
else
”” 
{
‘‘ 
propInfo
’’ 
=
’’ 
null
’’ 
;
’’ 
methInfo
ÿÿ 
=
ÿÿ 
FindMethodInfo
ÿÿ 
(
ÿÿ 

targetType
ÿÿ (
,
ÿÿ( )
name
ÿÿ* .
)
ÿÿ. /
;
ÿÿ/ 0
if
⁄⁄ 
(
⁄⁄ 
methInfo
⁄⁄ 
!=
⁄⁄ 
null
⁄⁄ 
)
⁄⁄ 
{
€€ 
propertyType
‹‹ 
=
‹‹ 
methInfo
‹‹ 
.
‹‹ 
GetParameters
‹‹ *
(
‹‹* +
)
‹‹+ ,
[
‹‹, -
$num
‹‹- .
]
‹‹. /
.
‹‹/ 0
ParameterType
‹‹0 =
;
‹‹= >
}
›› 
}
ﬁﬁ 
if
‡‡ 
(
‡‡ 
propertyType
‡‡ 
==
‡‡ 
null
‡‡ 
)
‡‡ 
{
·· 
LogLog
‚‚ 

.
‚‚
 
Error
‚‚ 
(
‚‚ 
declaringType
‚‚ 
,
‚‚ 
$str
‚‚  R
+
‚‚S T
name
‚‚U Y
+
‚‚Z [
$str
‚‚\ r
+
‚‚s t
target
‚‚u {
.
‚‚{ |
ToString‚‚| Ñ
(‚‚Ñ Ö
)‚‚Ö Ü
+‚‚á à
$str‚‚â å
)‚‚å ç
;‚‚ç é
}
„„ 
else
‰‰ 
{
ÂÂ 
string
ÊÊ 

propertyValue
ÊÊ 
=
ÊÊ 
null
ÊÊ 
;
ÊÊ  
if
ËË 
(
ËË 
element
ËË 
.
ËË 
GetAttributeNode
ËË  
(
ËË  !

VALUE_ATTR
ËË! +
)
ËË+ ,
!=
ËË- /
null
ËË0 4
)
ËË4 5
{
ÈÈ 
propertyValue
ÍÍ 
=
ÍÍ 
element
ÍÍ 
.
ÍÍ 
GetAttribute
ÍÍ )
(
ÍÍ) *

VALUE_ATTR
ÍÍ* 4
)
ÍÍ4 5
;
ÍÍ5 6
}
ÎÎ 
else
ÏÏ 
if
ÏÏ	 
(
ÏÏ 
element
ÏÏ 
.
ÏÏ 
HasChildNodes
ÏÏ "
)
ÏÏ" #
{
ÌÌ 
foreach
ÔÔ 
(
ÔÔ 
XmlNode
ÔÔ 
	childNode
ÔÔ 
in
ÔÔ !
element
ÔÔ" )
.
ÔÔ) *

ChildNodes
ÔÔ* 4
)
ÔÔ4 5
{
 
if
ÒÒ 
(
ÒÒ	 

	childNode
ÒÒ
 
.
ÒÒ 
NodeType
ÒÒ 
==
ÒÒ 
XmlNodeType
ÒÒ  +
.
ÒÒ+ ,
CDATA
ÒÒ, 1
||
ÒÒ2 4
	childNode
ÒÒ5 >
.
ÒÒ> ?
NodeType
ÒÒ? G
==
ÒÒH J
XmlNodeType
ÒÒK V
.
ÒÒV W
Text
ÒÒW [
)
ÒÒ[ \
{
ÚÚ 
if
ÛÛ 	
(
ÛÛ
 
propertyValue
ÛÛ 
==
ÛÛ 
null
ÛÛ  
)
ÛÛ  !
{
ÙÙ 
propertyValue
ıı 
=
ıı 
	childNode
ıı !
.
ıı! "
	InnerText
ıı" +
;
ıı+ ,
}
ˆˆ 
else
˜˜ 
{
¯¯ 
propertyValue
˘˘ 
+=
˘˘ 
	childNode
˘˘ "
.
˘˘" #
	InnerText
˘˘# ,
;
˘˘, -
}
˙˙ 
}
˚˚ 
}
¸¸ 
}
˝˝ 
if
ˇˇ 
(
ˇˇ 
propertyValue
ˇˇ 
!=
ˇˇ 
null
ˇˇ 
)
ˇˇ 
{
ÄÄ 
try
ÇÇ 
{
ÉÉ 
IDictionary
ÖÖ	 "
environmentVariables
ÖÖ )
=
ÖÖ* +
Environment
ÖÖ, 7
.
ÖÖ7 8%
GetEnvironmentVariables
ÖÖ8 O
(
ÖÖO P
)
ÖÖP Q
;
ÖÖQ R
if
ÜÜ	 
(
ÜÜ +
HasCaseInsensitiveEnvironment
ÜÜ *
)
ÜÜ* +
{
ÜÜ, -"
environmentVariables
áá 
=
áá *
CreateCaseInsensitiveWrapper
áá 9
(
áá9 :"
environmentVariables
áá: N
)
ááN O
;
ááO P
}
àà	 

propertyValue
ââ 
=
ââ 
OptionConverter
ââ %
.
ââ% &!
SubstituteVariables
ââ& 9
(
ââ9 :
propertyValue
ââ: G
,
ââG H"
environmentVariables
ââI ]
)
ââ] ^
;
ââ^ _
}
ää 
catch
ãã 

(
ãã
 
System
ãã 
.
ãã 
Security
ãã 
.
ãã 
SecurityException
ãã ,
)
ãã, -
{
åå 
LogLog
êê 
.
êê 
Debug
êê 
(
êê 
declaringType
êê  
,
êê  !
$strêê" Å
)êêÅ Ç
;êêÇ É
}
ëë 
Type
îî 	.
 parsedObjectConversionTargetType
îî
 *
=
îî+ ,
null
îî- 1
;
îî1 2
string
óó 
subTypeString
óó 
=
óó 
element
óó #
.
óó# $
GetAttribute
óó$ 0
(
óó0 1
	TYPE_ATTR
óó1 :
)
óó: ;
;
óó; <
if
òò 
(
òò 	
subTypeString
òò	 
!=
òò 
null
òò 
&&
òò !
subTypeString
òò" /
.
òò/ 0
Length
òò0 6
>
òò7 8
$num
òò9 :
)
òò: ;
{
ôô 
try
õõ 	
{
úú 
Type
†† 
subType
†† 
=
†† 

SystemInfo
††  
.
††  !
GetTypeFromString
††! 2
(
††2 3
subTypeString
††3 @
,
††@ A
true
††B F
,
††F G
true
††H L
)
††L M
;
††M N
LogLog
££ 
.
££ 
Debug
££ 
(
££ 
declaringType
££ !
,
££! "
$str
££# 0
+
££0 1
name
££1 5
+
££5 6
$str
££6 M
+
££M N
subType
££N U
.
££U V
FullName
££V ^
+
££^ _
$str
££_ b
)
££b c
;
££c d
if
•• 	
(
••
 
!
•• 
propertyType
•• 
.
•• 
IsAssignableFrom
•• )
(
••) *
subType
••* 1
)
••1 2
)
••2 3
{
¶¶ 
if
®® 

(
®® 
OptionConverter
®® 
.
®® 
CanConvertTypeTo
®® ,
(
®®, -
subType
®®- 4
,
®®4 5
propertyType
®®6 B
)
®®B C
)
®®C D
{
©© 	.
 parsedObjectConversionTargetType
´´	 )
=
´´* +
propertyType
´´, 8
;
´´8 9
propertyType
ÆÆ	 
=
ÆÆ 
subType
ÆÆ 
;
ÆÆ  
}
ØØ 	
else
∞∞ 
{
±± 	
LogLog
≤≤	 
.
≤≤ 
Error
≤≤ 
(
≤≤ 
declaringType
≤≤ #
,
≤≤# $
$str
≤≤% 0
+
≤≤0 1
subType
≤≤1 8
.
≤≤8 9
FullName
≤≤9 A
+
≤≤A B
$str
≤≤B N
+
≤≤N O
name
≤≤O S
+
≤≤S T
$str
≤≤T |
+
≤≤| }
propertyType≤≤} â
.≤≤â ä
FullName≤≤ä í
+≤≤í ì
$str≤≤ì ƒ
)≤≤ƒ ≈
;≤≤≈ ∆
}
≥≥ 	
}
¥¥ 
else
µµ 
{
∂∂ 
propertyType
ππ 
=
ππ 
subType
ππ 
;
ππ 
}
∫∫ 
}
ªª 
catch
ºº 
(
ºº 
	Exception
ºº 
ex
ºº 
)
ºº 
{
ΩΩ 
LogLog
ææ 
.
ææ 
Error
ææ 
(
ææ 
declaringType
ææ !
,
ææ! "
$str
ææ# :
+
ææ: ;
subTypeString
ææ; H
+
ææH I
$str
ææI U
+
ææU V
name
ææV Z
+
ææZ [
$str
ææ[ ^
,
ææ^ _
ex
ææ` b
)
ææb c
;
ææc d
}
øø 
}
¿¿ 
object
≈≈ 
convertedValue
≈≈ 
=
≈≈ 
ConvertStringTo
≈≈ ,
(
≈≈, -
propertyType
≈≈- 9
,
≈≈9 :
propertyValue
≈≈; H
)
≈≈H I
;
≈≈I J
if
»» 
(
»» 	
convertedValue
»»	 
!=
»» 
null
»» 
&&
»»  ".
 parsedObjectConversionTargetType
»»# C
!=
»»D F
null
»»G K
)
»»K L
{
…… 
LogLog
   
.
   
Debug
   
(
   
declaringType
    
,
    !
$str
  " T
+
  U V
convertedValue
  W e
.
  e f
GetType
  f m
(
  m n
)
  n o
.
  o p
Name
  p t
+
  u v
$str
  w 
+  Ä Å0
 parsedObjectConversionTargetType  Ç ¢
.  ¢ £
Name  £ ß
+  ® ©
$str  ™ ≠
)  ≠ Æ
;  Æ Ø
convertedValue
ÀÀ 
=
ÀÀ 
OptionConverter
ÀÀ &
.
ÀÀ& '
ConvertTypeTo
ÀÀ' 4
(
ÀÀ4 5
convertedValue
ÀÀ5 C
,
ÀÀC D.
 parsedObjectConversionTargetType
ÀÀE e
)
ÀÀe f
;
ÀÀf g
}
ÃÃ 
if
ŒŒ 
(
ŒŒ 	
convertedValue
ŒŒ	 
!=
ŒŒ 
null
ŒŒ 
)
ŒŒ  
{
œœ 
if
–– 
(
––	 

propInfo
––
 
!=
–– 
null
–– 
)
–– 
{
—— 
LogLog
”” 
.
”” 
Debug
”” 
(
”” 
declaringType
”” !
,
””! "
$str
””# 7
+
””8 9
propInfo
””: B
.
””B C
Name
””C G
+
””H I
$str
””J Q
+
””R S
convertedValue
””T b
.
””b c
GetType
””c j
(
””j k
)
””k l
.
””l m
Name
””m q
+
””r s
$str
””t ~
+”” Ä
convertedValue””Å è
.””è ê
ToString””ê ò
(””ò ô
)””ô ö
+””õ ú
$str””ù †
)””† °
;””° ¢
try
’’ 

{
÷÷ 
propInfo
€€ 
.
€€ 
SetValue
€€ 
(
€€ 
target
€€  
,
€€  !
convertedValue
€€" 0
,
€€0 1
BindingFlags
€€2 >
.
€€> ?
SetProperty
€€? J
,
€€J K
null
€€L P
,
€€P Q
null
€€R V
,
€€V W
CultureInfo
€€X c
.
€€c d
InvariantCulture
€€d t
)
€€t u
;
€€u v
}
›› 
catch
ﬁﬁ 
(
ﬁﬁ '
TargetInvocationException
ﬁﬁ & 
targetInvocationEx
ﬁﬁ' 9
)
ﬁﬁ9 :
{
ﬂﬂ 
LogLog
‡‡ 
.
‡‡ 
Error
‡‡ 
(
‡‡ 
declaringType
‡‡ "
,
‡‡" #
$str
‡‡$ ?
+
‡‡@ A
propInfo
‡‡B J
.
‡‡J K
Name
‡‡K O
+
‡‡P Q
$str
‡‡R a
+
‡‡b c
target
‡‡d j
+
‡‡k l
$str
‡‡m ~
+‡‡ Ä
convertedValue‡‡Å è
+‡‡ê ë
$str‡‡í ï
,‡‡ï ñ"
targetInvocationEx‡‡ó ©
.‡‡© ™
InnerException‡‡™ ∏
)‡‡∏ π
;‡‡π ∫
}
·· 
}
‚‚ 
else
„„ 

if
„„ 
(
„„ 
methInfo
„„ 
!=
„„ 
null
„„ 
)
„„  
{
‰‰ 
LogLog
ÊÊ 
.
ÊÊ 
Debug
ÊÊ 
(
ÊÊ 
declaringType
ÊÊ !
,
ÊÊ! "
$str
ÊÊ# B
+
ÊÊC D
methInfo
ÊÊE M
.
ÊÊM N
Name
ÊÊN R
+
ÊÊS T
$str
ÊÊU \
+
ÊÊ] ^
convertedValue
ÊÊ_ m
.
ÊÊm n
GetType
ÊÊn u
(
ÊÊu v
)
ÊÊv w
.
ÊÊw x
Name
ÊÊx |
+
ÊÊ} ~
$strÊÊ â
+ÊÊä ã
convertedValueÊÊå ö
.ÊÊö õ
ToStringÊÊõ £
(ÊÊ£ §
)ÊÊ§ •
+ÊÊ¶ ß
$strÊÊ® ´
)ÊÊ´ ¨
;ÊÊ¨ ≠
try
ËË 

{
ÈÈ 
methInfo
ÓÓ 
.
ÓÓ 
Invoke
ÓÓ 
(
ÓÓ 
target
ÓÓ 
,
ÓÓ 
BindingFlags
ÓÓ  ,
.
ÓÓ, -
InvokeMethod
ÓÓ- 9
,
ÓÓ9 :
null
ÓÓ; ?
,
ÓÓ? @
new
ÓÓA D
object
ÓÓE K
[
ÓÓK L
]
ÓÓL M
{
ÓÓN O
convertedValue
ÓÓO ]
}
ÓÓ] ^
,
ÓÓ^ _
CultureInfo
ÓÓ` k
.
ÓÓk l
InvariantCulture
ÓÓl |
)
ÓÓ| }
;
ÓÓ} ~
}
 
catch
ÒÒ 
(
ÒÒ '
TargetInvocationException
ÒÒ & 
targetInvocationEx
ÒÒ' 9
)
ÒÒ9 :
{
ÚÚ 
LogLog
ÛÛ 
.
ÛÛ 
Error
ÛÛ 
(
ÛÛ 
declaringType
ÛÛ "
,
ÛÛ" #
$str
ÛÛ$ ?
+
ÛÛ@ A
name
ÛÛB F
+
ÛÛG H
$str
ÛÛI X
+
ÛÛY Z
target
ÛÛ[ a
+
ÛÛb c
$str
ÛÛd u
+
ÛÛv w
convertedValueÛÛx Ü
+ÛÛá à
$strÛÛâ å
,ÛÛå ç"
targetInvocationExÛÛé †
.ÛÛ† °
InnerExceptionÛÛ° Ø
)ÛÛØ ∞
;ÛÛ∞ ±
}
ÙÙ 
}
ıı 
}
ˆˆ 
else
˜˜ 	
{
¯¯ 
LogLog
˘˘ 
.
˘˘ 
Warn
˘˘ 
(
˘˘ 
declaringType
˘˘ 
,
˘˘  
$str
˘˘! ;
+
˘˘< =
name
˘˘> B
+
˘˘C D
$str
˘˘E T
+
˘˘U V
target
˘˘W ]
+
˘˘^ _
$str
˘˘` q
+
˘˘r s
propertyValue˘˘t Å
+˘˘Ç É
$str˘˘Ñ ™
)˘˘™ ´
;˘˘´ ¨
}
˙˙ 
}
˚˚ 
else
¸¸ 
{
˝˝ 
object
˛˛ 
createdObject
˛˛ 
=
˛˛ 
null
˛˛  
;
˛˛  !
if
ÄÄ 
(
ÄÄ 	
propertyType
ÄÄ	 
==
ÄÄ 
typeof
ÄÄ 
(
ÄÄ  
string
ÄÄ  &
)
ÄÄ& '
&&
ÄÄ( *
!
ÄÄ+ ,%
HasAttributesOrElements
ÄÄ, C
(
ÄÄC D
element
ÄÄD K
)
ÄÄK L
)
ÄÄL M
{
ÅÅ 
createdObject
áá 
=
áá 
$str
áá 
;
áá 
}
àà 
else
ââ 	
{
ää 
Type
åå 

defaultObjectType
åå 
=
åå 
null
åå #
;
åå# $
if
çç 
(
çç	 
!
IsTypeConstructible
çç
 
(
çç 
propertyType
çç *
)
çç* +
)
çç+ ,
{
éé 
defaultObjectType
èè 
=
èè 
propertyType
èè '
;
èè' (
}
êê 
createdObject
íí 
=
íí !
CreateObjectFromXml
íí )
(
íí) *
element
íí* 1
,
íí1 2
defaultObjectType
íí3 D
,
ííD E
propertyType
ííF R
)
ííR S
;
ííS T
}
ìì 
if
ïï 
(
ïï 	
createdObject
ïï	 
==
ïï 
null
ïï 
)
ïï 
{
ññ 
LogLog
óó 
.
óó 
Error
óó 
(
óó 
declaringType
óó  
,
óó  !
$str
óó" J
+
óóJ K
name
óóK O
)
óóO P
;
óóP Q
}
òò 
else
ôô 	
{
öö 
if
õõ 
(
õõ	 

propInfo
õõ
 
!=
õõ 
null
õõ 
)
õõ 
{
úú 
LogLog
ûû 
.
ûû 
Debug
ûû 
(
ûû 
declaringType
ûû !
,
ûû! "
$str
ûû# 7
+
ûû7 8
propInfo
ûû9 A
.
ûûA B
Name
ûûB F
+
ûûG H
$str
ûûH W
+
ûûW X
createdObject
ûûY f
+
ûûg h
$str
ûûh k
)
ûûk l
;
ûûl m
try
†† 

{
°° 
propInfo
¶¶ 
.
¶¶ 
SetValue
¶¶ 
(
¶¶ 
target
¶¶  
,
¶¶  !
createdObject
¶¶" /
,
¶¶/ 0
BindingFlags
¶¶1 =
.
¶¶= >
SetProperty
¶¶> I
,
¶¶I J
null
¶¶K O
,
¶¶O P
null
¶¶Q U
,
¶¶U V
CultureInfo
¶¶W b
.
¶¶b c
InvariantCulture
¶¶c s
)
¶¶s t
;
¶¶t u
}
®® 
catch
©© 
(
©© '
TargetInvocationException
©© & 
targetInvocationEx
©©' 9
)
©©9 :
{
™™ 
LogLog
´´ 
.
´´ 
Error
´´ 
(
´´ 
declaringType
´´ "
,
´´" #
$str
´´$ ?
+
´´@ A
propInfo
´´B J
.
´´J K
Name
´´K O
+
´´P Q
$str
´´R a
+
´´b c
target
´´d j
+
´´k l
$str
´´m ~
+´´ Ä
createdObject´´Å é
+´´è ê
$str´´ë î
,´´î ï"
targetInvocationEx´´ñ ®
.´´® ©
InnerException´´© ∑
)´´∑ ∏
;´´∏ π
}
¨¨ 
}
≠≠ 
else
ÆÆ 

if
ÆÆ 
(
ÆÆ 
methInfo
ÆÆ 
!=
ÆÆ 
null
ÆÆ 
)
ÆÆ  
{
ØØ 
LogLog
±± 
.
±± 
Debug
±± 
(
±± 
declaringType
±± !
,
±±! "
$str
±±# B
+
±±B C
methInfo
±±D L
.
±±L M
Name
±±M Q
+
±±R S
$str
±±S b
+
±±b c
createdObject
±±d q
+
±±r s
$str
±±s v
)
±±v w
;
±±w x
try
≥≥ 

{
¥¥ 
methInfo
ππ 
.
ππ 
Invoke
ππ 
(
ππ 
target
ππ 
,
ππ 
BindingFlags
ππ  ,
.
ππ, -
InvokeMethod
ππ- 9
,
ππ9 :
null
ππ; ?
,
ππ? @
new
ππA D
object
ππE K
[
ππK L
]
ππL M
{
ππN O
createdObject
ππO \
}
ππ\ ]
,
ππ] ^
CultureInfo
ππ_ j
.
ππj k
InvariantCulture
ππk {
)
ππ{ |
;
ππ| }
}
ªª 
catch
ºº 
(
ºº '
TargetInvocationException
ºº & 
targetInvocationEx
ºº' 9
)
ºº9 :
{
ΩΩ 
LogLog
ææ 
.
ææ 
Error
ææ 
(
ææ 
declaringType
ææ "
,
ææ" #
$str
ææ$ ?
+
ææ@ A
methInfo
ææB J
.
ææJ K
Name
ææK O
+
ææP Q
$str
ææR a
+
ææb c
target
ææd j
+
ææk l
$str
ææm ~
+ææ Ä
createdObjectææÅ é
+ææè ê
$strææë î
,ææî ï"
targetInvocationExææñ ®
.ææ® ©
InnerExceptionææ© ∑
)ææ∑ ∏
;ææ∏ π
}
øø 
}
¿¿ 
}
¡¡ 
}
¬¬ 
}
√√ 
}
ƒƒ 
private
ÀÀ 	
bool
ÀÀ
 %
HasAttributesOrElements
ÀÀ &
(
ÀÀ& '

XmlElement
ÀÀ' 1
element
ÀÀ2 9
)
ÀÀ9 :
{
ÃÃ 
foreach
ÕÕ 

(
ÕÕ
 
XmlNode
ÕÕ 
node
ÕÕ 
in
ÕÕ 
element
ÕÕ "
.
ÕÕ" #

ChildNodes
ÕÕ# -
)
ÕÕ- .
{
ŒŒ 
if
œœ 
(
œœ 
node
œœ 
.
œœ 
NodeType
œœ 
==
œœ 
XmlNodeType
œœ $
.
œœ$ %
	Attribute
œœ% .
||
œœ/ 1
node
œœ2 6
.
œœ6 7
NodeType
œœ7 ?
==
œœ@ B
XmlNodeType
œœC N
.
œœN O
Element
œœO V
)
œœV W
{
–– 
return
—— 
true
—— 
;
—— 
}
““ 
}
”” 
return
‘‘ 	
false
‘‘
 
;
‘‘ 
}
’’ 
private
‹‹ 	
static
‹‹
 
bool
‹‹ !
IsTypeConstructible
‹‹ )
(
‹‹) *
Type
‹‹* .
type
‹‹/ 3
)
‹‹3 4
{
›› 
if
‚‚ 
(
‚‚ 
type
‚‚ 
.
‚‚ 
IsClass
‚‚ 
&&
‚‚ 
!
‚‚ 
type
‚‚ 
.
‚‚ 

IsAbstract
‚‚ '
)
‚‚' (
{
‰‰ 
ConstructorInfo
ÂÂ  
defaultConstructor
ÂÂ &
=
ÂÂ' (
type
ÂÂ) -
.
ÂÂ- .
GetConstructor
ÂÂ. <
(
ÂÂ< =
new
ÂÂ= @
Type
ÂÂA E
[
ÂÂE F
$num
ÂÂF G
]
ÂÂG H
)
ÂÂH I
;
ÂÂI J
if
ÊÊ 
(
ÊÊ  
defaultConstructor
ÊÊ 
!=
ÊÊ 
null
ÊÊ "
&&
ÊÊ# %
!
ÊÊ& ' 
defaultConstructor
ÊÊ' 9
.
ÊÊ9 :

IsAbstract
ÊÊ: D
&&
ÊÊE G
!
ÊÊH I 
defaultConstructor
ÊÊI [
.
ÊÊ[ \
	IsPrivate
ÊÊ\ e
)
ÊÊe f
{
ÁÁ 
return
ËË 
true
ËË 
;
ËË 
}
ÈÈ 
}
ÍÍ 
return
ÎÎ 	
false
ÎÎ
 
;
ÎÎ 
}
ÏÏ 
private
˚˚ 	

MethodInfo
˚˚
 
FindMethodInfo
˚˚ #
(
˚˚# $
Type
˚˚$ (

targetType
˚˚) 3
,
˚˚3 4
string
˚˚5 ;
name
˚˚< @
)
˚˚@ A
{
¸¸ 
string
˝˝ 	!
requiredMethodNameA
˝˝
 
=
˝˝ 
name
˝˝  $
;
˝˝$ %
string
˛˛ 	!
requiredMethodNameB
˛˛
 
=
˛˛ 
$str
˛˛  %
+
˛˛& '
name
˛˛( ,
;
˛˛, -

MethodInfo
ÄÄ 
[
ÄÄ 
]
ÄÄ 
methods
ÄÄ 
=
ÄÄ 

targetType
ÄÄ $
.
ÄÄ$ %

GetMethods
ÄÄ% /
(
ÄÄ/ 0
BindingFlags
ÄÄ0 <
.
ÄÄ< =
Instance
ÄÄ= E
|
ÄÄF G
BindingFlags
ÄÄH T
.
ÄÄT U
Public
ÄÄU [
|
ÄÄ\ ]
BindingFlags
ÄÄ^ j
.
ÄÄj k
	NonPublic
ÄÄk t
)
ÄÄt u
;
ÄÄu v
foreach
ÇÇ 

(
ÇÇ
 

MethodInfo
ÇÇ 
methInfo
ÇÇ 
in
ÇÇ !
methods
ÇÇ" )
)
ÇÇ) *
{
ÉÉ 
if
ÑÑ 
(
ÑÑ 
!
ÑÑ 	
methInfo
ÑÑ	 
.
ÑÑ 
IsStatic
ÑÑ 
)
ÑÑ 
{
ÖÖ 
string
ÜÜ 
methodInfoName
ÜÜ 
=
ÜÜ 
methInfo
ÜÜ %
.
ÜÜ% &
Name
ÜÜ& *
;
ÜÜ* +
if
àà 
(
àà 	

SystemInfo
àà	 
.
àà  
EqualsIgnoringCase
àà &
(
àà& '
methodInfoName
àà' 5
,
àà5 6!
requiredMethodNameA
àà7 J
)
ààJ K
||
ààL N

SystemInfo
ââ	 
.
ââ  
EqualsIgnoringCase
ââ &
(
ââ& '
methodInfoName
ââ' 5
,
ââ5 6!
requiredMethodNameB
ââ7 J
)
ââJ K
)
ââK L
{
ää 
System
éé 
.
éé 

Reflection
éé 
.
éé 
ParameterInfo
éé %
[
éé% &
]
éé& '

methParams
éé( 2
=
éé3 4
methInfo
éé5 =
.
éé= >
GetParameters
éé> K
(
ééK L
)
ééL M
;
ééM N
if
èè 
(
èè	 


methParams
èè
 
.
èè 
Length
èè 
==
èè 
$num
èè  
)
èè  !
{
êê 
return
ëë 
methInfo
ëë 
;
ëë 
}
íí 
}
ìì 
}
îî 
}
ïï 
return
ññ 	
null
ññ
 
;
ññ 
}
óó 
	protected
§§ 
object
§§ 
ConvertStringTo
§§ "
(
§§" #
Type
§§# '
type
§§( ,
,
§§, -
string
§§. 4
value
§§5 :
)
§§: ;
{
•• 
if
ßß 
(
ßß 
typeof
ßß 
(
ßß 
Level
ßß 
)
ßß 
==
ßß 
type
ßß 
)
ßß 
{
®® 
Level
™™ 	

levelValue
™™
 
=
™™ 
m_hierarchy
™™ "
.
™™" #
LevelMap
™™# +
[
™™+ ,
value
™™, 1
]
™™1 2
;
™™2 3
if
¨¨ 
(
¨¨ 

levelValue
¨¨ 
==
¨¨ 
null
¨¨ 
)
¨¨ 
{
≠≠ 
LogLog
ÆÆ 
.
ÆÆ 
Error
ÆÆ 
(
ÆÆ 
declaringType
ÆÆ 
,
ÆÆ  
$str
ÆÆ! V
+
ÆÆV W
value
ÆÆX ]
+
ÆÆ^ _
$str
ÆÆ_ b
)
ÆÆb c
;
ÆÆc d
}
ØØ 
return
±± 


levelValue
±± 
;
±± 
}
≤≤ 
return
≥≥ 	
OptionConverter
≥≥
 
.
≥≥ 
ConvertStringTo
≥≥ )
(
≥≥) *
type
≥≥* .
,
≥≥. /
value
≥≥0 5
)
≥≥5 6
;
≥≥6 7
}
¥¥ 
	protected
…… 
object
…… !
CreateObjectFromXml
…… &
(
……& '

XmlElement
……' 1
element
……2 9
,
……9 :
Type
……; ?
defaultTargetType
……@ Q
,
……Q R
Type
……S W
typeConstraint
……X f
)
……f g
{
   
Type
ÀÀ 

objectType
ÀÀ 
=
ÀÀ 
null
ÀÀ 
;
ÀÀ 
string
ŒŒ 	
objectTypeString
ŒŒ
 
=
ŒŒ 
element
ŒŒ $
.
ŒŒ$ %
GetAttribute
ŒŒ% 1
(
ŒŒ1 2
	TYPE_ATTR
ŒŒ2 ;
)
ŒŒ; <
;
ŒŒ< =
if
œœ 
(
œœ 
objectTypeString
œœ 
==
œœ 
null
œœ 
||
œœ  "
objectTypeString
œœ# 3
.
œœ3 4
Length
œœ4 :
==
œœ; =
$num
œœ> ?
)
œœ? @
{
–– 
if
—— 
(
—— 
defaultTargetType
—— 
==
—— 
null
—— !
)
——! "
{
““ 
LogLog
”” 
.
”” 
Error
”” 
(
”” 
declaringType
”” 
,
””  
$str
””! \
+
””\ ]
typeConstraint
””] k
.
””k l
FullName
””l t
+
””t u
$str””u ê
)””ê ë
;””ë í
return
‘‘ 
null
‘‘ 
;
‘‘ 
}
’’ 
else
÷÷ 
{
◊◊ 

objectType
ŸŸ 
=
ŸŸ 
defaultTargetType
ŸŸ #
;
ŸŸ# $
}
⁄⁄ 
}
€€ 
else
‹‹ 
{
›› 
try
ﬂﬂ 
{
‡‡ 

objectType
‰‰ 
=
‰‰ 

SystemInfo
‰‰ 
.
‰‰ 
GetTypeFromString
‰‰ .
(
‰‰. /
objectTypeString
‰‰/ ?
,
‰‰? @
true
‰‰A E
,
‰‰E F
true
‰‰G K
)
‰‰K L
;
‰‰L M
}
ÊÊ 
catch
ÁÁ 	
(
ÁÁ	 

	Exception
ÁÁ
 
ex
ÁÁ 
)
ÁÁ 
{
ËË 
LogLog
ÈÈ 
.
ÈÈ 
Error
ÈÈ 
(
ÈÈ 
declaringType
ÈÈ 
,
ÈÈ  
$str
ÈÈ! 8
+
ÈÈ8 9
objectTypeString
ÈÈ9 I
+
ÈÈI J
$str
ÈÈJ M
,
ÈÈM N
ex
ÈÈO Q
)
ÈÈQ R
;
ÈÈR S
return
ÍÍ 
null
ÍÍ 
;
ÍÍ 
}
ÎÎ 
}
ÏÏ 
bool
ÓÓ  
requiresConversion
ÓÓ 
=
ÓÓ 
false
ÓÓ "
;
ÓÓ" #
if
ÒÒ 
(
ÒÒ 
typeConstraint
ÒÒ 
!=
ÒÒ 
null
ÒÒ 
)
ÒÒ 
{
ÚÚ 
if
ÛÛ 
(
ÛÛ 
!
ÛÛ 	
typeConstraint
ÛÛ	 
.
ÛÛ 
IsAssignableFrom
ÛÛ (
(
ÛÛ( )

objectType
ÛÛ) 3
)
ÛÛ3 4
)
ÛÛ4 5
{
ÙÙ 
if
ˆˆ 
(
ˆˆ 	
OptionConverter
ˆˆ	 
.
ˆˆ 
CanConvertTypeTo
ˆˆ )
(
ˆˆ) *

objectType
ˆˆ* 4
,
ˆˆ4 5
typeConstraint
ˆˆ6 D
)
ˆˆD E
)
ˆˆE F
{
˜˜  
requiresConversion
¯¯ 
=
¯¯ 
true
¯¯ 
;
¯¯  
}
˘˘ 
else
˙˙ 	
{
˚˚ 
LogLog
¸¸ 
.
¸¸ 
Error
¸¸ 
(
¸¸ 
declaringType
¸¸  
,
¸¸  !
$str
¸¸" 1
+
¸¸1 2

objectType
¸¸2 <
.
¸¸< =
FullName
¸¸= E
+
¸¸E F
$str
¸¸F e
+
¸¸e f
typeConstraint
¸¸f t
.
¸¸t u
FullName
¸¸u }
+
¸¸} ~
$str¸¸~ ¨
)¸¸¨ ≠
;¸¸≠ Æ
return
˝˝ 
null
˝˝ 
;
˝˝ 
}
˛˛ 
}
ˇˇ 
}
ÄÄ 
object
ÉÉ 	
createdObject
ÉÉ
 
=
ÉÉ 
null
ÉÉ 
;
ÉÉ 
try
ÑÑ 
{
ÖÖ 
createdObject
ÜÜ 
=
ÜÜ 
	Activator
ÜÜ 
.
ÜÜ 
CreateInstance
ÜÜ ,
(
ÜÜ, -

objectType
ÜÜ- 7
)
ÜÜ7 8
;
ÜÜ8 9
}
áá 
catch
àà 
(
àà 	
	Exception
àà	 
createInstanceEx
àà #
)
àà# $
{
ââ 
LogLog
ää 

.
ää
 
Error
ää 
(
ää 
declaringType
ää 
,
ää 
$str
ää  `
+
ääa b

objectType
ääc m
.
ääm n
FullName
ään v
+
ääw x
$strääy à
+ääà â 
createInstanceExääâ ô
.ääô ö
ToStringääö ¢
(ää¢ £
)ää£ §
)ää§ •
;ää• ¶
}
ãã 
foreach
éé 

(
éé 
XmlNode
éé 
currentNode
éé 
in
éé  "
element
éé# *
.
éé* +

ChildNodes
éé+ 5
)
éé5 6
{
èè 
if
êê 
(
êê 
currentNode
êê 
.
êê 
NodeType
êê 
==
êê 
XmlNodeType
êê  +
.
êê+ ,
Element
êê, 3
)
êê3 4
{
ëë 
SetParameter
íí 
(
íí 
(
íí 

XmlElement
íí 
)
íí 
currentNode
íí )
,
íí) *
createdObject
íí+ 8
)
íí8 9
;
íí9 :
}
ìì 
}
îî 
IOptionHandler
óó 
optionHandler
óó 
=
óó  !
createdObject
óó" /
as
óó0 2
IOptionHandler
óó3 A
;
óóA B
if
òò 
(
òò 
optionHandler
òò 
!=
òò 
null
òò 
)
òò 
{
ôô 
optionHandler
öö 
.
öö 
ActivateOptions
öö !
(
öö! "
)
öö" #
;
öö# $
}
õõ 
if
üü 
(
üü  
requiresConversion
üü 
)
üü 
{
†† 
return
¢¢ 

OptionConverter
¢¢ 
.
¢¢ 
ConvertTypeTo
¢¢ (
(
¢¢( )
createdObject
¢¢) 6
,
¢¢6 7
typeConstraint
¢¢8 F
)
¢¢F G
;
¢¢G H
}
££ 
else
§§ 
{
•• 
return
ßß 

createdObject
ßß 
;
ßß 
}
®® 
}
©© 
private
ÆÆ 	
bool
ÆÆ
 +
HasCaseInsensitiveEnvironment
ÆÆ ,
{
ØØ	 

get
∞∞ 	
{
±± 

PlatformID
ππ 
platform
ππ 
=
ππ 
Environment
ππ $
.
ππ$ %
	OSVersion
ππ% .
.
ππ. /
Platform
ππ/ 7
;
ππ7 8
return
∫∫ 	
platform
∫∫
 
!=
∫∫ 

PlatformID
∫∫  
.
∫∫  !
Unix
∫∫! %
&&
∫∫& (
platform
∫∫) 1
!=
∫∫2 4

PlatformID
∫∫5 ?
.
∫∫? @
MacOSX
∫∫@ F
;
∫∫F G
}
ºº 
}
ΩΩ 
private
øø	 
IDictionary
øø *
CreateCaseInsensitiveWrapper
øø 9
(
øø9 :
IDictionary
øø: E
dict
øøF J
)
øøJ K
{
¿¿	 

if
¡¡ 
(
¡¡	 

dict
¡¡
 
==
¡¡ 
null
¡¡ 
)
¡¡ 
{
¬¬ 
return
√√ 	
dict
√√
 
;
√√ 
}
ƒƒ 
	Hashtable
≈≈ 
hash
≈≈ 
=
≈≈ 

SystemInfo
≈≈ !
.
≈≈! ",
CreateCaseInsensitiveHashtable
≈≈" @
(
≈≈@ A
)
≈≈A B
;
≈≈B C
foreach
∆∆ 
(
∆∆ 
DictionaryEntry
∆∆ 
entry
∆∆ $
in
∆∆% '
dict
∆∆( ,
)
∆∆, -
{
∆∆. /
hash
«« 
[
«« 
entry
«« 
.
«« 
Key
«« 
]
«« 
=
«« 
entry
«« 
.
«« 
Value
««  
;
««  !
}
»» 
return
…… 
hash
…… 
;
…… 
}
   
private
–– 	
const
––
 
string
–– 
CONFIGURATION_TAG
–– (
=
––+ ,
$str
––- 6
;
––6 7
private
—— 	
const
——
 
string
—— 
RENDERER_TAG
—— #
=
——' (
$str
——) 3
;
——3 4
private
““ 	
const
““
 
string
““ 
APPENDER_TAG
““ #
=
““( )
$str
““* 4
;
““4 5
private
”” 	
const
””
 
string
”” 
APPENDER_REF_TAG
”” '
=
””+ ,
$str
””- ;
;
””; <
private
‘‘ 	
const
‘‘
 
string
‘‘ 
	PARAM_TAG
‘‘  
=
‘‘% &
$str
‘‘' .
;
‘‘. /
private
◊◊ 	
const
◊◊
 
string
◊◊ 
CATEGORY_TAG
◊◊ #
=
◊◊' (
$str
◊◊) 3
;
◊◊3 4
private
ŸŸ 	
const
ŸŸ
 
string
ŸŸ 
PRIORITY_TAG
ŸŸ #
=
ŸŸ' (
$str
ŸŸ) 3
;
ŸŸ3 4
private
€€ 	
const
€€
 
string
€€ 

LOGGER_TAG
€€ !
=
€€& '
$str
€€( 0
;
€€0 1
private
‹‹ 	
const
‹‹
 
string
‹‹ 
	NAME_ATTR
‹‹  
=
‹‹% &
$str
‹‹' -
;
‹‹- .
private
›› 	
const
››
 
string
›› 
	TYPE_ATTR
››  
=
››% &
$str
››' -
;
››- .
private
ﬁﬁ 	
const
ﬁﬁ
 
string
ﬁﬁ 

VALUE_ATTR
ﬁﬁ !
=
ﬁﬁ& '
$str
ﬁﬁ( /
;
ﬁﬁ/ 0
private
ﬂﬂ 	
const
ﬂﬂ
 
string
ﬂﬂ 
ROOT_TAG
ﬂﬂ 
=
ﬂﬂ$ %
$str
ﬂﬂ& ,
;
ﬂﬂ, -
private
‡‡ 	
const
‡‡
 
string
‡‡ 
	LEVEL_TAG
‡‡  
=
‡‡% &
$str
‡‡' .
;
‡‡. /
private
·· 	
const
··
 
string
·· 
REF_ATTR
·· 
=
··$ %
$str
··& +
;
··+ ,
private
‚‚ 	
const
‚‚
 
string
‚‚ 
ADDITIVITY_ATTR
‚‚ &
=
‚‚) *
$str
‚‚+ 7
;
‚‚7 8
private
„„ 	
const
„„
 
string
„„ 
THRESHOLD_ATTR
„„ %
=
„„) *
$str
„„+ 6
;
„„6 7
private
‰‰ 	
const
‰‰
 
string
‰‰ 
CONFIG_DEBUG_ATTR
‰‰ (
=
‰‰+ ,
$str
‰‰- :
;
‰‰: ;
private
ÂÂ 	
const
ÂÂ
 
string
ÂÂ !
INTERNAL_DEBUG_ATTR
ÂÂ *
=
ÂÂ, -
$str
ÂÂ. 5
;
ÂÂ5 6
private
ÊÊ 	
const
ÊÊ
 
string
ÊÊ &
EMIT_INTERNAL_DEBUG_ATTR
ÊÊ /
=
ÊÊ2 3
$str
ÊÊ4 ?
;
ÊÊ? @
private
ÁÁ 	
const
ÁÁ
 
string
ÁÁ %
CONFIG_UPDATE_MODE_ATTR
ÁÁ .
=
ÁÁ/ 0
$str
ÁÁ1 9
;
ÁÁ9 :
private
ËË 	
const
ËË
 
string
ËË !
RENDERING_TYPE_ATTR
ËË *
=
ËË, -
$str
ËË. >
;
ËË> ?
private
ÈÈ 	
const
ÈÈ
 
string
ÈÈ  
RENDERED_TYPE_ATTR
ÈÈ )
=
ÈÈ, -
$str
ÈÈ. =
;
ÈÈ= >
private
ÏÏ 	
const
ÏÏ
 
string
ÏÏ 
	INHERITED
ÏÏ  
=
ÏÏ! "
$str
ÏÏ# .
;
ÏÏ. /
private
ıı 	
	Hashtable
ıı
 
m_appenderBag
ıı !
;
ıı! "
private
˙˙ 	
readonly
˙˙
 
	Hierarchy
˙˙ 
m_hierarchy
˙˙ (
;
˙˙( )
private
á	á	 
readonly
á	á	 
static
á	á	 
Type
á	á	 !
declaringType
á	á	" /
=
á	á	0 1
typeof
á	á	2 8
(
á	á	8 9&
XmlHierarchyConfigurator
á	á	9 Q
)
á	á	Q R
;
á	á	R S
}
ä	ä	 
}ã	ã	 µ
RC:\sonarqube\projects\log4net-2.0.7\src\Repository\IBasicRepositoryConfigurator.cs
	namespace 	
log4net
 
. 

Repository 
{ 
public%% 
	interface%% (
IBasicRepositoryConfigurator%% .
{&& 
void11 
	Configure11 
(11 
Appender11 
.11  
	IAppender11  )
appender11* 2
)112 3
;113 4
void== 
	Configure== 
(== 
params== 
Appender== &
.==& '
	IAppender==' 0
[==0 1
]==1 2
	appenders==3 <
)==< =
;=== >
}>> 
}?? ∫
GC:\sonarqube\projects\log4net-2.0.7\src\Repository\ILoggerRepository.cs
	namespace 	
log4net
 
. 

Repository 
{ 
public++ 
delegate++ 
void++ 0
$LoggerRepositoryShutdownEventHandler++ :
(++: ;
object++; A
sender++B H
,++H I
	EventArgs++J S
e++T U
)++U V
;++V W
public;; 
delegate;; 
void;; :
.LoggerRepositoryConfigurationResetEventHandler;; D
(;;D E
object;;E K
sender;;L R
,;;R S
	EventArgs;;T ]
e;;^ _
);;_ `
;;;` a
publicKK 
delegateKK 
voidKK <
0LoggerRepositoryConfigurationChangedEventHandlerKK F
(KKF G
objectKKG M
senderKKN T
,KKT U
	EventArgsKKV _
eKK` a
)KKa b
;KKb c
public^^ 
	interface^^ 
ILoggerRepository^^ #
{__ 
stringkk 
Namekk	 
{kk 
getkk 
;kk 
setkk 
;kk 
}kk 
RendererMap|| 
RendererMap|| 
{|| 
get|| 
;||  
}||! "
	PluginMap
ää 
	PluginMap
ää 
{
ää 
get
ää 
;
ää 
}
ää 
LevelMap
ôô 

LevelMap
ôô 
{
ôô 
get
ôô 
;
ôô 
}
ôô 
Level
¶¶ 
	Threshold
¶¶ 
{
¶¶ 
get
¶¶ 
;
¶¶ 
set
¶¶ 
;
¶¶ 
}
¶¶ 
ILogger
¥¥ 	
Exists
¥¥
 
(
¥¥ 
string
¥¥ 
name
¥¥ 
)
¥¥ 
;
¥¥ 
ILogger
øø 	
[
øø	 

]
øø
 
GetCurrentLoggers
øø 
(
øø 
)
øø 
;
øø  
ILogger
–– 	
	GetLogger
––
 
(
–– 
string
–– 
name
–– 
)
––  
;
––  !
void
‰‰ 
Shutdown
‰‰ 
(
‰‰ 
)
‰‰ 
;
‰‰ 
void
ˆˆ  
ResetConfiguration
ˆˆ 
(
ˆˆ 
)
ˆˆ 
;
ˆˆ 
void
àà 
Log
àà 

(
àà
 
LoggingEvent
àà 
logEvent
àà  
)
àà  !
;
àà! "
bool
ïï 

Configured
ïï 
{
ïï 
get
ïï 
;
ïï 
set
ïï 
;
ïï 
}
ïï 
ICollection
õõ #
ConfigurationMessages
õõ )
{
õõ* +
get
õõ, /
;
õõ/ 0
set
õõ1 4
;
õõ4 5
}
õõ6 7
event
®® 2
$LoggerRepositoryShutdownEventHandler
®® ,
ShutdownEvent
®®- :
;
®®: ;
event
∂∂ <
.LoggerRepositoryConfigurationResetEventHandler
∂∂ 6 
ConfigurationReset
∂∂7 I
;
∂∂I J
event
√√ >
0LoggerRepositoryConfigurationChangedEventHandler
√√ 8"
ConfigurationChanged
√√9 M
;
√√M N"
PropertiesDictionary
–– 

Properties
–– !
{
––" #
get
––$ '
;
––' (
}
––) *
log4net
€€ 	
.
€€	 

Appender
€€
 
.
€€ 
	IAppender
€€ 
[
€€ 
]
€€ 
GetAppenders
€€ +
(
€€+ ,
)
€€, -
;
€€- .
}
‹‹ 
}›› Ù
PC:\sonarqube\projects\log4net-2.0.7\src\Repository\IXmlRepositoryConfigurator.cs
	namespace 	
log4net
 
. 

Repository 
{ 
public(( 
	interface(( &
IXmlRepositoryConfigurator(( ,
{)) 
void44 
	Configure44 
(44 
System44 
.44 
Xml44 
.44 

XmlElement44 &
element44' .
)44. /
;44/ 0
}55 
}66 ‚Æ
NC:\sonarqube\projects\log4net-2.0.7\src\Repository\LoggerRepositorySkeleton.cs
	namespace 	
log4net
 
. 

Repository 
{ 
public,, 
abstract,, 
class,, $
LoggerRepositorySkeleton,, /
:,,0 1
ILoggerRepository,,2 C
,,,C D
Appender,,E M
.,,M N

IFlushable,,N X
{-- 
private00 	
string00
 
m_name00 
;00 
private11 	
RendererMap11
 
m_rendererMap11 #
;11# $
private22 	
	PluginMap22
 
m_pluginMap22 
;22  
private33 	
LevelMap33
 

m_levelMap33 
;33 
private44 	
Level44
 
m_threshold44 
;44 
private55 	
bool55
 
m_configured55 
;55 
private66 
ICollection66 #
m_configurationMessages66 3
;663 4
private77 	
event77
 0
$LoggerRepositoryShutdownEventHandler77 4
m_shutdownEvent775 D
;77D E
private88 	
event88
 :
.LoggerRepositoryConfigurationResetEventHandler88 >%
m_configurationResetEvent88? X
;88X Y
private99 	
event99
 <
0LoggerRepositoryConfigurationChangedEventHandler99 @'
m_configurationChangedEvent99A \
;99\ ]
private:: 	 
PropertiesDictionary::
 
m_properties:: +
;::+ ,
	protectedHH $
LoggerRepositorySkeletonHH $
(HH$ %
)HH% &
:HH' (
thisHH) -
(HH- .
newHH. 1 
PropertiesDictionaryHH2 F
(HHF G
)HHG H
)HHH I
{II 
}JJ 
	protectedUU $
LoggerRepositorySkeletonUU $
(UU$ % 
PropertiesDictionaryUU% 9

propertiesUU: D
)UUD E
{VV 
m_propertiesWW 
=WW 

propertiesWW 
;WW 
m_rendererMapXX 
=XX 
newXX 
RendererMapXX "
(XX" #
)XX# $
;XX$ %
m_pluginMapYY 
=YY 
newYY 
	PluginMapYY 
(YY 
thisYY #
)YY# $
;YY$ %

m_levelMapZZ 
=ZZ 
newZZ 
LevelMapZZ 
(ZZ 
)ZZ 
;ZZ #
m_configurationMessages[[ #
=[[$ %
EmptyCollection[[& 5
.[[5 6
Instance[[6 >
;[[> ?
m_configured\\ 
=\\ 
false\\ 
;\\ 
AddBuiltinLevels^^ 
(^^ 
)^^ 
;^^ 
m_thresholdaa 
=aa 
Levelaa 
.aa 
Allaa 
;aa 
}bb 
virtualuu 	
publicuu
 
stringuu 
Nameuu 
{vv 
getww 
{ww 
returnww	 
m_nameww 
;ww 
}ww 
setxx 
{xx 
m_namexx	 
=xx 
valuexx 
;xx 
}xx 
}yy 
virtual
ÜÜ 	
public
ÜÜ
 
Level
ÜÜ 
	Threshold
ÜÜ  
{
áá 
get
àà 
{
àà 
return
àà	 
m_threshold
àà 
;
àà 
}
àà 
set
ââ 
{
ää 
if
ãã 
(
ãã 
value
ãã 
!=
ãã 
null
ãã 
)
ãã 
{
åå 
m_threshold
çç 
=
çç 
value
çç 
;
çç 
}
éé 
else
èè 
{
êê 
LogLog
íí 
.
íí 
Warn
íí 
(
íí 
declaringType
íí 
,
íí 
$str
íí  k
)
íík l
;
ííl m
m_threshold
ìì 
=
ìì 
Level
ìì 
.
ìì 
All
ìì 
;
ìì 
}
îî 
}
ïï 
}
ññ 
virtual
ßß 	
public
ßß
 
RendererMap
ßß 
RendererMap
ßß (
{
®® 
get
©© 
{
©© 
return
©©	 
m_rendererMap
©© 
;
©© 
}
©©  
}
™™ 
virtual
∏∏ 	
public
∏∏
 
	PluginMap
∏∏ 
	PluginMap
∏∏ $
{
ππ 
get
∫∫ 
{
∫∫ 
return
∫∫	 
m_pluginMap
∫∫ 
;
∫∫ 
}
∫∫ 
}
ªª 
virtual
   	
public
  
 
LevelMap
   
LevelMap
   "
{
ÀÀ 
get
ÃÃ 
{
ÃÃ 
return
ÃÃ	 

m_levelMap
ÃÃ 
;
ÃÃ 
}
ÃÃ 
}
ÕÕ 
abstract
⁄⁄ 

public
⁄⁄ 
ILogger
⁄⁄ 
Exists
⁄⁄  
(
⁄⁄  !
string
⁄⁄! '
name
⁄⁄( ,
)
⁄⁄, -
;
⁄⁄- .
abstract
ÂÂ 

public
ÂÂ 
ILogger
ÂÂ 
[
ÂÂ 
]
ÂÂ 
GetCurrentLoggers
ÂÂ -
(
ÂÂ- .
)
ÂÂ. /
;
ÂÂ/ 0
abstract
ˆˆ 

public
ˆˆ 
ILogger
ˆˆ 
	GetLogger
ˆˆ #
(
ˆˆ# $
string
ˆˆ$ *
name
ˆˆ+ /
)
ˆˆ/ 0
;
ˆˆ0 1
virtual
ÇÇ 	
public
ÇÇ
 
void
ÇÇ 
Shutdown
ÇÇ 
(
ÇÇ 
)
ÇÇ  
{
ÉÉ 
foreach
ÖÖ 

(
ÖÖ
 
IPlugin
ÖÖ 
plugin
ÖÖ 
in
ÖÖ 
	PluginMap
ÖÖ &
.
ÖÖ& '

AllPlugins
ÖÖ' 1
)
ÖÖ1 2
{
ÜÜ 
plugin
áá 

.
áá
 
Shutdown
áá 
(
áá 
)
áá 
;
áá 
}
àà 

OnShutdown
ãã 
(
ãã 
null
ãã 
)
ãã 
;
ãã 
}
åå 
virtual
ûû 	
public
ûû
 
void
ûû  
ResetConfiguration
ûû (
(
ûû( )
)
ûû) *
{
üü 
m_rendererMap
°° 
.
°° 
Clear
°° 
(
°° 
)
°° 
;
°° 

m_levelMap
¢¢ 
.
¢¢ 
Clear
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ %
m_configurationMessages
££ #
=
££$ %
EmptyCollection
££& 5
.
££5 6
Instance
££6 >
;
££> ?
AddBuiltinLevels
¶¶ 
(
¶¶ 
)
¶¶ 
;
¶¶ 

Configured
®® 
=
®® 
false
®® 
;
®® "
OnConfigurationReset
´´ 
(
´´ 
null
´´ 
)
´´ 
;
´´ 
}
¨¨ 
abstract
ææ 

public
ææ 
void
ææ 
Log
ææ 
(
ææ 
LoggingEvent
ææ '
logEvent
ææ( 0
)
ææ0 1
;
ææ1 2
virtual
ÀÀ 	
public
ÀÀ
 
bool
ÀÀ 

Configured
ÀÀ  
{
ÃÃ 
get
ÕÕ 
{
ÕÕ 
return
ÕÕ	 
m_configured
ÕÕ 
;
ÕÕ 
}
ÕÕ 
set
ŒŒ 
{
ŒŒ 
m_configured
ŒŒ	 
=
ŒŒ 
value
ŒŒ 
;
ŒŒ 
}
ŒŒ  
}
œœ 
virtual
’’ 
public
’’ 
ICollection
’’ #
ConfigurationMessages
’’  5
{
÷÷ 
get
◊◊ 
{
◊◊ 
return
◊◊ %
m_configurationMessages
◊◊ 0
;
◊◊0 1
}
◊◊2 3
set
ÿÿ 
{
ÿÿ %
m_configurationMessages
ÿÿ )
=
ÿÿ* +
value
ÿÿ, 1
;
ÿÿ1 2
}
ÿÿ3 4
}
ŸŸ 
public
ÊÊ 
event
ÊÊ	 2
$LoggerRepositoryShutdownEventHandler
ÊÊ 3
ShutdownEvent
ÊÊ4 A
{
ÁÁ 
add
ËË 
{
ËË 
m_shutdownEvent
ËË	 
+=
ËË 
value
ËË !
;
ËË! "
}
ËË# $
remove
ÈÈ 	
{
ÈÈ
 
m_shutdownEvent
ÈÈ 
-=
ÈÈ 
value
ÈÈ $
;
ÈÈ$ %
}
ÈÈ& '
}
ÍÍ 
public
¯¯ 
event
¯¯	 <
.LoggerRepositoryConfigurationResetEventHandler
¯¯ = 
ConfigurationReset
¯¯> P
{
˘˘ 
add
˙˙ 
{
˙˙ '
m_configurationResetEvent
˙˙	 "
+=
˙˙# %
value
˙˙& +
;
˙˙+ ,
}
˙˙- .
remove
˚˚ 	
{
˚˚
 '
m_configurationResetEvent
˚˚ %
-=
˚˚& (
value
˚˚) .
;
˚˚. /
}
˚˚0 1
}
¸¸ 
public
ââ 
event
ââ	 >
0LoggerRepositoryConfigurationChangedEventHandler
ââ ?"
ConfigurationChanged
ââ@ T
{
ää 
add
ãã 
{
ãã )
m_configurationChangedEvent
ãã	 $
+=
ãã% '
value
ãã( -
;
ãã- .
}
ãã/ 0
remove
åå 	
{
åå
 )
m_configurationChangedEvent
åå '
-=
åå( *
value
åå+ 0
;
åå0 1
}
åå2 3
}
çç 
public
òò "
PropertiesDictionary
òò	 

Properties
òò (
{
ôô 
get
öö 
{
öö 
return
öö	 
m_properties
öö 
;
öö 
}
öö 
}
õõ 
abstract
¶¶ 

public
¶¶ 
log4net
¶¶ 
.
¶¶ 
Appender
¶¶ "
.
¶¶" #
	IAppender
¶¶# ,
[
¶¶, -
]
¶¶- .
GetAppenders
¶¶/ ;
(
¶¶; <
)
¶¶< =
;
¶¶= >
private
≥≥ 
readonly
≥≥ 
static
≥≥ 
Type
≥≥ !
declaringType
≥≥" /
=
≥≥0 1
typeof
≥≥2 8
(
≥≥8 9&
LoggerRepositorySkeleton
≥≥9 Q
)
≥≥Q R
;
≥≥R S
private
∑∑ 	
void
∑∑
 
AddBuiltinLevels
∑∑ 
(
∑∑  
)
∑∑  !
{
∏∏ 

m_levelMap
∫∫ 
.
∫∫ 
Add
∫∫ 
(
∫∫ 
Level
∫∫ 
.
∫∫ 
Off
∫∫ 
)
∫∫ 
;
∫∫ 

m_levelMap
ΩΩ 
.
ΩΩ 
Add
ΩΩ 
(
ΩΩ 
Level
ΩΩ 
.
ΩΩ 
	Emergency
ΩΩ !
)
ΩΩ! "
;
ΩΩ" #

m_levelMap
ææ 
.
ææ 
Add
ææ 
(
ææ 
Level
ææ 
.
ææ 
Fatal
ææ 
)
ææ 
;
ææ 

m_levelMap
øø 
.
øø 
Add
øø 
(
øø 
Level
øø 
.
øø 
Alert
øø 
)
øø 
;
øø 

m_levelMap
¬¬ 
.
¬¬ 
Add
¬¬ 
(
¬¬ 
Level
¬¬ 
.
¬¬ 
Critical
¬¬  
)
¬¬  !
;
¬¬! "

m_levelMap
√√ 
.
√√ 
Add
√√ 
(
√√ 
Level
√√ 
.
√√ 
Severe
√√ 
)
√√ 
;
√√  

m_levelMap
ƒƒ 
.
ƒƒ 
Add
ƒƒ 
(
ƒƒ 
Level
ƒƒ 
.
ƒƒ 
Error
ƒƒ 
)
ƒƒ 
;
ƒƒ 

m_levelMap
≈≈ 
.
≈≈ 
Add
≈≈ 
(
≈≈ 
Level
≈≈ 
.
≈≈ 
Warn
≈≈ 
)
≈≈ 
;
≈≈ 

m_levelMap
»» 
.
»» 
Add
»» 
(
»» 
Level
»» 
.
»» 
Notice
»» 
)
»» 
;
»»  

m_levelMap
…… 
.
…… 
Add
…… 
(
…… 
Level
…… 
.
…… 
Info
…… 
)
…… 
;
…… 

m_levelMap
ÃÃ 
.
ÃÃ 
Add
ÃÃ 
(
ÃÃ 
Level
ÃÃ 
.
ÃÃ 
Debug
ÃÃ 
)
ÃÃ 
;
ÃÃ 

m_levelMap
ÕÕ 
.
ÕÕ 
Add
ÕÕ 
(
ÕÕ 
Level
ÕÕ 
.
ÕÕ 
Fine
ÕÕ 
)
ÕÕ 
;
ÕÕ 

m_levelMap
ŒŒ 
.
ŒŒ 
Add
ŒŒ 
(
ŒŒ 
Level
ŒŒ 
.
ŒŒ 
Trace
ŒŒ 
)
ŒŒ 
;
ŒŒ 

m_levelMap
œœ 
.
œœ 
Add
œœ 
(
œœ 
Level
œœ 
.
œœ 
Finer
œœ 
)
œœ 
;
œœ 

m_levelMap
–– 
.
–– 
Add
–– 
(
–– 
Level
–– 
.
–– 
Verbose
–– 
)
––  
;
––  !

m_levelMap
—— 
.
—— 
Add
—— 
(
—— 
Level
—— 
.
—— 
Finest
—— 
)
—— 
;
——  

m_levelMap
”” 
.
”” 
Add
”” 
(
”” 
Level
”” 
.
”” 
All
”” 
)
”” 
;
”” 
}
‘‘ 
virtual
‡‡ 	
public
‡‡
 
void
‡‡ 
AddRenderer
‡‡ !
(
‡‡! "
Type
‡‡" &
typeToRender
‡‡' 3
,
‡‡3 4
IObjectRenderer
‡‡5 D
rendererInstance
‡‡E U
)
‡‡U V
{
·· 
if
‚‚ 
(
‚‚ 
typeToRender
‚‚ 
==
‚‚ 
null
‚‚ 
)
‚‚ 
{
„„ 
throw
‰‰ 	
new
‰‰
 #
ArgumentNullException
‰‰ #
(
‰‰# $
$str
‰‰$ 2
)
‰‰2 3
;
‰‰3 4
}
ÂÂ 
if
ÊÊ 
(
ÊÊ 
rendererInstance
ÊÊ 
==
ÊÊ 
null
ÊÊ 
)
ÊÊ  
{
ÁÁ 
throw
ËË 	
new
ËË
 #
ArgumentNullException
ËË #
(
ËË# $
$str
ËË$ 6
)
ËË6 7
;
ËË7 8
}
ÈÈ 
m_rendererMap
ÎÎ 
.
ÎÎ 
Put
ÎÎ 
(
ÎÎ 
typeToRender
ÎÎ !
,
ÎÎ! "
rendererInstance
ÎÎ# 3
)
ÎÎ3 4
;
ÎÎ4 5
}
ÏÏ 
	protected
˜˜ 
virtual
˜˜ 
void
˜˜ 

OnShutdown
˜˜ #
(
˜˜# $
	EventArgs
˜˜$ -
e
˜˜. /
)
˜˜/ 0
{
¯¯ 
if
˘˘ 
(
˘˘ 
e
˘˘ 
==
˘˘	 
null
˘˘ 
)
˘˘ 
{
˙˙ 
e
˚˚ 
=
˚˚ 
	EventArgs
˚˚ 
.
˚˚ 
Empty
˚˚ 
;
˚˚ 
}
¸¸ 2
$LoggerRepositoryShutdownEventHandler
˛˛ '
handler
˛˛( /
=
˛˛0 1
m_shutdownEvent
˛˛2 A
;
˛˛A B
if
ˇˇ 
(
ˇˇ 
handler
ˇˇ 
!=
ˇˇ 
null
ˇˇ 
)
ˇˇ 
{
ÄÄ 
handler
ÅÅ 
(
ÅÅ 
this
ÅÅ 
,
ÅÅ 
e
ÅÅ 
)
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}
ÉÉ 
	protected
éé 
virtual
éé 
void
éé "
OnConfigurationReset
éé -
(
éé- .
	EventArgs
éé. 7
e
éé8 9
)
éé9 :
{
èè 
if
êê 
(
êê 
e
êê 
==
êê	 
null
êê 
)
êê 
{
ëë 
e
íí 
=
íí 
	EventArgs
íí 
.
íí 
Empty
íí 
;
íí 
}
ìì <
.LoggerRepositoryConfigurationResetEventHandler
ïï 1
handler
ïï2 9
=
ïï: ;'
m_configurationResetEvent
ïï< U
;
ïïU V
if
ññ 
(
ññ 
handler
ññ 
!=
ññ 
null
ññ 
)
ññ 
{
óó 
handler
òò 
(
òò 
this
òò 
,
òò 
e
òò 
)
òò 
;
òò 
}
ôô 
}
öö 
	protected
•• 
virtual
•• 
void
•• $
OnConfigurationChanged
•• /
(
••/ 0
	EventArgs
••0 9
e
••: ;
)
••; <
{
¶¶ 
if
ßß 
(
ßß 
e
ßß 
==
ßß	 
null
ßß 
)
ßß 
{
®® 
e
©© 
=
©© 
	EventArgs
©© 
.
©© 
Empty
©© 
;
©© 
}
™™ >
0LoggerRepositoryConfigurationChangedEventHandler
¨¨ 3
handler
¨¨4 ;
=
¨¨< =)
m_configurationChangedEvent
¨¨> Y
;
¨¨Y Z
if
≠≠ 
(
≠≠ 
handler
≠≠ 
!=
≠≠ 
null
≠≠ 
)
≠≠ 
{
ÆÆ 
handler
ØØ 
(
ØØ 
this
ØØ 
,
ØØ 
e
ØØ 
)
ØØ 
;
ØØ 
}
∞∞ 
}
±± 
public
ΩΩ 
void
ΩΩ	 '
RaiseConfigurationChanged
ΩΩ '
(
ΩΩ' (
	EventArgs
ΩΩ( 1
e
ΩΩ2 3
)
ΩΩ3 4
{
ææ $
OnConfigurationChanged
øø 
(
øø 
e
øø 
)
øø 
;
øø 
}
¿¿ 
private
¬¬ 
static
¬¬ 
int
¬¬ 
GetWaitTime
¬¬ &
(
¬¬& '
DateTime
¬¬' /
startTimeUtc
¬¬0 <
,
¬¬< =
int
¬¬> A!
millisecondsTimeout
¬¬B U
)
¬¬U V
{
√√ 	
if
ƒƒ 
(
ƒƒ !
millisecondsTimeout
ƒƒ #
==
ƒƒ$ &
Timeout
ƒƒ' .
.
ƒƒ. /
Infinite
ƒƒ/ 7
)
ƒƒ7 8
return
ƒƒ9 ?
Timeout
ƒƒ@ G
.
ƒƒG H
Infinite
ƒƒH P
;
ƒƒP Q
if
≈≈ 
(
≈≈ !
millisecondsTimeout
≈≈ #
==
≈≈$ &
$num
≈≈' (
)
≈≈( )
return
≈≈* 0
$num
≈≈1 2
;
≈≈2 3
int
«« !
elapsedMilliseconds
«« #
=
««$ %
(
««& '
int
««' *
)
««* +
(
««+ ,
DateTime
««, 4
.
««4 5
UtcNow
««5 ;
-
««< =
startTimeUtc
««> J
)
««J K
.
««K L
TotalMilliseconds
««L ]
;
««] ^
int
»» 
timeout
»» 
=
»» !
millisecondsTimeout
»» -
-
»». /!
elapsedMilliseconds
»»0 C
;
»»C D
if
…… 
(
…… 
timeout
…… 
<
…… 
$num
…… 
)
…… 
timeout
…… $
=
……% &
$num
……' (
;
……( )
return
   
timeout
   
;
   
}
ÀÀ 	
public
”” 
bool
”” 
Flush
”” 
(
”” 
int
”” !
millisecondsTimeout
”” 1
)
””1 2
{
‘‘ 	
if
’’ 
(
’’ !
millisecondsTimeout
’’ #
<
’’$ %
-
’’& '
$num
’’' (
)
’’( )
throw
’’* /
new
’’0 3)
ArgumentOutOfRangeException
’’4 O
(
’’O P
$str
’’P e
,
’’e f
$str’’g û
)’’û ü
;’’ü †
bool
ÿÿ 
result
ÿÿ 
=
ÿÿ 
true
ÿÿ 
;
ÿÿ 
DateTime
€€ 
startTimeUtc
€€ !
=
€€" #
DateTime
€€$ ,
.
€€, -
UtcNow
€€- 3
;
€€3 4
foreach
ﬁﬁ 
(
ﬁﬁ 
log4net
ﬁﬁ 
.
ﬁﬁ 
Appender
ﬁﬁ $
.
ﬁﬁ$ %
	IAppender
ﬁﬁ% .
appender
ﬁﬁ/ 7
in
ﬁﬁ8 :
GetAppenders
ﬁﬁ; G
(
ﬁﬁG H
)
ﬁﬁH I
)
ﬁﬁI J
{
ﬂﬂ 
log4net
‡‡ 
.
‡‡ 
Appender
‡‡  
.
‡‡  !

IFlushable
‡‡! +
	flushable
‡‡, 5
=
‡‡6 7
appender
‡‡8 @
as
‡‡A C
log4net
‡‡D K
.
‡‡K L
Appender
‡‡L T
.
‡‡T U

IFlushable
‡‡U _
;
‡‡_ `
if
·· 
(
·· 
	flushable
·· 
==
··  
null
··! %
)
··% &
continue
··' /
;
··/ 0
if
‚‚ 
(
‚‚ 
appender
‚‚ 
is
‚‚ 
Appender
‚‚  (
.
‚‚( )'
BufferingAppenderSkeleton
‚‚) B
)
‚‚B C
{
„„ 
int
‰‰ 
timeout
‰‰ 
=
‰‰  !
GetWaitTime
‰‰" -
(
‰‰- .
startTimeUtc
‰‰. :
,
‰‰: ;!
millisecondsTimeout
‰‰< O
)
‰‰O P
;
‰‰P Q
if
ÂÂ 
(
ÂÂ 
!
ÂÂ 
	flushable
ÂÂ "
.
ÂÂ" #
Flush
ÂÂ# (
(
ÂÂ( )
timeout
ÂÂ) 0
)
ÂÂ0 1
)
ÂÂ1 2
result
ÂÂ3 9
=
ÂÂ: ;
false
ÂÂ< A
;
ÂÂA B
}
ÊÊ 
}
ÁÁ 
foreach
ÍÍ 
(
ÍÍ 
log4net
ÍÍ 
.
ÍÍ 
Appender
ÍÍ %
.
ÍÍ% &
	IAppender
ÍÍ& /
appender
ÍÍ0 8
in
ÍÍ9 ;
GetAppenders
ÍÍ< H
(
ÍÍH I
)
ÍÍI J
)
ÍÍJ K
{
ÎÎ 
log4net
ÏÏ 
.
ÏÏ 
Appender
ÏÏ  
.
ÏÏ  !

IFlushable
ÏÏ! +
	flushable
ÏÏ, 5
=
ÏÏ6 7
appender
ÏÏ8 @
as
ÏÏA C
log4net
ÏÏD K
.
ÏÏK L
Appender
ÏÏL T
.
ÏÏT U

IFlushable
ÏÏU _
;
ÏÏ_ `
if
ÌÌ 
(
ÌÌ 
	flushable
ÌÌ 
==
ÌÌ  
null
ÌÌ! %
)
ÌÌ% &
continue
ÌÌ' /
;
ÌÌ/ 0
if
ÓÓ 
(
ÓÓ 
!
ÓÓ 
(
ÓÓ 
appender
ÓÓ 
is
ÓÓ !
Appender
ÓÓ" *
.
ÓÓ* +'
BufferingAppenderSkeleton
ÓÓ+ D
)
ÓÓD E
)
ÓÓE F
{
ÔÔ 
int
 
timeout
 
=
  !
GetWaitTime
" -
(
- .
startTimeUtc
. :
,
: ;!
millisecondsTimeout
< O
)
O P
;
P Q
if
ÒÒ 
(
ÒÒ 
!
ÒÒ 
	flushable
ÒÒ "
.
ÒÒ" #
Flush
ÒÒ# (
(
ÒÒ( )
timeout
ÒÒ) 0
)
ÒÒ0 1
)
ÒÒ1 2
result
ÒÒ3 9
=
ÒÒ: ;
false
ÒÒ< A
;
ÒÒA B
}
ÚÚ 
}
ÛÛ 
return
ıı 
result
ıı 
;
ıı 
}
ˆˆ 	
}
˜˜ 
}¯¯ –

8C:\sonarqube\projects\log4net-2.0.7\src\ThreadContext.cs
	namespace 	
log4net
 
{ 
publicFF 
sealedFF 
classFF 
ThreadContextFF "
{GG 
privateRR 	
ThreadContextRR
 
(RR 
)RR 
{SS 
}TT 
publicff 
staticff	 #
ThreadContextPropertiesff '

Propertiesff( 2
{gg 
gethh 
{hh 
returnhh	 
s_propertieshh 
;hh 
}hh 
}ii 
publicvv 
staticvv	 
ThreadContextStacksvv #
Stacksvv$ *
{ww 
getxx 
{xx 
returnxx	 
s_stacksxx 
;xx 
}xx 
}yy 
private
ÇÇ 	
readonly
ÇÇ
 
static
ÇÇ %
ThreadContextProperties
ÇÇ 1
s_properties
ÇÇ2 >
=
ÇÇ? @
new
ÇÇA D%
ThreadContextProperties
ÇÇE \
(
ÇÇ\ ]
)
ÇÇ] ^
;
ÇÇ^ _
private
áá 	
readonly
áá
 
static
áá !
ThreadContextStacks
áá -
s_stacks
áá. 6
=
áá7 8
new
áá9 <!
ThreadContextStacks
áá= P
(
ááP Q
s_properties
ááQ ]
)
áá] ^
;
áá^ _
}
ää 
}ãã î^
DC:\sonarqube\projects\log4net-2.0.7\src\Util\AppenderAttachedImpl.cs
	namespace 	
log4net
 
. 
Util 
{ 
public'' 
class''  
AppenderAttachedImpl'' "
:''# $
IAppenderAttachable''% 8
{(( 
public33  
AppenderAttachedImpl33	 
(33 
)33 
{44 
}55 
publicFF 
intFF	 !
AppendLoopOnAppendersFF "
(FF" #
LoggingEventFF# /
loggingEventFF0 <
)FF< =
{GG 
ifHH 
(HH 
loggingEventHH 
==HH 
nullHH 
)HH 
{II 
throwJJ 	
newJJ
 !
ArgumentNullExceptionJJ #
(JJ# $
$strJJ$ 2
)JJ2 3
;JJ3 4
}KK 
ifNN 
(NN 
m_appenderListNN 
==NN 
nullNN 
)NN 
{OO 
returnPP 

$numPP 
;PP 
}QQ 
ifSS 
(SS 
m_appenderArraySS 
==SS 
nullSS 
)SS 
{TT 
m_appenderArrayUU 
=UU 
m_appenderListUU $
.UU$ %
ToArrayUU% ,
(UU, -
)UU- .
;UU. /
}VV 
foreachXX 

(XX
 
	IAppenderXX 
appenderXX 
inXX  
m_appenderArrayXX! 0
)XX0 1
{YY 
tryZZ 
{[[ 
appender\\ 
.\\ 
DoAppend\\ 
(\\ 
loggingEvent\\ #
)\\# $
;\\$ %
}]] 
catch^^ 	
(^^	 

	Exception^^
 
ex^^ 
)^^ 
{__ 
LogLog`` 
.`` 
Error`` 
(`` 
declaringType`` 
,``  
$str``! A
+``B C
appender``D L
.``L M
Name``M Q
+``R S
$str``T W
,``W X
ex``Y [
)``[ \
;``\ ]
}aa 
}bb 
returncc 	
m_appenderListcc
 
.cc 
Countcc 
;cc 
}dd 
publicqq 
intqq	 !
AppendLoopOnAppendersqq "
(qq" #
LoggingEventqq# /
[qq/ 0
]qq0 1
loggingEventsqq2 ?
)qq? @
{rr 
ifss 
(ss 
loggingEventsss 
==ss 
nullss 
)ss 
{tt 
throwuu 	
newuu
 !
ArgumentNullExceptionuu #
(uu# $
$struu$ 3
)uu3 4
;uu4 5
}vv 
ifww 
(ww 
loggingEventsww 
.ww 
Lengthww 
==ww 
$numww  
)ww  !
{xx 
throwyy 	
newyy
 
ArgumentExceptionyy 
(yy  
$stryy  G
,yyG H
$stryyI X
)yyX Y
;yyY Z
}zz 
if{{ 
({{ 
loggingEvents{{ 
.{{ 
Length{{ 
=={{ 
$num{{  
){{  !
{|| 
return~~ 
!
AppendLoopOnAppenders~~  
(~~  !
loggingEvents~~! .
[~~. /
$num~~/ 0
]~~0 1
)~~1 2
;~~2 3
} 
if
ÇÇ 
(
ÇÇ 
m_appenderList
ÇÇ 
==
ÇÇ 
null
ÇÇ 
)
ÇÇ 
{
ÉÉ 
return
ÑÑ 

$num
ÑÑ 
;
ÑÑ 
}
ÖÖ 
if
áá 
(
áá 
m_appenderArray
áá 
==
áá 
null
áá 
)
áá 
{
àà 
m_appenderArray
ââ 
=
ââ 
m_appenderList
ââ $
.
ââ$ %
ToArray
ââ% ,
(
ââ, -
)
ââ- .
;
ââ. /
}
ää 
foreach
åå 

(
åå
 
	IAppender
åå 
appender
åå 
in
åå  
m_appenderArray
åå! 0
)
åå0 1
{
çç 
try
éé 
{
èè 

CallAppend
êê 
(
êê 
appender
êê 
,
êê 
loggingEvents
êê '
)
êê' (
;
êê( )
}
ëë 
catch
íí 	
(
íí	 

	Exception
íí
 
ex
íí 
)
íí 
{
ìì 
LogLog
îî 
.
îî 
Error
îî 
(
îî 
declaringType
îî 
,
îî  
$str
îî! A
+
îîB C
appender
îîD L
.
îîL M
Name
îîM Q
+
îîR S
$str
îîT W
,
îîW X
ex
îîY [
)
îî[ \
;
îî\ ]
}
ïï 
}
ññ 
return
óó 	
m_appenderList
óó
 
.
óó 
Count
óó 
;
óó 
}
òò 
private
¨¨ 	
static
¨¨
 
void
¨¨ 

CallAppend
¨¨  
(
¨¨  !
	IAppender
¨¨! *
appender
¨¨+ 3
,
¨¨3 4
LoggingEvent
¨¨5 A
[
¨¨A B
]
¨¨B C
loggingEvents
¨¨D Q
)
¨¨Q R
{
≠≠ 
IBulkAppender
ÆÆ 
bulkAppender
ÆÆ 
=
ÆÆ 
appender
ÆÆ  (
as
ÆÆ) +
IBulkAppender
ÆÆ, 9
;
ÆÆ9 :
if
ØØ 
(
ØØ 
bulkAppender
ØØ 
!=
ØØ 
null
ØØ 
)
ØØ 
{
∞∞ 
bulkAppender
±± 
.
±± 
DoAppend
±± 
(
±± 
loggingEvents
±± '
)
±±' (
;
±±( )
}
≤≤ 
else
≥≥ 
{
¥¥ 
foreach
µµ 
(
µµ 
LoggingEvent
µµ 
loggingEvent
µµ %
in
µµ& (
loggingEvents
µµ) 6
)
µµ6 7
{
∂∂ 
appender
∑∑ 
.
∑∑ 
DoAppend
∑∑ 
(
∑∑ 
loggingEvent
∑∑ #
)
∑∑# $
;
∑∑$ %
}
∏∏ 
}
ππ 
}
∫∫ 	
public
…… 
void
……	 
AddAppender
…… 
(
…… 
	IAppender
…… #
newAppender
……$ /
)
……/ 0
{
   
if
ÃÃ 
(
ÃÃ 
newAppender
ÃÃ 
==
ÃÃ 
null
ÃÃ 
)
ÃÃ 
{
ÕÕ 
throw
ŒŒ 	
new
ŒŒ
 #
ArgumentNullException
ŒŒ #
(
ŒŒ# $
$str
ŒŒ$ 1
)
ŒŒ1 2
;
ŒŒ2 3
}
œœ 
m_appenderArray
—— 
=
—— 
null
—— 
;
—— 
if
““ 
(
““ 
m_appenderList
““ 
==
““ 
null
““ 
)
““ 
{
”” 
m_appenderList
‘‘ 
=
‘‘ 
new
‘‘  
AppenderCollection
‘‘ +
(
‘‘+ ,
$num
‘‘, -
)
‘‘- .
;
‘‘. /
}
’’ 
if
÷÷ 
(
÷÷ 
!
÷÷ 
m_appenderList
÷÷ 
.
÷÷ 
Contains
÷÷ 
(
÷÷  
newAppender
÷÷  +
)
÷÷+ ,
)
÷÷, -
{
◊◊ 
m_appenderList
ÿÿ 
.
ÿÿ 
Add
ÿÿ 
(
ÿÿ 
newAppender
ÿÿ "
)
ÿÿ" #
;
ÿÿ# $
}
ŸŸ 
}
⁄⁄ 
public
ËË  
AppenderCollection
ËË	 
	Appenders
ËË %
{
ÈÈ 
get
ÍÍ 
{
ÎÎ 
if
ÏÏ 
(
ÏÏ 
m_appenderList
ÏÏ 
==
ÏÏ 
null
ÏÏ 
)
ÏÏ 
{
ÌÌ 
return
ÔÔ  
AppenderCollection
ÔÔ 
.
ÔÔ 
EmptyCollection
ÔÔ .
;
ÔÔ. /
}
 
else
ÒÒ 
{
ÚÚ 
return
ÛÛ  
AppenderCollection
ÛÛ 
.
ÛÛ 
ReadOnly
ÛÛ '
(
ÛÛ' (
m_appenderList
ÛÛ( 6
)
ÛÛ6 7
;
ÛÛ7 8
}
ÙÙ 
}
ıı 
}
ˆˆ 
public
ÖÖ 
	IAppender
ÖÖ	 
GetAppender
ÖÖ 
(
ÖÖ 
string
ÖÖ %
name
ÖÖ& *
)
ÖÖ* +
{
ÜÜ 
if
áá 
(
áá 
m_appenderList
áá 
!=
áá 
null
áá 
&&
áá  
name
áá! %
!=
áá& (
null
áá) -
)
áá- .
{
àà 
foreach
ââ 
(
ââ 
	IAppender
ââ 
appender
ââ 
in
ââ !
m_appenderList
ââ" 0
)
ââ0 1
{
ää 
if
ãã 
(
ãã 	
name
ãã	 
==
ãã 
appender
ãã 
.
ãã 
Name
ãã 
)
ãã 
{
åå 
return
çç 
appender
çç 
;
çç 
}
éé 
}
èè 
}
êê 
return
ëë 	
null
ëë
 
;
ëë 
}
íí 
public
úú 
void
úú	  
RemoveAllAppenders
úú  
(
úú  !
)
úú! "
{
ùù 
if
ûû 
(
ûû 
m_appenderList
ûû 
!=
ûû 
null
ûû 
)
ûû 
{
üü 
foreach
†† 
(
†† 
	IAppender
†† 
appender
†† 
in
†† !
m_appenderList
††" 0
)
††0 1
{
°° 
try
¢¢ 
{
££ 
appender
§§ 
.
§§ 
Close
§§ 
(
§§ 
)
§§ 
;
§§ 
}
•• 
catch
¶¶ 

(
¶¶
 
	Exception
¶¶ 
ex
¶¶ 
)
¶¶ 
{
ßß 
LogLog
®® 
.
®® 
Error
®® 
(
®® 
declaringType
®®  
,
®®  !
$str
®®" >
+
®®> ?
appender
®®? G
.
®®G H
Name
®®H L
+
®®L M
$str
®®M P
,
®®P Q
ex
®®R T
)
®®T U
;
®®U V
}
©© 
}
™™ 
m_appenderList
´´ 
=
´´ 
null
´´ 
;
´´ 
m_appenderArray
¨¨ 
=
¨¨ 
null
¨¨ 
;
¨¨ 
}
≠≠ 
}
ÆÆ 
public
ºº 
	IAppender
ºº	 
RemoveAppender
ºº !
(
ºº! "
	IAppender
ºº" +
appender
ºº, 4
)
ºº4 5
{
ΩΩ 
if
ææ 
(
ææ 
appender
ææ 
!=
ææ 
null
ææ 
&&
ææ 
m_appenderList
ææ )
!=
ææ* ,
null
ææ- 1
)
ææ1 2
{
øø 
m_appenderList
¿¿ 
.
¿¿ 
Remove
¿¿ 
(
¿¿ 
appender
¿¿ "
)
¿¿" #
;
¿¿# $
if
¡¡ 
(
¡¡ 
m_appenderList
¡¡ 
.
¡¡ 
Count
¡¡ 
==
¡¡ 
$num
¡¡  !
)
¡¡! "
{
¬¬ 
m_appenderList
√√ 
=
√√ 
null
√√ 
;
√√ 
}
ƒƒ 
m_appenderArray
≈≈ 
=
≈≈ 
null
≈≈ 
;
≈≈ 
}
∆∆ 
return
«« 	
appender
««
 
;
«« 
}
»» 
public
÷÷ 
	IAppender
÷÷	 
RemoveAppender
÷÷ !
(
÷÷! "
string
÷÷" (
name
÷÷) -
)
÷÷- .
{
◊◊ 
return
ÿÿ 	
RemoveAppender
ÿÿ
 
(
ÿÿ 
GetAppender
ÿÿ $
(
ÿÿ$ %
name
ÿÿ% )
)
ÿÿ) *
)
ÿÿ* +
;
ÿÿ+ ,
}
ŸŸ 
private
‚‚ 	 
AppenderCollection
‚‚
 
m_appenderList
‚‚ +
;
‚‚+ ,
private
ÁÁ 	
	IAppender
ÁÁ
 
[
ÁÁ 
]
ÁÁ 
m_appenderArray
ÁÁ %
;
ÁÁ% &
private
ÙÙ 
readonly
ÙÙ 
static
ÙÙ 
Type
ÙÙ !
declaringType
ÙÙ" /
=
ÙÙ0 1
typeof
ÙÙ2 8
(
ÙÙ8 9"
AppenderAttachedImpl
ÙÙ9 M
)
ÙÙM N
;
ÙÙN O
}
˜˜ 
}¯¯ ï
CC:\sonarqube\projects\log4net-2.0.7\src\Util\CompositeProperties.cs
	namespace 	
log4net
 
. 
Util 
{ 
public## 
sealed## 
class## 
CompositeProperties## (
{$$ 
private'' 	 
PropertiesDictionary''
 
m_flattened'' *
=''+ ,
null''- 1
;''1 2
private(( 	
	ArrayList((
 
m_nestedProperties(( &
=((' (
new(() ,
	ArrayList((- 6
(((6 7
)((7 8
;((8 9
internal66 

CompositeProperties66 
(66 
)66  
{77 
}88 
publicQQ 
objectQQ	 
thisQQ 
[QQ 
stringQQ 
keyQQ 
]QQ  
{RR 
getSS 
{TT 
ifVV 
(VV 
m_flattenedVV 
!=VV 
nullVV 
)VV 
{WW 
returnXX 
m_flattenedXX 
[XX 
keyXX 
]XX 
;XX 
}YY 
foreach\\ 
(\\ (
ReadOnlyPropertiesDictionary\\ (
cur\\) ,
in\\- /
m_nestedProperties\\0 B
)\\B C
{]] 
if^^ 
(^^ 	
cur^^	 
.^^ 
Contains^^ 
(^^ 
key^^ 
)^^ 
)^^ 
{__ 
return`` 
cur`` 
[`` 
key`` 
]`` 
;`` 
}aa 
}bb 
returncc 

nullcc 
;cc 
}dd 
}ee 
publicuu 
voiduu	 
Adduu 
(uu (
ReadOnlyPropertiesDictionaryuu .

propertiesuu/ 9
)uu9 :
{vv 
m_flattenedww 
=ww 
nullww 
;ww 
m_nestedPropertiesxx 
.xx 
Addxx 
(xx 

propertiesxx $
)xx$ %
;xx% &
}yy 
public
ÖÖ "
PropertiesDictionary
ÖÖ	 
Flatten
ÖÖ %
(
ÖÖ% &
)
ÖÖ& '
{
ÜÜ 
if
áá 
(
áá 
m_flattened
áá 
==
áá 
null
áá 
)
áá 
{
àà 
m_flattened
ââ 
=
ââ 
new
ââ "
PropertiesDictionary
ââ *
(
ââ* +
)
ââ+ ,
;
ââ, -
for
ãã 
(
ãã 
int
ãã 
i
ãã 
=
ãã  
m_nestedProperties
ãã  
.
ãã  !
Count
ãã! &
;
ãã& '
--
ãã( *
i
ãã* +
>=
ãã+ -
$num
ãã- .
;
ãã. /
)
ãã0 1
{
åå *
ReadOnlyPropertiesDictionary
çç !
cur
çç" %
=
çç& '
(
çç( )*
ReadOnlyPropertiesDictionary
çç) E
)
ççE F 
m_nestedProperties
ççF X
[
ççX Y
i
ççY Z
]
ççZ [
;
çç[ \
foreach
èè 
(
èè 
DictionaryEntry
èè 
entry
èè "
in
èè# %
cur
èè& )
)
èè) *
{
êê 
m_flattened
ëë 
[
ëë 
(
ëë 
string
ëë 
)
ëë 
entry
ëë 
.
ëë  
Key
ëë  #
]
ëë# $
=
ëë% &
entry
ëë' ,
.
ëë, -
Value
ëë- 2
;
ëë2 3
}
íí 
}
ìì 
}
îî 
return
ïï 	
m_flattened
ïï
 
;
ïï 
}
ññ 
}
ôô 
}öö õ
EC:\sonarqube\projects\log4net-2.0.7\src\Util\ContextPropertiesBase.cs
	namespace 	
log4net
 
. 
Util 
{ 
public"" 
abstract"" 
class"" !
ContextPropertiesBase"" ,
{## 
public// 
abstract//	 
object// 
this// 
[// 
string// $
key//% (
]//( )
{//* +
get//, /
;/// 0
set//1 4
;//4 5
}//6 7
}00 
}11 ä
=C:\sonarqube\projects\log4net-2.0.7\src\Util\ConverterInfo.cs
	namespace 	
log4net
 
. 
Util 
{ 
public## 

sealed## 
class## 
ConverterInfo## %
{$$ 
private%% 
string%% 
m_name%% 
;%% 
private&& 
Type&& 
m_type&& 
;&& 
private'' 
readonly''  
PropertiesDictionary'' -

properties''. 8
=''9 :
new''; > 
PropertiesDictionary''? S
(''S T
)''T U
;''U V
public,, 
ConverterInfo,, 
(,, 
),, 
{-- 	
}.. 	
public88 
string88 
Name88 
{99 	
get:: 
{:: 
return:: 
m_name:: 
;::  
}::! "
set;; 
{;; 
m_name;; 
=;; 
value;;  
;;;  !
};;" #
}<< 	
publicGG 
TypeGG 
TypeGG 
{HH 	
getII 
{II 
returnII 
m_typeII 
;II  
}II! "
setJJ 
{JJ 
m_typeJJ 
=JJ 
valueJJ  
;JJ  !
}JJ" #
}KK 	
publicQQ 
voidQQ 
AddPropertyQQ 
(QQ  
PropertyEntryQQ  -
entryQQ. 3
)QQ3 4
{RR 	

propertiesSS 
[SS 
entrySS 
.SS 
KeySS  
]SS  !
=SS" #
entrySS$ )
.SS) *
ValueSS* /
;SS/ 0
}TT 	
publicYY  
PropertiesDictionaryYY #

PropertiesYY$ .
{ZZ 	
get[[ 
{[[ 
return[[ 

properties[[ #
;[[# $
}[[% &
}\\ 	
}]] 
}^^ ›&
GC:\sonarqube\projects\log4net-2.0.7\src\Util\CountingQuietTextWriter.cs
	namespace 	
log4net
 
. 
Util 
{ 
public&& 
class&& #
CountingQuietTextWriter&& %
:&&& '
QuietTextWriter&&( 7
{'' 
public55 #
CountingQuietTextWriter55	  
(55  !

TextWriter55! +
writer55, 2
,552 3
IErrorHandler554 A
errorHandler55B N
)55N O
:55P Q
base55R V
(55V W
writer55W ]
,55] ^
errorHandler55_ k
)55k l
{66 
m_countBytes77 
=77 
$num77 
;77 
}88 
publicHH 
overrideHH	 
voidHH 
WriteHH 
(HH 
charHH !
valueHH" '
)HH' (
{II 
tryJJ 
{KK 
baseLL 
.LL 	
WriteLL	 
(LL 
valueLL 
)LL 
;LL 
m_countBytesPP 
+=PP 
thisPP 
.PP 
EncodingPP !
.PP! "
GetByteCountPP" .
(PP. /
newPP/ 2
charPP3 7
[PP7 8
]PP8 9
{PP: ;
valuePP< A
}PPB C
)PPC D
;PPD E
}QQ 
catchRR 
(RR 	
	ExceptionRR	 
eRR 
)RR 
{SS 
thisTT 
.TT 	
ErrorHandlerTT	 
.TT 
ErrorTT 
(TT 
$strTT /
+TT0 1
valueTT2 7
+TT8 9
$strTT: >
,TT> ?
eTT@ A
,TTA B
	ErrorCodeTTC L
.TTL M
WriteFailureTTM Y
)TTY Z
;TTZ [
}UU 
}VV 
publicdd 
overridedd	 
voiddd 
Writedd 
(dd 
chardd !
[dd! "
]dd" #
bufferdd$ *
,dd* +
intdd, /
indexdd0 5
,dd5 6
intdd7 :
countdd; @
)dd@ A
{ee 
ifff 
(ff 
countff 
>ff 
$numff 
)ff 
{gg 
tryhh 
{ii 
basejj 	
.jj	 

Writejj
 
(jj 
bufferjj 
,jj 
indexjj 
,jj 
countjj $
)jj$ %
;jj% &
m_countBytesnn 
+=nn 
thisnn 
.nn 
Encodingnn "
.nn" #
GetByteCountnn# /
(nn/ 0
buffernn0 6
,nn6 7
indexnn8 =
,nn= >
countnn? D
)nnD E
;nnE F
}oo 
catchpp 	
(pp	 

	Exceptionpp
 
epp 
)pp 
{qq 
thisrr 	
.rr	 

ErrorHandlerrr
 
.rr 
Errorrr 
(rr 
$strrr 6
,rr6 7
err8 9
,rr9 :
	ErrorCoderr; D
.rrD E
WriteFailurerrE Q
)rrQ R
;rrR S
}ss 
}tt 
}uu 
override
ÅÅ 

public
ÅÅ 
void
ÅÅ 
Write
ÅÅ 
(
ÅÅ 
string
ÅÅ #
str
ÅÅ$ '
)
ÅÅ' (
{
ÇÇ 
if
ÉÉ 
(
ÉÉ 
str
ÉÉ 

!=
ÉÉ 
null
ÉÉ 
&&
ÉÉ 
str
ÉÉ 
.
ÉÉ 
Length
ÉÉ  
>
ÉÉ! "
$num
ÉÉ# $
)
ÉÉ$ %
{
ÑÑ 
try
ÖÖ 
{
ÜÜ 
base
áá 	
.
áá	 

Write
áá
 
(
áá 
str
áá 
)
áá 
;
áá 
m_countBytes
ãã 
+=
ãã 
this
ãã 
.
ãã 
Encoding
ãã "
.
ãã" #
GetByteCount
ãã# /
(
ãã/ 0
str
ãã0 3
)
ãã3 4
;
ãã4 5
}
åå 
catch
çç 	
(
çç	 

	Exception
çç
 
e
çç 
)
çç 
{
éé 
this
èè 	
.
èè	 

ErrorHandler
èè
 
.
èè 
Error
èè 
(
èè 
$str
èè 0
+
èè1 2
str
èè3 6
+
èè7 8
$str
èè9 =
,
èè= >
e
èè? @
,
èè@ A
	ErrorCode
èèB K
.
èèK L
WriteFailure
èèL X
)
èèX Y
;
èèY Z
}
êê 
}
ëë 
}
íí 
public
££ 
long
££	 
Count
££ 
{
§§ 
get
•• 
{
•• 
return
••	 
m_countBytes
•• 
;
•• 
}
•• 
set
¶¶ 
{
¶¶ 
m_countBytes
¶¶	 
=
¶¶ 
value
¶¶ 
;
¶¶ 
}
¶¶  
}
ßß 
private
∞∞ 	
long
∞∞
 
m_countBytes
∞∞ 
;
∞∞ 
}
≥≥ 
}¥¥ òE
<C:\sonarqube\projects\log4net-2.0.7\src\Util\CyclicBuffer.cs
	namespace 	
log4net
 
. 
Util 
{ 
public$$ 
class$$ 
CyclicBuffer$$ 
{%% 
public33 
CyclicBuffer33	 
(33 
int33 
maxSize33 !
)33! "
{44 
if55 
(55 
maxSize55 
<55 
$num55 
)55 
{66 
throw77 	

SystemInfo77
 
.77 -
!CreateArgumentOutOfRangeException77 6
(776 7
$str777 @
,77@ A
(77B C
object77C I
)77I J
maxSize77J Q
,77Q R
$str77S q
+77r s
maxSize77t {
+77| }
$str	77~ ≤
)
77≤ ≥
;
77≥ ¥
}88 
	m_maxSize:: 
=:: 
maxSize:: 
;:: 
m_events;; 
=;; 
new;; 
LoggingEvent;; 
[;; 
maxSize;; &
];;& '
;;;' (
m_first<< 

=<< 
$num<< 
;<< 
m_last== 	
===
 
$num== 
;== 

m_numElems>> 
=>> 
$num>> 
;>> 
}?? 
publicQQ 
LoggingEventQQ	 
AppendQQ 
(QQ 
LoggingEventQQ )
loggingEventQQ* 6
)QQ6 7
{RR 
ifSS 
(SS 
loggingEventSS 
==SS 
nullSS 
)SS 
{TT 
throwUU 	
newUU
 !
ArgumentNullExceptionUU #
(UU# $
$strUU$ 2
)UU2 3
;UU3 4
}VV 
lockXX 
(XX 
thisXX 
)XX 
{YY 
LoggingEvent[[ !
discardedLoggingEvent[[ &
=[[' (
m_events[[) 1
[[[1 2
m_last[[2 8
][[8 9
;[[9 :
m_events^^ 
[^^ 
m_last^^ 
]^^ 
=^^ 
loggingEvent^^ #
;^^# $
if__ 
(__ 
++__ 

m_last__
 
==__ 
	m_maxSize__ 
)__ 
{`` 
m_lastaa 
=aa 
$numaa 
;aa 
}bb 
ifdd 
(dd 

m_numElemsdd 
<dd 
	m_maxSizedd 
)dd 
{ee 

m_numElemsff 
++ff 
;ff 
}gg 
elsehh 
ifhh	 
(hh 
++hh 
m_firsthh 
==hh 
	m_maxSizehh #
)hh# $
{ii 
m_firstjj 
=jj 
$numjj 
;jj 
}kk 
ifmm 
(mm 

m_numElemsmm 
<mm 
	m_maxSizemm 
)mm 
{nn 
returnpp 
nullpp 
;pp 
}qq 
elserr 
{ss 
returnuu !
discardedLoggingEventuu !
;uu! "
}vv 
}ww 
}xx 
public
ÑÑ 
LoggingEvent
ÑÑ	 
	PopOldest
ÑÑ 
(
ÑÑ  
)
ÑÑ  !
{
ÖÖ 
lock
ÜÜ 
(
ÜÜ 
this
ÜÜ 
)
ÜÜ 
{
áá 
LoggingEvent
àà 
ret
àà 
=
àà 
null
àà 
;
àà 
if
ââ 
(
ââ 

m_numElems
ââ 
>
ââ 
$num
ââ 
)
ââ 
{
ää 

m_numElems
ãã 
--
ãã 
;
ãã 
ret
åå 
=
åå	 

m_events
åå 
[
åå 
m_first
åå 
]
åå 
;
åå 
m_events
çç 
[
çç 
m_first
çç 
]
çç 
=
çç 
null
çç 
;
çç 
if
éé 
(
éé 	
++
éé	 
m_first
éé 
==
éé 
	m_maxSize
éé 
)
éé  
{
èè 
m_first
êê 
=
êê 
$num
êê 
;
êê 
}
ëë 
}
íí 
return
ìì 

ret
ìì 
;
ìì 
}
îî 
}
ïï 
public
†† 
LoggingEvent
††	 
[
†† 
]
†† 
PopAll
†† 
(
†† 
)
††  
{
°° 
lock
¢¢ 
(
¢¢ 
this
¢¢ 
)
¢¢ 
{
££ 
LoggingEvent
§§ 
[
§§ 
]
§§ 
ret
§§ 
=
§§ 
new
§§ 
LoggingEvent
§§ )
[
§§) *

m_numElems
§§* 4
]
§§4 5
;
§§5 6
if
¶¶ 
(
¶¶ 

m_numElems
¶¶ 
>
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
if
®® 
(
®® 	
m_first
®®	 
<
®® 
m_last
®® 
)
®® 
{
©© 
Array
™™ 
.
™™ 
Copy
™™ 
(
™™ 
m_events
™™ 
,
™™ 
m_first
™™ "
,
™™" #
ret
™™$ '
,
™™' (
$num
™™) *
,
™™* +

m_numElems
™™, 6
)
™™6 7
;
™™7 8
}
´´ 
else
¨¨ 	
{
≠≠ 
Array
ÆÆ 
.
ÆÆ 
Copy
ÆÆ 
(
ÆÆ 
m_events
ÆÆ 
,
ÆÆ 
m_first
ÆÆ "
,
ÆÆ" #
ret
ÆÆ$ '
,
ÆÆ' (
$num
ÆÆ) *
,
ÆÆ* +
	m_maxSize
ÆÆ, 5
-
ÆÆ6 7
m_first
ÆÆ8 ?
)
ÆÆ? @
;
ÆÆ@ A
Array
ØØ 
.
ØØ 
Copy
ØØ 
(
ØØ 
m_events
ØØ 
,
ØØ 
$num
ØØ 
,
ØØ 
ret
ØØ !
,
ØØ! "
	m_maxSize
ØØ# ,
-
ØØ- .
m_first
ØØ/ 6
,
ØØ6 7
m_last
ØØ8 >
)
ØØ> ?
;
ØØ? @
}
∞∞ 
}
±± 
Clear
≥≥ 	
(
≥≥	 

)
≥≥
 
;
≥≥ 
return
µµ 

ret
µµ 
;
µµ 
}
∂∂ 
}
∑∑ 
public
¡¡ 
void
¡¡	 
Clear
¡¡ 
(
¡¡ 
)
¡¡ 
{
¬¬ 
lock
√√ 
(
√√ 
this
√√ 
)
√√ 
{
ƒƒ 
Array
∆∆ 	
.
∆∆	 

Clear
∆∆
 
(
∆∆ 
m_events
∆∆ 
,
∆∆ 
$num
∆∆ 
,
∆∆ 
m_events
∆∆ %
.
∆∆% &
Length
∆∆& ,
)
∆∆, -
;
∆∆- .
m_first
»» 
=
»» 
$num
»» 
;
»» 
m_last
…… 

=
…… 
$num
…… 
;
…… 

m_numElems
   
=
   
$num
   
;
   
}
ÀÀ 
}
ÃÃ 
public
óó 
LoggingEvent
óó	 
this
óó 
[
óó 
int
óó 
i
óó  
]
óó  !
{
òò 
get
ôô 
{
öö 
lock
õõ 
(
õõ 	
this
õõ	 
)
õõ 
{
úú 
if
ùù 
(
ùù 	
i
ùù	 

<
ùù 
$num
ùù 
||
ùù 
i
ùù 
>=
ùù 

m_numElems
ùù !
)
ùù! "
{
ûû 
return
üü 
null
üü 
;
üü 
}
†† 
return
¢¢ 
m_events
¢¢ 
[
¢¢ 
(
¢¢ 
m_first
¢¢ 
+
¢¢ 
i
¢¢  !
)
¢¢! "
%
¢¢# $
	m_maxSize
¢¢% .
]
¢¢. /
;
¢¢/ 0
}
££ 
}
§§ 
}
•• 
public
∞∞ 
int
∞∞	 
MaxSize
∞∞ 
{
±± 
get
≤≤ 
{
≥≥ 
lock
¥¥ 
(
¥¥ 	
this
¥¥	 
)
¥¥ 
{
µµ 
return
∂∂ 
	m_maxSize
∂∂ 
;
∂∂ 
}
∑∑ 
}
∏∏ 
}
¿¿ 
public
ÃÃ 
int
ÃÃ	 
Length
ÃÃ 
{
ÕÕ 
get
ŒŒ 
{
œœ 
lock
–– 
(
–– 	
this
––	 
)
–– 
{
—— 
return
““ 

m_numElems
““ 
;
““ 
}
”” 
}
‘‘ 
}
’’ 
private
€€ 	
LoggingEvent
€€
 
[
€€ 
]
€€ 
m_events
€€ !
;
€€! "
private
‹‹ 	
int
‹‹
 
m_first
‹‹ 
;
‹‹ 
private
›› 	
int
››
 
m_last
›› 
;
›› 
private
ﬁﬁ 	
int
ﬁﬁ
 

m_numElems
ﬁﬁ 
;
ﬁﬁ 
private
ﬂﬂ 	
int
ﬂﬂ
 
	m_maxSize
ﬂﬂ 
;
ﬂﬂ 
}
‚‚ 
}„„ ã
?C:\sonarqube\projects\log4net-2.0.7\src\Util\EmptyCollection.cs
	namespace 	
log4net
 
. 
Util 
{ 
[%% 
Serializable%% 
]%% 
public'' 
sealed'' 
class'' 
EmptyCollection'' $
:''% &
ICollection''' 2
{(( 
private33 	
EmptyCollection33
 
(33 
)33 
{44 
}55 
publicDD 
staticDD	 
EmptyCollectionDD 
InstanceDD  (
{EE 
getFF 
{FF 
returnFF	 

s_instanceFF 
;FF 
}FF 
}GG 
public\\ 
void\\	 
CopyTo\\ 
(\\ 
System\\ 
.\\ 
Array\\ !
array\\" '
,\\' (
int\\) ,
index\\- 2
)\\2 3
{]] 
}__ 
publicll 
boolll	 
IsSynchronizedll 
{mm 
getnn 
{nn 
returnnn	 
truenn 
;nn 
}nn 
}oo 
public|| 
int||	 
Count|| 
{}} 
get~~ 
{~~ 
return~~	 
$num~~ 
;~~ 
}~~ 
} 
public
çç 
object
çç	 
SyncRoot
çç 
{
éé 
get
èè 
{
èè 
return
èè	 
this
èè 
;
èè 
}
èè 
}
êê 
public
¢¢ 
IEnumerator
¢¢	 
GetEnumerator
¢¢ "
(
¢¢" #
)
¢¢# $
{
££ 
return
§§ 	
NullEnumerator
§§
 
.
§§ 
Instance
§§ !
;
§§! "
}
•• 
private
ÆÆ 	
readonly
ÆÆ
 
static
ÆÆ 
EmptyCollection
ÆÆ )

s_instance
ÆÆ* 4
=
ÆÆ5 6
new
ÆÆ7 :
EmptyCollection
ÆÆ; J
(
ÆÆJ K
)
ÆÆK L
;
ÆÆL M
}
±± 
}≤≤ É(
?C:\sonarqube\projects\log4net-2.0.7\src\Util\EmptyDictionary.cs
	namespace 	
log4net
 
. 
Util 
{ 
[%% 
Serializable%% 
]%% 
public'' 
sealed'' 
class'' 
EmptyDictionary'' $
:''% &
IDictionary''' 2
{(( 
private33 	
EmptyDictionary33
 
(33 
)33 
{44 
}55 
publicDD 
staticDD	 
EmptyDictionaryDD 
InstanceDD  (
{EE 
getFF 
{FF 
returnFF	 

s_instanceFF 
;FF 
}FF 
}GG 
public\\ 
void\\	 
CopyTo\\ 
(\\ 
System\\ 
.\\ 
Array\\ !
array\\" '
,\\' (
int\\) ,
index\\- 2
)\\2 3
{]] 
}__ 
publicll 
boolll	 
IsSynchronizedll 
{mm 
getnn 
{nn 
returnnn	 
truenn 
;nn 
}nn 
}oo 
public|| 
int||	 
Count|| 
{}} 
get~~ 
{~~ 
return~~	 
$num~~ 
;~~ 
}~~ 
} 
public
çç 
object
çç	 
SyncRoot
çç 
{
éé 
get
èè 
{
èè 
return
èè	 
this
èè 
;
èè 
}
èè 
}
êê 
IEnumerator
¢¢ 
IEnumerable
¢¢ 
.
¢¢ 
GetEnumerator
¢¢ '
(
¢¢' (
)
¢¢( )
{
££ 
return
§§ 	
NullEnumerator
§§
 
.
§§ 
Instance
§§ !
;
§§! "
}
•• 
public
∏∏ 
void
∏∏	 
Add
∏∏ 
(
∏∏ 
object
∏∏ 
key
∏∏ 
,
∏∏ 
object
∏∏ $
value
∏∏% *
)
∏∏* +
{
ππ 
throw
∫∫ 
new
∫∫	 '
InvalidOperationException
∫∫ &
(
∫∫& '
)
∫∫' (
;
∫∫( )
}
ªª 
public
«« 
void
««	 
Clear
«« 
(
«« 
)
«« 
{
»» 
throw
…… 
new
……	 '
InvalidOperationException
…… &
(
……& '
)
……' (
;
……( )
}
   
public
◊◊ 
bool
◊◊	 
Contains
◊◊ 
(
◊◊ 
object
◊◊ 
key
◊◊ !
)
◊◊! "
{
ÿÿ 
return
ŸŸ 	
false
ŸŸ
 
;
ŸŸ 
}
⁄⁄ 
public
ËË #
IDictionaryEnumerator
ËË	 
GetEnumerator
ËË ,
(
ËË, -
)
ËË- .
{
ÈÈ 
return
ÍÍ 	&
NullDictionaryEnumerator
ÍÍ
 "
.
ÍÍ" #
Instance
ÍÍ# +
;
ÍÍ+ ,
}
ÎÎ 
public
¯¯ 
void
¯¯	 
Remove
¯¯ 
(
¯¯ 
object
¯¯ 
key
¯¯ 
)
¯¯  
{
˘˘ 
throw
˙˙ 
new
˙˙	 '
InvalidOperationException
˙˙ &
(
˙˙& '
)
˙˙' (
;
˙˙( )
}
˚˚ 
public
ÜÜ 
bool
ÜÜ	 
IsFixedSize
ÜÜ 
{
áá 
get
àà 
{
àà 
return
àà	 
true
àà 
;
àà 
}
àà 
}
ââ 
public
îî 
bool
îî	 

IsReadOnly
îî 
{
ïï 
get
ññ 
{
ññ 
return
ññ	 
true
ññ 
;
ññ 
}
ññ 
}
óó 
public
¢¢ 
System
¢¢	 
.
¢¢ 
Collections
¢¢ 
.
¢¢ 
ICollection
¢¢ '
Keys
¢¢( ,
{
££ 
get
§§ 
{
§§ 
return
§§	 
EmptyCollection
§§ 
.
§§  
Instance
§§  (
;
§§( )
}
§§* +
}
•• 
public
∞∞ 
System
∞∞	 
.
∞∞ 
Collections
∞∞ 
.
∞∞ 
ICollection
∞∞ '
Values
∞∞( .
{
±± 
get
≤≤ 
{
≤≤ 
return
≤≤	 
EmptyCollection
≤≤ 
.
≤≤  
Instance
≤≤  (
;
≤≤( )
}
≤≤* +
}
≥≥ 
public
¬¬ 
object
¬¬	 
this
¬¬ 
[
¬¬ 
object
¬¬ 
key
¬¬ 
]
¬¬  
{
√√ 
get
ƒƒ 
{
ƒƒ 
return
ƒƒ	 
null
ƒƒ 
;
ƒƒ 
}
ƒƒ 
set
≈≈ 
{
≈≈ 
throw
≈≈	 
new
≈≈ '
InvalidOperationException
≈≈ ,
(
≈≈, -
)
≈≈- .
;
≈≈. /
}
≈≈0 1
}
∆∆ 
private
œœ 	
readonly
œœ
 
static
œœ 
EmptyDictionary
œœ )

s_instance
œœ* 4
=
œœ5 6
new
œœ7 :
EmptyDictionary
œœ; J
(
œœJ K
)
œœK L
;
œœL M
}
““ 
}”” ˆ
>C:\sonarqube\projects\log4net-2.0.7\src\Util\FormattingInfo.cs
	namespace 	
log4net
 
. 
Util 
{ 
public&& 
class&& 
FormattingInfo&& 
{'' 
public22 
FormattingInfo22	 
(22 
)22 
{33 
}44 
public?? 
FormattingInfo??	 
(?? 
int?? 
min?? 
,??  
int??! $
max??% (
,??( )
bool??* .
	leftAlign??/ 8
)??8 9
{@@ 
m_minAA 
=AA	 

minAA 
;AA 
m_maxBB 
=BB	 

maxBB 
;BB 
m_leftAlignCC 
=CC 
	leftAlignCC 
;CC 
}DD 
publicUU 
intUU	 
MinUU 
{VV 
getWW 
{WW 
returnWW	 
m_minWW 
;WW 
}WW 
setXX 
{XX 
m_minXX	 
=XX 
valueXX 
;XX 
}XX 
}YY 
publicff 
intff	 
Maxff 
{gg 
gethh 
{hh 
returnhh	 
m_maxhh 
;hh 
}hh 
setii 
{ii 
m_maxii	 
=ii 
valueii 
;ii 
}ii 
}jj 
publicxx 
boolxx	 
	LeftAlignxx 
{yy 
getzz 
{zz 
returnzz	 
m_leftAlignzz 
;zz 
}zz 
set{{ 
{{{ 
m_leftAlign{{	 
={{ 
value{{ 
;{{ 
}{{ 
}|| 
private
ÇÇ 	
int
ÇÇ
 
m_min
ÇÇ 
=
ÇÇ 
-
ÇÇ 
$num
ÇÇ 
;
ÇÇ 
private
ÉÉ 	
int
ÉÉ
 
m_max
ÉÉ 
=
ÉÉ 
int
ÉÉ 
.
ÉÉ 
MaxValue
ÉÉ "
;
ÉÉ" #
private
ÑÑ 	
bool
ÑÑ
 
m_leftAlign
ÑÑ 
=
ÑÑ 
false
ÑÑ "
;
ÑÑ" #
}
áá 
}àà ò
GC:\sonarqube\projects\log4net-2.0.7\src\Util\GlobalContextProperties.cs
	namespace 	
log4net
 
. 
Util 
{ 
public'' 
sealed'' 
class'' #
GlobalContextProperties'' ,
:''- .!
ContextPropertiesBase''/ D
{(( 
private77 	
volatile77
 (
ReadOnlyPropertiesDictionary77 / 
m_readOnlyProperties770 D
=77E F
new77G J(
ReadOnlyPropertiesDictionary77K g
(77g h
)77h i
;77i j
private== 	
readonly==
 
object== 

m_syncRoot== $
===% &
new==' *
object==+ 1
(==1 2
)==2 3
;==3 4
internalKK 
#
GlobalContextPropertiesKK "
(KK" #
)KK# $
{LL 
}MM 
override`` 

public`` 
object`` 
this`` 
[`` 
string`` $
key``% (
]``( )
{aa 
getbb 
{cc 
returndd 
 
m_readOnlyPropertiesdd 
[dd  
keydd  #
]dd# $
;dd$ %
}ee 
setff 
{gg 
lockhh 
(hh 	

m_syncRoothh	 
)hh 
{ii  
PropertiesDictionaryjj 
mutablePropsjj &
=jj' (
newjj) , 
PropertiesDictionaryjj- A
(jjA B 
m_readOnlyPropertiesjjB V
)jjV W
;jjW X
mutablePropsll 
[ll 
keyll 
]ll 
=ll 
valuell 
;ll  
m_readOnlyPropertiesnn 
=nn 
newnn (
ReadOnlyPropertiesDictionarynn  <
(nn< =
mutablePropsnn= I
)nnI J
;nnJ K
}oo 
}pp 
}qq 
public
ÅÅ 
void
ÅÅ	 
Remove
ÅÅ 
(
ÅÅ 
string
ÅÅ 
key
ÅÅ 
)
ÅÅ  
{
ÇÇ 
lock
ÉÉ 
(
ÉÉ 

m_syncRoot
ÉÉ 
)
ÉÉ 
{
ÑÑ 
if
ÖÖ 
(
ÖÖ "
m_readOnlyProperties
ÖÖ 
.
ÖÖ 
Contains
ÖÖ %
(
ÖÖ% &
key
ÖÖ& )
)
ÖÖ) *
)
ÖÖ* +
{
ÜÜ "
PropertiesDictionary
áá 
mutableProps
áá &
=
áá' (
new
áá) ,"
PropertiesDictionary
áá- A
(
ááA B"
m_readOnlyProperties
ááB V
)
ááV W
;
ááW X
mutableProps
ââ 
.
ââ 
Remove
ââ 
(
ââ 
key
ââ 
)
ââ 
;
ââ "
m_readOnlyProperties
ãã 
=
ãã 
new
ãã *
ReadOnlyPropertiesDictionary
ãã  <
(
ãã< =
mutableProps
ãã= I
)
ããI J
;
ããJ K
}
åå 
}
çç 
}
éé 
public
ìì 
void
ìì	 
Clear
ìì 
(
ìì 
)
ìì 
{
îî 
lock
ïï 
(
ïï 

m_syncRoot
ïï 
)
ïï 
{
ññ "
m_readOnlyProperties
óó 
=
óó 
new
óó *
ReadOnlyPropertiesDictionary
óó ;
(
óó; <
)
óó< =
;
óó= >
}
òò 
}
ôô 
internal
©© 
*
ReadOnlyPropertiesDictionary
©© '#
GetReadOnlyProperties
©©( =
(
©©= >
)
©©> ?
{
™™ 
return
´´ 	"
m_readOnlyProperties
´´
 
;
´´ 
}
¨¨ 
}
ØØ 
}∞∞ Œ∞
>C:\sonarqube\projects\log4net-2.0.7\src\Util\ILogExtensions.cs
	namespace 	
log4net
 
. 
Util 
{ 
public11 
static11 
class11 
ILogExtensions11 #
{22 
private88 	
readonly88
 
static88 
Type88 
declaringType88 ,
=88- .
typeof88/ 5
(885 6
ILogExtensions886 D
)88D E
;88E F
publicYY 
staticYY	 
voidYY 
DebugExtYY 
(YY 
thisYY "
ILogYY# '
loggerYY( .
,YY. /
FuncYY0 4
<YY4 5
objectYY5 ;
>YY; <
callbackYY= E
)YYE F
{ZZ 
try[[ 
{\\ 
if]] 
(]] 
!]] 	
logger]]	 
.]] 
IsDebugEnabled]] 
)]] 
return^^ 
;^^ 
logger`` 

.``
 
Debug`` 
(`` 
callback`` 
(`` 
)`` 
)`` 
;`` 
}aa 
catchbb 
(bb	 

	Exceptionbb
 
exbb 
)bb 
{cc 
log4netdd 
.dd 
Utildd 
.dd 
LogLogdd 
.dd 
Errordd 
(dd 
declaringTypedd +
,dd+ ,
$strdd- F
,ddF G
exddH J
)ddJ K
;ddK L
}ee 
}ff 
publicww 
staticww	 
voidww 
DebugExtww 
(ww 
thisww "
ILogww# '
loggerww( .
,ww. /
Funcww0 4
<ww4 5
objectww5 ;
>ww; <
callbackww= E
,wwE F
	ExceptionwwG P
	exceptionwwQ Z
)wwZ [
{xx 
tryyy 
{zz 
if{{ 
({{ 
!{{ 	
logger{{	 
.{{ 
IsDebugEnabled{{ 
){{ 
return|| 
;|| 
logger~~ 

.~~
 
Debug~~ 
(~~ 
callback~~ 
(~~ 
)~~ 
,~~ 
	exception~~ &
)~~& '
;~~' (
} 
catch
ÄÄ 
(
ÄÄ	 

	Exception
ÄÄ
 
ex
ÄÄ 
)
ÄÄ 
{
ÅÅ 
log4net
ÇÇ 
.
ÇÇ 
Util
ÇÇ 
.
ÇÇ 
LogLog
ÇÇ 
.
ÇÇ 
Error
ÇÇ 
(
ÇÇ 
declaringType
ÇÇ +
,
ÇÇ+ ,
$str
ÇÇ- F
,
ÇÇF G
ex
ÇÇH J
)
ÇÇJ K
;
ÇÇK L
}
ÉÉ 
}
ÑÑ 
public
§§ 
static
§§	 
void
§§ 
DebugExt
§§ 
(
§§ 
this
§§ "
ILog
§§# '
logger
§§( .
,
§§. /
object
§§0 6
message
§§7 >
)
§§> ?
{
•• 
try
¶¶ 
{
ßß 
if
®® 
(
®® 
!
®® 	
logger
®®	 
.
®® 
IsDebugEnabled
®® 
)
®® 
return
©© 
;
©© 
logger
´´ 

.
´´
 
Debug
´´ 
(
´´ 
message
´´ 
)
´´ 
;
´´ 
}
¨¨ 
catch
≠≠ 
(
≠≠	 

	Exception
≠≠
 
ex
≠≠ 
)
≠≠ 
{
ÆÆ 
log4net
ØØ 
.
ØØ 
Util
ØØ 
.
ØØ 
LogLog
ØØ 
.
ØØ 
Error
ØØ 
(
ØØ 
declaringType
ØØ +
,
ØØ+ ,
$str
ØØ- F
,
ØØF G
ex
ØØH J
)
ØØJ K
;
ØØK L
}
∞∞ 
}
±± 
public
¬¬ 
static
¬¬	 
void
¬¬ 
DebugExt
¬¬ 
(
¬¬ 
this
¬¬ "
ILog
¬¬# '
logger
¬¬( .
,
¬¬. /
object
¬¬0 6
message
¬¬7 >
,
¬¬> ?
	Exception
¬¬@ I
	exception
¬¬J S
)
¬¬S T
{
√√ 
try
ƒƒ 
{
≈≈ 
if
∆∆ 
(
∆∆ 
!
∆∆ 	
logger
∆∆	 
.
∆∆ 
IsDebugEnabled
∆∆ 
)
∆∆ 
return
«« 
;
«« 
logger
…… 

.
……
 
Debug
…… 
(
…… 
message
…… 
,
…… 
	exception
…… #
)
……# $
;
……$ %
}
   
catch
ÀÀ 
(
ÀÀ	 

	Exception
ÀÀ
 
ex
ÀÀ 
)
ÀÀ 
{
ÃÃ 
log4net
ÕÕ 
.
ÕÕ 
Util
ÕÕ 
.
ÕÕ 
LogLog
ÕÕ 
.
ÕÕ 
Error
ÕÕ 
(
ÕÕ 
declaringType
ÕÕ +
,
ÕÕ+ ,
$str
ÕÕ- F
,
ÕÕF G
ex
ÕÕH J
)
ÕÕJ K
;
ÕÕK L
}
ŒŒ 
}
œœ 
public
ÈÈ 
static
ÈÈ	 
void
ÈÈ 
DebugFormatExt
ÈÈ #
(
ÈÈ# $
this
ÈÈ$ (
ILog
ÈÈ) -
logger
ÈÈ. 4
,
ÈÈ4 5
string
ÈÈ6 <
format
ÈÈ= C
,
ÈÈC D
object
ÈÈE K
arg0
ÈÈL P
)
ÈÈP Q
{
ÍÍ 
try
ÎÎ 
{
ÏÏ 
if
ÌÌ 
(
ÌÌ 
!
ÌÌ 	
logger
ÌÌ	 
.
ÌÌ 
IsDebugEnabled
ÌÌ 
)
ÌÌ 
return
ÓÓ 
;
ÓÓ 
logger
 

.

 
DebugFormat
 
(
 
format
 
,
 
arg0
 #
)
# $
;
$ %
}
ÒÒ 
catch
ÚÚ 
(
ÚÚ	 

	Exception
ÚÚ
 
ex
ÚÚ 
)
ÚÚ 
{
ÛÛ 
log4net
ÙÙ 
.
ÙÙ 
Util
ÙÙ 
.
ÙÙ 
LogLog
ÙÙ 
.
ÙÙ 
Error
ÙÙ 
(
ÙÙ 
declaringType
ÙÙ +
,
ÙÙ+ ,
$str
ÙÙ- F
,
ÙÙF G
ex
ÙÙH J
)
ÙÙJ K
;
ÙÙK L
}
ıı 
}
ˆˆ 
public
åå 
static
åå	 
void
åå 
DebugFormatExt
åå #
(
åå# $
this
åå$ (
ILog
åå) -
logger
åå. 4
,
åå4 5
string
åå6 <
format
åå= C
,
ååC D
params
ååE K
object
ååL R
[
ååR S
]
ååS T
args
ååU Y
)
ååY Z
{
çç 
try
éé 
{
èè 
if
êê 
(
êê 
!
êê 	
logger
êê	 
.
êê 
IsDebugEnabled
êê 
)
êê 
return
ëë 
;
ëë 
logger
ìì 

.
ìì
 
DebugFormat
ìì 
(
ìì 
format
ìì 
,
ìì 
args
ìì #
)
ìì# $
;
ìì$ %
}
îî 
catch
ïï 
(
ïï	 

	Exception
ïï
 
ex
ïï 
)
ïï 
{
ññ 
log4net
óó 
.
óó 
Util
óó 
.
óó 
LogLog
óó 
.
óó 
Error
óó 
(
óó 
declaringType
óó +
,
óó+ ,
$str
óó- F
,
óóF G
ex
óóH J
)
óóJ K
;
óóK L
}
òò 
}
ôô 
public
∞∞ 
static
∞∞	 
void
∞∞ 
DebugFormatExt
∞∞ #
(
∞∞# $
this
∞∞$ (
ILog
∞∞) -
logger
∞∞. 4
,
∞∞4 5
IFormatProvider
∞∞6 E
provider
∞∞F N
,
∞∞N O
string
∞∞P V
format
∞∞W ]
,
∞∞] ^
params
∞∞_ e
object
∞∞f l
[
∞∞l m
]
∞∞m n
args
∞∞o s
)
∞∞s t
{
±± 
try
≤≤ 
{
≥≥ 
if
¥¥ 
(
¥¥ 
!
¥¥ 	
logger
¥¥	 
.
¥¥ 
IsDebugEnabled
¥¥ 
)
¥¥ 
return
µµ 
;
µµ 
logger
∑∑ 

.
∑∑
 
DebugFormat
∑∑ 
(
∑∑ 
provider
∑∑ 
,
∑∑  
format
∑∑! '
,
∑∑' (
args
∑∑) -
)
∑∑- .
;
∑∑. /
}
∏∏ 
catch
ππ 
(
ππ	 

	Exception
ππ
 
ex
ππ 
)
ππ 
{
∫∫ 
log4net
ªª 
.
ªª 
Util
ªª 
.
ªª 
LogLog
ªª 
.
ªª 
Error
ªª 
(
ªª 
declaringType
ªª +
,
ªª+ ,
$str
ªª- F
,
ªªF G
ex
ªªH J
)
ªªJ K
;
ªªK L
}
ºº 
}
ΩΩ 
public
‘‘ 
static
‘‘	 
void
‘‘ 
DebugFormatExt
‘‘ #
(
‘‘# $
this
‘‘$ (
ILog
‘‘) -
logger
‘‘. 4
,
‘‘4 5
string
‘‘6 <
format
‘‘= C
,
‘‘C D
object
‘‘E K
arg0
‘‘L P
,
‘‘P Q
object
‘‘R X
arg1
‘‘Y ]
)
‘‘] ^
{
’’ 
try
÷÷ 
{
◊◊ 
if
ÿÿ 
(
ÿÿ 
!
ÿÿ 	
logger
ÿÿ	 
.
ÿÿ 
IsDebugEnabled
ÿÿ 
)
ÿÿ 
return
ŸŸ 
;
ŸŸ 
logger
€€ 

.
€€
 
DebugFormat
€€ 
(
€€ 
format
€€ 
,
€€ 
arg0
€€ #
,
€€# $
arg1
€€% )
)
€€) *
;
€€* +
}
‹‹ 
catch
›› 
(
››	 

	Exception
››
 
ex
›› 
)
›› 
{
ﬁﬁ 
log4net
ﬂﬂ 
.
ﬂﬂ 
Util
ﬂﬂ 
.
ﬂﬂ 
LogLog
ﬂﬂ 
.
ﬂﬂ 
Error
ﬂﬂ 
(
ﬂﬂ 
declaringType
ﬂﬂ +
,
ﬂﬂ+ ,
$str
ﬂﬂ- F
,
ﬂﬂF G
ex
ﬂﬂH J
)
ﬂﬂJ K
;
ﬂﬂK L
}
‡‡ 
}
·· 
public
˘˘ 
static
˘˘	 
void
˘˘ 
DebugFormatExt
˘˘ #
(
˘˘# $
this
˘˘$ (
ILog
˘˘) -
logger
˘˘. 4
,
˘˘4 5
string
˘˘6 <
format
˘˘= C
,
˘˘C D
object
˘˘E K
arg0
˘˘L P
,
˘˘P Q
object
˘˘R X
arg1
˘˘Y ]
,
˘˘] ^
object
˘˘_ e
arg2
˘˘f j
)
˘˘j k
{
˙˙ 
try
˚˚ 
{
¸¸ 
if
˝˝ 
(
˝˝ 
!
˝˝ 	
logger
˝˝	 
.
˝˝ 
IsDebugEnabled
˝˝ 
)
˝˝ 
return
˛˛ 
;
˛˛ 
logger
ÄÄ 

.
ÄÄ
 
DebugFormat
ÄÄ 
(
ÄÄ 
format
ÄÄ 
,
ÄÄ 
arg0
ÄÄ #
,
ÄÄ# $
arg1
ÄÄ% )
,
ÄÄ) *
arg2
ÄÄ+ /
)
ÄÄ/ 0
;
ÄÄ0 1
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ	 

	Exception
ÇÇ
 
ex
ÇÇ 
)
ÇÇ 
{
ÉÉ 
log4net
ÑÑ 
.
ÑÑ 
Util
ÑÑ 
.
ÑÑ 
LogLog
ÑÑ 
.
ÑÑ 
Error
ÑÑ 
(
ÑÑ 
declaringType
ÑÑ +
,
ÑÑ+ ,
$str
ÑÑ- F
,
ÑÑF G
ex
ÑÑH J
)
ÑÑJ K
;
ÑÑK L
}
ÖÖ 
}
ÜÜ 
public
©© 
static
©©	 
void
©© 
InfoExt
©© 
(
©© 
this
©© !
ILog
©©" &
logger
©©' -
,
©©- .
Func
©©/ 3
<
©©3 4
object
©©4 :
>
©©: ;
callback
©©< D
)
©©D E
{
™™ 
try
´´ 
{
¨¨ 
if
≠≠ 
(
≠≠ 
!
≠≠ 	
logger
≠≠	 
.
≠≠ 
IsInfoEnabled
≠≠ 
)
≠≠ 
return
ÆÆ 
;
ÆÆ 
logger
∞∞ 

.
∞∞
 
Info
∞∞ 
(
∞∞ 
callback
∞∞ 
(
∞∞ 
)
∞∞ 
)
∞∞ 
;
∞∞ 
}
±± 
catch
≤≤ 
(
≤≤	 

	Exception
≤≤
 
ex
≤≤ 
)
≤≤ 
{
≥≥ 
log4net
¥¥ 
.
¥¥ 
Util
¥¥ 
.
¥¥ 
LogLog
¥¥ 
.
¥¥ 
Error
¥¥ 
(
¥¥ 
declaringType
¥¥ +
,
¥¥+ ,
$str
¥¥- F
,
¥¥F G
ex
¥¥H J
)
¥¥J K
;
¥¥K L
}
µµ 
}
∂∂ 
public
«« 
static
««	 
void
«« 
InfoExt
«« 
(
«« 
this
«« !
ILog
««" &
logger
««' -
,
««- .
Func
««/ 3
<
««3 4
object
««4 :
>
««: ;
callback
««< D
,
««D E
	Exception
««F O
	exception
««P Y
)
««Y Z
{
»» 
try
…… 
{
   
if
ÀÀ 
(
ÀÀ 
!
ÀÀ 	
logger
ÀÀ	 
.
ÀÀ 
IsInfoEnabled
ÀÀ 
)
ÀÀ 
return
ÃÃ 
;
ÃÃ 
logger
ŒŒ 

.
ŒŒ
 
Info
ŒŒ 
(
ŒŒ 
callback
ŒŒ 
(
ŒŒ 
)
ŒŒ 
,
ŒŒ 
	exception
ŒŒ %
)
ŒŒ% &
;
ŒŒ& '
}
œœ 
catch
–– 
(
––	 

	Exception
––
 
ex
–– 
)
–– 
{
—— 
log4net
““ 
.
““ 
Util
““ 
.
““ 
LogLog
““ 
.
““ 
Error
““ 
(
““ 
declaringType
““ +
,
““+ ,
$str
““- F
,
““F G
ex
““H J
)
““J K
;
““K L
}
”” 
}
‘‘ 
public
ÙÙ 
static
ÙÙ	 
void
ÙÙ 
InfoExt
ÙÙ 
(
ÙÙ 
this
ÙÙ !
ILog
ÙÙ" &
logger
ÙÙ' -
,
ÙÙ- .
object
ÙÙ/ 5
message
ÙÙ6 =
)
ÙÙ= >
{
ıı 
try
ˆˆ 
{
˜˜ 
if
¯¯ 
(
¯¯ 
!
¯¯ 	
logger
¯¯	 
.
¯¯ 
IsInfoEnabled
¯¯ 
)
¯¯ 
return
˘˘ 
;
˘˘ 
logger
˚˚ 

.
˚˚
 
Info
˚˚ 
(
˚˚ 
message
˚˚ 
)
˚˚ 
;
˚˚ 
}
¸¸ 
catch
˝˝ 
(
˝˝	 

	Exception
˝˝
 
ex
˝˝ 
)
˝˝ 
{
˛˛ 
log4net
ˇˇ 
.
ˇˇ 
Util
ˇˇ 
.
ˇˇ 
LogLog
ˇˇ 
.
ˇˇ 
Error
ˇˇ 
(
ˇˇ 
declaringType
ˇˇ +
,
ˇˇ+ ,
$str
ˇˇ- F
,
ˇˇF G
ex
ˇˇH J
)
ˇˇJ K
;
ˇˇK L
}
ÄÄ 
}
ÅÅ 
public
íí 
static
íí	 
void
íí 
InfoExt
íí 
(
íí 
this
íí !
ILog
íí" &
logger
íí' -
,
íí- .
object
íí/ 5
message
íí6 =
,
íí= >
	Exception
íí? H
	exception
ííI R
)
ííR S
{
ìì 
try
îî 
{
ïï 
if
ññ 
(
ññ 
!
ññ 	
logger
ññ	 
.
ññ 
IsInfoEnabled
ññ 
)
ññ 
return
óó 
;
óó 
logger
ôô 

.
ôô
 
Info
ôô 
(
ôô 
message
ôô 
,
ôô 
	exception
ôô "
)
ôô" #
;
ôô# $
}
öö 
catch
õõ 
(
õõ	 

	Exception
õõ
 
ex
õõ 
)
õõ 
{
úú 
log4net
ùù 
.
ùù 
Util
ùù 
.
ùù 
LogLog
ùù 
.
ùù 
Error
ùù 
(
ùù 
declaringType
ùù +
,
ùù+ ,
$str
ùù- F
,
ùùF G
ex
ùùH J
)
ùùJ K
;
ùùK L
}
ûû 
}
üü 
public
ππ 
static
ππ	 
void
ππ 
InfoFormatExt
ππ "
(
ππ" #
this
ππ# '
ILog
ππ( ,
logger
ππ- 3
,
ππ3 4
string
ππ5 ;
format
ππ< B
,
ππB C
object
ππD J
arg0
ππK O
)
ππO P
{
∫∫ 
try
ªª 
{
ºº 
if
ΩΩ 
(
ΩΩ 
!
ΩΩ 	
logger
ΩΩ	 
.
ΩΩ 
IsInfoEnabled
ΩΩ 
)
ΩΩ 
return
ææ 
;
ææ 
logger
¿¿ 

.
¿¿
 

InfoFormat
¿¿ 
(
¿¿ 
format
¿¿ 
,
¿¿ 
arg0
¿¿ "
)
¿¿" #
;
¿¿# $
}
¡¡ 
catch
¬¬ 
(
¬¬	 

	Exception
¬¬
 
ex
¬¬ 
)
¬¬ 
{
√√ 
log4net
ƒƒ 
.
ƒƒ 
Util
ƒƒ 
.
ƒƒ 
LogLog
ƒƒ 
.
ƒƒ 
Error
ƒƒ 
(
ƒƒ 
declaringType
ƒƒ +
,
ƒƒ+ ,
$str
ƒƒ- F
,
ƒƒF G
ex
ƒƒH J
)
ƒƒJ K
;
ƒƒK L
}
≈≈ 
}
∆∆ 
public
‹‹ 
static
‹‹	 
void
‹‹ 
InfoFormatExt
‹‹ "
(
‹‹" #
this
‹‹# '
ILog
‹‹( ,
logger
‹‹- 3
,
‹‹3 4
string
‹‹5 ;
format
‹‹< B
,
‹‹B C
params
‹‹D J
object
‹‹K Q
[
‹‹Q R
]
‹‹R S
args
‹‹T X
)
‹‹X Y
{
›› 
try
ﬁﬁ 
{
ﬂﬂ 
if
‡‡ 
(
‡‡ 
!
‡‡ 	
logger
‡‡	 
.
‡‡ 
IsInfoEnabled
‡‡ 
)
‡‡ 
return
·· 
;
·· 
logger
„„ 

.
„„
 

InfoFormat
„„ 
(
„„ 
format
„„ 
,
„„ 
args
„„ "
)
„„" #
;
„„# $
}
‰‰ 
catch
ÂÂ 
(
ÂÂ	 

	Exception
ÂÂ
 
ex
ÂÂ 
)
ÂÂ 
{
ÊÊ 
log4net
ÁÁ 
.
ÁÁ 
Util
ÁÁ 
.
ÁÁ 
LogLog
ÁÁ 
.
ÁÁ 
Error
ÁÁ 
(
ÁÁ 
declaringType
ÁÁ +
,
ÁÁ+ ,
$str
ÁÁ- F
,
ÁÁF G
ex
ÁÁH J
)
ÁÁJ K
;
ÁÁK L
}
ËË 
}
ÈÈ 
public
ÄÄ 
static
ÄÄ	 
void
ÄÄ 
InfoFormatExt
ÄÄ "
(
ÄÄ" #
this
ÄÄ# '
ILog
ÄÄ( ,
logger
ÄÄ- 3
,
ÄÄ3 4
IFormatProvider
ÄÄ5 D
provider
ÄÄE M
,
ÄÄM N
string
ÄÄO U
format
ÄÄV \
,
ÄÄ\ ]
params
ÄÄ^ d
object
ÄÄe k
[
ÄÄk l
]
ÄÄl m
args
ÄÄn r
)
ÄÄr s
{
ÅÅ 
try
ÇÇ 
{
ÉÉ 
if
ÑÑ 
(
ÑÑ 
!
ÑÑ 	
logger
ÑÑ	 
.
ÑÑ 
IsInfoEnabled
ÑÑ 
)
ÑÑ 
return
ÖÖ 
;
ÖÖ 
logger
áá 

.
áá
 

InfoFormat
áá 
(
áá 
provider
áá 
,
áá 
format
áá  &
,
áá& '
args
áá( ,
)
áá, -
;
áá- .
}
àà 
catch
ââ 
(
ââ	 

	Exception
ââ
 
ex
ââ 
)
ââ 
{
ää 
log4net
ãã 
.
ãã 
Util
ãã 
.
ãã 
LogLog
ãã 
.
ãã 
Error
ãã 
(
ãã 
declaringType
ãã +
,
ãã+ ,
$str
ãã- F
,
ããF G
ex
ããH J
)
ããJ K
;
ããK L
}
åå 
}
çç 
public
§§ 
static
§§	 
void
§§ 
InfoFormatExt
§§ "
(
§§" #
this
§§# '
ILog
§§( ,
logger
§§- 3
,
§§3 4
string
§§5 ;
format
§§< B
,
§§B C
object
§§D J
arg0
§§K O
,
§§O P
object
§§Q W
arg1
§§X \
)
§§\ ]
{
•• 
try
¶¶ 
{
ßß 
if
®® 
(
®® 
!
®® 	
logger
®®	 
.
®® 
IsInfoEnabled
®® 
)
®® 
return
©© 
;
©© 
logger
´´ 

.
´´
 

InfoFormat
´´ 
(
´´ 
format
´´ 
,
´´ 
arg0
´´ "
,
´´" #
arg1
´´$ (
)
´´( )
;
´´) *
}
¨¨ 
catch
≠≠ 
(
≠≠	 

	Exception
≠≠
 
ex
≠≠ 
)
≠≠ 
{
ÆÆ 
log4net
ØØ 
.
ØØ 
Util
ØØ 
.
ØØ 
LogLog
ØØ 
.
ØØ 
Error
ØØ 
(
ØØ 
declaringType
ØØ +
,
ØØ+ ,
$str
ØØ- F
,
ØØF G
ex
ØØH J
)
ØØJ K
;
ØØK L
}
∞∞ 
}
±± 
public
…… 
static
……	 
void
…… 
InfoFormatExt
…… "
(
……" #
this
……# '
ILog
……( ,
logger
……- 3
,
……3 4
string
……5 ;
format
……< B
,
……B C
object
……D J
arg0
……K O
,
……O P
object
……Q W
arg1
……X \
,
……\ ]
object
……^ d
arg2
……e i
)
……i j
{
   
try
ÀÀ 
{
ÃÃ 
if
ÕÕ 
(
ÕÕ 
!
ÕÕ 	
logger
ÕÕ	 
.
ÕÕ 
IsInfoEnabled
ÕÕ 
)
ÕÕ 
return
ŒŒ 
;
ŒŒ 
logger
–– 

.
––
 

InfoFormat
–– 
(
–– 
format
–– 
,
–– 
arg0
–– "
,
––" #
arg1
––$ (
,
––( )
arg2
––* .
)
––. /
;
––/ 0
}
—— 
catch
““ 
(
““	 

	Exception
““
 
ex
““ 
)
““ 
{
”” 
log4net
‘‘ 
.
‘‘ 
Util
‘‘ 
.
‘‘ 
LogLog
‘‘ 
.
‘‘ 
Error
‘‘ 
(
‘‘ 
declaringType
‘‘ +
,
‘‘+ ,
$str
‘‘- F
,
‘‘F G
ex
‘‘H J
)
‘‘J K
;
‘‘K L
}
’’ 
}
÷÷ 
public
˘˘ 
static
˘˘	 
void
˘˘ 
WarnExt
˘˘ 
(
˘˘ 
this
˘˘ !
ILog
˘˘" &
logger
˘˘' -
,
˘˘- .
Func
˘˘/ 3
<
˘˘3 4
object
˘˘4 :
>
˘˘: ;
callback
˘˘< D
)
˘˘D E
{
˙˙ 
try
˚˚ 
{
¸¸ 
if
˝˝ 
(
˝˝ 
!
˝˝ 	
logger
˝˝	 
.
˝˝ 
IsWarnEnabled
˝˝ 
)
˝˝ 
return
˛˛ 
;
˛˛ 
logger
ÄÄ 

.
ÄÄ
 
Warn
ÄÄ 
(
ÄÄ 
callback
ÄÄ 
(
ÄÄ 
)
ÄÄ 
)
ÄÄ 
;
ÄÄ 
}
ÅÅ 
catch
ÇÇ 
(
ÇÇ	 

	Exception
ÇÇ
 
ex
ÇÇ 
)
ÇÇ 
{
ÉÉ 
log4net
ÑÑ 
.
ÑÑ 
Util
ÑÑ 
.
ÑÑ 
LogLog
ÑÑ 
.
ÑÑ 
Error
ÑÑ 
(
ÑÑ 
declaringType
ÑÑ +
,
ÑÑ+ ,
$str
ÑÑ- F
,
ÑÑF G
ex
ÑÑH J
)
ÑÑJ K
;
ÑÑK L
}
ÖÖ 
}
ÜÜ 
public
óó 
static
óó	 
void
óó 
WarnExt
óó 
(
óó 
this
óó !
ILog
óó" &
logger
óó' -
,
óó- .
Func
óó/ 3
<
óó3 4
object
óó4 :
>
óó: ;
callback
óó< D
,
óóD E
	Exception
óóF O
	exception
óóP Y
)
óóY Z
{
òò 
try
ôô 
{
öö 
if
õõ 
(
õõ 
!
õõ 	
logger
õõ	 
.
õõ 
IsWarnEnabled
õõ 
)
õõ 
return
úú 
;
úú 
logger
ûû 

.
ûû
 
Warn
ûû 
(
ûû 
callback
ûû 
(
ûû 
)
ûû 
,
ûû 
	exception
ûû %
)
ûû% &
;
ûû& '
}
üü 
catch
†† 
(
††	 

	Exception
††
 
ex
†† 
)
†† 
{
°° 
log4net
¢¢ 
.
¢¢ 
Util
¢¢ 
.
¢¢ 
LogLog
¢¢ 
.
¢¢ 
Error
¢¢ 
(
¢¢ 
declaringType
¢¢ +
,
¢¢+ ,
$str
¢¢- F
,
¢¢F G
ex
¢¢H J
)
¢¢J K
;
¢¢K L
}
££ 
}
§§ 
public
ƒƒ 
static
ƒƒ	 
void
ƒƒ 
WarnExt
ƒƒ 
(
ƒƒ 
this
ƒƒ !
ILog
ƒƒ" &
logger
ƒƒ' -
,
ƒƒ- .
object
ƒƒ/ 5
message
ƒƒ6 =
)
ƒƒ= >
{
≈≈ 
try
∆∆ 
{
«« 
if
»» 
(
»» 
!
»» 	
logger
»»	 
.
»» 
IsWarnEnabled
»» 
)
»» 
return
…… 
;
…… 
logger
ÀÀ 

.
ÀÀ
 
Warn
ÀÀ 
(
ÀÀ 
message
ÀÀ 
)
ÀÀ 
;
ÀÀ 
}
ÃÃ 
catch
ÕÕ 
(
ÕÕ	 

	Exception
ÕÕ
 
ex
ÕÕ 
)
ÕÕ 
{
ŒŒ 
log4net
œœ 
.
œœ 
Util
œœ 
.
œœ 
LogLog
œœ 
.
œœ 
Error
œœ 
(
œœ 
declaringType
œœ +
,
œœ+ ,
$str
œœ- F
,
œœF G
ex
œœH J
)
œœJ K
;
œœK L
}
–– 
}
—— 
public
‚‚ 
static
‚‚	 
void
‚‚ 
WarnExt
‚‚ 
(
‚‚ 
this
‚‚ !
ILog
‚‚" &
logger
‚‚' -
,
‚‚- .
object
‚‚/ 5
message
‚‚6 =
,
‚‚= >
	Exception
‚‚? H
	exception
‚‚I R
)
‚‚R S
{
„„ 
try
‰‰ 
{
ÂÂ 
if
ÊÊ 
(
ÊÊ 
!
ÊÊ 	
logger
ÊÊ	 
.
ÊÊ 
IsWarnEnabled
ÊÊ 
)
ÊÊ 
return
ÁÁ 
;
ÁÁ 
logger
ÈÈ 

.
ÈÈ
 
Warn
ÈÈ 
(
ÈÈ 
message
ÈÈ 
,
ÈÈ 
	exception
ÈÈ "
)
ÈÈ" #
;
ÈÈ# $
}
ÍÍ 
catch
ÎÎ 
(
ÎÎ	 

	Exception
ÎÎ
 
ex
ÎÎ 
)
ÎÎ 
{
ÏÏ 
log4net
ÌÌ 
.
ÌÌ 
Util
ÌÌ 
.
ÌÌ 
LogLog
ÌÌ 
.
ÌÌ 
Error
ÌÌ 
(
ÌÌ 
declaringType
ÌÌ +
,
ÌÌ+ ,
$str
ÌÌ- F
,
ÌÌF G
ex
ÌÌH J
)
ÌÌJ K
;
ÌÌK L
}
ÓÓ 
}
ÔÔ 
public
ââ 
static
ââ	 
void
ââ 
WarnFormatExt
ââ "
(
ââ" #
this
ââ# '
ILog
ââ( ,
logger
ââ- 3
,
ââ3 4
string
ââ5 ;
format
ââ< B
,
ââB C
object
ââD J
arg0
ââK O
)
ââO P
{
ää 
try
ãã 
{
åå 
if
çç 
(
çç 
!
çç 	
logger
çç	 
.
çç 
IsWarnEnabled
çç 
)
çç 
return
éé 
;
éé 
logger
êê 

.
êê
 

WarnFormat
êê 
(
êê 
format
êê 
,
êê 
arg0
êê "
)
êê" #
;
êê# $
}
ëë 
catch
íí 
(
íí	 

	Exception
íí
 
ex
íí 
)
íí 
{
ìì 
log4net
îî 
.
îî 
Util
îî 
.
îî 
LogLog
îî 
.
îî 
Error
îî 
(
îî 
declaringType
îî +
,
îî+ ,
$str
îî- F
,
îîF G
ex
îîH J
)
îîJ K
;
îîK L
}
ïï 
}
ññ 
public
¨¨ 
static
¨¨	 
void
¨¨ 
WarnFormatExt
¨¨ "
(
¨¨" #
this
¨¨# '
ILog
¨¨( ,
logger
¨¨- 3
,
¨¨3 4
string
¨¨5 ;
format
¨¨< B
,
¨¨B C
params
¨¨D J
object
¨¨K Q
[
¨¨Q R
]
¨¨R S
args
¨¨T X
)
¨¨X Y
{
≠≠ 
try
ÆÆ 
{
ØØ 
if
∞∞ 
(
∞∞ 
!
∞∞ 	
logger
∞∞	 
.
∞∞ 
IsWarnEnabled
∞∞ 
)
∞∞ 
return
±± 
;
±± 
logger
≥≥ 

.
≥≥
 

WarnFormat
≥≥ 
(
≥≥ 
format
≥≥ 
,
≥≥ 
args
≥≥ "
)
≥≥" #
;
≥≥# $
}
¥¥ 
catch
µµ 
(
µµ	 

	Exception
µµ
 
ex
µµ 
)
µµ 
{
∂∂ 
log4net
∑∑ 
.
∑∑ 
Util
∑∑ 
.
∑∑ 
LogLog
∑∑ 
.
∑∑ 
Error
∑∑ 
(
∑∑ 
declaringType
∑∑ +
,
∑∑+ ,
$str
∑∑- F
,
∑∑F G
ex
∑∑H J
)
∑∑J K
;
∑∑K L
}
∏∏ 
}
ππ 
public
–– 
static
––	 
void
–– 
WarnFormatExt
–– "
(
––" #
this
––# '
ILog
––( ,
logger
––- 3
,
––3 4
IFormatProvider
––5 D
provider
––E M
,
––M N
string
––O U
format
––V \
,
––\ ]
params
––^ d
object
––e k
[
––k l
]
––l m
args
––n r
)
––r s
{
—— 
try
““ 
{
”” 
if
‘‘ 
(
‘‘ 
!
‘‘ 	
logger
‘‘	 
.
‘‘ 
IsWarnEnabled
‘‘ 
)
‘‘ 
return
’’ 
;
’’ 
logger
◊◊ 

.
◊◊
 

WarnFormat
◊◊ 
(
◊◊ 
provider
◊◊ 
,
◊◊ 
format
◊◊  &
,
◊◊& '
args
◊◊( ,
)
◊◊, -
;
◊◊- .
}
ÿÿ 
catch
ŸŸ 
(
ŸŸ	 

	Exception
ŸŸ
 
ex
ŸŸ 
)
ŸŸ 
{
⁄⁄ 
log4net
€€ 
.
€€ 
Util
€€ 
.
€€ 
LogLog
€€ 
.
€€ 
Error
€€ 
(
€€ 
declaringType
€€ +
,
€€+ ,
$str
€€- F
,
€€F G
ex
€€H J
)
€€J K
;
€€K L
}
‹‹ 
}
›› 
public
ÙÙ 
static
ÙÙ	 
void
ÙÙ 
WarnFormatExt
ÙÙ "
(
ÙÙ" #
this
ÙÙ# '
ILog
ÙÙ( ,
logger
ÙÙ- 3
,
ÙÙ3 4
string
ÙÙ5 ;
format
ÙÙ< B
,
ÙÙB C
object
ÙÙD J
arg0
ÙÙK O
,
ÙÙO P
object
ÙÙQ W
arg1
ÙÙX \
)
ÙÙ\ ]
{
ıı 
try
ˆˆ 
{
˜˜ 
if
¯¯ 
(
¯¯ 
!
¯¯ 	
logger
¯¯	 
.
¯¯ 
IsWarnEnabled
¯¯ 
)
¯¯ 
return
˘˘ 
;
˘˘ 
logger
˚˚ 

.
˚˚
 

WarnFormat
˚˚ 
(
˚˚ 
format
˚˚ 
,
˚˚ 
arg0
˚˚ "
,
˚˚" #
arg1
˚˚$ (
)
˚˚( )
;
˚˚) *
}
¸¸ 
catch
˝˝ 
(
˝˝	 

	Exception
˝˝
 
ex
˝˝ 
)
˝˝ 
{
˛˛ 
log4net
ˇˇ 
.
ˇˇ 
Util
ˇˇ 
.
ˇˇ 
LogLog
ˇˇ 
.
ˇˇ 
Error
ˇˇ 
(
ˇˇ 
declaringType
ˇˇ +
,
ˇˇ+ ,
$str
ˇˇ- F
,
ˇˇF G
ex
ˇˇH J
)
ˇˇJ K
;
ˇˇK L
}
ÄÄ 
}
ÅÅ 
public
ôô 
static
ôô	 
void
ôô 
WarnFormatExt
ôô "
(
ôô" #
this
ôô# '
ILog
ôô( ,
logger
ôô- 3
,
ôô3 4
string
ôô5 ;
format
ôô< B
,
ôôB C
object
ôôD J
arg0
ôôK O
,
ôôO P
object
ôôQ W
arg1
ôôX \
,
ôô\ ]
object
ôô^ d
arg2
ôôe i
)
ôôi j
{
öö 
try
õõ 
{
úú 
if
ùù 
(
ùù 
!
ùù 	
logger
ùù	 
.
ùù 
IsWarnEnabled
ùù 
)
ùù 
return
ûû 
;
ûû 
logger
†† 

.
††
 

WarnFormat
†† 
(
†† 
format
†† 
,
†† 
arg0
†† "
,
††" #
arg1
††$ (
,
††( )
arg2
††* .
)
††. /
;
††/ 0
}
°° 
catch
¢¢ 
(
¢¢	 

	Exception
¢¢
 
ex
¢¢ 
)
¢¢ 
{
££ 
log4net
§§ 
.
§§ 
Util
§§ 
.
§§ 
LogLog
§§ 
.
§§ 
Error
§§ 
(
§§ 
declaringType
§§ +
,
§§+ ,
$str
§§- F
,
§§F G
ex
§§H J
)
§§J K
;
§§K L
}
•• 
}
¶¶ 
public
…… 
static
……	 
void
…… 
ErrorExt
…… 
(
…… 
this
…… "
ILog
……# '
logger
……( .
,
……. /
Func
……0 4
<
……4 5
object
……5 ;
>
……; <
callback
……= E
)
……E F
{
   
try
ÀÀ 
{
ÃÃ 
if
ÕÕ 
(
ÕÕ 
!
ÕÕ 	
logger
ÕÕ	 
.
ÕÕ 
IsErrorEnabled
ÕÕ 
)
ÕÕ 
return
ŒŒ 
;
ŒŒ 
logger
–– 

.
––
 
Error
–– 
(
–– 
callback
–– 
(
–– 
)
–– 
)
–– 
;
–– 
}
—— 
catch
““ 
(
““	 

	Exception
““
 
ex
““ 
)
““ 
{
”” 
log4net
‘‘ 
.
‘‘ 
Util
‘‘ 
.
‘‘ 
LogLog
‘‘ 
.
‘‘ 
Error
‘‘ 
(
‘‘ 
declaringType
‘‘ +
,
‘‘+ ,
$str
‘‘- F
,
‘‘F G
ex
‘‘H J
)
‘‘J K
;
‘‘K L
}
’’ 
}
÷÷ 
public
ÁÁ 
static
ÁÁ	 
void
ÁÁ 
ErrorExt
ÁÁ 
(
ÁÁ 
this
ÁÁ "
ILog
ÁÁ# '
logger
ÁÁ( .
,
ÁÁ. /
Func
ÁÁ0 4
<
ÁÁ4 5
object
ÁÁ5 ;
>
ÁÁ; <
callback
ÁÁ= E
,
ÁÁE F
	Exception
ÁÁG P
	exception
ÁÁQ Z
)
ÁÁZ [
{
ËË 
try
ÈÈ 
{
ÍÍ 
if
ÎÎ 
(
ÎÎ 
!
ÎÎ 	
logger
ÎÎ	 
.
ÎÎ 
IsErrorEnabled
ÎÎ 
)
ÎÎ 
return
ÏÏ 
;
ÏÏ 
logger
ÓÓ 

.
ÓÓ
 
Error
ÓÓ 
(
ÓÓ 
callback
ÓÓ 
(
ÓÓ 
)
ÓÓ 
,
ÓÓ 
	exception
ÓÓ &
)
ÓÓ& '
;
ÓÓ' (
}
ÔÔ 
catch
 
(
	 

	Exception

 
ex
 
)
 
{
ÒÒ 
log4net
ÚÚ 
.
ÚÚ 
Util
ÚÚ 
.
ÚÚ 
LogLog
ÚÚ 
.
ÚÚ 
Error
ÚÚ 
(
ÚÚ 
declaringType
ÚÚ +
,
ÚÚ+ ,
$str
ÚÚ- F
,
ÚÚF G
ex
ÚÚH J
)
ÚÚJ K
;
ÚÚK L
}
ÛÛ 
}
ÙÙ 
public
î	î	 
static
î	î		 
void
î	î	 
ErrorExt
î	î	 
(
î	î	 
this
î	î	 "
ILog
î	î	# '
logger
î	î	( .
,
î	î	. /
object
î	î	0 6
message
î	î	7 >
)
î	î	> ?
{
ï	ï	 
try
ñ	ñ	 
{
ó	ó	 
if
ò	ò	 
(
ò	ò	 
!
ò	ò	 	
logger
ò	ò		 
.
ò	ò	 
IsErrorEnabled
ò	ò	 
)
ò	ò	 
return
ô	ô	 
;
ô	ô	 
logger
õ	õ	 

.
õ	õ	
 
Error
õ	õ	 
(
õ	õ	 
message
õ	õ	 
)
õ	õ	 
;
õ	õ	 
}
ú	ú	 
catch
ù	ù	 
(
ù	ù		 

	Exception
ù	ù	
 
ex
ù	ù	 
)
ù	ù	 
{
û	û	 
log4net
ü	ü	 
.
ü	ü	 
Util
ü	ü	 
.
ü	ü	 
LogLog
ü	ü	 
.
ü	ü	 
Error
ü	ü	 
(
ü	ü	 
declaringType
ü	ü	 +
,
ü	ü	+ ,
$str
ü	ü	- F
,
ü	ü	F G
ex
ü	ü	H J
)
ü	ü	J K
;
ü	ü	K L
}
†	†	 
}
°	°	 
public
≤	≤	 
static
≤	≤		 
void
≤	≤	 
ErrorExt
≤	≤	 
(
≤	≤	 
this
≤	≤	 "
ILog
≤	≤	# '
logger
≤	≤	( .
,
≤	≤	. /
object
≤	≤	0 6
message
≤	≤	7 >
,
≤	≤	> ?
	Exception
≤	≤	@ I
	exception
≤	≤	J S
)
≤	≤	S T
{
≥	≥	 
try
¥	¥	 
{
µ	µ	 
if
∂	∂	 
(
∂	∂	 
!
∂	∂	 	
logger
∂	∂		 
.
∂	∂	 
IsErrorEnabled
∂	∂	 
)
∂	∂	 
return
∑	∑	 
;
∑	∑	 
logger
π	π	 

.
π	π	
 
Error
π	π	 
(
π	π	 
message
π	π	 
,
π	π	 
	exception
π	π	 #
)
π	π	# $
;
π	π	$ %
}
∫	∫	 
catch
ª	ª	 
(
ª	ª		 

	Exception
ª	ª	
 
ex
ª	ª	 
)
ª	ª	 
{
º	º	 
log4net
Ω	Ω	 
.
Ω	Ω	 
Util
Ω	Ω	 
.
Ω	Ω	 
LogLog
Ω	Ω	 
.
Ω	Ω	 
Error
Ω	Ω	 
(
Ω	Ω	 
declaringType
Ω	Ω	 +
,
Ω	Ω	+ ,
$str
Ω	Ω	- F
,
Ω	Ω	F G
ex
Ω	Ω	H J
)
Ω	Ω	J K
;
Ω	Ω	K L
}
æ	æ	 
}
ø	ø	 
public
Ÿ	Ÿ	 
static
Ÿ	Ÿ		 
void
Ÿ	Ÿ	 
ErrorFormatExt
Ÿ	Ÿ	 #
(
Ÿ	Ÿ	# $
this
Ÿ	Ÿ	$ (
ILog
Ÿ	Ÿ	) -
logger
Ÿ	Ÿ	. 4
,
Ÿ	Ÿ	4 5
string
Ÿ	Ÿ	6 <
format
Ÿ	Ÿ	= C
,
Ÿ	Ÿ	C D
object
Ÿ	Ÿ	E K
arg0
Ÿ	Ÿ	L P
)
Ÿ	Ÿ	P Q
{
⁄	⁄	 
try
€	€	 
{
‹	‹	 
if
›	›	 
(
›	›	 
!
›	›	 	
logger
›	›		 
.
›	›	 
IsErrorEnabled
›	›	 
)
›	›	 
return
ﬁ	ﬁ	 
;
ﬁ	ﬁ	 
logger
‡	‡	 

.
‡	‡	
 
ErrorFormat
‡	‡	 
(
‡	‡	 
format
‡	‡	 
,
‡	‡	 
arg0
‡	‡	 #
)
‡	‡	# $
;
‡	‡	$ %
}
·	·	 
catch
‚	‚	 
(
‚	‚		 

	Exception
‚	‚	
 
ex
‚	‚	 
)
‚	‚	 
{
„	„	 
log4net
‰	‰	 
.
‰	‰	 
Util
‰	‰	 
.
‰	‰	 
LogLog
‰	‰	 
.
‰	‰	 
Error
‰	‰	 
(
‰	‰	 
declaringType
‰	‰	 +
,
‰	‰	+ ,
$str
‰	‰	- F
,
‰	‰	F G
ex
‰	‰	H J
)
‰	‰	J K
;
‰	‰	K L
}
Â	Â	 
}
Ê	Ê	 
public
¸	¸	 
static
¸	¸		 
void
¸	¸	 
ErrorFormatExt
¸	¸	 #
(
¸	¸	# $
this
¸	¸	$ (
ILog
¸	¸	) -
logger
¸	¸	. 4
,
¸	¸	4 5
string
¸	¸	6 <
format
¸	¸	= C
,
¸	¸	C D
params
¸	¸	E K
object
¸	¸	L R
[
¸	¸	R S
]
¸	¸	S T
args
¸	¸	U Y
)
¸	¸	Y Z
{
˝	˝	 
try
˛	˛	 
{
ˇ	ˇ	 
if
Ä
Ä
 
(
Ä
Ä
 
!
Ä
Ä
 	
logger
Ä
Ä
	 
.
Ä
Ä
 
IsErrorEnabled
Ä
Ä
 
)
Ä
Ä
 
return
Å
Å
 
;
Å
Å
 
logger
É
É
 

.
É
É

 
ErrorFormat
É
É
 
(
É
É
 
format
É
É
 
,
É
É
 
args
É
É
 #
)
É
É
# $
;
É
É
$ %
}
Ñ
Ñ
 
catch
Ö
Ö
 
(
Ö
Ö
	 

	Exception
Ö
Ö

 
ex
Ö
Ö
 
)
Ö
Ö
 
{
Ü
Ü
 
log4net
á
á
 
.
á
á
 
Util
á
á
 
.
á
á
 
LogLog
á
á
 
.
á
á
 
Error
á
á
 
(
á
á
 
declaringType
á
á
 +
,
á
á
+ ,
$str
á
á
- F
,
á
á
F G
ex
á
á
H J
)
á
á
J K
;
á
á
K L
}
à
à
 
}
â
â
 
public
†
†
 
static
†
†
	 
void
†
†
 
ErrorFormatExt
†
†
 #
(
†
†
# $
this
†
†
$ (
ILog
†
†
) -
logger
†
†
. 4
,
†
†
4 5
IFormatProvider
†
†
6 E
provider
†
†
F N
,
†
†
N O
string
†
†
P V
format
†
†
W ]
,
†
†
] ^
params
†
†
_ e
object
†
†
f l
[
†
†
l m
]
†
†
m n
args
†
†
o s
)
†
†
s t
{
°
°
 
try
¢
¢
 
{
£
£
 
if
§
§
 
(
§
§
 
!
§
§
 	
logger
§
§
	 
.
§
§
 
IsErrorEnabled
§
§
 
)
§
§
 
return
•
•
 
;
•
•
 
logger
ß
ß
 

.
ß
ß

 
ErrorFormat
ß
ß
 
(
ß
ß
 
provider
ß
ß
 
,
ß
ß
  
format
ß
ß
! '
,
ß
ß
' (
args
ß
ß
) -
)
ß
ß
- .
;
ß
ß
. /
}
®
®
 
catch
©
©
 
(
©
©
	 

	Exception
©
©

 
ex
©
©
 
)
©
©
 
{
™
™
 
log4net
´
´
 
.
´
´
 
Util
´
´
 
.
´
´
 
LogLog
´
´
 
.
´
´
 
Error
´
´
 
(
´
´
 
declaringType
´
´
 +
,
´
´
+ ,
$str
´
´
- F
,
´
´
F G
ex
´
´
H J
)
´
´
J K
;
´
´
K L
}
¨
¨
 
}
≠
≠
 
public
ƒ
ƒ
 
static
ƒ
ƒ
	 
void
ƒ
ƒ
 
ErrorFormatExt
ƒ
ƒ
 #
(
ƒ
ƒ
# $
this
ƒ
ƒ
$ (
ILog
ƒ
ƒ
) -
logger
ƒ
ƒ
. 4
,
ƒ
ƒ
4 5
string
ƒ
ƒ
6 <
format
ƒ
ƒ
= C
,
ƒ
ƒ
C D
object
ƒ
ƒ
E K
arg0
ƒ
ƒ
L P
,
ƒ
ƒ
P Q
object
ƒ
ƒ
R X
arg1
ƒ
ƒ
Y ]
)
ƒ
ƒ
] ^
{
≈
≈
 
try
∆
∆
 
{
«
«
 
if
»
»
 
(
»
»
 
!
»
»
 	
logger
»
»
	 
.
»
»
 
IsErrorEnabled
»
»
 
)
»
»
 
return
…
…
 
;
…
…
 
logger
À
À
 

.
À
À

 
ErrorFormat
À
À
 
(
À
À
 
format
À
À
 
,
À
À
 
arg0
À
À
 #
,
À
À
# $
arg1
À
À
% )
)
À
À
) *
;
À
À
* +
}
Ã
Ã
 
catch
Õ
Õ
 
(
Õ
Õ
	 

	Exception
Õ
Õ

 
ex
Õ
Õ
 
)
Õ
Õ
 
{
Œ
Œ
 
log4net
œ
œ
 
.
œ
œ
 
Util
œ
œ
 
.
œ
œ
 
LogLog
œ
œ
 
.
œ
œ
 
Error
œ
œ
 
(
œ
œ
 
declaringType
œ
œ
 +
,
œ
œ
+ ,
$str
œ
œ
- F
,
œ
œ
F G
ex
œ
œ
H J
)
œ
œ
J K
;
œ
œ
K L
}
–
–
 
}
—
—
 
public
È
È
 
static
È
È
	 
void
È
È
 
ErrorFormatExt
È
È
 #
(
È
È
# $
this
È
È
$ (
ILog
È
È
) -
logger
È
È
. 4
,
È
È
4 5
string
È
È
6 <
format
È
È
= C
,
È
È
C D
object
È
È
E K
arg0
È
È
L P
,
È
È
P Q
object
È
È
R X
arg1
È
È
Y ]
,
È
È
] ^
object
È
È
_ e
arg2
È
È
f j
)
È
È
j k
{
Í
Í
 
try
Î
Î
 
{
Ï
Ï
 
if
Ì
Ì
 
(
Ì
Ì
 
!
Ì
Ì
 	
logger
Ì
Ì
	 
.
Ì
Ì
 
IsErrorEnabled
Ì
Ì
 
)
Ì
Ì
 
return
Ó
Ó
 
;
Ó
Ó
 
logger


 

.



 
ErrorFormat


 
(


 
format


 
,


 
arg0


 #
,


# $
arg1


% )
,


) *
arg2


+ /
)


/ 0
;


0 1
}
Ò
Ò
 
catch
Ú
Ú
 
(
Ú
Ú
	 

	Exception
Ú
Ú

 
ex
Ú
Ú
 
)
Ú
Ú
 
{
Û
Û
 
log4net
Ù
Ù
 
.
Ù
Ù
 
Util
Ù
Ù
 
.
Ù
Ù
 
LogLog
Ù
Ù
 
.
Ù
Ù
 
Error
Ù
Ù
 
(
Ù
Ù
 
declaringType
Ù
Ù
 +
,
Ù
Ù
+ ,
$str
Ù
Ù
- F
,
Ù
Ù
F G
ex
Ù
Ù
H J
)
Ù
Ù
J K
;
Ù
Ù
K L
}
ı
ı
 
}
ˆ
ˆ
 
public
ôô 
static
ôô	 
void
ôô 
FatalExt
ôô 
(
ôô 
this
ôô "
ILog
ôô# '
logger
ôô( .
,
ôô. /
Func
ôô0 4
<
ôô4 5
object
ôô5 ;
>
ôô; <
callback
ôô= E
)
ôôE F
{
öö 
try
õõ 
{
úú 
if
ùù 
(
ùù 
!
ùù 	
logger
ùù	 
.
ùù 
IsFatalEnabled
ùù 
)
ùù 
return
ûû 
;
ûû 
logger
†† 

.
††
 
Fatal
†† 
(
†† 
callback
†† 
(
†† 
)
†† 
)
†† 
;
†† 
}
°° 
catch
¢¢ 
(
¢¢	 

	Exception
¢¢
 
ex
¢¢ 
)
¢¢ 
{
££ 
log4net
§§ 
.
§§ 
Util
§§ 
.
§§ 
LogLog
§§ 
.
§§ 
Error
§§ 
(
§§ 
declaringType
§§ +
,
§§+ ,
$str
§§- F
,
§§F G
ex
§§H J
)
§§J K
;
§§K L
}
•• 
}
¶¶ 
public
∑∑ 
static
∑∑	 
void
∑∑ 
FatalExt
∑∑ 
(
∑∑ 
this
∑∑ "
ILog
∑∑# '
logger
∑∑( .
,
∑∑. /
Func
∑∑0 4
<
∑∑4 5
object
∑∑5 ;
>
∑∑; <
callback
∑∑= E
,
∑∑E F
	Exception
∑∑G P
	exception
∑∑Q Z
)
∑∑Z [
{
∏∏ 
try
ππ 
{
∫∫ 
if
ªª 
(
ªª 
!
ªª 	
logger
ªª	 
.
ªª 
IsFatalEnabled
ªª 
)
ªª 
return
ºº 
;
ºº 
logger
ææ 

.
ææ
 
Fatal
ææ 
(
ææ 
callback
ææ 
(
ææ 
)
ææ 
,
ææ 
	exception
ææ &
)
ææ& '
;
ææ' (
}
øø 
catch
¿¿ 
(
¿¿	 

	Exception
¿¿
 
ex
¿¿ 
)
¿¿ 
{
¡¡ 
log4net
¬¬ 
.
¬¬ 
Util
¬¬ 
.
¬¬ 
LogLog
¬¬ 
.
¬¬ 
Error
¬¬ 
(
¬¬ 
declaringType
¬¬ +
,
¬¬+ ,
$str
¬¬- F
,
¬¬F G
ex
¬¬H J
)
¬¬J K
;
¬¬K L
}
√√ 
}
ƒƒ 
public
‰‰ 
static
‰‰	 
void
‰‰ 
FatalExt
‰‰ 
(
‰‰ 
this
‰‰ "
ILog
‰‰# '
logger
‰‰( .
,
‰‰. /
object
‰‰0 6
message
‰‰7 >
)
‰‰> ?
{
ÂÂ 
try
ÊÊ 
{
ÁÁ 
if
ËË 
(
ËË 
!
ËË 	
logger
ËË	 
.
ËË 
IsFatalEnabled
ËË 
)
ËË 
return
ÈÈ 
;
ÈÈ 
logger
ÎÎ 

.
ÎÎ
 
Fatal
ÎÎ 
(
ÎÎ 
message
ÎÎ 
)
ÎÎ 
;
ÎÎ 
}
ÏÏ 
catch
ÌÌ 
(
ÌÌ	 

	Exception
ÌÌ
 
ex
ÌÌ 
)
ÌÌ 
{
ÓÓ 
log4net
ÔÔ 
.
ÔÔ 
Util
ÔÔ 
.
ÔÔ 
LogLog
ÔÔ 
.
ÔÔ 
Error
ÔÔ 
(
ÔÔ 
declaringType
ÔÔ +
,
ÔÔ+ ,
$str
ÔÔ- F
,
ÔÔF G
ex
ÔÔH J
)
ÔÔJ K
;
ÔÔK L
}
 
}
ÒÒ 
public
ÇÇ 
static
ÇÇ	 
void
ÇÇ 
FatalExt
ÇÇ 
(
ÇÇ 
this
ÇÇ "
ILog
ÇÇ# '
logger
ÇÇ( .
,
ÇÇ. /
object
ÇÇ0 6
message
ÇÇ7 >
,
ÇÇ> ?
	Exception
ÇÇ@ I
	exception
ÇÇJ S
)
ÇÇS T
{
ÉÉ 
try
ÑÑ 
{
ÖÖ 
if
ÜÜ 
(
ÜÜ 
!
ÜÜ 	
logger
ÜÜ	 
.
ÜÜ 
IsFatalEnabled
ÜÜ 
)
ÜÜ 
return
áá 
;
áá 
logger
ââ 

.
ââ
 
Fatal
ââ 
(
ââ 
message
ââ 
,
ââ 
	exception
ââ #
)
ââ# $
;
ââ$ %
}
ää 
catch
ãã 
(
ãã	 

	Exception
ãã
 
ex
ãã 
)
ãã 
{
åå 
log4net
çç 
.
çç 
Util
çç 
.
çç 
LogLog
çç 
.
çç 
Error
çç 
(
çç 
declaringType
çç +
,
çç+ ,
$str
çç- F
,
ççF G
ex
ççH J
)
ççJ K
;
ççK L
}
éé 
}
èè 
public
©© 
static
©©	 
void
©© 
FatalFormatExt
©© #
(
©©# $
this
©©$ (
ILog
©©) -
logger
©©. 4
,
©©4 5
string
©©6 <
format
©©= C
,
©©C D
object
©©E K
arg0
©©L P
)
©©P Q
{
™™ 
try
´´ 
{
¨¨ 
if
≠≠ 
(
≠≠ 
!
≠≠ 	
logger
≠≠	 
.
≠≠ 
IsFatalEnabled
≠≠ 
)
≠≠ 
return
ÆÆ 
;
ÆÆ 
logger
∞∞ 

.
∞∞
 
FatalFormat
∞∞ 
(
∞∞ 
format
∞∞ 
,
∞∞ 
arg0
∞∞ #
)
∞∞# $
;
∞∞$ %
}
±± 
catch
≤≤ 
(
≤≤	 

	Exception
≤≤
 
ex
≤≤ 
)
≤≤ 
{
≥≥ 
log4net
¥¥ 
.
¥¥ 
Util
¥¥ 
.
¥¥ 
LogLog
¥¥ 
.
¥¥ 
Error
¥¥ 
(
¥¥ 
declaringType
¥¥ +
,
¥¥+ ,
$str
¥¥- F
,
¥¥F G
ex
¥¥H J
)
¥¥J K
;
¥¥K L
}
µµ 
}
∂∂ 
public
ÃÃ 
static
ÃÃ	 
void
ÃÃ 
FatalFormatExt
ÃÃ #
(
ÃÃ# $
this
ÃÃ$ (
ILog
ÃÃ) -
logger
ÃÃ. 4
,
ÃÃ4 5
string
ÃÃ6 <
format
ÃÃ= C
,
ÃÃC D
params
ÃÃE K
object
ÃÃL R
[
ÃÃR S
]
ÃÃS T
args
ÃÃU Y
)
ÃÃY Z
{
ÕÕ 
try
ŒŒ 
{
œœ 
if
–– 
(
–– 
!
–– 	
logger
––	 
.
–– 
IsFatalEnabled
–– 
)
–– 
return
—— 
;
—— 
logger
”” 

.
””
 
FatalFormat
”” 
(
”” 
format
”” 
,
”” 
args
”” #
)
””# $
;
””$ %
}
‘‘ 
catch
’’ 
(
’’	 

	Exception
’’
 
ex
’’ 
)
’’ 
{
÷÷ 
log4net
◊◊ 
.
◊◊ 
Util
◊◊ 
.
◊◊ 
LogLog
◊◊ 
.
◊◊ 
Error
◊◊ 
(
◊◊ 
declaringType
◊◊ +
,
◊◊+ ,
$str
◊◊- F
,
◊◊F G
ex
◊◊H J
)
◊◊J K
;
◊◊K L
}
ÿÿ 
}
ŸŸ 
public
 
static
	 
void
 
FatalFormatExt
 #
(
# $
this
$ (
ILog
) -
logger
. 4
,
4 5
IFormatProvider
6 E
provider
F N
,
N O
string
P V
format
W ]
,
] ^
params
_ e
object
f l
[
l m
]
m n
args
o s
)
s t
{
ÒÒ 
try
ÚÚ 
{
ÛÛ 
if
ÙÙ 
(
ÙÙ 
!
ÙÙ 	
logger
ÙÙ	 
.
ÙÙ 
IsFatalEnabled
ÙÙ 
)
ÙÙ 
return
ıı 
;
ıı 
logger
˜˜ 

.
˜˜
 
FatalFormat
˜˜ 
(
˜˜ 
provider
˜˜ 
,
˜˜  
format
˜˜! '
,
˜˜' (
args
˜˜) -
)
˜˜- .
;
˜˜. /
}
¯¯ 
catch
˘˘ 
(
˘˘	 

	Exception
˘˘
 
ex
˘˘ 
)
˘˘ 
{
˙˙ 
log4net
˚˚ 
.
˚˚ 
Util
˚˚ 
.
˚˚ 
LogLog
˚˚ 
.
˚˚ 
Error
˚˚ 
(
˚˚ 
declaringType
˚˚ +
,
˚˚+ ,
$str
˚˚- F
,
˚˚F G
ex
˚˚H J
)
˚˚J K
;
˚˚K L
}
¸¸ 
}
˝˝ 
public
îî 
static
îî	 
void
îî 
FatalFormatExt
îî #
(
îî# $
this
îî$ (
ILog
îî) -
logger
îî. 4
,
îî4 5
string
îî6 <
format
îî= C
,
îîC D
object
îîE K
arg0
îîL P
,
îîP Q
object
îîR X
arg1
îîY ]
)
îî] ^
{
ïï 
try
ññ 
{
óó 
if
òò 
(
òò 
!
òò 	
logger
òò	 
.
òò 
IsFatalEnabled
òò 
)
òò 
return
ôô 
;
ôô 
logger
õõ 

.
õõ
 
FatalFormat
õõ 
(
õõ 
format
õõ 
,
õõ 
arg0
õõ #
,
õõ# $
arg1
õõ% )
)
õõ) *
;
õõ* +
}
úú 
catch
ùù 
(
ùù	 

	Exception
ùù
 
ex
ùù 
)
ùù 
{
ûû 
log4net
üü 
.
üü 
Util
üü 
.
üü 
LogLog
üü 
.
üü 
Error
üü 
(
üü 
declaringType
üü +
,
üü+ ,
$str
üü- F
,
üüF G
ex
üüH J
)
üüJ K
;
üüK L
}
†† 
}
°° 
public
ππ 
static
ππ	 
void
ππ 
FatalFormatExt
ππ #
(
ππ# $
this
ππ$ (
ILog
ππ) -
logger
ππ. 4
,
ππ4 5
string
ππ6 <
format
ππ= C
,
ππC D
object
ππE K
arg0
ππL P
,
ππP Q
object
ππR X
arg1
ππY ]
,
ππ] ^
object
ππ_ e
arg2
ππf j
)
ππj k
{
∫∫ 
try
ªª 
{
ºº 
if
ΩΩ 
(
ΩΩ 
!
ΩΩ 	
logger
ΩΩ	 
.
ΩΩ 
IsFatalEnabled
ΩΩ 
)
ΩΩ 
return
ææ 
;
ææ 
logger
¿¿ 

.
¿¿
 
FatalFormat
¿¿ 
(
¿¿ 
format
¿¿ 
,
¿¿ 
arg0
¿¿ #
,
¿¿# $
arg1
¿¿% )
,
¿¿) *
arg2
¿¿+ /
)
¿¿/ 0
;
¿¿0 1
}
¡¡ 
catch
¬¬ 
(
¬¬	 

	Exception
¬¬
 
ex
¬¬ 
)
¬¬ 
{
√√ 
log4net
ƒƒ 
.
ƒƒ 
Util
ƒƒ 
.
ƒƒ 
LogLog
ƒƒ 
.
ƒƒ 
Error
ƒƒ 
(
ƒƒ 
declaringType
ƒƒ +
,
ƒƒ+ ,
$str
ƒƒ- F
,
ƒƒF G
ex
ƒƒH J
)
ƒƒJ K
;
ƒƒK L
}
≈≈ 
}
∆∆ 
}
ÀÀ 
}ÃÃ ú!
<C:\sonarqube\projects\log4net-2.0.7\src\Util\LevelMapping.cs
	namespace 	
log4net
 
. 
Util 
{ 
public%% 
sealed%% 
class%% 
LevelMapping%% !
:%%" #
IOptionHandler%%$ 2
{&& 
public11 
LevelMapping11	 
(11 
)11 
{22 
}33 
publicDD 
voidDD	 
AddDD 
(DD 
LevelMappingEntryDD #
entryDD$ )
)DD) *
{EE 
ifFF 
(FF 
m_entriesMapFF 
.FF 
ContainsKeyFF 
(FF  
entryFF  %
.FF% &
LevelFF& +
)FF+ ,
)FF, -
{GG 
m_entriesMapHH 
.HH 
RemoveHH 
(HH 
entryHH 
.HH 
LevelHH #
)HH# $
;HH$ %
}II 
m_entriesMapJJ 
.JJ 
AddJJ 
(JJ 
entryJJ 
.JJ 
LevelJJ 
,JJ  
entryJJ! &
)JJ& '
;JJ' (
}KK 
public\\ 
LevelMappingEntry\\	 
Lookup\\ !
(\\! "
Level\\" '
level\\( -
)\\- .
{]] 
if^^ 
(^^ 
	m_entries^^ 
!=^^ 
null^^ 
)^^ 
{__ 
foreach`` 
(`` 
LevelMappingEntry`` 
entry`` #
in``$ &
	m_entries``' 0
)``0 1
{aa 
ifbb 
(bb 	
levelbb	 
>=bb 
entrybb 
.bb 
Levelbb 
)bb 
{cc 
returndd 
entrydd 
;dd 
}ee 
}ff 
}gg 
returnhh 	
nullhh
 
;hh 
}ii 
publicww 
voidww	 
ActivateOptionsww 
(ww 
)ww 
{xx 
Levelyy 
[yy 	
]yy	 

sortKeysyy 
=yy 
newyy 
Levelyy 
[yy  
m_entriesMapyy  ,
.yy, -
Countyy- 2
]yy2 3
;yy3 4
LevelMappingEntryzz 
[zz 
]zz 

sortValueszz !
=zz" #
newzz$ '
LevelMappingEntryzz( 9
[zz9 :
m_entriesMapzz: F
.zzF G
CountzzG L
]zzL M
;zzM N
m_entriesMap|| 
.|| 
Keys|| 
.|| 
CopyTo|| 
(|| 
sortKeys|| $
,||$ %
$num||& '
)||' (
;||( )
m_entriesMap}} 
.}} 
Values}} 
.}} 
CopyTo}} 
(}} 

sortValues}} (
,}}( )
$num}}* +
)}}+ ,
;}}, -
Array
ÄÄ 
.
ÄÄ 	
Sort
ÄÄ	 
(
ÄÄ 
sortKeys
ÄÄ 
,
ÄÄ 

sortValues
ÄÄ "
,
ÄÄ" #
$num
ÄÄ$ %
,
ÄÄ% &
sortKeys
ÄÄ' /
.
ÄÄ/ 0
Length
ÄÄ0 6
,
ÄÄ6 7
null
ÄÄ8 <
)
ÄÄ< =
;
ÄÄ= >
Array
ÉÉ 
.
ÉÉ 	
Reverse
ÉÉ	 
(
ÉÉ 

sortValues
ÉÉ 
,
ÉÉ 
$num
ÉÉ 
,
ÉÉ 

sortValues
ÉÉ  *
.
ÉÉ* +
Length
ÉÉ+ 1
)
ÉÉ1 2
;
ÉÉ2 3
foreach
ÖÖ 

(
ÖÖ
 
LevelMappingEntry
ÖÖ 
entry
ÖÖ "
in
ÖÖ# %

sortValues
ÖÖ& 0
)
ÖÖ0 1
{
ÜÜ 
entry
áá 	
.
áá	 

ActivateOptions
áá
 
(
áá 
)
áá 
;
áá 
}
àà 
	m_entries
ää 
=
ää 

sortValues
ää 
;
ää 
}
ãã 
private
ëë 	
	Hashtable
ëë
 
m_entriesMap
ëë  
=
ëë! "
new
ëë# &
	Hashtable
ëë' 0
(
ëë0 1
)
ëë1 2
;
ëë2 3
private
íí 	
LevelMappingEntry
íí
 
[
íí 
]
íí 
	m_entries
íí '
=
íí( )
null
íí* .
;
íí. /
}
ïï 
}ññ ”
AC:\sonarqube\projects\log4net-2.0.7\src\Util\LevelMappingEntry.cs
	namespace 	
log4net
 
. 
Util 
{ 
public%% 
abstract%% 
class%% 
LevelMappingEntry%% (
:%%) *
IOptionHandler%%+ 9
{&& 
	protected11 
LevelMappingEntry11 
(11 
)11 
{22 
}33 
publicEE 
LevelEE	 
LevelEE 
{FF 
getGG 
{GG 
returnGG	 
m_levelGG 
;GG 
}GG 
setHH 
{HH 
m_levelHH	 
=HH 
valueHH 
;HH 
}HH 
}II 
virtualWW 	
publicWW
 
voidWW 
ActivateOptionsWW %
(WW% &
)WW& '
{XX 
}ZZ 
private`` 	
Level``
 
m_level`` 
;`` 
}cc 
}dd ñ6
NC:\sonarqube\projects\log4net-2.0.7\src\Util\LogicalThreadContextProperties.cs
	namespace 	
log4net
 
. 
Util 
{ 
public22 
sealed22 
class22 *
LogicalThreadContextProperties22 3
:224 5!
ContextPropertiesBase226 K
{33 
private44 	
const44
 
string44 

c_SlotName44 !
=44" #
$str44$ Q
;44Q R
private99 	
bool99
 

m_disabled99 
=99 
false99 !
;99! "
internalEE 
*
LogicalThreadContextPropertiesEE )
(EE) *
)EE* +
{FF 
}GG 
overrideXX 

publicXX 
objectXX 
thisXX 
[XX 
stringXX $
keyXX% (
]XX( )
{YY 
getZZ 
{[[  
PropertiesDictionary]] 

dictionary]] #
=]]$ %
GetProperties]]& 3
(]]3 4
false]]4 9
)]]9 :
;]]: ;
if^^ 
(^^ 

dictionary^^ 
!=^^ 
null^^ 
)^^ 
{__ 
return`` 

dictionary`` 
[`` 
key`` 
]`` 
;`` 
}aa 
returnbb 

nullbb 
;bb 
}cc 
setdd 
{ee  
PropertiesDictionarygg 
propsgg 
=gg  
GetPropertiesgg! .
(gg. /
truegg/ 3
)gg3 4
;gg4 5 
PropertiesDictionaryjj 
immutablePropsjj '
=jj( )
newjj* - 
PropertiesDictionaryjj. B
(jjB C
propsjjC H
)jjH I
;jjI J
immutablePropskk 
[kk 
keykk 
]kk 
=kk 
valuekk 
;kk  
SetCallContextDatall 
(ll 
immutablePropsll %
)ll% &
;ll& '
}mm 
}nn 
public}} 
void}}	 
Remove}} 
(}} 
string}} 
key}} 
)}}  
{~~  
PropertiesDictionary 

dictionary "
=# $
GetProperties% 2
(2 3
false3 8
)8 9
;9 :
if
ÄÄ 
(
ÄÄ 

dictionary
ÄÄ 
!=
ÄÄ 
null
ÄÄ 
)
ÄÄ 
{
ÅÅ "
PropertiesDictionary
ÇÇ 
immutableProps
ÇÇ '
=
ÇÇ( )
new
ÇÇ* -"
PropertiesDictionary
ÇÇ. B
(
ÇÇB C

dictionary
ÇÇC M
)
ÇÇM N
;
ÇÇN O
immutableProps
ÉÉ 
.
ÉÉ 
Remove
ÉÉ 
(
ÉÉ 
key
ÉÉ 
)
ÉÉ 
;
ÉÉ  
SetCallContextData
ÑÑ 
(
ÑÑ 
immutableProps
ÑÑ %
)
ÑÑ% &
;
ÑÑ& '
}
ÖÖ 
}
ÜÜ 
public
êê 
void
êê	 
Clear
êê 
(
êê 
)
êê 
{
ëë "
PropertiesDictionary
íí 

dictionary
íí "
=
íí# $
GetProperties
íí% 2
(
íí2 3
false
íí3 8
)
íí8 9
;
íí9 :
if
ìì 
(
ìì 

dictionary
ìì 
!=
ìì 
null
ìì 
)
ìì 
{
îî "
PropertiesDictionary
ïï 
immutableProps
ïï '
=
ïï( )
new
ïï* -"
PropertiesDictionary
ïï. B
(
ïïB C
)
ïïC D
;
ïïD E 
SetCallContextData
ññ 
(
ññ 
immutableProps
ññ %
)
ññ% &
;
ññ& '
}
óó 
}
òò 
internal
™™ 
"
PropertiesDictionary
™™ 
GetProperties
™™  -
(
™™- .
bool
™™. 2
create
™™3 9
)
™™9 :
{
´´ 
if
¨¨ 
(
¨¨ 
!
¨¨ 

m_disabled
¨¨ 
)
¨¨ 
{
≠≠ 
try
ÆÆ 
{
ØØ "
PropertiesDictionary
∞∞ 

properties
∞∞ $
=
∞∞% & 
GetCallContextData
∞∞' 9
(
∞∞9 :
)
∞∞: ;
;
∞∞; <
if
±± 
(
±± 	

properties
±±	 
==
±± 
null
±± 
&&
±± 
create
±± %
)
±±% &
{
≤≤ 

properties
≥≥ 
=
≥≥ 
new
≥≥ "
PropertiesDictionary
≥≥ +
(
≥≥+ ,
)
≥≥, -
;
≥≥- . 
SetCallContextData
¥¥ 
(
¥¥ 

properties
¥¥ #
)
¥¥# $
;
¥¥$ %
}
µµ 
return
∂∂ 

properties
∂∂ 
;
∂∂ 
}
∑∑ 
catch
∏∏ 	
(
∏∏
 
SecurityException
∏∏ 
secEx
∏∏ "
)
∏∏" #
{
ππ 

m_disabled
∫∫ 
=
∫∫ 
true
∫∫ 
;
∫∫ 
LogLog
ΩΩ 
.
ΩΩ 
Warn
ΩΩ 
(
ΩΩ 
declaringType
ΩΩ 
,
ΩΩ 
$str
ΩΩ  y
,
ΩΩy z
secExΩΩ{ Ä
)ΩΩÄ Å
;ΩΩÅ Ç
}
ææ 
}
øø 
if
¬¬ 
(
¬¬ 
create
¬¬ 
)
¬¬ 
{
√√ 
return
ƒƒ 

new
ƒƒ "
PropertiesDictionary
ƒƒ #
(
ƒƒ# $
)
ƒƒ$ %
;
ƒƒ% &
}
≈≈ 
return
∆∆ 	
null
∆∆
 
;
∆∆ 
}
«« 
[
◊◊ 	
System
◊◊	 
.
◊◊ 
Security
◊◊ 
.
◊◊ "
SecuritySafeCritical
◊◊ -
]
◊◊- .
private
ŸŸ 
static
ŸŸ "
PropertiesDictionary
ŸŸ + 
GetCallContextData
ŸŸ, >
(
ŸŸ> ?
)
ŸŸ? @
{
⁄⁄ 
return
‹‹ 
CallContext
‹‹ 
.
‹‹ 
LogicalGetData
‹‹ -
(
‹‹- .

c_SlotName
‹‹. 8
)
‹‹8 9
as
‹‹: <"
PropertiesDictionary
‹‹= Q
;
‹‹Q R
}
‡‡ 
[
ÏÏ 	
System
ÏÏ	 
.
ÏÏ 
Security
ÏÏ 
.
ÏÏ "
SecuritySafeCritical
ÏÏ -
]
ÏÏ- .
private
ÓÓ 
static
ÓÓ 
void
ÓÓ  
SetCallContextData
ÓÓ .
(
ÓÓ. /"
PropertiesDictionary
ÓÓ/ C

properties
ÓÓD N
)
ÓÓN O
{
ÔÔ 
CallContext
ÒÒ 
.
ÒÒ 
LogicalSetData
ÒÒ 
(
ÒÒ 

c_SlotName
ÒÒ (
,
ÒÒ( )

properties
ÒÒ* 4
)
ÒÒ4 5
;
ÒÒ5 6
}
ıı 	
private
ÇÇ 
readonly
ÇÇ 
static
ÇÇ 
Type
ÇÇ !
declaringType
ÇÇ" /
=
ÇÇ0 1
typeof
ÇÇ2 8
(
ÇÇ8 9,
LogicalThreadContextProperties
ÇÇ9 W
)
ÇÇW X
;
ÇÇX Y
}
ÖÖ 
}ÜÜ Øñ
6C:\sonarqube\projects\log4net-2.0.7\src\Util\LogLog.cs
	namespace 	
log4net
 
. 
Util 
{ 
public"" 

delegate"" 
void"" #
LogReceivedEventHandler"" 0
(""0 1
object""1 7
source""8 >
,""> ? 
LogReceivedEventArgs""@ T
e""U V
)""V W
;""W X
public55 
sealed55 
class55 
LogLog55 
{66 
public:: 
static:: 
event:: #
LogReceivedEventHandler:: 3
LogReceived::4 ?
;::? @
private<< 
readonly<< 
Type<< 
source<< $
;<<$ %
private== 
readonly== 
DateTime== !
timeStampUtc==" .
;==. /
private>> 
readonly>> 
string>> 
prefix>>  &
;>>& '
private?? 
readonly?? 
string?? 
message??  '
;??' (
private@@ 
readonly@@ 
	Exception@@ "
	exception@@# ,
;@@, -
publicEE 
TypeEE 
SourceEE 
{FF 
getGG	 
{GG 
returnGG 
sourceGG 
;GG 
}GG 
}HH 
publicMM 
DateTimeMM 
	TimeStampMM 
{NN 
getOO 
{OO 
returnOO 
timeStampUtcOO %
.OO% &
ToLocalTimeOO& 1
(OO1 2
)OO2 3
;OO3 4
}OO5 6
}PP 
publicUU 
DateTimeUU 
TimeStampUtcUU $
{VV 	
getWW 
{WW 
returnWW 
timeStampUtcWW %
;WW% &
}WW' (
}XX 
publicbb 
stringbb 
Prefixbb 
{cc 
getdd	 
{dd 
returndd 
prefixdd 
;dd 
}dd 
}ee 
publicjj 
stringjj 
Messagejj 
{kk 
getll	 
{ll 
returnll 
messagell 
;ll 
}ll  
}mm 
publicuu 
	Exceptionuu 
	Exceptionuu 
{vv 
getww	 
{ww 
returnww 
	exceptionww 
;ww  
}ww! "
}xx 
public 
override 
string 
ToString $
($ %
)% &
{
ÄÄ 
return
ÅÅ 
Prefix
ÅÅ 
+
ÅÅ 
Source
ÅÅ "
.
ÅÅ" #
Name
ÅÅ# '
+
ÅÅ( )
$str
ÅÅ* .
+
ÅÅ/ 0
Message
ÅÅ1 8
;
ÅÅ8 9
}
ÇÇ 
public
çç 
LogLog
çç 
(
çç 
Type
çç 
source
çç 
,
çç 
string
çç  &
prefix
çç' -
,
çç- .
string
çç/ 5
message
çç6 =
,
çç= >
	Exception
çç? H
	exception
ççI R
)
ççR S
{
éé 
timeStampUtc
èè 
=
èè 
DateTime
èè #
.
èè# $
UtcNow
èè$ *
;
èè* +
this
ëë 
.
ëë 
source
ëë 
=
ëë 
source
ëë  
;
ëë  !
this
íí	 
.
íí 
prefix
íí 
=
íí 
prefix
íí 
;
íí 
this
ìì	 
.
ìì 
message
ìì 
=
ìì 
message
ìì 
;
ìì  
this
îî	 
.
îî 
	exception
îî 
=
îî 
	exception
îî #
;
îî# $
}
ïï 
static
¨¨ 
LogLog
¨¨	 
(
¨¨ 
)
¨¨ 
{
≠≠ 
try
ØØ 
{
∞∞ 
InternalDebugging
±± 
=
±± 
OptionConverter
±± '
.
±±' (
	ToBoolean
±±( 1
(
±±1 2

SystemInfo
±±2 <
.
±±< =
GetAppSetting
±±= J
(
±±J K
$str
±±K c
)
±±c d
,
±±d e
false
±±f k
)
±±k l
;
±±l m
	QuietMode
≤≤ 
=
≤≤ 
OptionConverter
≤≤ 
.
≤≤  
	ToBoolean
≤≤  )
(
≤≤) *

SystemInfo
≤≤* 4
.
≤≤4 5
GetAppSetting
≤≤5 B
(
≤≤B C
$str
≤≤C [
)
≤≤[ \
,
≤≤\ ]
false
≤≤^ c
)
≤≤c d
;
≤≤d e"
EmitInternalMessages
≥≥ 
=
≥≥ 
OptionConverter
≥≥ *
.
≥≥* +
	ToBoolean
≥≥+ 4
(
≥≥4 5

SystemInfo
≥≥5 ?
.
≥≥? @
GetAppSetting
≥≥@ M
(
≥≥M N
$str
≥≥N e
)
≥≥e f
,
≥≥f g
true
≥≥h l
)
≥≥l m
;
≥≥m n
}
¥¥ 
catch
µµ 
(
µµ 	
	Exception
µµ	 
ex
µµ 
)
µµ 
{
∂∂ 
Error
ªª 	
(
ªª	 

typeof
ªª
 
(
ªª 
LogLog
ªª 
)
ªª 
,
ªª 
$str
ªª v
,
ªªv w
ex
ªªx z
)
ªªz {
;
ªª{ |
}
ºº 
}
ææ 
public
ËË 
static
ËË	 
bool
ËË 
InternalDebugging
ËË &
{
ÈÈ 
get
ÍÍ 
{
ÍÍ 
return
ÍÍ	 
s_debugEnabled
ÍÍ 
;
ÍÍ 
}
ÍÍ  !
set
ÎÎ 
{
ÎÎ 
s_debugEnabled
ÎÎ	 
=
ÎÎ 
value
ÎÎ 
;
ÎÎ  
}
ÎÎ! "
}
ÏÏ 
public
êê 
static
êê	 
bool
êê 
	QuietMode
êê 
{
ëë 
get
íí 
{
íí 
return
íí	 
s_quietMode
íí 
;
íí 
}
íí 
set
ìì 
{
ìì 
s_quietMode
ìì	 
=
ìì 
value
ìì 
;
ìì 
}
ìì 
}
îî 
public
ôô 
static
ôô 
bool
ôô "
EmitInternalMessages
ôô /
{
öö 	
get
õõ 
{
õõ 
return
õõ $
s_emitInternalMessages
õõ /
;
õõ/ 0
}
õõ1 2
set
úú 
{
úú $
s_emitInternalMessages
úú (
=
úú) *
value
úú+ 0
;
úú0 1
}
úú2 3
}
ùù 	
public
™™ 
static
™™ 
void
™™ 
OnLogReceived
™™ (
(
™™( )
Type
™™) -
source
™™. 4
,
™™4 5
string
™™6 <
prefix
™™= C
,
™™C D
string
™™E K
message
™™L S
,
™™S T
	Exception
™™U ^
	exception
™™_ h
)
™™h i
{
´´ 	
if
¨¨ 
(
¨¨ 
LogReceived
¨¨ 
!=
¨¨ 
null
¨¨ #
)
¨¨# $
{
≠≠ 
LogReceived
ÆÆ 
(
ÆÆ 
null
ÆÆ  
,
ÆÆ  !
new
ÆÆ" %"
LogReceivedEventArgs
ÆÆ& :
(
ÆÆ: ;
new
ÆÆ; >
LogLog
ÆÆ? E
(
ÆÆE F
source
ÆÆF L
,
ÆÆL M
prefix
ÆÆN T
,
ÆÆT U
message
ÆÆV ]
,
ÆÆ] ^
	exception
ÆÆ_ h
)
ÆÆh i
)
ÆÆi j
)
ÆÆj k
;
ÆÆk l
}
ØØ 
}
∞∞ 	
public
ΩΩ 
static
ΩΩ	 
bool
ΩΩ 
IsDebugEnabled
ΩΩ #
{
ææ 
get
øø 
{
øø 
return
øø	 
s_debugEnabled
øø 
&&
øø !
!
øø" #
s_quietMode
øø# .
;
øø. /
}
øø0 1
}
¿¿ 
public
ŒŒ 
static
ŒŒ	 
void
ŒŒ 
Debug
ŒŒ 
(
ŒŒ 
Type
ŒŒ 
source
ŒŒ  &
,
ŒŒ& '
string
ŒŒ( .
message
ŒŒ/ 6
)
ŒŒ6 7
{
œœ 
if
–– 
(
–– 
IsDebugEnabled
–– 
)
–– 
{
—— 
if
““ 
(
““ "
EmitInternalMessages
““ (
)
““( )
{
”” 
EmitOutLine
‘‘ 
(
‘‘  
PREFIX
‘‘  &
+
‘‘' (
message
‘‘) 0
)
‘‘0 1
;
‘‘1 2
}
’’ 
OnLogReceived
◊◊ 
(
◊◊ 
source
◊◊ $
,
◊◊$ %
PREFIX
◊◊& ,
,
◊◊, -
message
◊◊. 5
,
◊◊5 6
null
◊◊7 ;
)
◊◊; <
;
◊◊< =
}
ÿÿ 
}
ŸŸ 
public
ËË 
static
ËË	 
void
ËË 
Debug
ËË 
(
ËË 
Type
ËË 
source
ËË  &
,
ËË& '
string
ËË( .
message
ËË/ 6
,
ËË6 7
	Exception
ËË8 A
	exception
ËËB K
)
ËËK L
{
ÈÈ 
if
ÍÍ 
(
ÍÍ 
IsDebugEnabled
ÍÍ 
)
ÍÍ 
{
ÎÎ 
if
ÏÏ 
(
ÏÏ "
EmitInternalMessages
ÏÏ (
)
ÏÏ( )
{
ÌÌ 
EmitOutLine
ÓÓ 
(
ÓÓ  
PREFIX
ÓÓ  &
+
ÓÓ' (
message
ÓÓ) 0
)
ÓÓ0 1
;
ÓÓ1 2
if
ÔÔ 
(
ÔÔ 
	exception
ÔÔ !
!=
ÔÔ" $
null
ÔÔ% )
)
ÔÔ) *
{
 
EmitOutLine
ÒÒ #
(
ÒÒ# $
	exception
ÒÒ$ -
.
ÒÒ- .
ToString
ÒÒ. 6
(
ÒÒ6 7
)
ÒÒ7 8
)
ÒÒ8 9
;
ÒÒ9 :
}
ÚÚ 
}
ÛÛ 
OnLogReceived
ıı 
(
ıı 
source
ıı $
,
ıı$ %
PREFIX
ıı& ,
,
ıı, -
message
ıı. 5
,
ıı5 6
	exception
ıı7 @
)
ıı@ A
;
ııA B
}
ˆˆ 
}
˜˜ 
public
ÑÑ 
static
ÑÑ	 
bool
ÑÑ 
IsWarnEnabled
ÑÑ "
{
ÖÖ 
get
ÜÜ 
{
ÜÜ 
return
ÜÜ	 
!
ÜÜ 
s_quietMode
ÜÜ 
;
ÜÜ 
}
ÜÜ 
}
áá 
public
ïï 
static
ïï	 
void
ïï 
Warn
ïï 
(
ïï 
Type
ïï 
source
ïï %
,
ïï% &
string
ïï' -
message
ïï. 5
)
ïï5 6
{
ññ 
if
óó 
(
óó 
IsWarnEnabled
óó 
)
óó 
{
òò 
if
ôô 
(
ôô "
EmitInternalMessages
ôô (
)
ôô( )
{
öö 
EmitErrorLine
õõ !
(
õõ! "
WARN_PREFIX
õõ" -
+
õõ. /
message
õõ0 7
)
õõ7 8
;
õõ8 9
}
úú 
OnLogReceived
ûû 
(
ûû 
source
ûû $
,
ûû$ %
WARN_PREFIX
ûû& 1
,
ûû1 2
message
ûû3 :
,
ûû: ;
null
ûû< @
)
ûû@ A
;
ûûA B
}
üü 
}
†† 
public
ØØ 
static
ØØ	 
void
ØØ 
Warn
ØØ 
(
ØØ 
Type
ØØ 
source
ØØ %
,
ØØ% &
string
ØØ' -
message
ØØ. 5
,
ØØ5 6
	Exception
ØØ7 @
	exception
ØØA J
)
ØØJ K
{
∞∞ 
if
±± 
(
±± 
IsWarnEnabled
±± 
)
±± 
{
≤≤ 
if
≥≥ 
(
≥≥ "
EmitInternalMessages
≥≥ (
)
≥≥( )
{
¥¥ 
EmitErrorLine
µµ !
(
µµ! "
WARN_PREFIX
µµ" -
+
µµ. /
message
µµ0 7
)
µµ7 8
;
µµ8 9
if
∂∂ 
(
∂∂ 
	exception
∂∂ !
!=
∂∂" $
null
∂∂% )
)
∂∂) *
{
∑∑ 
EmitErrorLine
∏∏ %
(
∏∏% &
	exception
∏∏& /
.
∏∏/ 0
ToString
∏∏0 8
(
∏∏8 9
)
∏∏9 :
)
∏∏: ;
;
∏∏; <
}
ππ 
}
∫∫ 
OnLogReceived
ºº 
(
ºº 
source
ºº $
,
ºº$ %
WARN_PREFIX
ºº& 1
,
ºº1 2
message
ºº3 :
,
ºº: ;
	exception
ºº< E
)
ººE F
;
ººF G
}
ΩΩ 
}
ææ 
public
ÀÀ 
static
ÀÀ	 
bool
ÀÀ 
IsErrorEnabled
ÀÀ #
{
ÃÃ 
get
ÕÕ 
{
ÕÕ 
return
ÕÕ	 
!
ÕÕ 
s_quietMode
ÕÕ 
;
ÕÕ 
}
ÕÕ 
}
ŒŒ 
public
‹‹ 
static
‹‹	 
void
‹‹ 
Error
‹‹ 
(
‹‹ 
Type
‹‹ 
source
‹‹  &
,
‹‹& '
string
‹‹( .
message
‹‹/ 6
)
‹‹6 7
{
›› 
if
ﬁﬁ 
(
ﬁﬁ 
IsErrorEnabled
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
if
‡‡ 
(
‡‡ "
EmitInternalMessages
‡‡ (
)
‡‡( )
{
·· 
EmitErrorLine
‚‚ !
(
‚‚! "

ERR_PREFIX
‚‚" ,
+
‚‚- .
message
‚‚/ 6
)
‚‚6 7
;
‚‚7 8
}
„„ 
OnLogReceived
ÂÂ 
(
ÂÂ 
source
ÂÂ $
,
ÂÂ$ %

ERR_PREFIX
ÂÂ& 0
,
ÂÂ0 1
message
ÂÂ2 9
,
ÂÂ9 :
null
ÂÂ; ?
)
ÂÂ? @
;
ÂÂ@ A
}
ÊÊ 
}
ÁÁ 
public
ˆˆ 
static
ˆˆ	 
void
ˆˆ 
Error
ˆˆ 
(
ˆˆ 
Type
ˆˆ 
source
ˆˆ  &
,
ˆˆ& '
string
ˆˆ( .
message
ˆˆ/ 6
,
ˆˆ6 7
	Exception
ˆˆ8 A
	exception
ˆˆB K
)
ˆˆK L
{
˜˜ 
if
¯¯ 
(
¯¯ 
IsErrorEnabled
¯¯ 
)
¯¯ 
{
˘˘ 
if
˙˙ 
(
˙˙ "
EmitInternalMessages
˙˙ (
)
˙˙( )
{
˚˚ 
EmitErrorLine
¸¸ !
(
¸¸! "

ERR_PREFIX
¸¸" ,
+
¸¸- .
message
¸¸/ 6
)
¸¸6 7
;
¸¸7 8
if
˝˝ 
(
˝˝ 
	exception
˝˝ !
!=
˝˝" $
null
˝˝% )
)
˝˝) *
{
˛˛ 
EmitErrorLine
ˇˇ %
(
ˇˇ% &
	exception
ˇˇ& /
.
ˇˇ/ 0
ToString
ˇˇ0 8
(
ˇˇ8 9
)
ˇˇ9 :
)
ˇˇ: ;
;
ˇˇ; <
}
ÄÄ 
}
ÅÅ 
OnLogReceived
ÉÉ 
(
ÉÉ 
source
ÉÉ $
,
ÉÉ$ %

ERR_PREFIX
ÉÉ& 0
,
ÉÉ0 1
message
ÉÉ2 9
,
ÉÉ9 :
	exception
ÉÉ; D
)
ÉÉD E
;
ÉÉE F
}
ÑÑ 
}
ÖÖ 
private
ôô 	
static
ôô
 
void
ôô 
EmitOutLine
ôô !
(
ôô! "
string
ôô" (
message
ôô) 0
)
ôô0 1
{
öö 
try
õõ 
{
úú 
Console
°° 
.
°° 
Out
°° 
.
°° 
	WriteLine
°° 
(
°° 
message
°° !
)
°°! "
;
°°" #
Trace
¢¢ 	
.
¢¢	 

	WriteLine
¢¢
 
(
¢¢ 
message
¢¢ 
)
¢¢ 
;
¢¢ 
}
§§ 
catch
•• 
{
¶¶ 
}
®® 
}
©© 
private
ªª 	
static
ªª
 
void
ªª 
EmitErrorLine
ªª #
(
ªª# $
string
ªª$ *
message
ªª+ 2
)
ªª2 3
{
ºº 
try
ΩΩ 
{
ææ 
Console
√√ 
.
√√ 
Error
√√ 
.
√√ 
	WriteLine
√√ 
(
√√ 
message
√√ #
)
√√# $
;
√√$ %
Trace
ƒƒ 	
.
ƒƒ	 

	WriteLine
ƒƒ
 
(
ƒƒ 
message
ƒƒ 
)
ƒƒ 
;
ƒƒ 
}
∆∆ 
catch
«« 
{
»» 
}
   
}
ÀÀ 
private
““ 	
static
““
 
bool
““ 
s_debugEnabled
““ $
=
““% &
false
““' ,
;
““, -
private
◊◊ 	
static
◊◊
 
bool
◊◊ 
s_quietMode
◊◊ !
=
◊◊" #
false
◊◊$ )
;
◊◊) *
private
ŸŸ 
static
ŸŸ 
bool
ŸŸ $
s_emitInternalMessages
ŸŸ 2
=
ŸŸ3 4
true
ŸŸ5 9
;
ŸŸ9 :
private
€€ 	
const
€€
 
string
€€ 
PREFIX
€€ 
=
€€  !
$str
€€" -
;
€€- .
private
‹‹ 	
const
‹‹
 
string
‹‹ 

ERR_PREFIX
‹‹ !
=
‹‹# $
$str
‹‹% 5
;
‹‹5 6
private
›› 	
const
››
 
string
›› 
WARN_PREFIX
›› "
=
››# $
$str
››% 4
;
››4 5
public
ÂÂ 
class
ÂÂ  
LogReceivedAdapter
ÂÂ '
:
ÂÂ( )
IDisposable
ÂÂ* 5
{
ÊÊ 	
private
ÁÁ 
readonly
ÁÁ 
IList
ÁÁ "
items
ÁÁ# (
;
ÁÁ( )
private
ËË 
readonly
ËË %
LogReceivedEventHandler
ËË 4
handler
ËË5 <
;
ËË< =
public
ÓÓ  
LogReceivedAdapter
ÓÓ %
(
ÓÓ% &
IList
ÓÓ& +
items
ÓÓ, 1
)
ÓÓ1 2
{
ÔÔ 
this
 
.
 
items
 
=
 
items
 "
;
" #
handler
ÚÚ 
=
ÚÚ 
new
ÚÚ %
LogReceivedEventHandler
ÚÚ 5
(
ÚÚ5 6 
LogLog_LogReceived
ÚÚ6 H
)
ÚÚH I
;
ÚÚI J
LogReceived
ÙÙ 
+=
ÙÙ 
handler
ÙÙ &
;
ÙÙ& '
}
ıı 
void
˜˜  
LogLog_LogReceived
˜˜ #
(
˜˜# $
object
˜˜$ *
source
˜˜+ 1
,
˜˜1 2"
LogReceivedEventArgs
˜˜3 G
e
˜˜H I
)
˜˜I J
{
¯¯ 
items
˘˘ 
.
˘˘ 
Add
˘˘ 
(
˘˘ 
e
˘˘ 
.
˘˘ 
LogLog
˘˘ "
)
˘˘" #
;
˘˘# $
}
˙˙ 
public
ˇˇ 
IList
ˇˇ 
Items
ˇˇ 
{
ÄÄ 
get
ÅÅ 
{
ÅÅ 
return
ÅÅ 
items
ÅÅ "
;
ÅÅ" #
}
ÅÅ$ %
}
ÇÇ 
public
áá 
void
áá 
Dispose
áá 
(
áá  
)
áá  !
{
àà 
LogReceived
ââ 
-=
ââ 
handler
ââ &
;
ââ& '
}
ää 
}
ãã 	
}
åå 
public
ëë 

class
ëë "
LogReceivedEventArgs
ëë %
:
ëë& '
	EventArgs
ëë( 1
{
íí 
private
ìì 
readonly
ìì 
LogLog
ìì 
loglog
ìì  &
;
ìì& '
public
ôô "
LogReceivedEventArgs
ôô #
(
ôô# $
LogLog
ôô$ *
loglog
ôô+ 1
)
ôô1 2
{
öö 	
this
õõ 
.
õõ 
loglog
õõ 
=
õõ 
loglog
õõ  
;
õõ  !
}
úú 	
public
°° 
LogLog
°° 
LogLog
°° 
{
¢¢ 	
get
££ 
{
££ 
return
££ 
loglog
££ 
;
££  
}
££! "
}
§§ 	
}
•• 
}¶¶ Á4
;C:\sonarqube\projects\log4net-2.0.7\src\Util\NativeError.cs
	namespace 	
log4net
 
. 
Util 
{   
public++ 
sealed++ 
class++ 
NativeError++  
{,, 
private;; 	
NativeError;;
 
(;; 
int;; 
number;;  
,;;  !
string;;" (
message;;) 0
);;0 1
{<< 
m_number== 
=== 
number== 
;== 
	m_message>> 
=>> 
message>> 
;>> 
}?? 
publicPP 
intPP	 
NumberPP 
{QQ 
getRR 
{RR 
returnRR	 
m_numberRR 
;RR 
}RR 
}SS 
public`` 
string``	 
Message`` 
{aa 
getbb 
{bb 
returnbb	 
	m_messagebb 
;bb 
}bb 
}cc 
[vv 	
Systemvv	 
.vv 
Securityvv 
.vv  
SecuritySafeCriticalvv -
]vv- .
publiczz 
staticzz 
NativeErrorzz !
GetLastErrorzz" .
(zz. /
)zz/ 0
{{{ 
int|| 
number|| 
=|| 
Marshal|| 
.|| 
GetLastWin32Error|| )
(||) *
)||* +
;||+ ,
return}} 	
new}}
 
NativeError}} 
(}} 
number}}  
,}}  !
NativeError}}" -
.}}- .
GetErrorMessage}}. =
(}}= >
number}}> D
)}}D E
)}}E F
;}}F G
}~~ 
public
éé 
static
éé	 
NativeError
éé 
GetError
éé $
(
éé$ %
int
éé% (
number
éé) /
)
éé/ 0
{
èè 
return
êê 	
new
êê
 
NativeError
êê 
(
êê 
number
êê  
,
êê  !
NativeError
êê" -
.
êê- .
GetErrorMessage
êê. =
(
êê= >
number
êê> D
)
êêD E
)
êêE F
;
êêF G
}
ëë 
[
°° 	
System
°°	 
.
°° 
Security
°° 
.
°° "
SecuritySafeCritical
°° -
]
°°- .
public
•• 
static
•• 
string
•• 
GetErrorMessage
•• ,
(
••, -
int
••- 0
	messageId
••1 :
)
••: ;
{
¶¶ 
int
®® ,
FORMAT_MESSAGE_ALLOCATE_BUFFER
®® %
=
®®& '
$num
®®( 2
;
®®2 3
int
©© +
FORMAT_MESSAGE_IGNORE_INSERTS
©© $
=
©©% &
$num
©©' 1
;
©©1 2
int
™™ (
FORMAT_MESSAGE_FROM_SYSTEM
™™ !
=
™™# $
$num
™™% /
;
™™/ 0
string
¨¨ 	
msgBuf
¨¨
 
=
¨¨ 
$str
¨¨ 
;
¨¨ 
IntPtr
≠≠ 	
	sourcePtr
≠≠
 
=
≠≠ 
new
≠≠ 
IntPtr
≠≠  
(
≠≠  !
)
≠≠! "
;
≠≠" #
IntPtr
ÆÆ 	
argumentsPtr
ÆÆ
 
=
ÆÆ 
new
ÆÆ 
IntPtr
ÆÆ #
(
ÆÆ# $
)
ÆÆ$ %
;
ÆÆ% &
if
∞∞ 
(
∞∞ 
	messageId
∞∞ 
!=
∞∞ 
$num
∞∞ 
)
∞∞ 
{
±± 
int
≥≥ 
messageSize
≥≥ 
=
≥≥ 
FormatMessage
≥≥ #
(
≥≥# $,
FORMAT_MESSAGE_ALLOCATE_BUFFER
¥¥ #
|
¥¥$ %(
FORMAT_MESSAGE_FROM_SYSTEM
¥¥& @
|
¥¥A B+
FORMAT_MESSAGE_IGNORE_INSERTS
¥¥C `
,
¥¥` a
ref
µµ 
	sourcePtr
µµ	 
,
µµ 
	messageId
∂∂ 
,
∂∂ 
$num
∑∑ 
,
∑∑ 
ref
∏∏ 
msgBuf
∏∏	 
,
∏∏ 
$num
ππ 
,
ππ 	
argumentsPtr
∫∫ 
)
∫∫ 
;
∫∫ 
if
ºº 
(
ºº 
messageSize
ºº 
>
ºº 
$num
ºº 
)
ºº 
{
ΩΩ 
msgBuf
øø 
=
øø 
msgBuf
øø 
.
øø 
TrimEnd
øø 
(
øø 
new
øø  
char
øø! %
[
øø% &
]
øø& '
{
øø( )
$char
øø) -
,
øø- .
$char
øø/ 3
}
øø3 4
)
øø4 5
;
øø5 6
}
¿¿ 
else
¡¡ 
{
¬¬ 
msgBuf
ƒƒ 
=
ƒƒ 
null
ƒƒ 
;
ƒƒ 
}
≈≈ 
}
∆∆ 
else
«« 
{
»» 
msgBuf
…… 

=
…… 
null
…… 
;
…… 
}
   
return
ÃÃ 	
msgBuf
ÃÃ
 
;
ÃÃ 
}
ÕÕ 
public
‹‹ 
override
‹‹	 
string
‹‹ 
ToString
‹‹ !
(
‹‹! "
)
‹‹" #
{
›› 
return
ﬁﬁ 	
string
ﬁﬁ
 
.
ﬁﬁ 
Format
ﬁﬁ 
(
ﬁﬁ 
CultureInfo
ﬁﬁ #
.
ﬁﬁ# $
InvariantCulture
ﬁﬁ$ 4
,
ﬁﬁ4 5
$str
ﬁﬁ6 @
,
ﬁﬁ@ A
this
ﬁﬁB F
.
ﬁﬁF G
Number
ﬁﬁG M
)
ﬁﬁM N
+
ﬁﬁO P
(
ﬁﬁQ R
this
ﬁﬁR V
.
ﬁﬁV W
Message
ﬁﬁW ^
!=
ﬁﬁ_ a
null
ﬁﬁb f
?
ﬁﬁg h
$str
ﬁﬁi m
+
ﬁﬁn o
this
ﬁﬁp t
.
ﬁﬁt u
Message
ﬁﬁu |
:
ﬁﬁ} ~
$strﬁﬁ Å
)ﬁﬁÅ Ç
;ﬁﬁÇ É
}
ﬂﬂ 
[
ää 
	DllImport
ää 
(
ää 
$str
ää 
,
ää 
SetLastError
ää )
=
ää) *
true
ää* .
,
ää. /
CharSet
ää0 7
=
ää7 8
CharSet
ää8 ?
.
ää? @
Auto
ää@ D
)
ääD E
]
ääE F
private
åå 	
static
åå
 
extern
åå 
int
åå 
FormatMessage
åå )
(
åå) *
int
çç 
dwFlags
çç 
,
çç 
ref
éé 
IntPtr
éé 
lpSource
éé 
,
éé 
int
èè 
dwMessageId
èè 
,
èè 
int
êê 
dwLanguageId
êê 
,
êê 
ref
ëë 
String
ëë 
lpBuffer
ëë 
,
ëë 
int
íí 
nSize
íí 
,
íí 
IntPtr
ìì 	
	Arguments
ìì
 
)
ìì 
;
ìì 
private
ôô 	
int
ôô
 
m_number
ôô 
;
ôô 
private
öö 	
string
öö
 
	m_message
öö 
;
öö 
}
ùù 
}ûû Õ
HC:\sonarqube\projects\log4net-2.0.7\src\Util\NullDictionaryEnumerator.cs
	namespace 	
log4net
 
. 
Util 
{ 
public$$ 
sealed$$ 
class$$ $
NullDictionaryEnumerator$$ -
:$$. /!
IDictionaryEnumerator$$0 E
{%% 
private00 	$
NullDictionaryEnumerator00
 "
(00" #
)00# $
{11 
}22 
publicAA 
staticAA	 $
NullDictionaryEnumeratorAA (
InstanceAA) 1
{BB 
getCC 
{CC 
returnCC	 

s_instanceCC 
;CC 
}CC 
}DD 
publicZZ 
objectZZ	 
CurrentZZ 
{[[ 
get\\ 
{\\ 
throw\\	 
new\\ %
InvalidOperationException\\ ,
(\\, -
)\\- .
;\\. /
}\\0 1
}]] 
publicjj 
booljj	 
MoveNextjj 
(jj 
)jj 
{kk 
returnll 	
falsell
 
;ll 
}mm 
publicww 
voidww	 
Resetww 
(ww 
)ww 
{xx 
}yy 
public
èè 
object
èè	 
Key
èè 
{
êê 
get
ëë 
{
ëë 
throw
ëë	 
new
ëë '
InvalidOperationException
ëë ,
(
ëë, -
)
ëë- .
;
ëë. /
}
ëë0 1
}
íí 
public
•• 
object
••	 
Value
•• 
{
¶¶ 
get
ßß 
{
ßß 
throw
ßß	 
new
ßß '
InvalidOperationException
ßß ,
(
ßß, -
)
ßß- .
;
ßß. /
}
ßß0 1
}
®® 
public
∫∫ 
DictionaryEntry
∫∫	 
Entry
∫∫ 
{
ªª 
get
ºº 
{
ºº 
throw
ºº	 
new
ºº '
InvalidOperationException
ºº ,
(
ºº, -
)
ºº- .
;
ºº. /
}
ºº0 1
}
ΩΩ 
private
∆∆ 	
readonly
∆∆
 
static
∆∆ &
NullDictionaryEnumerator
∆∆ 2

s_instance
∆∆3 =
=
∆∆> ?
new
∆∆@ C&
NullDictionaryEnumerator
∆∆D \
(
∆∆\ ]
)
∆∆] ^
;
∆∆^ _
}
…… 
}   ¨
>C:\sonarqube\projects\log4net-2.0.7\src\Util\NullEnumerator.cs
	namespace 	
log4net
 
. 
Util 
{ 
public$$ 
sealed$$ 
class$$ 
NullEnumerator$$ #
:$$$ %
IEnumerator$$& 1
{%% 
private00 	
NullEnumerator00
 
(00 
)00 
{11 
}22 
publicAA 
staticAA	 
NullEnumeratorAA 
InstanceAA '
{BB 
getCC 
{CC 
returnCC	 

s_instanceCC 
;CC 
}CC 
}DD 
publicZZ 
objectZZ	 
CurrentZZ 
{[[ 
get\\ 
{\\ 
throw\\	 
new\\ %
InvalidOperationException\\ ,
(\\, -
)\\- .
;\\. /
}\\0 1
}]] 
publicjj 
booljj	 
MoveNextjj 
(jj 
)jj 
{kk 
returnll 	
falsell
 
;ll 
}mm 
publicww 
voidww	 
Resetww 
(ww 
)ww 
{xx 
}yy 
private
ÇÇ 	
readonly
ÇÇ
 
static
ÇÇ 
NullEnumerator
ÇÇ (

s_instance
ÇÇ) 3
=
ÇÇ4 5
new
ÇÇ6 9
NullEnumerator
ÇÇ: H
(
ÇÇH I
)
ÇÇI J
;
ÇÇJ K
}
ÖÖ 
}ÜÜ ô
CC:\sonarqube\projects\log4net-2.0.7\src\Util\NullSecurityContext.cs
	namespace 	
log4net
 
. 
Util 
{ 
public%% 
sealed%% 
class%% 
NullSecurityContext%% (
:%%) *
SecurityContext%%+ :
{&& 
public// 
static//	 
readonly// 
NullSecurityContext// ,
Instance//- 5
=//6 7
new//8 ;
NullSecurityContext//< O
(//O P
)//P Q
;//Q R
private99 	
NullSecurityContext99
 
(99 
)99 
{:: 
};; 
publicGG 
overrideGG	 
IDisposableGG 
ImpersonateGG )
(GG) *
objectGG* 0
stateGG1 6
)GG6 7
{HH 
returnII 	
nullII
 
;II 
}JJ 
}KK 
}LL Õ5
DC:\sonarqube\projects\log4net-2.0.7\src\Util\OnlyOnceErrorHandler.cs
	namespace 	
log4net
 
. 
Util 
{ 
public++ 
class++  
OnlyOnceErrorHandler++ "
:++# $
IErrorHandler++% 2
{,, 
public77  
OnlyOnceErrorHandler77	 
(77 
)77 
{88 
m_prefix99 
=99 
$str99 
;99 
}:: 
publicFF  
OnlyOnceErrorHandlerFF	 
(FF 
stringFF $
prefixFF% +
)FF+ ,
{GG 
m_prefixHH 
=HH 
prefixHH 
;HH 
}II 
publicRR 
voidRR	 
ResetRR 
(RR 
)RR 
{SS 
m_enabledDateUtcTT 
=TT 
DateTimeTT 
.TT 
MinValueTT '
;TT' (
m_errorCodeUU 
=UU 
	ErrorCodeUU 
.UU 
GenericFailureUU )
;UU) *
m_exceptionVV 
=VV 
nullVV 
;VV 
	m_messageWW 
=WW 
nullWW 
;WW 
m_firstTimeXX 
=XX 
trueXX 
;XX 
}YY 
publichh 
voidhh	 
Errorhh 
(hh 
stringhh 
messagehh "
,hh" #
	Exceptionhh$ -
ehh. /
,hh/ 0
	ErrorCodehh1 :
	errorCodehh; D
)hhD E
{ii 
ifjj 
(jj 
m_firstTimejj 
)jj 
{kk 

FirstErrorll 
(ll 
messagell "
,ll" #
ell$ %
,ll% &
	errorCodell' 0
)ll0 1
;ll1 2
}mm 
}nn 
public{{ 
virtual{{ 
void{{ 

FirstError{{ &
({{& '
string{{' -
message{{. 5
,{{5 6
	Exception{{7 @
e{{A B
,{{B C
	ErrorCode{{D M
	errorCode{{N W
){{W X
{{{Y Z
m_enabledDateUtc|| 
=|| 
DateTime|| '
.||' (
UtcNow||( .
;||. /
m_errorCode}} 
=}} 
	errorCode}} #
;}}# $
m_exception~~ 
=~~ 
e~~ 
;~~ 
	m_message 
= 
message 
;  
m_firstTime
ÄÄ 
=
ÄÄ 
false
ÄÄ 
;
ÄÄ  
if
ÇÇ 
(
ÇÇ 
LogLog
ÇÇ 
.
ÇÇ 
InternalDebugging
ÇÇ (
&&
ÇÇ) +
!
ÇÇ, -
LogLog
ÇÇ- 3
.
ÇÇ3 4
	QuietMode
ÇÇ4 =
)
ÇÇ= >
{
ÇÇ? @
LogLog
ÉÉ 
.
ÉÉ 
Error
ÉÉ 
(
ÉÉ 
declaringType
ÉÉ *
,
ÉÉ* +
$str
ÉÉ, /
+
ÉÉ0 1
m_prefix
ÉÉ2 :
+
ÉÉ; <
$str
ÉÉ= L
+
ÉÉM N
	errorCode
ÉÉO X
.
ÉÉX Y
ToString
ÉÉY a
(
ÉÉa b
)
ÉÉb c
+
ÉÉd e
$str
ÉÉf j
+
ÉÉk l
message
ÉÉm t
,
ÉÉt u
e
ÉÉv w
)
ÉÉw x
;
ÉÉx y
}
ÑÑ 
}
ÖÖ 	
public
ëë 
void
ëë	 
Error
ëë 
(
ëë 
string
ëë 
message
ëë "
,
ëë" #
	Exception
ëë$ -
e
ëë. /
)
ëë/ 0
{
íí 
Error
ìì 
(
ìì 	
message
ìì	 
,
ìì 
e
ìì 
,
ìì 
	ErrorCode
ìì 
.
ìì 
GenericFailure
ìì -
)
ìì- .
;
ìì. /
}
îî 
public
üü 
void
üü	 
Error
üü 
(
üü 
string
üü 
message
üü "
)
üü" #
{
†† 
Error
°° 
(
°° 	
message
°°	 
,
°° 
null
°° 
,
°° 
	ErrorCode
°° !
.
°°! "
GenericFailure
°°" 0
)
°°0 1
;
°°1 2
}
¢¢ 
public
≥≥ 
bool
≥≥	 
	IsEnabled
≥≥ 
{
¥¥ 
get
µµ 
{
µµ 
return
µµ	 
m_firstTime
µµ 
;
µµ 
}
µµ 
}
∂∂ 
public
ªª 
DateTime
ªª	 
EnabledDate
ªª 
{
ºº 
get
ΩΩ 
{
ææ 
if
øø 
(
øø 
m_enabledDateUtc
øø $
==
øø% '
DateTime
øø( 0
.
øø0 1
MinValue
øø1 9
)
øø9 :
return
øø; A
DateTime
øøB J
.
øøJ K
MinValue
øøK S
;
øøS T
return
¿¿ 
m_enabledDateUtc
¿¿ '
.
¿¿' (
ToLocalTime
¿¿( 3
(
¿¿3 4
)
¿¿4 5
;
¿¿5 6
}
¡¡ 
}
¬¬ 
public
«« 
DateTime
«« 
EnabledDateUtc
«« &
{
»» 	
get
…… 
{
…… 
return
…… 
m_enabledDateUtc
…… )
;
……) *
}
……+ ,
}
   	
public
œœ 
string
œœ	 
ErrorMessage
œœ 
{
–– 
get
—— 
{
—— 
return
——	 
	m_message
—— 
;
—— 
}
—— 
}
““ 
public
⁄⁄ 
	Exception
⁄⁄	 
	Exception
⁄⁄ 
{
€€ 
get
‹‹ 
{
‹‹ 
return
‹‹	 
m_exception
‹‹ 
;
‹‹ 
}
‹‹ 
}
›› 
public
ÂÂ 
	ErrorCode
ÂÂ	 
	ErrorCode
ÂÂ 
{
ÊÊ 
get
ÁÁ 
{
ÁÁ 
return
ÁÁ	 
m_errorCode
ÁÁ 
;
ÁÁ 
}
ÁÁ 
}
ËË 
private
ÒÒ 	
DateTime
ÒÒ
 
m_enabledDateUtc
ÒÒ #
;
ÒÒ# $
private
ˆˆ 	
bool
ˆˆ
 
m_firstTime
ˆˆ 
=
ˆˆ 
true
ˆˆ !
;
ˆˆ! "
private
˚˚ 	
string
˚˚
 
	m_message
˚˚ 
=
˚˚ 
null
˚˚ !
;
˚˚! "
private
ÄÄ 	
	Exception
ÄÄ
 
m_exception
ÄÄ 
=
ÄÄ  !
null
ÄÄ" &
;
ÄÄ& '
private
ÖÖ 	
	ErrorCode
ÖÖ
 
m_errorCode
ÖÖ 
=
ÖÖ  !
	ErrorCode
ÖÖ" +
.
ÖÖ+ ,
GenericFailure
ÖÖ, :
;
ÖÖ: ;
private
ää 	
readonly
ää
 
string
ää 
m_prefix
ää "
;
ää" #
private
óó 	
readonly
óó
 
static
óó 
Type
óó 
declaringType
óó ,
=
óó- .
typeof
óó/ 5
(
óó5 6"
OnlyOnceErrorHandler
óó6 J
)
óóJ K
;
óóK L
}
öö 
}õõ Ë®
?C:\sonarqube\projects\log4net-2.0.7\src\Util\OptionConverter.cs
	namespace 	
log4net
 
. 
Util 
{ 
public)) 
sealed)) 
class)) 
OptionConverter)) $
{** 
private55 	
OptionConverter55
 
(55 
)55 
{66 
}77 
public
ìì 
static
ìì	 
bool
ìì 
	ToBoolean
ìì 
(
ìì 
string
ìì %
argValue
ìì& .
,
ìì. /
bool
ìì0 4
defaultValue
ìì5 A
)
ììA B
{
îî 
if
ïï 
(
ïï 
argValue
ïï 
!=
ïï 
null
ïï 
&&
ïï 
argValue
ïï #
.
ïï# $
Length
ïï$ *
>
ïï+ ,
$num
ïï- .
)
ïï. /
{
ññ 
try
óó 
{
òò 
return
ôô 
bool
ôô 
.
ôô 
Parse
ôô 
(
ôô 
argValue
ôô 
)
ôô  
;
ôô  !
}
öö 
catch
õõ 	
(
õõ	 

	Exception
õõ
 
e
õõ 
)
õõ 
{
úú 
LogLog
ùù 
.
ùù 
Error
ùù 
(
ùù 
declaringType
ùù 
,
ùù  
$str
ùù! $
+
ùù% &
argValue
ùù' /
+
ùù0 1
$str
ùù2 Q
,
ùùQ R
e
ùùS T
)
ùùT U
;
ùùU V
}
ûû 
}
üü 
return
†† 	
defaultValue
††
 
;
†† 
}
°° 
public
–– 
static
––	 
long
–– 

ToFileSize
–– 
(
––  
string
––  &
argValue
––' /
,
––/ 0
long
––1 5
defaultValue
––6 B
)
––B C
{
—— 
if
““ 
(
““ 
argValue
““ 
==
““ 
null
““ 
)
““ 
{
”” 
return
‘‘ 

defaultValue
‘‘ 
;
‘‘ 
}
’’ 
string
◊◊ 	
s
◊◊
 
=
◊◊ 
argValue
◊◊ 
.
◊◊ 
Trim
◊◊ 
(
◊◊ 
)
◊◊ 
.
◊◊ 
ToUpper
◊◊ %
(
◊◊% &
CultureInfo
◊◊& 1
.
◊◊1 2
InvariantCulture
◊◊2 B
)
◊◊B C
;
◊◊C D
long
ÿÿ 

multiplier
ÿÿ 
=
ÿÿ 
$num
ÿÿ 
;
ÿÿ 
int
ŸŸ 
index
ŸŸ 
;
ŸŸ 
if
€€ 
(
€€ 
(
€€ 
index
€€ 
=
€€ 
s
€€ 
.
€€ 
IndexOf
€€ 
(
€€ 
$str
€€ 
)
€€ 
)
€€  
!=
€€! #
-
€€$ %
$num
€€% &
)
€€& '
{
‹‹ 

multiplier
›› 
=
›› 
$num
›› 
;
›› 
s
ﬁﬁ 
=
ﬁﬁ 
s
ﬁﬁ 	
.
ﬁﬁ	 

	Substring
ﬁﬁ
 
(
ﬁﬁ 
$num
ﬁﬁ 
,
ﬁﬁ 
index
ﬁﬁ 
)
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
else
‡‡ 
if
‡‡ 

(
‡‡ 
(
‡‡ 
index
‡‡ 
=
‡‡ 
s
‡‡ 
.
‡‡ 
IndexOf
‡‡ 
(
‡‡ 
$str
‡‡ #
)
‡‡# $
)
‡‡$ %
!=
‡‡& (
-
‡‡) *
$num
‡‡* +
)
‡‡+ ,
{
·· 

multiplier
‚‚ 
=
‚‚ 
$num
‚‚ 
*
‚‚ 
$num
‚‚ 
;
‚‚ 
s
„„ 
=
„„ 
s
„„ 	
.
„„	 

	Substring
„„
 
(
„„ 
$num
„„ 
,
„„ 
index
„„ 
)
„„ 
;
„„ 
}
‰‰ 
else
ÂÂ 
if
ÂÂ 

(
ÂÂ 
(
ÂÂ 
index
ÂÂ 
=
ÂÂ 
s
ÂÂ 
.
ÂÂ 
IndexOf
ÂÂ 
(
ÂÂ 
$str
ÂÂ #
)
ÂÂ# $
)
ÂÂ$ %
!=
ÂÂ& (
-
ÂÂ) *
$num
ÂÂ* +
)
ÂÂ+ ,
{
ÊÊ 

multiplier
ÁÁ 
=
ÁÁ 
$num
ÁÁ 
*
ÁÁ 
$num
ÁÁ 
*
ÁÁ 
$num
ÁÁ #
;
ÁÁ# $
s
ËË 
=
ËË 
s
ËË 	
.
ËË	 

	Substring
ËË
 
(
ËË 
$num
ËË 
,
ËË 
index
ËË 
)
ËË 
;
ËË 
}
ÈÈ 
if
ÍÍ 
(
ÍÍ 
s
ÍÍ 
!=
ÍÍ	 
null
ÍÍ 
)
ÍÍ 
{
ÎÎ 
s
ÌÌ 
=
ÌÌ 
s
ÌÌ 	
.
ÌÌ	 

Trim
ÌÌ
 
(
ÌÌ 
)
ÌÌ 
;
ÌÌ 
long
ÔÔ 
longVal
ÔÔ	 
;
ÔÔ 
if
 
(
 

SystemInfo
 
.
 
TryParse
 
(
 
s
 
,
 
out
 "
longVal
# *
)
* +
)
+ ,
{
ÒÒ 
return
ÚÚ 
longVal
ÚÚ 
*
ÚÚ 

multiplier
ÚÚ  
;
ÚÚ  !
}
ÛÛ 
else
ÙÙ 
{
ıı 
LogLog
ˆˆ 
.
ˆˆ 
Error
ˆˆ 
(
ˆˆ 
declaringType
ˆˆ 
,
ˆˆ  
$str
ˆˆ! 5
+
ˆˆ5 6
s
ˆˆ7 8
+
ˆˆ9 :
$str
ˆˆ: e
)
ˆˆe f
;
ˆˆf g
}
˜˜ 
}
¯¯ 
return
˘˘ 	
defaultValue
˘˘
 
;
˘˘ 
}
˙˙ 
public
ãã 
static
ãã	 
object
ãã 
ConvertStringTo
ãã &
(
ãã& '
Type
ãã' +
target
ãã, 2
,
ãã2 3
string
ãã4 :
txt
ãã; >
)
ãã> ?
{
åå 
if
çç 
(
çç 
target
çç 
==
çç 
null
çç 
)
çç 
{
éé 
throw
èè 	
new
èè
 #
ArgumentNullException
èè #
(
èè# $
$str
èè$ ,
)
èè, -
;
èè- .
}
êê 
if
ìì 
(
ìì 
typeof
ìì 
(
ìì 
string
ìì 
)
ìì 
==
ìì 
target
ìì 
||
ìì  "
typeof
ìì# )
(
ìì) *
object
ìì* 0
)
ìì0 1
==
ìì2 4
target
ìì5 ;
)
ìì; <
{
îî 
return
ïï 

txt
ïï 
;
ïï 
}
ññ 
IConvertFrom
ôô 
typeConverter
ôô 
=
ôô 
ConverterRegistry
ôô  1
.
ôô1 2
GetConvertFrom
ôô2 @
(
ôô@ A
target
ôôA G
)
ôôG H
;
ôôH I
if
öö 
(
öö 
typeConverter
öö 
!=
öö 
null
öö 
&&
öö 
typeConverter
öö  -
.
öö- .
CanConvertFrom
öö. <
(
öö< =
typeof
öö= C
(
ööC D
string
ööD J
)
ööJ K
)
ööK L
)
ööL M
{
õõ 
return
ùù 

typeConverter
ùù 
.
ùù 
ConvertFrom
ùù $
(
ùù$ %
txt
ùù% (
)
ùù( )
;
ùù) *
}
ûû 
else
üü 
{
†† 
if
§§ 
(
§§ 
target
§§ 
.
§§ 
IsEnum
§§ 
)
§§ 
{
¶¶ 
return
™™ 
	ParseEnum
™™ 
(
™™ 
target
™™ 
,
™™ 
txt
™™ !
,
™™! "
true
™™# '
)
™™' (
;
™™( )
}
´´ 
else
¨¨ 
{
≠≠ 
System
≤≤ 
.
≤≤ 

Reflection
≤≤ 
.
≤≤ 

MethodInfo
≤≤ !
meth
≤≤" &
=
≤≤' (
target
≤≤) /
.
≤≤/ 0
	GetMethod
≤≤0 9
(
≤≤9 :
$str
≤≤: A
,
≤≤A B
new
≤≤C F
Type
≤≤G K
[
≤≤K L
]
≤≤L M
{
≤≤N O
typeof
≤≤O U
(
≤≤U V
string
≤≤V \
)
≤≤\ ]
}
≤≤] ^
)
≤≤^ _
;
≤≤_ `
if
≥≥ 
(
≥≥ 	
meth
≥≥	 
!=
≥≥ 
null
≥≥ 
)
≥≥ 
{
¥¥ 
return
ππ 
meth
ππ 
.
ππ 
Invoke
ππ 
(
ππ 
null
ππ 
,
ππ 
BindingFlags
ππ +
.
ππ+ ,
InvokeMethod
ππ, 8
,
ππ8 9
null
ππ: >
,
ππ> ?
new
ππ@ C
object
ππD J
[
ππJ K
]
ππK L
{
ππM N
txt
ππN Q
}
ππQ R
,
ππR S
CultureInfo
ππT _
.
ππ_ `
InvariantCulture
ππ` p
)
ππp q
;
ππq r
}
ªª 
else
ºº 	
{
ΩΩ 
}
øø 
}
¿¿ 
}
¡¡ 
return
¬¬ 	
null
¬¬
 
;
¬¬ 
}
√√ 
public
ﬂﬂ 
static
ﬂﬂ	 
bool
ﬂﬂ 
CanConvertTypeTo
ﬂﬂ %
(
ﬂﬂ% &
Type
ﬂﬂ& *

sourceType
ﬂﬂ+ 5
,
ﬂﬂ5 6
Type
ﬂﬂ7 ;

targetType
ﬂﬂ< F
)
ﬂﬂF G
{
‡‡ 
if
·· 
(
·· 

sourceType
·· 
==
·· 
null
·· 
||
·· 

targetType
·· '
==
··( *
null
··+ /
)
··/ 0
{
‚‚ 
return
„„ 

false
„„ 
;
„„ 
}
‰‰ 
if
ÁÁ 
(
ÁÁ 

targetType
ÁÁ 
.
ÁÁ 
IsAssignableFrom
ÁÁ "
(
ÁÁ" #

sourceType
ÁÁ# -
)
ÁÁ- .
)
ÁÁ. /
{
ËË 
return
ÈÈ 

true
ÈÈ 
;
ÈÈ 
}
ÍÍ 

IConvertTo
ÌÌ 
tcSource
ÌÌ 
=
ÌÌ 
ConverterRegistry
ÌÌ *
.
ÌÌ* +
GetConvertTo
ÌÌ+ 7
(
ÌÌ7 8

sourceType
ÌÌ8 B
,
ÌÌB C

targetType
ÌÌD N
)
ÌÌN O
;
ÌÌO P
if
ÓÓ 
(
ÓÓ 
tcSource
ÓÓ 
!=
ÓÓ 
null
ÓÓ 
)
ÓÓ 
{
ÔÔ 
if
 
(
 
tcSource
 
.
 
CanConvertTo
 
(
 

targetType
 (
)
( )
)
) *
{
ÒÒ 
return
ÚÚ 
true
ÚÚ 
;
ÚÚ 
}
ÛÛ 
}
ÙÙ 
IConvertFrom
˜˜ 
tcTarget
˜˜ 
=
˜˜ 
ConverterRegistry
˜˜ ,
.
˜˜, -
GetConvertFrom
˜˜- ;
(
˜˜; <

targetType
˜˜< F
)
˜˜F G
;
˜˜G H
if
¯¯ 
(
¯¯ 
tcTarget
¯¯ 
!=
¯¯ 
null
¯¯ 
)
¯¯ 
{
˘˘ 
if
˙˙ 
(
˙˙ 
tcTarget
˙˙ 
.
˙˙ 
CanConvertFrom
˙˙ 
(
˙˙  

sourceType
˙˙  *
)
˙˙* +
)
˙˙+ ,
{
˚˚ 
return
¸¸ 
true
¸¸ 
;
¸¸ 
}
˝˝ 
}
˛˛ 
return
ÄÄ 	
false
ÄÄ
 
;
ÄÄ 
}
ÅÅ 
public
éé 
static
éé	 
object
éé 
ConvertTypeTo
éé $
(
éé$ %
object
éé% +
sourceInstance
éé, :
,
éé: ;
Type
éé< @

targetType
ééA K
)
ééK L
{
èè 
Type
êê 

sourceType
êê 
=
êê 
sourceInstance
êê #
.
êê# $
GetType
êê$ +
(
êê+ ,
)
êê, -
;
êê- .
if
ìì 
(
ìì 

targetType
ìì 
.
ìì 
IsAssignableFrom
ìì "
(
ìì" #

sourceType
ìì# -
)
ìì- .
)
ìì. /
{
îî 
return
ïï 

sourceInstance
ïï 
;
ïï 
}
ññ 

IConvertTo
ôô 
tcSource
ôô 
=
ôô 
ConverterRegistry
ôô *
.
ôô* +
GetConvertTo
ôô+ 7
(
ôô7 8

sourceType
ôô8 B
,
ôôB C

targetType
ôôD N
)
ôôN O
;
ôôO P
if
öö 
(
öö 
tcSource
öö 
!=
öö 
null
öö 
)
öö 
{
õõ 
if
úú 
(
úú 
tcSource
úú 
.
úú 
CanConvertTo
úú 
(
úú 

targetType
úú (
)
úú( )
)
úú) *
{
ùù 
return
ûû 
tcSource
ûû 
.
ûû 
	ConvertTo
ûû 
(
ûû 
sourceInstance
ûû -
,
ûû- .

targetType
ûû/ 9
)
ûû9 :
;
ûû: ;
}
üü 
}
†† 
IConvertFrom
££ 
tcTarget
££ 
=
££ 
ConverterRegistry
££ ,
.
££, -
GetConvertFrom
££- ;
(
££; <

targetType
££< F
)
££F G
;
££G H
if
§§ 
(
§§ 
tcTarget
§§ 
!=
§§ 
null
§§ 
)
§§ 
{
•• 
if
¶¶ 
(
¶¶ 
tcTarget
¶¶ 
.
¶¶ 
CanConvertFrom
¶¶ 
(
¶¶  

sourceType
¶¶  *
)
¶¶* +
)
¶¶+ ,
{
ßß 
return
®® 
tcTarget
®® 
.
®® 
ConvertFrom
®®  
(
®®  !
sourceInstance
®®! /
)
®®/ 0
;
®®0 1
}
©© 
}
™™ 
throw
¨¨ 
new
¨¨	 
ArgumentException
¨¨ 
(
¨¨ 
$str
¨¨ ?
+
¨¨@ A
sourceInstance
¨¨B P
.
¨¨P Q
ToString
¨¨Q Y
(
¨¨Y Z
)
¨¨Z [
+
¨¨\ ]
$str
¨¨^ r
+
¨¨s t

targetType
¨¨u 
.¨¨ Ä
Name¨¨Ä Ñ
+¨¨Ö Ü
$str¨¨á ä
,¨¨ä ã
$str¨¨å ú
)¨¨ú ù
;¨¨ù û
}
≠≠ 
public
‡‡ 
static
‡‡	 
object
‡‡ $
InstantiateByClassName
‡‡ -
(
‡‡- .
string
‡‡. 4
	className
‡‡5 >
,
‡‡> ?
Type
‡‡@ D

superClass
‡‡E O
,
‡‡O P
object
‡‡Q W
defaultValue
‡‡X d
)
‡‡d e
{
·· 
if
‚‚ 
(
‚‚ 
	className
‚‚ 
!=
‚‚ 
null
‚‚ 
)
‚‚ 
{
„„ 
try
‰‰ 
{
ÂÂ 
Type
ÈÈ 	
classObj
ÈÈ
 
=
ÈÈ 

SystemInfo
ÈÈ 
.
ÈÈ  
GetTypeFromString
ÈÈ  1
(
ÈÈ1 2
	className
ÈÈ2 ;
,
ÈÈ; <
true
ÈÈ= A
,
ÈÈA B
true
ÈÈC G
)
ÈÈG H
;
ÈÈH I
if
ÎÎ 
(
ÎÎ 	
!
ÎÎ	 


superClass
ÎÎ
 
.
ÎÎ 
IsAssignableFrom
ÎÎ %
(
ÎÎ% &
classObj
ÎÎ& .
)
ÎÎ. /
)
ÎÎ/ 0
{
ÏÏ 
LogLog
ÌÌ 
.
ÌÌ 
Error
ÌÌ 
(
ÌÌ 
declaringType
ÌÌ  
,
ÌÌ  !
$str
ÌÌ" 8
+
ÌÌ9 :
	className
ÌÌ; D
+
ÌÌE F
$str
ÌÌG j
+
ÌÌk l

superClass
ÌÌm w
.
ÌÌw x
FullNameÌÌx Ä
+ÌÌÅ Ç
$strÌÌÉ ê
)ÌÌê ë
;ÌÌë í
return
ÓÓ 
defaultValue
ÓÓ 
;
ÓÓ 
}
ÔÔ 
return
 
	Activator
 
.
 
CreateInstance
 $
(
$ %
classObj
% -
)
- .
;
. /
}
ÒÒ 
catch
ÚÚ 	
(
ÚÚ
 
	Exception
ÚÚ 
e
ÚÚ 
)
ÚÚ 
{
ÛÛ 
LogLog
ÙÙ 
.
ÙÙ 
Error
ÙÙ 
(
ÙÙ 
declaringType
ÙÙ 
,
ÙÙ  
$str
ÙÙ! @
+
ÙÙA B
	className
ÙÙC L
+
ÙÙM N
$str
ÙÙO S
,
ÙÙS T
e
ÙÙU V
)
ÙÙV W
;
ÙÙW X
}
ıı 
}
ˆˆ 
return
˜˜ 	
defaultValue
˜˜
 
;
˜˜ 
}
¯¯ 
public
•• 
static
••	 
string
•• !
SubstituteVariables
•• *
(
••* +
string
••+ 1
value
••2 7
,
••7 8
System
••9 ?
.
••? @
Collections
••@ K
.
••K L
IDictionary
••L W
props
••X ]
)
••] ^
{
¶¶ 
StringBuilder
ßß 
buf
ßß 
=
ßß 
new
ßß 
StringBuilder
ßß (
(
ßß( )
)
ßß) *
;
ßß* +
int
©© 
i
©© 
=
©©	 

$num
©© 
;
©© 
int
™™ 
j
™™ 
,
™™ 	
k
™™
 
;
™™ 
while
¨¨ 
(
¨¨ 	
true
¨¨	 
)
¨¨ 
{
≠≠ 
j
ÆÆ 
=
ÆÆ 
value
ÆÆ 
.
ÆÆ 
IndexOf
ÆÆ 
(
ÆÆ 
DELIM_START
ÆÆ !
,
ÆÆ! "
i
ÆÆ# $
)
ÆÆ$ %
;
ÆÆ% &
if
ØØ 
(
ØØ 
j
ØØ 	
==
ØØ
 
-
ØØ 
$num
ØØ 
)
ØØ 
{
∞∞ 
if
±± 
(
±± 	
i
±±	 

==
±± 
$num
±± 
)
±± 
{
≤≤ 
return
≥≥ 
value
≥≥ 
;
≥≥ 
}
¥¥ 
else
µµ 	
{
∂∂ 
buf
∑∑ 	
.
∑∑	 

Append
∑∑
 
(
∑∑ 
value
∑∑ 
.
∑∑ 
	Substring
∑∑  
(
∑∑  !
i
∑∑! "
,
∑∑" #
value
∑∑$ )
.
∑∑) *
Length
∑∑* 0
-
∑∑1 2
i
∑∑3 4
)
∑∑4 5
)
∑∑5 6
;
∑∑6 7
return
∏∏ 
buf
∏∏ 
.
∏∏ 
ToString
∏∏ 
(
∏∏ 
)
∏∏ 
;
∏∏ 
}
ππ 
}
∫∫ 
else
ªª 
{
ºº 
buf
ΩΩ 
.
ΩΩ 	
Append
ΩΩ	 
(
ΩΩ 
value
ΩΩ 
.
ΩΩ 
	Substring
ΩΩ 
(
ΩΩ  
i
ΩΩ  !
,
ΩΩ! "
j
ΩΩ# $
-
ΩΩ% &
i
ΩΩ' (
)
ΩΩ( )
)
ΩΩ) *
;
ΩΩ* +
k
ææ 
=
ææ 
value
ææ	 
.
ææ 
IndexOf
ææ 
(
ææ 

DELIM_STOP
ææ !
,
ææ! "
j
ææ# $
)
ææ$ %
;
ææ% &
if
øø 
(
øø 	
k
øø	 

==
øø 
-
øø 
$num
øø 
)
øø 
{
¿¿ 
throw
¡¡ 
new
¡¡ 
LogException
¡¡ 
(
¡¡ 
$str
¡¡  
+
¡¡! "
value
¡¡# (
+
¡¡) *
$str
¡¡+ `
+
¡¡a b
j
¡¡c d
+
¡¡e f
$str
¡¡g j
)
¡¡j k
;
¡¡k l
}
¬¬ 
else
√√ 	
{
ƒƒ 
j
≈≈ 
+=
≈≈ 

DELIM_START_LEN
≈≈ 
;
≈≈ 
string
∆∆ 
key
∆∆ 
=
∆∆ 
value
∆∆ 
.
∆∆ 
	Substring
∆∆ "
(
∆∆" #
j
∆∆# $
,
∆∆$ %
k
∆∆& '
-
∆∆( )
j
∆∆* +
)
∆∆+ ,
;
∆∆, -
string
»» 
replacement
»» 
=
»» 
props
»»  
[
»»  !
key
»»! $
]
»»$ %
as
»»& (
string
»») /
;
»»/ 0
if
   
(
  	 

replacement
  
 
!=
   
null
   
)
   
{
ÀÀ 
buf
ÃÃ 

.
ÃÃ
 
Append
ÃÃ 
(
ÃÃ 
replacement
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 
i
ŒŒ 
=
ŒŒ 	
k
ŒŒ
 
+
ŒŒ 
DELIM_STOP_LEN
ŒŒ 
;
ŒŒ 
}
œœ 
}
–– 
}
—— 
}
““ 
private
‡‡ 	
static
‡‡
 
object
‡‡ 
	ParseEnum
‡‡ !
(
‡‡! "
System
‡‡" (
.
‡‡( )
Type
‡‡) -
enumType
‡‡. 6
,
‡‡6 7
string
‡‡8 >
value
‡‡? D
,
‡‡D E
bool
‡‡F J

ignoreCase
‡‡K U
)
‡‡U V
{
·· 
return
„„ 	
Enum
„„
 
.
„„ 
Parse
„„ 
(
„„ 
enumType
„„ 
,
„„ 
value
„„ $
,
„„$ %

ignoreCase
„„& 0
)
„„0 1
;
„„1 2
}
ââ 
private
ññ 
readonly
ññ 
static
ññ 
Type
ññ  $
declaringType
ññ% 2
=
ññ3 4
typeof
ññ5 ;
(
ññ; <
OptionConverter
ññ< K
)
ññK L
;
ññL M
private
òò 	
const
òò
 
string
òò 
DELIM_START
òò "
=
òò# $
$str
òò% )
;
òò) *
private
ôô 	
const
ôô
 
char
ôô 

DELIM_STOP
ôô !
=
ôô# $
$char
ôô% (
;
ôô( )
private
öö 	
const
öö
 
int
öö 
DELIM_START_LEN
öö #
=
öö$ %
$num
öö& '
;
öö' (
private
õõ 	
const
õõ
 
int
õõ 
DELIM_STOP_LEN
õõ "
=
õõ$ %
$num
õõ& '
;
õõ' (
}
ûû 
}üü Äg
@C:\sonarqube\projects\log4net-2.0.7\src\Util\PatternConverter.cs
	namespace 	
log4net
 
. 
Util 
{ 
public** 
abstract** 
class** 
PatternConverter** '
{++ 
	protected66 
PatternConverter66 
(66 
)66 
{77 
}88 
publicII 
virtualII	 
PatternConverterII !
NextII" &
{JJ 
getKK 
{KK 
returnKK	 
m_nextKK 
;KK 
}KK 
}LL 
publicYY 
virtualYY	 
FormattingInfoYY 
FormattingInfoYY  .
{ZZ 
get[[ 
{[[ 
return[[	 
new[[ 
FormattingInfo[[ "
([[" #
m_min[[# (
,[[( )
m_max[[* /
,[[/ 0
m_leftAlign[[1 <
)[[< =
;[[= >
}[[? @
set\\ 
{]] 
m_min^^ 	
=^^
 
value^^ 
.^^ 
Min^^ 
;^^ 
m_max__ 	
=__
 
value__ 
.__ 
Max__ 
;__ 
m_leftAlign`` 
=`` 
value`` 
.`` 
	LeftAlign`` !
;``! "
}aa 
}bb 
publicoo 
virtualoo	 
stringoo 
Optionoo 
{pp 
getqq 
{qq 
returnqq	 
m_optionqq 
;qq 
}qq 
setrr 
{rr 
m_optionrr	 
=rr 
valuerr 
;rr 
}rr 
}ss 
abstract
ÑÑ 

	protected
ÑÑ 
void
ÑÑ 
Convert
ÑÑ !
(
ÑÑ! "

TextWriter
ÑÑ" ,
writer
ÑÑ- 3
,
ÑÑ3 4
object
ÑÑ5 ;
state
ÑÑ< A
)
ÑÑA B
;
ÑÑB C
public
ïï 
virtual
ïï	 
PatternConverter
ïï !
SetNext
ïï" )
(
ïï) *
PatternConverter
ïï* :
patternConverter
ïï; K
)
ïïK L
{
ññ 
m_next
óó 	
=
óó
 
patternConverter
óó 
;
óó 
return
òò 	
m_next
òò
 
;
òò 
}
ôô 
virtual
®® 	
public
®®
 
void
®® 
Format
®® 
(
®® 

TextWriter
®® '
writer
®®( .
,
®®. /
object
®®0 6
state
®®7 <
)
®®< =
{
©© 
if
™™ 
(
™™ 
m_min
™™ 
<
™™ 
$num
™™ 
&&
™™ 
m_max
™™ 
==
™™ 
int
™™  
.
™™  !
MaxValue
™™! )
)
™™) *
{
´´ 
Convert
≠≠ 
(
≠≠ 
writer
≠≠ 
,
≠≠ 
state
≠≠ 
)
≠≠ 
;
≠≠ 
}
ÆÆ 
else
ØØ 
{
∞∞ 
string
±± 
msg
±± 
=
±± 
null
±± !
;
±±! "
int
≤≤ 
len
≤≤ 
;
≤≤ 
lock
≥≥ 
(
≥≥ 
m_formatWriter
≥≥ $
)
≥≥$ %
{
¥¥ 
m_formatWriter
µµ "
.
µµ" #
Reset
µµ# (
(
µµ( )'
c_renderBufferMaxCapacity
µµ) B
,
µµB C 
c_renderBufferSize
µµD V
)
µµV W
;
µµW X
Convert
∑∑ 
(
∑∑ 
m_formatWriter
∑∑ *
,
∑∑* +
state
∑∑, 1
)
∑∑1 2
;
∑∑2 3
StringBuilder
ππ !
buf
ππ" %
=
ππ& '
m_formatWriter
ππ( 6
.
ππ6 7
GetStringBuilder
ππ7 G
(
ππG H
)
ππH I
;
ππI J
len
∫∫ 
=
∫∫ 
buf
∫∫ 
.
∫∫ 
Length
∫∫ $
;
∫∫$ %
if
ªª 
(
ªª 
len
ªª 
>
ªª 
m_max
ªª #
)
ªª# $
{
ºº 
msg
ΩΩ 
=
ΩΩ 
buf
ΩΩ !
.
ΩΩ! "
ToString
ΩΩ" *
(
ΩΩ* +
len
ΩΩ+ .
-
ΩΩ/ 0
m_max
ΩΩ1 6
,
ΩΩ6 7
m_max
ΩΩ8 =
)
ΩΩ= >
;
ΩΩ> ?
len
ææ 
=
ææ 
m_max
ææ #
;
ææ# $
}
øø 
else
¿¿ 
{
¡¡ 
msg
¬¬ 
=
¬¬ 
buf
¬¬ !
.
¬¬! "
ToString
¬¬" *
(
¬¬* +
)
¬¬+ ,
;
¬¬, -
}
√√ 
}
ƒƒ 
if
∆∆ 
(
∆∆ 
len
∆∆ 
<
∆∆ 
m_min
∆∆ 
)
∆∆ 
{
«« 
if
»» 
(
»» 	
m_leftAlign
»»	 
)
»» 
{
…… 
writer
   
.
   
Write
   
(
   
msg
   
)
   
;
   
SpacePad
ÀÀ 
(
ÀÀ 
writer
ÀÀ 
,
ÀÀ 
m_min
ÀÀ 
-
ÀÀ 
len
ÀÀ "
)
ÀÀ" #
;
ÀÀ# $
}
ÃÃ 
else
ÕÕ 	
{
ŒŒ 
SpacePad
œœ 
(
œœ 
writer
œœ 
,
œœ 
m_min
œœ 
-
œœ 
len
œœ "
)
œœ" #
;
œœ# $
writer
–– 
.
–– 
Write
–– 
(
–– 
msg
–– 
)
–– 
;
–– 
}
—— 
}
““ 
else
”” 
{
‘‘ 
writer
’’ 
.
’’ 
Write
’’ 
(
’’ 
msg
’’ 
)
’’ 
;
’’ 
}
÷÷ 
}
◊◊ 
}
ÿÿ 
private
⁄⁄ 	
static
⁄⁄
 
readonly
⁄⁄ 
string
⁄⁄  
[
⁄⁄  !
]
⁄⁄! "
SPACES
⁄⁄# )
=
⁄⁄* +
{
⁄⁄, -
$str
⁄⁄. 1
,
⁄⁄1 2
$str
⁄⁄3 7
,
⁄⁄7 8
$str
⁄⁄9 ?
,
⁄⁄? @
$str
⁄⁄A K
,
⁄⁄K L
$str
€€ 
,
€€  
$str
‹‹ /
}
‹‹0 1
;
‹‹1 2
	protected
ËË 
static
ËË 
void
ËË 
SpacePad
ËË  
(
ËË  !

TextWriter
ËË! +
writer
ËË, 2
,
ËË2 3
int
ËË4 7
length
ËË8 >
)
ËË> ?
{
ÈÈ 
while
ÍÍ 
(
ÍÍ 	
length
ÍÍ	 
>=
ÍÍ 
$num
ÍÍ 
)
ÍÍ 
{
ÎÎ 
writer
ÏÏ 

.
ÏÏ
 
Write
ÏÏ 
(
ÏÏ 
SPACES
ÏÏ 
[
ÏÏ 
$num
ÏÏ 
]
ÏÏ 
)
ÏÏ 
;
ÏÏ 
length
ÌÌ 

-=
ÌÌ 
$num
ÌÌ 
;
ÌÌ 
}
ÓÓ 
for
 
(
 
int
 

i
 
=
 
$num
 
;
 
i
 
>=
 
$num
 
;
 
i
 
--
 
)
 
{
ÒÒ 
if
ÚÚ 
(
ÚÚ 
(
ÚÚ 	
length
ÚÚ	 
&
ÚÚ 
(
ÚÚ 
$num
ÚÚ 
<<
ÚÚ 
i
ÚÚ 
)
ÚÚ 
)
ÚÚ 
!=
ÚÚ 
$num
ÚÚ 
)
ÚÚ 
{
ÛÛ 
writer
ÙÙ 
.
ÙÙ 
Write
ÙÙ 
(
ÙÙ 
SPACES
ÙÙ 
[
ÙÙ 
i
ÙÙ 
]
ÙÙ 
)
ÙÙ 
;
ÙÙ 
}
ıı 
}
ˆˆ 
}
˜˜ 
private
˝˝ 	
PatternConverter
˝˝
 
m_next
˝˝ !
;
˝˝! "
private
˛˛ 	
int
˛˛
 
m_min
˛˛ 
=
˛˛ 
-
˛˛ 
$num
˛˛ 
;
˛˛ 
private
ˇˇ 	
int
ˇˇ
 
m_max
ˇˇ 
=
ˇˇ 
int
ˇˇ 
.
ˇˇ 
MaxValue
ˇˇ "
;
ˇˇ" #
private
ÄÄ 	
bool
ÄÄ
 
m_leftAlign
ÄÄ 
=
ÄÄ 
false
ÄÄ "
;
ÄÄ" #
private
ÖÖ 	
string
ÖÖ
 
m_option
ÖÖ 
=
ÖÖ 
null
ÖÖ  
;
ÖÖ  !
private
áá 	"
ReusableStringWriter
áá
 
m_formatWriter
áá -
=
áá. /
new
áá0 3"
ReusableStringWriter
áá4 H
(
ááH I
System
ááI O
.
ááO P
Globalization
ááP ]
.
áá] ^
CultureInfo
áá^ i
.
áái j
InvariantCulture
ááj z
)
ááz {
;
áá{ |
private
êê 	
const
êê
 
int
êê  
c_renderBufferSize
êê &
=
êê' (
$num
êê) ,
;
êê, -
private
ïï 	
const
ïï
 
int
ïï '
c_renderBufferMaxCapacity
ïï -
=
ïï. /
$num
ïï0 4
;
ïï4 5
	protected
ÆÆ 
static
ÆÆ 
void
ÆÆ 
WriteDictionary
ÆÆ '
(
ÆÆ' (

TextWriter
ÆÆ( 2
writer
ÆÆ3 9
,
ÆÆ9 :
ILoggerRepository
ÆÆ; L

repository
ÆÆM W
,
ÆÆW X
IDictionary
ÆÆY d
value
ÆÆe j
)
ÆÆj k
{
ØØ 
WriteDictionary
∞∞ 
(
∞∞ 
writer
∞∞ 
,
∞∞ 

repository
∞∞ %
,
∞∞% &
value
∞∞' ,
.
∞∞, -
GetEnumerator
∞∞- :
(
∞∞: ;
)
∞∞; <
)
∞∞< =
;
∞∞= >
}
±± 
	protected
∆∆ 
static
∆∆ 
void
∆∆ 
WriteDictionary
∆∆ '
(
∆∆' (

TextWriter
∆∆( 2
writer
∆∆3 9
,
∆∆9 :
ILoggerRepository
∆∆; L

repository
∆∆M W
,
∆∆W X#
IDictionaryEnumerator
∆∆Y n
value
∆∆o t
)
∆∆t u
{
«« 
writer
»» 	
.
»»	 

Write
»»
 
(
»» 
$str
»» 
)
»» 
;
»» 
bool
   
first
   
=
   
true
   
;
   
while
ÕÕ 
(
ÕÕ	 

value
ÕÕ
 
.
ÕÕ 
MoveNext
ÕÕ 
(
ÕÕ 
)
ÕÕ 
)
ÕÕ 
{
ŒŒ 
if
œœ 
(
œœ 
first
œœ 
)
œœ 
{
–– 
first
—— 

=
—— 
false
—— 
;
—— 
}
““ 
else
”” 
{
‘‘ 
writer
’’ 
.
’’ 
Write
’’ 
(
’’ 
$str
’’ 
)
’’ 
;
’’ 
}
÷÷ 
WriteObject
◊◊ 
(
◊◊ 
writer
◊◊ 
,
◊◊ 

repository
◊◊ "
,
◊◊" #
value
◊◊$ )
.
◊◊) *
Key
◊◊* -
)
◊◊- .
;
◊◊. /
writer
ÿÿ 

.
ÿÿ
 
Write
ÿÿ 
(
ÿÿ 
$str
ÿÿ 
)
ÿÿ 
;
ÿÿ 
WriteObject
ŸŸ 
(
ŸŸ 
writer
ŸŸ 
,
ŸŸ 

repository
ŸŸ "
,
ŸŸ" #
value
ŸŸ$ )
.
ŸŸ) *
Value
ŸŸ* /
)
ŸŸ/ 0
;
ŸŸ0 1
}
⁄⁄ 
writer
‹‹ 	
.
‹‹	 

Write
‹‹
 
(
‹‹ 
$str
‹‹ 
)
‹‹ 
;
‹‹ 
}
›› 
	protected
ÏÏ 
static
ÏÏ 
void
ÏÏ 
WriteObject
ÏÏ #
(
ÏÏ# $

TextWriter
ÏÏ$ .
writer
ÏÏ/ 5
,
ÏÏ5 6
ILoggerRepository
ÏÏ7 H

repository
ÏÏI S
,
ÏÏS T
object
ÏÏU [
value
ÏÏ\ a
)
ÏÏa b
{
ÌÌ 
if
ÓÓ 
(
ÓÓ 

repository
ÓÓ 
!=
ÓÓ 
null
ÓÓ 
)
ÓÓ 
{
ÔÔ 

repository
 
.
 
RendererMap
 
.
 
FindAndRender
 (
(
( )
value
) .
,
. /
writer
0 6
)
6 7
;
7 8
}
ÒÒ 
else
ÚÚ 
{
ÛÛ 
if
ıı 
(
ıı 
value
ıı 
==
ıı 
null
ıı 
)
ıı 
{
ˆˆ 
writer
˜˜ 
.
˜˜ 
Write
˜˜ 
(
˜˜ 

SystemInfo
˜˜ 
.
˜˜ 
NullText
˜˜ &
)
˜˜' (
;
˜˜( )
}
¯¯ 
else
˘˘ 
{
˙˙ 
writer
˚˚ 
.
˚˚ 
Write
˚˚ 
(
˚˚ 
value
˚˚ 
.
˚˚ 
ToString
˚˚ !
(
˚˚! "
)
˚˚" #
)
˚˚$ %
;
˚˚% &
}
¸¸ 
}
˝˝ 
}
˛˛ 
private
ÇÇ "
PropertiesDictionary
ÇÇ $

properties
ÇÇ% /
;
ÇÇ/ 0
public
áá "
PropertiesDictionary
áá #

Properties
áá$ .
{
àà 
get
ââ	 
{
ââ 
return
ââ 

properties
ââ  
;
ââ  !
}
ââ" #
set
ää	 
{
ää 

properties
ää 
=
ää 
value
ää !
;
ää! "
}
ää# $
}
ãã 
}
åå 
}çç πö
=C:\sonarqube\projects\log4net-2.0.7\src\Util\PatternParser.cs
	namespace 	
log4net
 
. 
Util 
{ 
public)) 
sealed)) 
class)) 
PatternParser)) "
{** 
public77 
PatternParser77	 
(77 
string77 
pattern77 %
)77% &
{88 
	m_pattern99 
=99 
pattern99 
;99 
}:: 
publicII 
PatternConverterII	 
ParseII 
(II  
)II  !
{JJ 
stringKK 	
[KK	 

]KK
 
converterNamesCacheKK 
=KK  !

BuildCacheKK" ,
(KK, -
)KK- .
;KK. /
ParseInternalMM 
(MM 
	m_patternMM 
,MM 
converterNamesCacheMM /
)MM/ 0
;MM0 1
returnOO 	
m_headOO
 
;OO 
}PP 
publicaa 
	Hashtableaa	 
PatternConvertersaa $
{bb 
getcc 
{cc 
returncc	 
m_patternConverterscc #
;cc# $
}cc% &
}dd 
privatess 	
stringss
 
[ss 
]ss 

BuildCachess 
(ss 
)ss 
{tt 
stringuu 	
[uu	 

]uu
 
converterNamesCacheuu 
=uu  !
newuu" %
stringuu& ,
[uu, -
m_patternConvertersuu- @
.uu@ A
KeysuuA E
.uuE F
CountuuF K
]uuK L
;uuL M
m_patternConvertersvv 
.vv 
Keysvv 
.vv 
CopyTovv "
(vv" #
converterNamesCachevv# 6
,vv6 7
$numvv8 9
)vv9 :
;vv: ;
Arrayyy 
.yy 	
Sortyy	 
(yy 
converterNamesCacheyy !
,yy! "
$numyy# $
,yy$ %
converterNamesCacheyy& 9
.yy9 :
Lengthyy: @
,yy@ A 
StringLengthCompareryyB V
.yyV W
InstanceyyW _
)yy_ `
;yy` a
return{{ 	
converterNamesCache{{
 
;{{ 
}|| 
private
ââ 	
sealed
ââ
 
class
ââ "
StringLengthComparer
ââ +
:
ââ, -
	IComparer
ââ. 7
{
ää 
public
ãã 	
static
ãã
 
readonly
ãã "
StringLengthComparer
ãã .
Instance
ãã/ 7
=
ãã8 9
new
ãã: ="
StringLengthComparer
ãã> R
(
ããR S
)
ããS T
;
ããT U
private
çç 
"
StringLengthComparer
çç 
(
çç  
)
çç  !
{
éé 
}
èè 
public
ìì 	
int
ìì
 
Compare
ìì 
(
ìì 
object
ìì 
x
ìì 
,
ìì 
object
ìì  &
y
ìì' (
)
ìì( )
{
îî 
string
ïï 

s1
ïï 
=
ïï 
x
ïï 
as
ïï 
string
ïï 
;
ïï 
string
ññ 

s2
ññ 
=
ññ 
y
ññ 
as
ññ 
string
ññ 
;
ññ 
if
òò 
(
òò 
s1
òò 

==
òò 
null
òò 
&&
òò 
s2
òò 
==
òò 
null
òò  
)
òò  !
{
ôô 
return
öö 
$num
öö 
;
öö 
}
õõ 
if
úú 
(
úú 
s1
úú 

==
úú 
null
úú 
)
úú 
{
ùù 
return
ûû 
$num
ûû 
;
ûû 
}
üü 
if
†† 
(
†† 
s2
†† 

==
†† 
null
†† 
)
†† 
{
°° 
return
¢¢ 
-
¢¢ 
$num
¢¢ 
;
¢¢ 
}
££ 
return
•• 

s2
•• 
.
•• 
Length
•• 
.
•• 
	CompareTo
•• 
(
•• 
s1
•• !
.
••! "
Length
••" (
)
••( )
;
••) *
}
¶¶ 
}
©© 
private
∑∑ 	
void
∑∑
 
ParseInternal
∑∑ 
(
∑∑ 
string
∑∑ #
pattern
∑∑$ +
,
∑∑+ ,
string
∑∑- 3
[
∑∑3 4
]
∑∑4 5
matches
∑∑6 =
)
∑∑= >
{
∏∏ 
int
ππ 
offset
ππ 
=
ππ 
$num
ππ 
;
ππ 
while
∫∫ 
(
∫∫ 	
offset
∫∫	 
<
∫∫ 
pattern
∫∫ 
.
∫∫ 
Length
∫∫  
)
∫∫  !
{
ªª 
int
ºº 
i
ºº 	
=
ºº
 
pattern
ºº 
.
ºº 
IndexOf
ºº 
(
ºº 
$char
ºº 
,
ºº  
offset
ºº! '
)
ºº' (
;
ºº( )
if
ΩΩ 
(
ΩΩ 
i
ΩΩ 	
<
ΩΩ
 
$num
ΩΩ 
||
ΩΩ 
i
ΩΩ 
==
ΩΩ 
pattern
ΩΩ 
.
ΩΩ 
Length
ΩΩ $
-
ΩΩ% &
$num
ΩΩ' (
)
ΩΩ( )
{
ææ 
ProcessLiteral
øø 
(
øø 
pattern
øø 
.
øø 
	Substring
øø %
(
øø% &
offset
øø& ,
)
øø, -
)
øø- .
;
øø. /
offset
¿¿ 
=
¿¿ 
pattern
¿¿ 
.
¿¿ 
Length
¿¿ 
;
¿¿ 
}
¡¡ 
else
¬¬ 
{
√√ 
if
ƒƒ 
(
ƒƒ 	
pattern
ƒƒ	 
[
ƒƒ 
i
ƒƒ 
+
ƒƒ 
$num
ƒƒ 
]
ƒƒ 
==
ƒƒ 
$char
ƒƒ 
)
ƒƒ 
{
≈≈ 
ProcessLiteral
«« 
(
«« 
pattern
«« 
.
«« 
	Substring
«« &
(
««& '
offset
««' -
,
««- .
i
««/ 0
-
««1 2
offset
««3 9
+
««: ;
$num
««< =
)
««= >
)
««> ?
;
««? @
offset
»» 
=
»» 
i
»» 
+
»» 
$num
»» 
;
»» 
}
…… 
else
   	
{
ÀÀ 
ProcessLiteral
ÃÃ 
(
ÃÃ 
pattern
ÃÃ 
.
ÃÃ 
	Substring
ÃÃ &
(
ÃÃ& '
offset
ÃÃ' -
,
ÃÃ- .
i
ÃÃ/ 0
-
ÃÃ1 2
offset
ÃÃ3 9
)
ÃÃ9 :
)
ÃÃ: ;
;
ÃÃ; <
offset
ÕÕ 
=
ÕÕ 
i
ÕÕ 
+
ÕÕ 
$num
ÕÕ 
;
ÕÕ 
FormattingInfo
œœ 
formattingInfo
œœ #
=
œœ$ %
new
œœ& )
FormattingInfo
œœ* 8
(
œœ8 9
)
œœ9 :
;
œœ: ;
if
‘‘ 
(
‘‘	 

offset
‘‘
 
<
‘‘ 
pattern
‘‘ 
.
‘‘ 
Length
‘‘ !
)
‘‘! "
{
’’ 
if
÷÷ 	
(
÷÷
 
pattern
÷÷ 
[
÷÷ 
offset
÷÷ 
]
÷÷ 
==
÷÷ 
$char
÷÷ !
)
÷÷! "
{
◊◊ 
formattingInfo
ŸŸ 
.
ŸŸ 
	LeftAlign
ŸŸ  
=
ŸŸ! "
true
ŸŸ# '
;
ŸŸ' (
offset
⁄⁄ 
++
⁄⁄ 
;
⁄⁄ 
}
€€ 
}
‹‹ 
while
ﬁﬁ 
(
ﬁﬁ 
offset
ﬁﬁ 
<
ﬁﬁ 
pattern
ﬁﬁ 
.
ﬁﬁ 
Length
ﬁﬁ $
&&
ﬁﬁ% '
char
ﬁﬁ( ,
.
ﬁﬁ, -
IsDigit
ﬁﬁ- 4
(
ﬁﬁ4 5
pattern
ﬁﬁ5 <
[
ﬁﬁ< =
offset
ﬁﬁ= C
]
ﬁﬁC D
)
ﬁﬁD E
)
ﬁﬁE F
{
ﬂﬂ 
if
·· 	
(
··
 
formattingInfo
·· 
.
·· 
Min
·· 
<
·· 
$num
··  !
)
··! "
{
‚‚ 
formattingInfo
„„ 
.
„„ 
Min
„„ 
=
„„ 
$num
„„ 
;
„„ 
}
‰‰ 
formattingInfo
ÊÊ 
.
ÊÊ 
Min
ÊÊ 
=
ÊÊ 
(
ÊÊ 
formattingInfo
ÊÊ +
.
ÊÊ+ ,
Min
ÊÊ, /
*
ÊÊ0 1
$num
ÊÊ2 4
)
ÊÊ4 5
+
ÊÊ6 7
int
ÊÊ8 ;
.
ÊÊ; <
Parse
ÊÊ< A
(
ÊÊA B
pattern
ÊÊB I
[
ÊÊI J
offset
ÊÊJ P
]
ÊÊP Q
.
ÊÊQ R
ToString
ÊÊR Z
(
ÊÊZ [
)
ÊÊ[ \
,
ÊÊ\ ]
NumberFormatInfo
ÊÊ^ n
.
ÊÊn o
InvariantInfo
ÊÊo |
)
ÊÊ| }
;
ÊÊ} ~
offset
ËË 
++
ËË 
;
ËË 
}
ÈÈ 
if
ÎÎ 
(
ÎÎ	 

offset
ÎÎ
 
<
ÎÎ 
pattern
ÎÎ 
.
ÎÎ 
Length
ÎÎ !
)
ÎÎ! "
{
ÏÏ 
if
ÌÌ 	
(
ÌÌ
 
pattern
ÌÌ 
[
ÌÌ 
offset
ÌÌ 
]
ÌÌ 
==
ÌÌ 
$char
ÌÌ !
)
ÌÌ! "
{
ÓÓ 
offset
 
++
 
;
 
}
ÒÒ 
}
ÚÚ 
while
ÙÙ 
(
ÙÙ 
offset
ÙÙ 
<
ÙÙ 
pattern
ÙÙ 
.
ÙÙ 
Length
ÙÙ $
&&
ÙÙ% '
char
ÙÙ( ,
.
ÙÙ, -
IsDigit
ÙÙ- 4
(
ÙÙ4 5
pattern
ÙÙ5 <
[
ÙÙ< =
offset
ÙÙ= C
]
ÙÙC D
)
ÙÙD E
)
ÙÙE F
{
ıı 
if
˜˜ 	
(
˜˜
 
formattingInfo
˜˜ 
.
˜˜ 
Max
˜˜ 
==
˜˜  
int
˜˜! $
.
˜˜$ %
MaxValue
˜˜% -
)
˜˜- .
{
¯¯ 
formattingInfo
˘˘ 
.
˘˘ 
Max
˘˘ 
=
˘˘ 
$num
˘˘ 
;
˘˘ 
}
˙˙ 
formattingInfo
¸¸ 
.
¸¸ 
Max
¸¸ 
=
¸¸ 
(
¸¸ 
formattingInfo
¸¸ +
.
¸¸+ ,
Max
¸¸, /
*
¸¸0 1
$num
¸¸2 4
)
¸¸4 5
+
¸¸6 7
int
¸¸8 ;
.
¸¸; <
Parse
¸¸< A
(
¸¸A B
pattern
¸¸B I
[
¸¸I J
offset
¸¸J P
]
¸¸P Q
.
¸¸Q R
ToString
¸¸R Z
(
¸¸Z [
)
¸¸[ \
,
¸¸\ ]
NumberFormatInfo
¸¸^ n
.
¸¸n o
InvariantInfo
¸¸o |
)
¸¸| }
;
¸¸} ~
offset
˛˛ 
++
˛˛ 
;
˛˛ 
}
ˇˇ 
int
ÅÅ 	#
remainingStringLength
ÅÅ
 
=
ÅÅ  !
pattern
ÅÅ" )
.
ÅÅ) *
Length
ÅÅ* 0
-
ÅÅ1 2
offset
ÅÅ3 9
;
ÅÅ9 :
for
ÑÑ 	
(
ÑÑ	 

int
ÑÑ
 
m
ÑÑ 
=
ÑÑ 
$num
ÑÑ 
;
ÑÑ 
m
ÑÑ 
<
ÑÑ 
matches
ÑÑ 
.
ÑÑ 
Length
ÑÑ #
;
ÑÑ# $
m
ÑÑ% &
++
ÑÑ& (
)
ÑÑ( )
{
ÖÖ 
string
ÜÜ 
key
ÜÜ 
=
ÜÜ 
matches
ÜÜ 
[
ÜÜ 
m
ÜÜ 
]
ÜÜ 
;
ÜÜ 
if
àà 	
(
àà
 
key
àà 
.
àà 
Length
àà 
<=
àà #
remainingStringLength
àà .
)
àà. /
{
ââ 
if
ää 

(
ää 
string
ää 
.
ää 
Compare
ää 
(
ää 
pattern
ää "
,
ää" #
offset
ää$ *
,
ää* +
key
ää, /
,
ää/ 0
$num
ää1 2
,
ää2 3
key
ää4 7
.
ää7 8
Length
ää8 >
)
ää> ?
==
ää@ B
$num
ääC D
)
ääD E
{
ãã 	
offset
çç	 
=
çç 
offset
çç 
+
çç 
matches
çç "
[
çç" #
m
çç# $
]
çç$ %
.
çç% &
Length
çç& ,
;
çç, -
string
èè	 
option
èè 
=
èè 
null
èè 
;
èè 
if
íí	 
(
íí 
offset
íí 
<
íí 
pattern
íí 
.
íí 
Length
íí $
)
íí$ %
{
ìì	 

if
îî
 
(
îî 
pattern
îî 
[
îî 
offset
îî 
]
îî 
==
îî  
$char
îî! $
)
îî$ %
{
ïï
 
offset
óó 
++
óó 
;
óó 
int
ôô 
optEnd
ôô 
=
ôô 
pattern
ôô 
.
ôô  
IndexOf
ôô  '
(
ôô' (
$char
ôô( +
,
ôô+ ,
offset
ôô- 3
)
ôô3 4
;
ôô4 5
if
öö 
(
öö 
optEnd
öö 
<
öö 
$num
öö 
)
öö 
{
õõ 
}
ùù 
else
ûû 
{
üü 
option
†† 
=
†† 
pattern
†† 
.
†† 
	Substring
†† &
(
††& '
offset
††' -
,
††- .
optEnd
††/ 5
-
††6 7
offset
††8 >
)
††> ?
;
††? @
offset
°° 
=
°° 
optEnd
°° 
+
°° 
$num
°° 
;
°°  
}
¢¢ 
}
££
 
}
§§	 

ProcessConverter
¶¶	 
(
¶¶ 
matches
¶¶ !
[
¶¶! "
m
¶¶" #
]
¶¶# $
,
¶¶$ %
option
¶¶& ,
,
¶¶, -
formattingInfo
¶¶. <
)
¶¶< =
;
¶¶= >
break
ßß	 
;
ßß 
}
®® 	
}
©© 
}
™™ 
}
´´ 
}
¨¨ 
}
≠≠ 
}
ÆÆ 
private
¥¥ 	
void
¥¥
 
ProcessLiteral
¥¥ 
(
¥¥ 
string
¥¥ $
text
¥¥% )
)
¥¥) *
{
µµ 
if
∂∂ 
(
∂∂ 
text
∂∂ 
.
∂∂ 
Length
∂∂ 
>
∂∂ 
$num
∂∂ 
)
∂∂ 
{
∑∑ 
ProcessConverter
ππ 
(
ππ 
$str
ππ 
,
ππ 
text
ππ  $
,
ππ$ %
new
ππ& )
FormattingInfo
ππ* 8
(
ππ8 9
)
ππ9 :
)
ππ: ;
;
ππ; <
}
∫∫ 
}
ªª 
private
√√ 	
void
√√
 
ProcessConverter
√√ 
(
√√  
string
√√  &
converterName
√√' 4
,
√√4 5
string
√√6 <
option
√√= C
,
√√C D
FormattingInfo
√√E S
formattingInfo
√√T b
)
√√b c
{
ƒƒ 
LogLog
≈≈ 	
.
≈≈	 

Debug
≈≈
 
(
≈≈ 
declaringType
≈≈ 
,
≈≈ 
$str
≈≈ ,
+
≈≈, -
converterName
≈≈- :
+
≈≈: ;
$str
≈≈; G
+
≈≈G H
option
≈≈H N
+
≈≈N O
$str
≈≈O _
+
≈≈_ `
formattingInfo
≈≈` n
.
≈≈n o
Min
≈≈o r
+
≈≈r s
$str
≈≈s z
+
≈≈z {
formattingInfo≈≈{ â
.≈≈â ä
Max≈≈ä ç
+≈≈ç é
$str≈≈é õ
+≈≈õ ú
formattingInfo≈≈ú ™
.≈≈™ ´
	LeftAlign≈≈´ ¥
+≈≈¥ µ
$str≈≈µ ∏
)≈≈∏ π
;≈≈π ∫
ConverterInfo
»» 
converterInfo
»» '
=
»»( )
(
»»* +
ConverterInfo
»»+ 8
)
»»8 9!
m_patternConverters
»»9 L
[
»»L M
converterName
»»M Z
]
»»Z [
;
»»[ \
if
…… 
(
…… 
converterInfo
…… 
==
…… 
null
…… 
)
…… 
{
   
LogLog
ÀÀ 

.
ÀÀ
 
Error
ÀÀ 
(
ÀÀ 
declaringType
ÀÀ 
,
ÀÀ 
$str
ÀÀ  :
+
ÀÀ: ;
converterName
ÀÀ; H
+
ÀÀH I
$str
ÀÀI c
)
ÀÀc d
;
ÀÀd e
}
ÃÃ 
else
ÕÕ 
{
ŒŒ 
PatternConverter
–– 
pc
–– 
=
–– 
null
–– 
;
–– 
try
—— 
{
““ 
pc
”” 
=
”” 
(
”” 
PatternConverter
”” *
)
””* +
	Activator
””+ 4
.
””4 5
CreateInstance
””5 C
(
””C D
converterInfo
””D Q
.
””Q R
Type
””R V
)
””V W
;
””W X
}
‘‘ 
catch
’’ 	
(
’’	 

	Exception
’’
 
createInstanceEx
’’ $
)
’’$ %
{
÷÷ 
LogLog
◊◊ 
.
◊◊ 
Error
◊◊  
(
◊◊  !
declaringType
◊◊! .
,
◊◊. /
$str
◊◊0 U
+
◊◊V W
converterInfo
◊◊X e
.
◊◊e f
Type
◊◊f j
.
◊◊j k
FullName
◊◊k s
+
◊◊t u
$str◊◊v †
+◊◊° ¢ 
createInstanceEx◊◊£ ≥
.◊◊≥ ¥
ToString◊◊¥ º
(◊◊º Ω
)◊◊Ω æ
)◊◊æ ø
;◊◊ø ¿
}
ÿÿ 
pc
‹‹ 
.
‹‹ 
FormattingInfo
‹‹ 
=
‹‹ 
formattingInfo
‹‹ &
;
‹‹& '
pc
›› 
.
›› 
Option
›› 
=
›› 
option
›› 
;
›› 
pc
ﬁﬁ 
.
ﬁﬁ 

Properties
ﬁﬁ 
=
ﬁﬁ 
converterInfo
ﬁﬁ  -
.
ﬁﬁ- .

Properties
ﬁﬁ. 8
;
ﬁﬁ8 9
IOptionHandler
‡‡ 
optionHandler
‡‡ #
=
‡‡$ %
pc
‡‡& (
as
‡‡) +
IOptionHandler
‡‡, :
;
‡‡: ;
if
·· 
(
·· 
optionHandler
·· 
!=
·· 
null
·· 
)
·· 
{
‚‚ 
optionHandler
„„ 
.
„„ 
ActivateOptions
„„ "
(
„„" #
)
„„# $
;
„„$ %
}
‰‰ 
AddConverter
ÊÊ 
(
ÊÊ 
pc
ÊÊ 
)
ÊÊ 
;
ÊÊ 
}
ÁÁ 
}
ËË 
private
ÔÔ 	
void
ÔÔ
 
AddConverter
ÔÔ 
(
ÔÔ 
PatternConverter
ÔÔ ,
pc
ÔÔ- /
)
ÔÔ/ 0
{
 
if
ÛÛ 
(
ÛÛ 
m_head
ÛÛ 
==
ÛÛ 
null
ÛÛ 
)
ÛÛ 
{
ÙÙ 
m_head
ıı 

=
ıı 
m_tail
ıı 
=
ıı 
pc
ıı 
;
ıı 
}
ˆˆ 
else
˜˜ 
{
¯¯ 
m_tail
˝˝ 

=
˝˝ 
m_tail
˝˝ 
.
˝˝ 
SetNext
˝˝ 
(
˝˝ 
pc
˝˝ 
)
˝˝ 
;
˝˝  
}
˛˛ 
}
ˇˇ 
private
ÖÖ 	
const
ÖÖ
 
char
ÖÖ 
ESCAPE_CHAR
ÖÖ  
=
ÖÖ! "
$char
ÖÖ# &
;
ÖÖ& '
private
éé 	
PatternConverter
éé
 
m_head
éé !
;
éé! "
private
ìì 	
PatternConverter
ìì
 
m_tail
ìì !
;
ìì! "
private
òò 	
string
òò
 
	m_pattern
òò 
;
òò 
private
¢¢ 	
	Hashtable
¢¢
 !
m_patternConverters
¢¢ '
=
¢¢( )
new
¢¢* -
	Hashtable
¢¢. 7
(
¢¢7 8
)
¢¢8 9
;
¢¢9 :
private
ØØ 
readonly
ØØ 
static
ØØ 
Type
ØØ !
declaringType
ØØ" /
=
ØØ0 1
typeof
ØØ2 8
(
ØØ8 9
PatternParser
ØØ9 F
)
ØØF G
;
ØØG H
}
≤≤ 
}≥≥ £e
=C:\sonarqube\projects\log4net-2.0.7\src\Util\PatternString.cs
	namespace 	
log4net
 
. 
Util 
{   
public
ÑÑ 
class
ÑÑ 
PatternString
ÑÑ 
:
ÑÑ 
IOptionHandler
ÑÑ ,
{
ÖÖ 
private
ãã 	
static
ãã
 
	Hashtable
ãã #
s_globalRulesRegistry
ãã 0
;
ãã0 1
private
îî 	
string
îî
 
	m_pattern
îî 
;
îî 
private
ôô 	
PatternConverter
ôô
 
m_head
ôô !
;
ôô! "
private
ûû 	
	Hashtable
ûû
 %
m_instanceRulesRegistry
ûû +
=
ûû, -
new
ûû. 1
	Hashtable
ûû2 ;
(
ûû; <
)
ûû< =
;
ûû= >
static
ßß 
PatternString
ßß	 
(
ßß 
)
ßß 
{
®® #
s_globalRulesRegistry
©© 
=
©© 
new
©© 
	Hashtable
©© (
(
©©( )
$num
©©) +
)
©©+ ,
;
©©, -#
s_globalRulesRegistry
´´ 
.
´´ 
Add
´´ 
(
´´ 
$str
´´ (
,
´´( )
typeof
´´* 0
(
´´0 1'
AppDomainPatternConverter
´´1 J
)
´´J K
)
´´K L
;
´´L M#
s_globalRulesRegistry
¨¨ 
.
¨¨ 
Add
¨¨ 
(
¨¨ 
$str
¨¨ #
,
¨¨# $
typeof
¨¨% +
(
¨¨+ ,"
DatePatternConverter
¨¨, @
)
¨¨@ A
)
¨¨A B
;
¨¨B C#
s_globalRulesRegistry
ÆÆ 
.
ÆÆ 
Add
ÆÆ 
(
ÆÆ 
$str
ÆÆ "
,
ÆÆ" #
typeof
ÆÆ$ *
(
ÆÆ* +)
EnvironmentPatternConverter
ÆÆ+ F
)
ÆÆF G
)
ÆÆG H
;
ÆÆH I#
s_globalRulesRegistry
∞∞ 
.
∞∞ 
Add
∞∞ 
(
∞∞ 
$str
∞∞ ,
,
∞∞, -
typeof
∞∞. 4
(
∞∞4 53
%EnvironmentFolderPathPatternConverter
∞∞5 Z
)
∞∞Z [
)
∞∞[ \
;
∞∞\ ]#
s_globalRulesRegistry
≥≥ 
.
≥≥ 
Add
≥≥ 
(
≥≥ 
$str
≥≥ '
,
≥≥' (
typeof
≥≥) /
(
≥≥/ 0&
IdentityPatternConverter
≥≥0 H
)
≥≥H I
)
≥≥I J
;
≥≥J K#
s_globalRulesRegistry
¥¥ 
.
¥¥ 
Add
¥¥ 
(
¥¥ 
$str
¥¥ &
,
¥¥& '
typeof
¥¥( .
(
¥¥. /%
LiteralPatternConverter
¥¥/ F
)
¥¥F G
)
¥¥G H
;
¥¥H I#
s_globalRulesRegistry
µµ 
.
µµ 
Add
µµ 
(
µµ 
$str
µµ &
,
µµ& '
typeof
µµ( .
(
µµ. /%
NewLinePatternConverter
µµ/ F
)
µµF G
)
µµG H
;
µµH I#
s_globalRulesRegistry
∂∂ 
.
∂∂ 
Add
∂∂ 
(
∂∂ 
$str
∂∂ (
,
∂∂( )
typeof
∂∂* 0
(
∂∂0 1'
ProcessIdPatternConverter
∂∂1 J
)
∂∂J K
)
∂∂K L
;
∂∂L M#
s_globalRulesRegistry
∑∑ 
.
∑∑ 
Add
∑∑ 
(
∑∑ 
$str
∑∑ '
,
∑∑' (
typeof
∑∑) /
(
∑∑/ 0&
PropertyPatternConverter
∑∑0 H
)
∑∑H I
)
∑∑I J
;
∑∑J K#
s_globalRulesRegistry
∏∏ 
.
∏∏ 
Add
∏∏ 
(
∏∏ 
$str
∏∏ %
,
∏∏% &
typeof
∏∏' -
(
∏∏- .*
RandomStringPatternConverter
∏∏. J
)
∏∏J K
)
∏∏K L
;
∏∏L M#
s_globalRulesRegistry
ππ 
.
ππ 
Add
ππ 
(
ππ 
$str
ππ '
,
ππ' (
typeof
ππ) /
(
ππ/ 0&
UserNamePatternConverter
ππ0 H
)
ππH I
)
ππI J
;
ππJ K#
s_globalRulesRegistry
ªª 
.
ªª 
Add
ªª 
(
ªª 
$str
ªª &
,
ªª& '
typeof
ªª( .
(
ªª. /%
UtcDatePatternConverter
ªª/ F
)
ªªF G
)
ªªG H
;
ªªH I#
s_globalRulesRegistry
ºº 
.
ºº 
Add
ºº 
(
ºº 
$str
ºº &
,
ºº& '
typeof
ºº( .
(
ºº. /%
UtcDatePatternConverter
ºº/ F
)
ººF G
)
ººG H
;
ººH I#
s_globalRulesRegistry
ΩΩ 
.
ΩΩ 
Add
ΩΩ 
(
ΩΩ 
$str
ΩΩ &
,
ΩΩ& '
typeof
ΩΩ( .
(
ΩΩ. /%
UtcDatePatternConverter
ΩΩ/ F
)
ΩΩF G
)
ΩΩG H
;
ΩΩH I#
s_globalRulesRegistry
¡¡ 
.
¡¡ 
Add
¡¡ 
(
¡¡ 
$str
¡¡ )
,
¡¡) *
typeof
¡¡+ 1
(
¡¡1 2(
AppSettingPatternConverter
¡¡2 L
)
¡¡L M
)
¡¡M N
;
¡¡N O#
s_globalRulesRegistry
¬¬ 
.
¬¬ 
Add
¬¬ 
(
¬¬ 
$str
¬¬ )
,
¬¬) *
typeof
¬¬+ 1
(
¬¬1 2(
AppSettingPatternConverter
¬¬2 L
)
¬¬L M
)
¬¬M N
;
¬¬N O#
s_globalRulesRegistry
√√ 
.
√√ 
Add
√√ 
(
√√ 
$str
√√ )
,
√√) *
typeof
√√+ 1
(
√√1 2(
AppSettingPatternConverter
√√2 L
)
√√L M
)
√√M N
;
√√N O
}
≈≈ 
public
”” 
PatternString
””	 
(
”” 
)
”” 
{
‘‘ 
}
’’ 
public
‡‡ 
PatternString
‡‡	 
(
‡‡ 
string
‡‡ 
pattern
‡‡ %
)
‡‡% &
{
·· 
	m_pattern
‚‚ 
=
‚‚ 
pattern
‚‚ 
;
‚‚ 
ActivateOptions
„„ 
(
„„ 
)
„„ 
;
„„ 
}
‰‰ 
public
ıı 
string
ıı	 
ConversionPattern
ıı !
{
ˆˆ 
get
˜˜ 
{
˜˜ 
return
˜˜	 
	m_pattern
˜˜ 
;
˜˜ 
}
˜˜ 
set
¯¯ 
{
¯¯ 
	m_pattern
¯¯	 
=
¯¯ 
value
¯¯ 
;
¯¯ 
}
¯¯ 
}
˘˘ 
virtual
çç 	
public
çç
 
void
çç 
ActivateOptions
çç %
(
çç% &
)
çç& '
{
éé 
m_head
èè 	
=
èè
 !
CreatePatternParser
èè 
(
èè  
	m_pattern
èè  )
)
èè) *
.
èè* +
Parse
èè+ 0
(
èè0 1
)
èè1 2
;
èè2 3
}
êê 
private
†† 	
PatternParser
††
 !
CreatePatternParser
†† +
(
††+ ,
string
††, 2
pattern
††3 :
)
††: ;
{
°° 
PatternParser
¢¢ 
patternParser
¢¢ 
=
¢¢  
new
¢¢! $
PatternParser
¢¢% 2
(
¢¢2 3
pattern
¢¢3 :
)
¢¢: ;
;
¢¢; <
foreach
•• 

(
••
 
DictionaryEntry
•• 
entry
••  
in
••! ##
s_globalRulesRegistry
••$ 9
)
••9 :
{
¶¶ 
ConverterInfo
ßß 
converterInfo
ßß +
=
ßß, -
new
ßß. 1
ConverterInfo
ßß2 ?
(
ßß? @
)
ßß@ A
;
ßßA B
converterInfo
®® 
.
®® 
Name
®® "
=
®®# $
(
®®% &
string
®®& ,
)
®®, -
entry
®®- 2
.
®®2 3
Key
®®3 6
;
®®6 7
converterInfo
©© 
.
©© 
Type
©© "
=
©©# $
(
©©% &
Type
©©& *
)
©©* +
entry
©©+ 0
.
©©0 1
Value
©©1 6
;
©©6 7
patternParser
™™ 
.
™™ 
PatternConverters
™™ /
.
™™/ 0
Add
™™0 3
(
™™3 4
entry
™™4 9
.
™™9 :
Key
™™: =
,
™™= >
converterInfo
™™? L
)
™™L M
;
™™M N
}
´´ 
foreach
≠≠ 

(
≠≠
 
DictionaryEntry
≠≠ 
entry
≠≠  
in
≠≠! #%
m_instanceRulesRegistry
≠≠$ ;
)
≠≠; <
{
ÆÆ 
patternParser
ØØ 
.
ØØ 
PatternConverters
ØØ #
[
ØØ# $
entry
ØØ$ )
.
ØØ) *
Key
ØØ* -
]
ØØ- .
=
ØØ/ 0
entry
ØØ1 6
.
ØØ6 7
Value
ØØ7 <
;
ØØ< =
}
∞∞ 
return
≤≤ 	
patternParser
≤≤
 
;
≤≤ 
}
≥≥ 
public
ææ 
void
ææ	 
Format
ææ 
(
ææ 

TextWriter
ææ 
writer
ææ  &
)
ææ& '
{
øø 
if
¿¿ 
(
¿¿ 
writer
¿¿ 
==
¿¿ 
null
¿¿ 
)
¿¿ 
{
¡¡ 
throw
¬¬ 	
new
¬¬
 #
ArgumentNullException
¬¬ #
(
¬¬# $
$str
¬¬$ ,
)
¬¬, -
;
¬¬- .
}
√√ 
PatternConverter
≈≈ 
c
≈≈ 
=
≈≈ 
m_head
≈≈ 
;
≈≈ 
while
»» 
(
»» 	
c
»»	 

!=
»» 
null
»» 
)
»» 
{
…… 
c
   
.
   
Format
   
(
   
writer
   
,
   
null
   
)
   
;
   
c
ÀÀ 
=
ÀÀ 
c
ÀÀ 	
.
ÀÀ	 

Next
ÀÀ
 
;
ÀÀ 
}
ÃÃ 
}
ÕÕ 
public
ÿÿ 
string
ÿÿ	 
Format
ÿÿ 
(
ÿÿ 
)
ÿÿ 
{
ŸŸ 
StringWriter
⁄⁄ 
writer
⁄⁄ 
=
⁄⁄ 
new
⁄⁄ 
StringWriter
⁄⁄ )
(
⁄⁄) *
System
⁄⁄* 0
.
⁄⁄0 1
Globalization
⁄⁄1 >
.
⁄⁄> ?
CultureInfo
⁄⁄? J
.
⁄⁄J K
InvariantCulture
⁄⁄K [
)
⁄⁄[ \
;
⁄⁄\ ]
Format
€€ 	
(
€€	 

writer
€€
 
)
€€ 
;
€€ 
return
‹‹ 	
writer
‹‹
 
.
‹‹ 
ToString
‹‹ 
(
‹‹ 
)
‹‹ 
;
‹‹ 
}
›› 
public
ÈÈ 
void
ÈÈ	 
AddConverter
ÈÈ 
(
ÈÈ 
ConverterInfo
ÈÈ (
converterInfo
ÈÈ) 6
)
ÈÈ6 7
{
ÍÍ 
if
ÎÎ 
(
ÎÎ 
converterInfo
ÎÎ 
==
ÎÎ  
null
ÎÎ! %
)
ÎÎ% &
throw
ÎÎ' ,
new
ÎÎ- 0#
ArgumentNullException
ÎÎ1 F
(
ÎÎF G
$str
ÎÎG V
)
ÎÎV W
;
ÎÎW X
if
ÌÌ 
(
ÌÌ 
!
ÌÌ 
typeof
ÌÌ 
(
ÌÌ 
PatternConverter
ÌÌ (
)
ÌÌ( )
.
ÌÌ) *
IsAssignableFrom
ÌÌ* :
(
ÌÌ: ;
converterInfo
ÌÌ; H
.
ÌÌH I
Type
ÌÌI M
)
ÌÌM N
)
ÌÌN O
{
ÓÓ 
throw
ÔÔ 
new
ÔÔ 
ArgumentException
ÔÔ +
(
ÔÔ+ ,
$str
ÔÔ, L
+
ÔÔM N
converterInfo
ÔÔO \
.
ÔÔ\ ]
Type
ÔÔ] a
+
ÔÔb c
$strÔÔd õ
,ÔÔõ ú
$strÔÔù ¨
)ÔÔ¨ ≠
;ÔÔ≠ Æ
}
 %
m_instanceRulesRegistry
ÒÒ #
[
ÒÒ# $
converterInfo
ÒÒ$ 1
.
ÒÒ1 2
Name
ÒÒ2 6
]
ÒÒ6 7
=
ÒÒ8 9
converterInfo
ÒÒ: G
;
ÒÒG H
}
ÚÚ 
public
˛˛ 
void
˛˛	 
AddConverter
˛˛ 
(
˛˛ 
string
˛˛ !
name
˛˛" &
,
˛˛& '
Type
˛˛( ,
type
˛˛- 1
)
˛˛1 2
{
ˇˇ 
if
ÄÄ 
(
ÄÄ 
name
ÄÄ 
==
ÄÄ 
null
ÄÄ 
)
ÄÄ 
throw
ÄÄ 
new
ÄÄ #
ArgumentNullException
ÄÄ 4
(
ÄÄ4 5
$str
ÄÄ5 ;
)
ÄÄ; <
;
ÄÄ< =
if
ÅÅ 
(
ÅÅ 
type
ÅÅ 
==
ÅÅ 
null
ÅÅ 
)
ÅÅ 
throw
ÅÅ 
new
ÅÅ #
ArgumentNullException
ÅÅ 4
(
ÅÅ4 5
$str
ÅÅ5 ;
)
ÅÅ; <
;
ÅÅ< =
ConverterInfo
ÉÉ 
converterInfo
ÉÉ '
=
ÉÉ( )
new
ÉÉ* -
ConverterInfo
ÉÉ. ;
(
ÉÉ; <
)
ÉÉ< =
;
ÉÉ= >
converterInfo
ÑÑ 
.
ÑÑ 
Name
ÑÑ 
=
ÑÑ  
name
ÑÑ! %
;
ÑÑ% &
converterInfo
ÖÖ 
.
ÖÖ 
Type
ÖÖ 
=
ÖÖ  
type
ÖÖ! %
;
ÖÖ% &
AddConverter
áá 
(
áá 
converterInfo
áá &
)
áá& '
;
áá' (
}
àà 
}
ââ 
}ää Ã
aC:\sonarqube\projects\log4net-2.0.7\src\Util\PatternStringConverters\AppDomainPatternConverter.cs
	namespace 	
log4net
 
. 
Util 
. #
PatternStringConverters .
{ 
internal%% 	
sealed%%
 
class%% %
AppDomainPatternConverter%% 0
:%%1 2
PatternConverter%%3 C
{&& 
override11 

	protected11 
void11 
Convert11 !
(11! "

TextWriter11" ,
writer11- 3
,113 4
object115 ;
state11< A
)11A B
{22 
writer33 	
.33	 

Write33
 
(33 

SystemInfo33 
.33 #
ApplicationFriendlyName33 3
)334 5
;335 6
}44 
}55 
}66 â
bC:\sonarqube\projects\log4net-2.0.7\src\Util\PatternStringConverters\AppSettingPatternConverter.cs
	namespace   	
log4net  
 
.   
Util   
.   #
PatternStringConverters   .
{!! 
internal<< 
sealed<< 
class<< &
AppSettingPatternConverter<< 4
:<<5 6
PatternConverter<<7 G
{== 
private>> 
static>> 
IDictionary>> "!
AppSettingsDictionary>># 8
{?? 	
get@@ 
{AA 
ifBB 
(BB !
_appSettingsHashTableBB )
==BB* ,
nullBB- 1
)BB1 2
{CC 
	HashtableDD 
hDD 
=DD  !
newDD" %
	HashtableDD& /
(DD/ 0
)DD0 1
;DD1 2
foreachEE 
(EE 
stringEE "
keyEE# &
inEE' )
SystemEE* 0
.EE0 1
ConfigurationEE1 >
.EE> ? 
ConfigurationManagerEE? S
.EES T
AppSettingsEET _
)EE_ `
{FF 
hGG 
.GG 
AddGG 
(GG 
keyGG !
,GG! "
SystemGG# )
.GG) *
ConfigurationGG* 7
.GG7 8 
ConfigurationManagerGG8 L
.GGL M
AppSettingsGGM X
[GGX Y
keyGGY \
]GG\ ]
)GG] ^
;GG^ _
}HH !
_appSettingsHashTableII )
=II* +
hII, -
;II- .
}JJ 
returnKK !
_appSettingsHashTableKK ,
;KK, -
}LL 
}NN 	
privateOO 
staticOO 
	HashtableOO  !
_appSettingsHashTableOO! 6
;OO6 7
overrideaa 
	protectedaa 
voidaa 
Convertaa  '
(aa' (

TextWriteraa( 2
writeraa3 9
,aa9 :
objectaa; A
stateaaB G
)aaG H
{bb 	
ifdd 
(dd 
Optiondd 
!=dd 
nulldd 
)dd 
{ee 
WriteObjectgg 
(gg 
writergg "
,gg" #
nullgg$ (
,gg( )
Systemgg* 0
.gg0 1
Configurationgg1 >
.gg> ? 
ConfigurationManagergg? S
.ggS T
AppSettingsggT _
[gg_ `
Optiongg` f
]ggf g
)ggg h
;ggh i
}hh 
elseii 
{jj 
WriteDictionaryll 
(ll  
writerll  &
,ll& '
nullll( ,
,ll, -!
AppSettingsDictionaryll. C
)llC D
;llD E
}mm 
}nn 	
}oo 
}pp í#
\C:\sonarqube\projects\log4net-2.0.7\src\Util\PatternStringConverters\DatePatternConverter.cs
	namespace 	
log4net
 
. 
Util 
. #
PatternStringConverters .
{ 
internalSS 	
classSS
  
DatePatternConverterSS $
:SS% &
PatternConverterSS' 7
,SS7 8
IOptionHandlerSS9 G
{TT 
	protected]] 
IDateFormatter]] 
m_dateFormatter]] *
;]]* +
publicqq 
voidqq	 
ActivateOptionsqq 
(qq 
)qq 
{rr 
stringss 	
dateFormatStrss
 
=ss 
Optionss  
;ss  !
ifuu 
(uu 
dateFormatStruu 
==uu 
nulluu 
)uu 
{vv 
dateFormatStrww 
=ww %
AbsoluteTimeDateFormatterww -
.ww- .!
Iso8601TimeDateFormatww. C
;wwC D
}xx 
ifzz 
(zz 

SystemInfozz 
.zz 
EqualsIgnoringCasezz $
(zz$ %
dateFormatStrzz% 2
,zz2 3%
AbsoluteTimeDateFormatterzz4 M
.zzM N!
Iso8601TimeDateFormatzzN c
)zzc d
)zzd e
{{{ 
m_dateFormatter|| 
=|| 
new||  
Iso8601DateFormatter|| .
(||. /
)||/ 0
;||0 1
}}} 
else~~ 
if~~ 

(~~ 

SystemInfo~~ 
.~~ 
EqualsIgnoringCase~~ )
(~~) *
dateFormatStr~~* 7
,~~7 8%
AbsoluteTimeDateFormatter~~9 R
.~~R S"
AbsoluteTimeDateFormat~~S i
)~~i j
)~~j k
{ 
m_dateFormatter
ÄÄ 
=
ÄÄ 
new
ÄÄ '
AbsoluteTimeDateFormatter
ÄÄ 3
(
ÄÄ3 4
)
ÄÄ4 5
;
ÄÄ5 6
}
ÅÅ 
else
ÇÇ 
if
ÇÇ 

(
ÇÇ 

SystemInfo
ÇÇ 
.
ÇÇ  
EqualsIgnoringCase
ÇÇ )
(
ÇÇ) *
dateFormatStr
ÇÇ* 7
,
ÇÇ7 8'
AbsoluteTimeDateFormatter
ÇÇ9 R
.
ÇÇR S#
DateAndTimeDateFormat
ÇÇS h
)
ÇÇh i
)
ÇÇi j
{
ÉÉ 
m_dateFormatter
ÑÑ 
=
ÑÑ 
new
ÑÑ #
DateTimeDateFormatter
ÑÑ /
(
ÑÑ/ 0
)
ÑÑ0 1
;
ÑÑ1 2
}
ÖÖ 
else
ÜÜ 
{
áá 
try
àà 
{
ââ 
m_dateFormatter
ää 
=
ää 
new
ää !
SimpleDateFormatter
ää .
(
ää. /
dateFormatStr
ää/ <
)
ää< =
;
ää= >
}
ãã 
catch
åå 	
(
åå
 
	Exception
åå 
e
åå 
)
åå 
{
çç 
LogLog
éé 
.
éé 
Error
éé 
(
éé 
declaringType
éé 
,
éé  
$str
éé! S
+
ééS T
dateFormatStr
ééT a
+
ééa b
$str
ééb e
,
éée f
e
éég h
)
ééh i
;
ééi j
m_dateFormatter
èè 
=
èè 
new
èè "
Iso8601DateFormatter
èè /
(
èè/ 0
)
èè0 1
;
èè1 2
}
êê 
}
ëë 
}
íí 
override
§§ 

	protected
§§ 
void
§§ 
Convert
§§ !
(
§§! "

TextWriter
§§" ,
writer
§§- 3
,
§§3 4
object
§§5 ;
state
§§< A
)
§§A B
{
•• 
try
¶¶ 
{
ßß 
m_dateFormatter
®® 
.
®® 

FormatDate
®® 
(
®® 
DateTime
®® '
.
®®' (
Now
®®( +
,
®®+ ,
writer
®®- 3
)
®®3 4
;
®®4 5
}
©© 
catch
™™ 
(
™™	 

	Exception
™™
 
ex
™™ 
)
™™ 
{
´´ 
LogLog
¨¨ 

.
¨¨
 
Error
¨¨ 
(
¨¨ 
declaringType
¨¨ 
,
¨¨ 
$str
¨¨  G
,
¨¨G H
ex
¨¨I K
)
¨¨K L
;
¨¨L M
}
≠≠ 
}
ÆÆ 
private
ππ 
readonly
ππ 
static
ππ 
Type
ππ !
declaringType
ππ" /
=
ππ0 1
typeof
ππ2 8
(
ππ8 9"
DatePatternConverter
ππ9 M
)
ππM N
;
ππN O
}
ºº 
}ΩΩ ø
mC:\sonarqube\projects\log4net-2.0.7\src\Util\PatternStringConverters\EnvironmentFolderPathPatternConverter.cs
	namespace 	
log4net
 
. 
Util 
. #
PatternStringConverters .
{ 
internal'' 
sealed'' 
class'' 1
%EnvironmentFolderPathPatternConverter'' ?
:''@ A
PatternConverter''B R
{(( 
override66 
	protected66 
void66 
Convert66  '
(66' (

TextWriter66( 2
writer663 9
,669 :
object66; A
state66B G
)66G H
{77 	
try88 
{99 
if:: 
(:: 
Option:: 
!=:: 
null:: "
&&::# %
Option::& ,
.::, -
Length::- 3
>::4 5
$num::6 7
)::7 8
{;; 
Environment<< 
.<<  
SpecialFolder<<  -
specialFolder<<. ;
=<<< =
(== 
Environment== $
.==$ %
SpecialFolder==% 2
)==2 3
Enum==3 7
.==7 8
Parse==8 =
(=== >
typeof==> D
(==D E
Environment==E P
.==P Q
SpecialFolder==Q ^
)==^ _
,==_ `
Option==a g
,==g h
true==i m
)==m n
;==n o
string?? 
envFolderPathValue?? -
=??. /
Environment??0 ;
.??; <
GetFolderPath??< I
(??I J
specialFolder??J W
)??W X
;??X Y
if@@ 
(@@ 
envFolderPathValue@@ *
!=@@+ -
null@@. 2
&&@@3 5
envFolderPathValue@@6 H
.@@H I
Length@@I O
>@@P Q
$num@@R S
)@@S T
{AA 
writerBB 
.BB 
WriteBB $
(BB$ %
envFolderPathValueBB% 7
)BB7 8
;BB8 9
}CC 
}DD 
}EE 
catchFF 
(FF 
SystemFF 
.FF 
SecurityFF "
.FF" #
SecurityExceptionFF# 4
secExFF5 :
)FF: ;
{GG 
LogLogKK 
.KK 
DebugKK 
(KK 
declaringTypeKK *
,KK* +
$str	KK, ã
,
KKã å
secEx
KKç í
)
KKí ì
;
KKì î
}LL 
catchMM 
(MM 
	ExceptionMM 
exMM 
)MM  
{NN 
LogLogOO 
.OO 
ErrorOO 
(OO 
declaringTypeOO *
,OO* +
$strOO, c
,OOc d
exOOe g
)OOg h
;OOh i
}PP 
}QQ 	
private\\ 
readonly\\ 
static\\ 
Type\\  $
declaringType\\% 2
=\\3 4
typeof\\5 ;
(\\; <1
%EnvironmentFolderPathPatternConverter\\< a
)\\a b
;\\b c
}__ 
}`` ”
cC:\sonarqube\projects\log4net-2.0.7\src\Util\PatternStringConverters\EnvironmentPatternConverter.cs
	namespace 	
log4net
 
. 
Util 
. #
PatternStringConverters .
{   
internal,, 	
sealed,,
 
class,, '
EnvironmentPatternConverter,, 2
:,,3 4
PatternConverter,,5 E
{-- 
override;; 

	protected;; 
void;; 
Convert;; !
(;;! "

TextWriter;;" ,
writer;;- 3
,;;3 4
object;;5 ;
state;;< A
);;A B
{<< 
try== 
{>> 
if?? 
(?? 
this?? 
.?? 
Option?? 
!=?? 
null?? 
&&?? 
this?? #
.??# $
Option??$ *
.??* +
Length??+ 1
>??2 3
$num??4 5
)??5 6
{@@ 
stringBB 
envValueBB 
=BB 
EnvironmentBB "
.BB" #"
GetEnvironmentVariableBB# 9
(BB9 :
thisBB: >
.BB> ?
OptionBB? E
)BBE F
;BBF G
ifFF 

(FF 
envValueFF 
==FF 
nullFF 
)FF 
{GG 	
envValueHH 
=HH 
EnvironmentHH "
.HH" #"
GetEnvironmentVariableHH# 9
(HH9 :
thisHH: >
.HH> ?
OptionHH? E
,HHE F%
EnvironmentVariableTargetHHG `
.HH` a
UserHHa e
)HHe f
;HHf g
}II 	
ifLL 

(LL 
envValueLL 
==LL 
nullLL 
)LL 
{MM 	
envValueNN 
=NN 
EnvironmentNN "
.NN" #"
GetEnvironmentVariableNN# 9
(NN9 :
thisNN: >
.NN> ?
OptionNN? E
,NNE F%
EnvironmentVariableTargetNNG `
.NN` a
MachineNNa h
)NNh i
;NNi j
}OO 	
ifRR 
(RR 	
envValueRR	 
!=RR 
nullRR 
&&RR 
envValueRR %
.RR% &
LengthRR& ,
>RR- .
$numRR/ 0
)RR0 1
{SS 
writerTT 
.TT 
WriteTT 
(TT 
envValueTT 
)TT 
;TT 
}UU 
}VV 
}WW 
catchXX 
(XX 	
SystemXX	 
.XX 
SecurityXX 
.XX 
SecurityExceptionXX *
secExXX+ 0
)XX0 1
{YY 
LogLog]] 

.]]
 
Debug]] 
(]] 
declaringType]] 
,]] 
$str]]  
,	]] Ä
secEx
]]Å Ü
)
]]Ü á
;
]]á à
}^^ 
catch__ 
(__	 

	Exception__
 
ex__ 
)__ 
{`` 
LogLogaa 

.aa
 
Erroraa 
(aa 
declaringTypeaa 
,aa 
$straa  W
,aaW X
exaaY [
)aa[ \
;aa\ ]
}bb 
}cc 
privatenn 
readonlynn 
staticnn 
Typenn !
declaringTypenn" /
=nn0 1
typeofnn2 8
(nn8 9'
EnvironmentPatternConverternn9 T
)nnT U
;nnU V
}qq 
}rr ∑
`C:\sonarqube\projects\log4net-2.0.7\src\Util\PatternStringConverters\IdentityPatternConverter.cs
	namespace 	
log4net
 
. 
Util 
. #
PatternStringConverters .
{ 
internal%% 	
sealed%%
 
class%% $
IdentityPatternConverter%% /
:%%0 1
PatternConverter%%2 B
{&& 
override11 

	protected11 
void11 
Convert11 !
(11! "

TextWriter11" ,
writer11- 3
,113 4
object115 ;
state11< A
)11A B
{22 
try77 
{88 
if99 
(99 
System99 
.99 
	Threading99 
.99 
Thread99 
.99  
CurrentPrincipal99  0
!=991 3
null994 8
&&999 ;
System:: 
.:: 
	Threading:: 
.:: 
Thread:: 
.:: 
CurrentPrincipal:: -
.::- .
Identity::. 6
!=::7 9
null::: >
&&::? A
System;; 
.;; 
	Threading;; 
.;; 
Thread;; 
.;; 
CurrentPrincipal;; -
.;;- .
Identity;;. 6
.;;6 7
Name;;7 ;
!=;;< >
null;;? C
);;C D
{<< 
writer== 
.== 
Write== 
(== 
System== 
.== 
	Threading== #
.==# $
Thread==$ *
.==* +
CurrentPrincipal==+ ;
.==; <
Identity==< D
.==D E
Name==E I
)==J K
;==K L
}>> 
}?? 
catch@@ 
(@@ 	
System@@	 
.@@ 
Security@@ 
.@@ 
SecurityException@@ *
)@@* +
{AA 
LogLogDD 

.DD
 
DebugDD 
(DD 
declaringTypeDD 
,DD 
$strDD  q
)DDq r
;DDr s
writerFF 

.FF
 
WriteFF 
(FF 

SystemInfoFF 
.FF 
NotAvailableTextFF -
)FF. /
;FF/ 0
}GG 
}II 
privateTT 
readonlyTT 
staticTT 
TypeTT !
declaringTypeTT" /
=TT0 1
typeofTT2 8
(TT8 9$
IdentityPatternConverterTT9 Q
)TTQ R
;TTR S
}WW 
}XX ™
_C:\sonarqube\projects\log4net-2.0.7\src\Util\PatternStringConverters\LiteralPatternConverter.cs
	namespace 	
log4net
 
. 
Util 
. #
PatternStringConverters .
{ 
internal'' 	
class''
 #
LiteralPatternConverter'' '
:''( )
PatternConverter''* :
{(( 
public99 
override99	 
PatternConverter99 "
SetNext99# *
(99* +
PatternConverter99+ ;
pc99< >
)99> ?
{:: #
LiteralPatternConverter;; 
	literalPc;; $
=;;% &
pc;;' )
as;;* ,#
LiteralPatternConverter;;- D
;;;D E
if<< 
(<< 
	literalPc<< 
!=<< 
null<< 
)<< 
{== 
Option?? 

=?? 
Option?? 
+?? 
	literalPc?? 
.??  
Option??  &
;??& '
returnBB 

thisBB 
;BB 
}CC 
returnEE 	
baseEE
 
.EE 
SetNextEE 
(EE 
pcEE 
)EE 
;EE 
}FF 
overrideWW 

publicWW 
voidWW 
FormatWW 
(WW 

TextWriterWW (
writerWW) /
,WW/ 0
objectWW1 7
stateWW8 =
)WW= >
{XX 
writerYY 	
.YY	 

WriteYY
 
(YY 
OptionYY 
)YY 
;YY 
}ZZ 
overrideff 

	protectedff 
voidff 
Convertff !
(ff! "

TextWriterff" ,
writerff- 3
,ff3 4
objectff5 ;
stateff< A
)ffA B
{gg 
throwhh 
newhh	 %
InvalidOperationExceptionhh &
(hh& '
$strhh' f
)hhf g
;hhg h
}ii 
}jj 
}kk ‹

_C:\sonarqube\projects\log4net-2.0.7\src\Util\PatternStringConverters\NewLinePatternConverter.cs
	namespace 	
log4net
 
. 
Util 
. #
PatternStringConverters .
{ 
internal00 	
sealed00
 
class00 #
NewLinePatternConverter00 .
:00/ 0#
LiteralPatternConverter001 H
,00H I
IOptionHandler00J X
{11 
publicDD 
voidDD	 
ActivateOptionsDD 
(DD 
)DD 
{EE 
ifFF 
(FF 

SystemInfoFF 
.FF 
EqualsIgnoringCaseFF $
(FF$ %
OptionFF% +
,FF+ ,
$strFF- 2
)FF2 3
)FF3 4
{GG 
OptionHH 

=HH 
$strHH 
;HH 
}II 
elseJJ 
ifJJ 

(JJ 

SystemInfoJJ 
.JJ 
EqualsIgnoringCaseJJ )
(JJ) *
OptionJJ* 0
,JJ0 1
$strJJ2 8
)JJ8 9
)JJ9 :
{KK 
OptionLL 

=LL 
$strLL 
;LL 
}MM 
elseNN 
{OO 
OptionPP 

=PP 

SystemInfoPP 
.PP 
NewLinePP 
;PP  
}QQ 
}RR 
}UU 
}VV ‚
aC:\sonarqube\projects\log4net-2.0.7\src\Util\PatternStringConverters\ProcessIdPatternConverter.cs
	namespace 	
log4net
 
. 
Util 
. #
PatternStringConverters .
{ 
internal%% 	
sealed%%
 
class%% %
ProcessIdPatternConverter%% 0
:%%1 2
PatternConverter%%3 C
{&& 
[22 	
System22	 
.22 
Security22 
.22  
SecuritySafeCritical22 -
]22- .
override44 
	protected44 
void44 
Convert44  '
(44' (

TextWriter44( 2
writer443 9
,449 :
object44; A
state44B G
)44G H
{55 
try:: 
{;; 
writer<< 

.<<
 
Write<< 
(<< 
System<< 
.<< 
Diagnostics<< $
.<<$ %
Process<<% ,
.<<, -
GetCurrentProcess<<- >
(<<> ?
)<<? @
.<<@ A
Id<<A C
)<<D E
;<<E F
}== 
catch>> 
(>> 	
System>>	 
.>> 
Security>> 
.>> 
SecurityException>> *
)>>* +
{?? 
LogLogBB 

.BB
 
DebugBB 
(BB 
declaringTypeBB 
,BB 
$strBB  k
)BBk l
;BBl m
writerDD 

.DD
 
WriteDD 
(DD 

SystemInfoDD 
.DD 
NotAvailableTextDD -
)DD. /
;DD/ 0
}EE 
}GG 
privateRR 
readonlyRR 
staticRR 
TypeRR !
declaringTypeRR" /
=RR0 1
typeofRR2 8
(RR8 9%
ProcessIdPatternConverterRR9 R
)RRR S
;RRS T
}UU 
}VV ç
`C:\sonarqube\projects\log4net-2.0.7\src\Util\PatternStringConverters\PropertyPatternConverter.cs
	namespace 	
log4net
 
. 
Util 
. #
PatternStringConverters .
{ 
internal11 	
sealed11
 
class11 $
PropertyPatternConverter11 /
:110 1
PatternConverter112 B
{22 
overrideCC 

	protectedCC 
voidCC 
ConvertCC !
(CC! "

TextWriterCC" ,
writerCC- 3
,CC3 4
objectCC5 ;
stateCC< A
)CCA B
{DD 
CompositePropertiesEE 
compositePropertiesEE *
=EE+ ,
newEE- 0
CompositePropertiesEE1 D
(EED E
)EEE F
;EEF G 
PropertiesDictionaryHH #
logicalThreadPropertiesHH /
=HH0 1 
LogicalThreadContextHH2 F
.HHF G

PropertiesHHG Q
.HHQ R
GetPropertiesHHR _
(HH_ `
falseHH` e
)HHe f
;HHf g
ifII 
(II #
logicalThreadPropertiesII 
!=II !
nullII" &
)II& '
{JJ 
compositePropertiesKK 
.KK 
AddKK 
(KK #
logicalThreadPropertiesKK 3
)KK3 4
;KK4 5
}LL  
PropertiesDictionaryNN 
threadPropertiesNN (
=NN) *
ThreadContextNN+ 8
.NN8 9

PropertiesNN9 C
.NNC D
GetPropertiesNND Q
(NNQ R
falseNNR W
)NNW X
;NNX Y
ifOO 
(OO 
threadPropertiesOO 
!=OO 
nullOO 
)OO  
{PP 
compositePropertiesQQ 
.QQ 
AddQQ 
(QQ 
threadPropertiesQQ ,
)QQ, -
;QQ- .
}RR 
compositePropertiesUU 
.UU 
AddUU 
(UU 
GlobalContextUU (
.UU( )

PropertiesUU) 3
.UU3 4!
GetReadOnlyPropertiesUU4 I
(UUI J
)UUJ K
)UUK L
;UUL M
ifWW 
(WW 
OptionWW 
!=WW 
nullWW 
)WW 
{XX 
WriteObjectZZ 
(ZZ 
writerZZ 
,ZZ 
nullZZ 
,ZZ 
compositePropertiesZZ 1
[ZZ1 2
OptionZZ2 8
]ZZ8 9
)ZZ9 :
;ZZ: ;
}[[ 
else\\ 
{]] 
WriteDictionary__ 
(__ 
writer__ 
,__ 
null__  
,__  !
compositeProperties__" 5
.__5 6
Flatten__6 =
(__= >
)__> ?
)__? @
;__@ A
}`` 
}aa 
}bb 
}cc Ö#
dC:\sonarqube\projects\log4net-2.0.7\src\Util\PatternStringConverters\RandomStringPatternConverter.cs
	namespace 	
log4net
 
. 
Util 
. #
PatternStringConverters .
{ 
internal00 	
sealed00
 
class00 (
RandomStringPatternConverter00 3
:004 5
PatternConverter006 F
,00F G
IOptionHandler00H V
{11 
private55 	
static55
 
readonly55 
Random55  
s_random55! )
=55* +
new55, /
Random550 6
(556 7
)557 8
;558 9
private:: 	
int::
 
m_length:: 
=:: 
$num:: 
;:: 
publicNN 
voidNN	 
ActivateOptionsNN 
(NN 
)NN 
{OO 
stringPP 	
	optionStrPP
 
=PP 
OptionPP 
;PP 
ifQQ 
(QQ 
	optionStrQQ 
!=QQ 
nullQQ 
&&QQ 
	optionStrQQ %
.QQ% &
LengthQQ& ,
>QQ- .
$numQQ/ 0
)QQ0 1
{RR 
intSS 
	lengthValSS 
;SS 
ifTT 
(TT 

SystemInfoTT 
.TT 
TryParseTT 
(TT 
	optionStrTT %
,TT% &
outTT' *
	lengthValTT+ 4
)TT4 5
)TT5 6
{UU 
m_lengthVV 
=VV 
	lengthValVV 
;VV 
}WW 
elseXX 
{YY 
LogLogZZ 
.ZZ 
ErrorZZ 
(ZZ 
declaringTypeZZ 
,ZZ  
$strZZ! [
+ZZ[ \
	optionStrZZ\ e
+ZZe f
$strZZf y
)ZZy z
;ZZz {
}[[ 
}\\ 
}]] 
overridekk 

	protectedkk 
voidkk 
Convertkk !
(kk! "

TextWriterkk" ,
writerkk- 3
,kk3 4
objectkk5 ;
statekk< A
)kkA B
{ll 
trymm 
{nn 
lockoo 
(oo 	
s_randomoo	 
)oo 
{pp 
forqq 
(qq 	
intqq	 
iqq 
=qq 
$numqq 
;qq 
iqq 
<qq 
m_lengthqq 
;qq 
iqq 
++qq !
)qq! "
{rr 
intss 	
	randValuess
 
=ss 
s_randomss 
.ss 
Nextss #
(ss# $
$numss$ &
)ss& '
;ss' (
ifuu 
(uu	 

	randValueuu
 
<uu 
$numuu 
)uu 
{vv 
charxx 
chxx 
=xx 
(xx 
charxx 
)xx 
(xx 
$charxx 
+xx 
	randValuexx '
)xx' (
;xx( )
writeryy 
.yy 
Writeyy 
(yy 
chyy 
)yy 
;yy 
}zz 
else{{ 

if{{ 
({{ 
	randValue{{ 
<{{ 
$num{{ 
){{ 
{|| 
char~~ 
ch~~ 
=~~ 
(~~ 
char~~ 
)~~ 
(~~ 
$char~~ 
+~~ 
(~~ 
	randValue~~ (
-~~) *
$num~~+ -
)~~- .
)~~. /
;~~/ 0
writer 
. 
Write 
( 
ch 
) 
; 
}
ÄÄ 
else
ÅÅ 

{
ÇÇ 
writer
ÑÑ 
.
ÑÑ 
Write
ÑÑ 
(
ÑÑ 
$char
ÑÑ 
)
ÑÑ 
;
ÑÑ 
}
ÖÖ 
}
ÜÜ 
}
áá 
}
àà 
catch
ââ 
(
ââ	 

	Exception
ââ
 
ex
ââ 
)
ââ 
{
ää 
LogLog
ãã 

.
ãã
 
Error
ãã 
(
ãã 
declaringType
ãã 
,
ãã 
$str
ãã  B
,
ããB C
ex
ããD F
)
ããF G
;
ããG H
}
åå 
}
çç 
private
òò 
readonly
òò 
static
òò 
Type
òò !
declaringType
òò" /
=
òò0 1
typeof
òò2 8
(
òò8 9*
RandomStringPatternConverter
òò9 U
)
òòU V
;
òòV W
}
õõ 
}úú ®
`C:\sonarqube\projects\log4net-2.0.7\src\Util\PatternStringConverters\UserNamePatternConverter.cs
	namespace 	
log4net
 
. 
Util 
. #
PatternStringConverters .
{ 
internal%% 	
sealed%%
 
class%% $
UserNamePatternConverter%% /
:%%0 1
PatternConverter%%2 B
{&& 
override11 

	protected11 
void11 
Convert11 !
(11! "

TextWriter11" ,
writer11- 3
,113 4
object115 ;
state11< A
)11A B
{22 
try77 
{88 
System99 

.99
 
Security99 
.99 
	Principal99 
.99 
WindowsIdentity99 -
windowsIdentity99. =
=99> ?
null99@ D
;99D E
windowsIdentity:: 
=:: 
System:: 
.:: 
Security:: %
.::% &
	Principal::& /
.::/ 0
WindowsIdentity::0 ?
.::? @

GetCurrent::@ J
(::J K
)::K L
;::L M
if;; 
(;; 
windowsIdentity;; 
!=;; 
null;; 
&&;;  "
windowsIdentity;;# 2
.;;2 3
Name;;3 7
!=;;8 :
null;;; ?
);;? @
{<< 
writer== 
.== 
Write== 
(== 
windowsIdentity== "
.==" #
Name==# '
)==( )
;==) *
}>> 
}?? 
catch@@ 
(@@ 	
System@@	 
.@@ 
Security@@ 
.@@ 
SecurityException@@ *
)@@* +
{AA 
LogLogDD 

.DD
 
DebugDD 
(DD 
declaringTypeDD 
,DD 
$strDD  q
)DDq r
;DDr s
writerFF 

.FF
 
WriteFF 
(FF 

SystemInfoFF 
.FF 
NotAvailableTextFF -
)FF. /
;FF/ 0
}GG 
}II 
privateTT 
readonlyTT 
staticTT 
TypeTT !
declaringTypeTT" /
=TT0 1
typeofTT2 8
(TT8 9$
UserNamePatternConverterTT9 Q
)TTQ R
;TTR S
}WW 
}XX ö
_C:\sonarqube\projects\log4net-2.0.7\src\Util\PatternStringConverters\UtcDatePatternConverter.cs
	namespace 	
log4net
 
. 
Util 
. #
PatternStringConverters .
{ 
internal,, 	
class,,
 #
UtcDatePatternConverter,, '
:,,( ) 
DatePatternConverter,,* >
{-- 
override== 

	protected== 
void== 
Convert== !
(==! "

TextWriter==" ,
writer==- 3
,==3 4
object==5 ;
state==< A
)==A B
{>> 
try?? 
{@@ 
m_dateFormatterAA 
.AA 

FormatDateAA 
(AA 
DateTimeAA '
.AA' (
UtcNowAA( .
,AA. /
writerAA0 6
)AA6 7
;AA7 8
}BB 
catchCC 
(CC	 

	ExceptionCC
 
exCC 
)CC 
{DD 
LogLogEE 

.EE
 
ErrorEE 
(EE 
declaringTypeEE 
,EE 
$strEE  G
,EEG H
exEEI K
)EEK L
;EEL M
}FF 
}GG 
privateRR 
readonlyRR 
staticRR 
TypeRR !
declaringTypeRR" /
=RR0 1
typeofRR2 8
(RR8 9#
UtcDatePatternConverterRR9 P
)RRP Q
;RRQ R
}UU 
}VV ä>
DC:\sonarqube\projects\log4net-2.0.7\src\Util\PropertiesDictionary.cs
	namespace 	
log4net
 
. 
Util 
{ 
[,, 
Serializable,, 
],, 
public,, 
sealed,, 
class,, # 
PropertiesDictionary,,$ 8
:,,9 :(
ReadOnlyPropertiesDictionary,,; W
,,,W X
ISerializable,,Y f
,,,f g
IDictionary,,h s
{.. 
public99  
PropertiesDictionary99	 
(99 
)99 
{:: 
};; 
publicFF  
PropertiesDictionaryFF	 
(FF (
ReadOnlyPropertiesDictionaryFF : 
propertiesDictionaryFF; O
)FFO P
:FFQ R
baseFFS W
(FFW X 
propertiesDictionaryFFX l
)FFl m
{GG 
}HH 
privateZZ 	 
PropertiesDictionaryZZ
 
(ZZ 
SerializationInfoZZ 0
infoZZ1 5
,ZZ5 6
StreamingContextZZ7 G
contextZZH O
)ZZO P
:ZZQ R
baseZZS W
(ZZW X
infoZZX \
,ZZ\ ]
contextZZ^ e
)ZZe f
{[[ 
}\\ 
overrideqq 

publicqq 
objectqq 
thisqq 
[qq 
stringqq $
keyqq% (
]qq( )
{rr 
getss 
{ss 
returnss	 
InnerHashtabless 
[ss 
keyss "
]ss" #
;ss# $
}ss% &
settt 
{tt 
InnerHashtablett	 
[tt 
keytt 
]tt 
=tt 
valuett $
;tt$ %
}tt& '
}uu 
public
ÑÑ 
void
ÑÑ	 
Remove
ÑÑ 
(
ÑÑ 
string
ÑÑ 
key
ÑÑ 
)
ÑÑ  
{
ÖÖ 
InnerHashtable
ÜÜ 
.
ÜÜ 
Remove
ÜÜ 
(
ÜÜ 
key
ÜÜ 
)
ÜÜ 
;
ÜÜ 
}
áá #
IDictionaryEnumerator
ññ 
IDictionary
ññ #
.
ññ# $
GetEnumerator
ññ$ 1
(
ññ1 2
)
ññ2 3
{
óó 
return
òò 	
InnerHashtable
òò
 
.
òò 
GetEnumerator
òò &
(
òò& '
)
òò' (
;
òò( )
}
ôô 
void
§§ 
IDictionary
§§ 
.
§§ 
Remove
§§ 
(
§§ 
object
§§  
key
§§! $
)
§§$ %
{
•• 
InnerHashtable
¶¶ 
.
¶¶ 
Remove
¶¶ 
(
¶¶ 
key
¶¶ 
)
¶¶ 
;
¶¶ 
}
ßß 
bool
≥≥ 
IDictionary
≥≥ 
.
≥≥ 
Contains
≥≥ 
(
≥≥ 
object
≥≥ "
key
≥≥# &
)
≥≥& '
{
¥¥ 
return
µµ 	
InnerHashtable
µµ
 
.
µµ 
Contains
µµ !
(
µµ! "
key
µµ" %
)
µµ% &
;
µµ& '
}
∂∂ 
public
¿¿ 
override
¿¿	 
void
¿¿ 
Clear
¿¿ 
(
¿¿ 
)
¿¿ 
{
¡¡ 
InnerHashtable
¬¬ 
.
¬¬ 
Clear
¬¬ 
(
¬¬ 
)
¬¬ 
;
¬¬ 
}
√√ 
void
–– 
IDictionary
–– 
.
–– 
Add
–– 
(
–– 
object
–– 
key
–– !
,
––! "
object
––# )
value
––* /
)
––/ 0
{
—— 
if
““ 
(
““ 
!
““ 
(
““ 	
key
““	 
is
““ 
string
““ 
)
““ 
)
““ 
{
”” 
throw
‘‘ 	
new
‘‘
 
ArgumentException
‘‘ 
(
‘‘  
$str
‘‘  6
,
‘‘6 7
$str
‘‘8 =
)
‘‘= >
;
‘‘> ?
}
’’ 
InnerHashtable
÷÷ 
.
÷÷ 
Add
÷÷ 
(
÷÷ 
key
÷÷ 
,
÷÷ 
value
÷÷  
)
÷÷  !
;
÷÷! "
}
◊◊ 
bool
ÂÂ 
IDictionary
ÂÂ 
.
ÂÂ 

IsReadOnly
ÂÂ 
{
ÊÊ 
get
ÁÁ 
{
ÁÁ 
return
ÁÁ	 
false
ÁÁ 
;
ÁÁ 
}
ÁÁ 
}
ËË 
object
ˆˆ 
IDictionary
ˆˆ	 
.
ˆˆ 
this
ˆˆ 
[
ˆˆ 
object
ˆˆ  
key
ˆˆ! $
]
ˆˆ$ %
{
˜˜ 
get
¯¯ 
{
˘˘ 
if
˙˙ 
(
˙˙ 
!
˙˙ 	
(
˙˙	 

key
˙˙
 
is
˙˙ 
string
˙˙ 
)
˙˙ 
)
˙˙ 
{
˚˚ 
throw
¸¸ 

new
¸¸ 
ArgumentException
¸¸  
(
¸¸  !
$str
¸¸! 7
,
¸¸7 8
$str
¸¸9 >
)
¸¸> ?
;
¸¸? @
}
˝˝ 
return
˛˛ 

InnerHashtable
˛˛ 
[
˛˛ 
key
˛˛ 
]
˛˛ 
;
˛˛ 
}
ˇˇ 
set
ÄÄ 
{
ÅÅ 
if
ÇÇ 
(
ÇÇ 
!
ÇÇ 	
(
ÇÇ	 

key
ÇÇ
 
is
ÇÇ 
string
ÇÇ 
)
ÇÇ 
)
ÇÇ 
{
ÉÉ 
throw
ÑÑ 

new
ÑÑ 
ArgumentException
ÑÑ  
(
ÑÑ  !
$str
ÑÑ! 7
,
ÑÑ7 8
$str
ÑÑ9 >
)
ÑÑ> ?
;
ÑÑ? @
}
ÖÖ 
InnerHashtable
ÜÜ 
[
ÜÜ 
key
ÜÜ 
]
ÜÜ 
=
ÜÜ 
value
ÜÜ 
;
ÜÜ  
}
áá 
}
àà 
ICollection
çç 
IDictionary
çç 
.
çç 
Values
çç  
{
éé 
get
èè 
{
èè 
return
èè	 
InnerHashtable
èè 
.
èè 
Values
èè %
;
èè% &
}
èè' (
}
êê 
ICollection
ïï 
IDictionary
ïï 
.
ïï 
Keys
ïï 
{
ññ 
get
óó 
{
óó 
return
óó	 
InnerHashtable
óó 
.
óó 
Keys
óó #
;
óó# $
}
óó% &
}
òò 
bool
ùù 
IDictionary
ùù 
.
ùù 
IsFixedSize
ùù 
{
ûû 
get
üü 
{
üü 
return
üü	 
false
üü 
;
üü 
}
üü 
}
†† 
void
´´ 
ICollection
´´ 
.
´´ 
CopyTo
´´ 
(
´´ 
Array
´´ 
array
´´  %
,
´´% &
int
´´' *
index
´´+ 0
)
´´0 1
{
¨¨ 
InnerHashtable
≠≠ 
.
≠≠ 
CopyTo
≠≠ 
(
≠≠ 
array
≠≠ 
,
≠≠ 
index
≠≠  %
)
≠≠% &
;
≠≠& '
}
ÆÆ 
bool
≥≥ 
ICollection
≥≥ 
.
≥≥ 
IsSynchronized
≥≥ !
{
¥¥ 
get
µµ 
{
µµ 
return
µµ	 
InnerHashtable
µµ 
.
µµ 
IsSynchronized
µµ -
;
µµ- .
}
µµ/ 0
}
∂∂ 
object
ªª 
ICollection
ªª	 
.
ªª 
SyncRoot
ªª 
{
ºº 
get
ΩΩ 
{
ΩΩ 
return
ΩΩ	 
InnerHashtable
ΩΩ 
.
ΩΩ 
SyncRoot
ΩΩ '
;
ΩΩ' (
}
ΩΩ) *
}
ææ 
IEnumerator
«« 
IEnumerable
«« 
.
«« 
GetEnumerator
«« '
(
««' (
)
««( )
{
»» 
return
…… 	
(
……
 
(
…… 
IEnumerable
…… 
)
…… 
InnerHashtable
…… &
)
……& '
.
……' (
GetEnumerator
……( 5
(
……5 6
)
……6 7
;
……7 8
}
   
}
ÕÕ 
}ŒŒ è
=C:\sonarqube\projects\log4net-2.0.7\src\Util\PropertyEntry.cs
	namespace 	
log4net
 
. 
Util 
{ 
public   

class   
PropertyEntry   
{!! 
private"" 
string"" 
m_key"" 
="" 
null"" #
;""# $
private## 
object## 
m_value## 
=##  
null##! %
;##% &
public00 
string00 
Key00 
{11 	
get22 
{22 
return22 
m_key22 
;22 
}22  !
set33 
{33 
m_key33 
=33 
value33 
;33  
}33! "
}44 	
publicAA 
objectAA 
ValueAA 
{BB 	
getCC 
{CC 
returnCC 
m_valueCC  
;CC  !
}CC" #
setDD 
{DD 
m_valueDD 
=DD 
valueDD !
;DD! "
}DD# $
}EE 	
publicKK 
overrideKK 
stringKK 
ToStringKK '
(KK' (
)KK( )
{LL 	
returnMM 
$strMM '
+MM( )
m_keyMM* /
+MM0 1
$strMM2 <
+MM= >
m_valueMM? F
+MMG H
$strMMI L
;MML M
}NN 	
}OO 
}PP À
FC:\sonarqube\projects\log4net-2.0.7\src\Util\ProtectCloseTextWriter.cs
	namespace 	
log4net
 
. 
Util 
{ 
public&& 
class&& "
ProtectCloseTextWriter&& $
:&&% &
TextWriterAdapter&&' 8
{'' 
public33 "
ProtectCloseTextWriter33	 
(33  

TextWriter33  *
writer33+ 1
)331 2
:333 4
base335 9
(339 :
writer33: @
)33@ A
{44 
}55 
publicDD 
voidDD	 
AttachDD 
(DD 

TextWriterDD 
writerDD  &
)DD& '
{EE 
thisFF 
.FF 
WriterFF 
=FF 
writerFF 
;FF 
}GG 
overrideVV 

publicVV 
voidVV 
CloseVV 
(VV 
)VV 
{WW 
}YY 
}\\ 
}]] ¡&
?C:\sonarqube\projects\log4net-2.0.7\src\Util\QuietTextWriter.cs
	namespace 	
log4net
 
. 
Util 
{ 
public&& 
class&& 
QuietTextWriter&& 
:&& 
TextWriterAdapter&&  1
{'' 
public44 
QuietTextWriter44	 
(44 

TextWriter44 #
writer44$ *
,44* +
IErrorHandler44, 9
errorHandler44: F
)44F G
:44H I
base44J N
(44N O
writer44O U
)44U V
{55 
if66 
(66 
errorHandler66 
==66 
null66 
)66 
{77 
throw88 	
new88
 !
ArgumentNullException88 #
(88# $
$str88$ 2
)882 3
;883 4
}99 
ErrorHandler:: 
=:: 
errorHandler:: 
;:: 
};; 
publicLL 
IErrorHandlerLL	 
ErrorHandlerLL #
{MM 
getNN 
{NN 
returnNN	 
m_errorHandlerNN 
;NN 
}NN  !
setOO 
{PP 
ifQQ 
(QQ 
valueQQ 
==QQ 
nullQQ 
)QQ 
{RR 
throwTT 

newTT !
ArgumentNullExceptionTT $
(TT$ %
$strTT% ,
)TT, -
;TT- .
}UU 
m_errorHandlerVV 
=VV 
valueVV 
;VV 
}WW 
}XX 
publicee 
boolee	 
Closedee 
{ff 
getgg 
{gg 
returngg	 
m_closedgg 
;gg 
}gg 
}hh 
publicww 
overrideww	 
voidww 
Writeww 
(ww 
charww !
valueww" '
)ww' (
{xx 
tryyy 
{zz 
base{{ 
.{{ 	
Write{{	 
({{ 
value{{ 
){{ 
;{{ 
}|| 
catch}} 
(}} 	
	Exception}}	 
e}} 
)}} 
{~~ 
m_errorHandler 
. 
Error 
( 
$str ,
+- .
value/ 4
+5 6
$str7 ;
,; <
e= >
,> ?
	ErrorCode@ I
.I J
WriteFailureJ V
)V W
;W X
}
ÄÄ 
}
ÅÅ 
public
éé 
override
éé	 
void
éé 
Write
éé 
(
éé 
char
éé !
[
éé! "
]
éé" #
buffer
éé$ *
,
éé* +
int
éé, /
index
éé0 5
,
éé5 6
int
éé7 :
count
éé; @
)
éé@ A
{
èè 
try
êê 
{
ëë 
base
íí 
.
íí 	
Write
íí	 
(
íí 
buffer
íí 
,
íí 
index
íí 
,
íí 
count
íí #
)
íí# $
;
íí$ %
}
ìì 
catch
îî 
(
îî 	
	Exception
îî	 
e
îî 
)
îî 
{
ïï 
m_errorHandler
ññ 
.
ññ 
Error
ññ 
(
ññ 
$str
ññ 2
,
ññ2 3
e
ññ4 5
,
ññ5 6
	ErrorCode
ññ7 @
.
ññ@ A
WriteFailure
ññA M
)
ññM N
;
ññN O
}
óó 
}
òò 
override
££ 

public
££ 
void
££ 
Write
££ 
(
££ 
string
££ #
value
££$ )
)
££) *
{
§§ 
try
•• 
{
¶¶ 
base
ßß 
.
ßß 	
Write
ßß	 
(
ßß 
value
ßß 
)
ßß 
;
ßß 
}
®® 
catch
©© 
(
©© 	
	Exception
©©	 
e
©© 
)
©© 
{
™™ 
m_errorHandler
´´ 
.
´´ 
Error
´´ 
(
´´ 
$str
´´ ,
+
´´- .
value
´´/ 4
+
´´5 6
$str
´´7 ;
,
´´; <
e
´´= >
,
´´> ?
	ErrorCode
´´@ I
.
´´I J
WriteFailure
´´J V
)
´´V W
;
´´W X
}
¨¨ 
}
≠≠ 
override
∑∑ 

public
∑∑ 
void
∑∑ 
Close
∑∑ 
(
∑∑ 
)
∑∑ 
{
∏∏ 
m_closed
ππ 
=
ππ 
true
ππ 
;
ππ 
base
∫∫ 
.
∫∫ 
Close
∫∫ 
(
∫∫ 
)
∫∫ 
;
∫∫ 
}
ªª 
private
ƒƒ 	
IErrorHandler
ƒƒ
 
m_errorHandler
ƒƒ &
;
ƒƒ& '
private
…… 	
bool
……
 
m_closed
…… 
=
…… 
false
…… 
;
……  
}
ÃÃ 
}ÕÕ √
@C:\sonarqube\projects\log4net-2.0.7\src\Util\ReaderWriterLock.cs
	namespace 	
log4net
 
. 
Util 
{ 
public22 
sealed22 
class22 
ReaderWriterLock22 %
{33 
public>> 
ReaderWriterLock>>	 
(>> 
)>> 
{?? 
m_lockCC 	
=CC
 
newCC 
SystemCC 
.CC 
	ThreadingCC  
.CC  ! 
ReaderWriterLockSlimCC! 5
(CC5 6
)CC6 7
;CC7 8
}HH 
publicWW 
voidWW	 
AcquireReaderLockWW 
(WW  
)WW  !
{XX 
try\\ 
{\\ 
}\\ 
finally]] 
{^^ 
m_lock__ 	
.__	 

EnterReadLock__
 
(__ 
)__ 
;__ 
}`` 
}gg 
publicrr 
voidrr	 
ReleaseReaderLockrr 
(rr  
)rr  !
{ss 
m_lockvv 	
.vv	 

ExitReadLockvv
 
(vv 
)vv 
;vv 
}~~ 
public
àà 
void
àà	 
AcquireWriterLock
àà 
(
àà  
)
àà  !
{
ââ 
try
çç 
{
çç 
}
çç 
finally
éé 
{
èè 
m_lock
êê 	
.
êê	 

EnterWriteLock
êê
 
(
êê 
)
êê 
;
êê 
}
ëë 
}
òò 
public
££ 
void
££	 
ReleaseWriterLock
££ 
(
££  
)
££  !
{
§§ 
m_lock
ßß 	
.
ßß	 

ExitWriteLock
ßß
 
(
ßß 
)
ßß 
;
ßß 
}
ÆÆ 
private
∂∂ 	
System
∂∂
 
.
∂∂ 
	Threading
∂∂ 
.
∂∂ "
ReaderWriterLockSlim
∂∂ /
m_lock
∂∂0 6
;
∂∂6 7
}
ææ 
}øø ÛV
LC:\sonarqube\projects\log4net-2.0.7\src\Util\ReadOnlyPropertiesDictionary.cs
	namespace 	
log4net
 
. 
Util 
{ 
[00 
Serializable00 
]00 
public00 
class00 (
ReadOnlyPropertiesDictionary00 9
:00: ;
ISerializable00< I
,00I J
IDictionary00K V
{22 
private88 	
readonly88
 
	Hashtable88 
m_hashtable88 (
=88) *
new88+ .
	Hashtable88/ 8
(888 9
)889 :
;88: ;
publicFF (
ReadOnlyPropertiesDictionaryFF	 %
(FF% &
)FF& '
{GG 
}HH 
publicSS (
ReadOnlyPropertiesDictionarySS	 %
(SS% &(
ReadOnlyPropertiesDictionarySS& B 
propertiesDictionarySSC W
)SSW X
{TT 
foreachUU 

(UU
 
DictionaryEntryUU 
entryUU  
inUU! # 
propertiesDictionaryUU$ 8
)UU8 9
{VV 
InnerHashtableWW 
.WW 
AddWW 
(WW 
entryWW 
.WW 
KeyWW  
,WW  !
entryWW" '
.WW' (
ValueWW( -
)WW- .
;WW. /
}XX 
}YY 
	protectedkk (
ReadOnlyPropertiesDictionarykk (
(kk( )
SerializationInfokk) :
infokk; ?
,kk? @
StreamingContextkkA Q
contextkkR Y
)kkY Z
{ll 
foreachmm 

(mm
 
SerializationEntrymm 
entrymm #
inmm$ &
infomm' +
)mm+ ,
{nn 
InnerHashtablepp 
[pp 

XmlConvertpp 
.pp 

DecodeNamepp (
(pp( )
entrypp) .
.pp. /
Namepp/ 3
)pp3 4
]pp4 5
=pp6 7
entrypp8 =
.pp= >
Valuepp> C
;ppC D
}qq 
}rr 
public
ÇÇ 
string
ÇÇ	 
[
ÇÇ 
]
ÇÇ 
GetKeys
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
string
ÑÑ 	
[
ÑÑ	 

]
ÑÑ
 
keys
ÑÑ 
=
ÑÑ 
new
ÑÑ 
String
ÑÑ 
[
ÑÑ 
InnerHashtable
ÑÑ ,
.
ÑÑ, -
Count
ÑÑ- 2
]
ÑÑ2 3
;
ÑÑ3 4
InnerHashtable
ÖÖ 
.
ÖÖ 
Keys
ÖÖ 
.
ÖÖ 
CopyTo
ÖÖ 
(
ÖÖ 
keys
ÖÖ "
,
ÖÖ" #
$num
ÖÖ$ %
)
ÖÖ% &
;
ÖÖ& '
return
ÜÜ 	
keys
ÜÜ
 
;
ÜÜ 
}
áá 
public
óó 
virtual
óó	 
object
óó 
this
óó 
[
óó 
string
óó #
key
óó$ '
]
óó' (
{
òò 
get
ôô 
{
ôô 
return
ôô	 
InnerHashtable
ôô 
[
ôô 
key
ôô "
]
ôô" #
;
ôô# $
}
ôô% &
set
öö 
{
öö 
throw
öö	 
new
öö #
NotSupportedException
öö (
(
öö( )
$str
öö) a
)
ööa b
;
ööb c
}
ööd e
}
õõ 
public
´´ 
bool
´´	 
Contains
´´ 
(
´´ 
string
´´ 
key
´´ !
)
´´! "
{
¨¨ 
return
≠≠ 	
InnerHashtable
≠≠
 
.
≠≠ 
Contains
≠≠ !
(
≠≠! "
key
≠≠" %
)
≠≠% &
;
≠≠& '
}
ÆÆ 
	protected
ΩΩ 
	Hashtable
ΩΩ 
InnerHashtable
ΩΩ $
{
ææ 
get
øø 
{
øø 
return
øø	 
m_hashtable
øø 
;
øø 
}
øø 
}
¿¿ 
[
–– 	
System
––	 
.
–– 
Security
–– 
.
–– 
SecurityCritical
–– )
]
––) *
public
‘‘ 
virtual
‘‘ 
void
‘‘ 
GetObjectData
‘‘ )
(
‘‘) *
SerializationInfo
‘‘* ;
info
‘‘< @
,
‘‘@ A
StreamingContext
‘‘B R
context
‘‘S Z
)
‘‘Z [
{
’’ 
foreach
÷÷ 

(
÷÷
 
DictionaryEntry
÷÷ 
entry
÷÷  
in
÷÷! #
InnerHashtable
÷÷$ 2
.
÷÷2 3
Clone
÷÷3 8
(
÷÷8 9
)
÷÷9 :
as
÷÷; =
IDictionary
÷÷> I
)
÷÷I J
{
◊◊ 
string
ÿÿ 

entryKey
ÿÿ 
=
ÿÿ 
entry
ÿÿ 
.
ÿÿ 
Key
ÿÿ 
as
ÿÿ  "
string
ÿÿ# )
;
ÿÿ) *
object
ŸŸ 


entryValue
ŸŸ 
=
ŸŸ 
entry
ŸŸ 
.
ŸŸ 
Value
ŸŸ #
;
ŸŸ# $
bool
ﬂﬂ 
isSerializable
ﬂﬂ #
=
ﬂﬂ$ %

entryValue
ﬂﬂ& 0
.
ﬂﬂ0 1
GetType
ﬂﬂ1 8
(
ﬂﬂ8 9
)
ﬂﬂ9 :
.
ﬂﬂ: ;
IsSerializable
ﬂﬂ; I
;
ﬂﬂI J
if
·· 
(
·· 
entryKey
·· 
!=
·· 
null
·· 
&&
·· 

entryValue
·· &
!=
··' )
null
··* .
&&
··/ 1
isSerializable
··2 @
)
··@ A
{
‚‚ 
info
ÁÁ 	
.
ÁÁ	 

AddValue
ÁÁ
 
(
ÁÁ 

XmlConvert
ÁÁ 
.
ÁÁ 
EncodeLocalName
ÁÁ -
(
ÁÁ- .
entryKey
ÁÁ. 6
)
ÁÁ6 7
,
ÁÁ7 8

entryValue
ÁÁ9 C
)
ÁÁC D
;
ÁÁD E
}
ËË 
}
ÈÈ 
}
ÍÍ #
IDictionaryEnumerator
ÙÙ 
IDictionary
ÙÙ #
.
ÙÙ# $
GetEnumerator
ÙÙ$ 1
(
ÙÙ1 2
)
ÙÙ2 3
{
ıı 
return
ˆˆ 	
InnerHashtable
ˆˆ
 
.
ˆˆ 
GetEnumerator
ˆˆ &
(
ˆˆ& '
)
ˆˆ' (
;
ˆˆ( )
}
˜˜ 
void
˝˝ 
IDictionary
˝˝ 
.
˝˝ 
Remove
˝˝ 
(
˝˝ 
object
˝˝  
key
˝˝! $
)
˝˝$ %
{
˛˛ 
throw
ˇˇ 
new
ˇˇ	 #
NotSupportedException
ˇˇ "
(
ˇˇ" #
$str
ˇˇ# [
)
ˇˇ[ \
;
ˇˇ\ ]
}
ÄÄ 
bool
áá 
IDictionary
áá 
.
áá 
Contains
áá 
(
áá 
object
áá "
key
áá# &
)
áá& '
{
àà 
return
ââ 	
InnerHashtable
ââ
 
.
ââ 
Contains
ââ !
(
ââ! "
key
ââ" %
)
ââ% &
;
ââ& '
}
ää 
public
èè 
virtual
èè	 
void
èè 
Clear
èè 
(
èè 
)
èè 
{
êê 
throw
ëë 
new
ëë	 #
NotSupportedException
ëë "
(
ëë" #
$str
ëë# [
)
ëë[ \
;
ëë\ ]
}
íí 
void
ôô 
IDictionary
ôô 
.
ôô 
Add
ôô 
(
ôô 
object
ôô 
key
ôô !
,
ôô! "
object
ôô# )
value
ôô* /
)
ôô/ 0
{
öö 
throw
õõ 
new
õõ	 #
NotSupportedException
õõ "
(
õõ" #
$str
õõ# [
)
õõ[ \
;
õõ\ ]
}
úú 
bool
°° 
IDictionary
°° 
.
°° 

IsReadOnly
°° 
{
¢¢ 
get
££ 
{
££ 
return
££	 
true
££ 
;
££ 
}
££ 
}
§§ 
object
©© 
IDictionary
©©	 
.
©© 
this
©© 
[
©© 
object
©©  
key
©©! $
]
©©$ %
{
™™ 
get
´´ 
{
¨¨ 
if
≠≠ 
(
≠≠ 
!
≠≠ 	
(
≠≠	 

key
≠≠
 
is
≠≠ 
string
≠≠ 
)
≠≠ 
)
≠≠ 
throw
≠≠ 
new
≠≠  #
ArgumentException
≠≠$ 5
(
≠≠5 6
$str
≠≠6 L
)
≠≠L M
;
≠≠M N
return
ÆÆ 

InnerHashtable
ÆÆ 
[
ÆÆ 
key
ÆÆ 
]
ÆÆ 
;
ÆÆ 
}
ØØ 
set
∞∞ 
{
±± 
throw
≤≤ 	
new
≤≤
 #
NotSupportedException
≤≤ #
(
≤≤# $
$str
≤≤$ \
)
≤≤\ ]
;
≤≤] ^
}
≥≥ 
}
¥¥ 
ICollection
ππ 
IDictionary
ππ 
.
ππ 
Values
ππ  
{
∫∫ 
get
ªª 
{
ªª 
return
ªª	 
InnerHashtable
ªª 
.
ªª 
Values
ªª %
;
ªª% &
}
ªª' (
}
ºº 
ICollection
¡¡ 
IDictionary
¡¡ 
.
¡¡ 
Keys
¡¡ 
{
¬¬ 
get
√√ 
{
√√ 
return
√√	 
InnerHashtable
√√ 
.
√√ 
Keys
√√ #
;
√√# $
}
√√% &
}
ƒƒ 
bool
…… 
IDictionary
…… 
.
…… 
IsFixedSize
…… 
{
   
get
ÀÀ 
{
ÀÀ 
return
ÀÀ	 
InnerHashtable
ÀÀ 
.
ÀÀ 
IsFixedSize
ÀÀ *
;
ÀÀ* +
}
ÀÀ, -
}
ÃÃ 
void
◊◊ 
ICollection
◊◊ 
.
◊◊ 
CopyTo
◊◊ 
(
◊◊ 
Array
◊◊ 
array
◊◊  %
,
◊◊% &
int
◊◊' *
index
◊◊+ 0
)
◊◊0 1
{
ÿÿ 
InnerHashtable
ŸŸ 
.
ŸŸ 
CopyTo
ŸŸ 
(
ŸŸ 
array
ŸŸ 
,
ŸŸ 
index
ŸŸ  %
)
ŸŸ% &
;
ŸŸ& '
}
⁄⁄ 
bool
ﬂﬂ 
ICollection
ﬂﬂ 
.
ﬂﬂ 
IsSynchronized
ﬂﬂ !
{
‡‡ 
get
·· 
{
·· 
return
··	 
InnerHashtable
·· 
.
·· 
IsSynchronized
·· -
;
··- .
}
··/ 0
}
‚‚ 
public
ÁÁ 
int
ÁÁ	 
Count
ÁÁ 
{
ËË 
get
ÈÈ 
{
ÈÈ 
return
ÈÈ	 
InnerHashtable
ÈÈ 
.
ÈÈ 
Count
ÈÈ $
;
ÈÈ$ %
}
ÈÈ& '
}
ÍÍ 
object
ÔÔ 
ICollection
ÔÔ	 
.
ÔÔ 
SyncRoot
ÔÔ 
{
 
get
ÒÒ 
{
ÒÒ 
return
ÒÒ	 
InnerHashtable
ÒÒ 
.
ÒÒ 
SyncRoot
ÒÒ '
;
ÒÒ' (
}
ÒÒ) *
}
ÚÚ 
IEnumerator
˚˚ 
IEnumerable
˚˚ 
.
˚˚ 
GetEnumerator
˚˚ '
(
˚˚' (
)
˚˚( )
{
¸¸ 
return
˝˝ 	
(
˝˝
 
(
˝˝ 
IEnumerable
˝˝ 
)
˝˝ 
InnerHashtable
˝˝ &
)
˝˝& '
.
˝˝' (
GetEnumerator
˝˝( 5
(
˝˝5 6
)
˝˝6 7
;
˝˝7 8
}
˛˛ 
}
ÅÅ 
}ÇÇ 
DC:\sonarqube\projects\log4net-2.0.7\src\Util\ReusableStringWriter.cs
	namespace 	
log4net
 
. 
Util 
{ 
public$$ 
class$$  
ReusableStringWriter$$ "
:$$# $
StringWriter$$% 1
{%% 
public11  
ReusableStringWriter11	 
(11 
IFormatProvider11 -
formatProvider11. <
)11< =
:11> ?
base11@ D
(11D E
formatProvider11E S
)11S T
{22 
}33 
	protected@@ 
override@@ 
void@@ 
Dispose@@ !
(@@! "
bool@@" &
	disposing@@' 0
)@@0 1
{AA 
}CC 
publicPP 
voidPP	 
ResetPP 
(PP 
intPP 
maxCapacityPP #
,PP# $
intPP% (
defaultSizePP) 4
)PP4 5
{QQ 
StringBuilderSS 
sbSS 
=SS 
thisSS 
.SS 
GetStringBuilderSS +
(SS+ ,
)SS, -
;SS- .
sbUU 
.UU 
LengthUU 
=UU 
$numUU 
;UU 
ifXX 
(XX 
sbXX 	
.XX	 

CapacityXX
 
>XX 
maxCapacityXX  
)XX  !
{YY 
sbZZ 
.ZZ 
CapacityZZ 
=ZZ 
defaultSizeZZ 
;ZZ 
}[[ 
}\\ 
}]] 
}^^ ®˙
:C:\sonarqube\projects\log4net-2.0.7\src\Util\SystemInfo.cs
	namespace   	
log4net  
 
.   
Util   
{!! 
public-- 
sealed-- 
class-- 

SystemInfo-- 
{.. 
private11 	
const11
 
string11 
DEFAULT_NULL_TEXT11 (
=11) *
$str11+ 3
;113 4
private22 	
const22
 
string22 &
DEFAULT_NOT_AVAILABLE_TEXT22 1
=222 3
$str224 C
;22C D
private@@ 	

SystemInfo@@
 
(@@ 
)@@ 
{AA 
}BB 
staticPP 

SystemInfoPP	 
(PP 
)PP 
{QQ 
stringRR 	
nullTextRR
 
=RR 
DEFAULT_NULL_TEXTRR &
;RR& '
stringSS 	
notAvailableTextSS
 
=SS &
DEFAULT_NOT_AVAILABLE_TEXTSS 7
;SS7 8
stringWW 	"
nullTextAppSettingsKeyWW
  
=WW! "

SystemInfoWW# -
.WW- .
GetAppSettingWW. ;
(WW; <
$strWW< N
)WWN O
;WWO P
ifXX 
(XX "
nullTextAppSettingsKeyXX 
!=XX  
nullXX! %
&&XX& ("
nullTextAppSettingsKeyXX) ?
.XX? @
LengthXX@ F
>XXG H
$numXXI J
)XXJ K
{YY 
LogLogZZ 

.ZZ
 
DebugZZ 
(ZZ 
declaringTypeZZ 
,ZZ 
$strZZ  B
+ZZC D"
nullTextAppSettingsKeyZZE [
+ZZ\ ]
$strZZ^ b
)ZZb c
;ZZc d
nullText[[ 
=[[ "
nullTextAppSettingsKey[[ %
;[[% &
}\\ 
string__ 	*
notAvailableTextAppSettingsKey__
 (
=__) *

SystemInfo__+ 5
.__5 6
GetAppSetting__6 C
(__C D
$str__D ^
)__^ _
;___ `
if`` 
(`` *
notAvailableTextAppSettingsKey`` %
!=``& (
null``) -
&&``. 0*
notAvailableTextAppSettingsKey``1 O
.``O P
Length``P V
>``W X
$num``Y Z
)``Z [
{aa 
LogLogbb 

.bb
 
Debugbb 
(bb 
declaringTypebb 
,bb 
$strbb  J
+bbK L*
notAvailableTextAppSettingsKeybbM k
+bbl m
$strbbn r
)bbr s
;bbs t
notAvailableTextcc 
=cc *
notAvailableTextAppSettingsKeycc 5
;cc5 6
}dd 
s_notAvailableTextff 
=ff 
notAvailableTextff (
;ff( )

s_nullTextgg 
=gg 
nullTextgg 
;gg 
}hh 
publicyy 
staticyy	 
stringyy 
NewLineyy 
{zz 
get{{ 
{|| 
return
ÄÄ 

System
ÄÄ 
.
ÄÄ 
Environment
ÄÄ 
.
ÄÄ 
NewLine
ÄÄ %
;
ÄÄ% &
}
ÇÇ 
}
ÉÉ 
public
ëë 
static
ëë	 
string
ëë &
ApplicationBaseDirectory
ëë /
{
íí 
get
ìì 
{
îî 
return
öö 

	AppDomain
öö 
.
öö 
CurrentDomain
öö "
.
öö" #
BaseDirectory
öö# 0
;
öö0 1
}
úú 
}
ùù 
public
≠≠ 
static
≠≠	 
string
≠≠ '
ConfigurationFileLocation
≠≠ 0
{
ÆÆ 
get
ØØ 
{
∞∞ 
return
¥¥ 

System
¥¥ 
.
¥¥ 
	AppDomain
¥¥ 
.
¥¥ 
CurrentDomain
¥¥ )
.
¥¥) *
SetupInformation
¥¥* :
.
¥¥: ;
ConfigurationFile
¥¥; L
;
¥¥L M
}
∂∂ 
}
∑∑ 
public
¬¬ 
static
¬¬	 
string
¬¬ #
EntryAssemblyLocation
¬¬ ,
{
√√ 
get
ƒƒ 
{
≈≈ 
return
ÀÀ 

System
ÀÀ 
.
ÀÀ 

Reflection
ÀÀ 
.
ÀÀ 
Assembly
ÀÀ %
.
ÀÀ% &
GetEntryAssembly
ÀÀ& 6
(
ÀÀ6 7
)
ÀÀ7 8
.
ÀÀ8 9
Location
ÀÀ9 A
;
ÀÀA B
}
ÕÕ 
}
ŒŒ 
public
ÊÊ 
static
ÊÊ	 
int
ÊÊ 
CurrentThreadId
ÊÊ #
{
ÁÁ 
get
ËË 
{
ÈÈ 
return
ÌÌ 

System
ÌÌ 
.
ÌÌ 
	Threading
ÌÌ 
.
ÌÌ 
Thread
ÌÌ "
.
ÌÌ" #
CurrentThread
ÌÌ# 0
.
ÌÌ0 1
ManagedThreadId
ÌÌ1 @
;
ÌÌ@ A
}
ÒÒ 
}
ÚÚ 
public
ÖÖ 
static
ÖÖ	 
string
ÖÖ 
HostName
ÖÖ 
{
ÜÜ 
get
áá 
{
àà 
if
ââ 
(
ââ 

s_hostName
ââ 
==
ââ 
null
ââ 
)
ââ 
{
ää 
try
çç 
{
éé 

s_hostName
êê 
=
êê 
System
êê 
.
êê 
Net
êê 
.
êê 
Dns
êê !
.
êê! "
GetHostName
êê" -
(
êê- .
)
êê. /
;
êê/ 0
}
ëë 
catch
íí 

(
íí 
System
íí 
.
íí 
Net
íí 
.
íí 
Sockets
íí 
.
íí 
SocketException
íí .
)
íí. /
{
ìì 
LogLog
îî 
.
îî 
Debug
îî 
(
îî 
declaringType
îî  
,
îî  !
$str
îî" l
)
îîl m
;
îîm n
}
ïï 
catch
ññ 

(
ññ 
System
ññ 
.
ññ 
Security
ññ 
.
ññ 
SecurityException
ññ -
)
ññ- .
{
óó 
LogLog
öö 
.
öö 
Debug
öö 
(
öö 
declaringType
öö  
,
öö  !
$str
öö" n
)
öön o
;
ööo p
}
õõ 
catch
úú 

(
úú 
	Exception
úú 
ex
úú 
)
úú 
{
ùù 
LogLog
ûû 
.
ûû 
Debug
ûû 
(
ûû 
declaringType
ûû  
,
ûû  !
$str
ûû" p
,
ûûp q
ex
ûûr t
)
ûût u
;
ûûu v
}
üü 
if
¢¢ 
(
¢¢ 	

s_hostName
¢¢	 
==
¢¢ 
null
¢¢ 
||
¢¢ 

s_hostName
¢¢ )
.
¢¢) *
Length
¢¢* 0
==
¢¢1 3
$num
¢¢4 5
)
¢¢5 6
{
££ 
try
§§ 	
{
•• 

s_hostName
©© 
=
©© 
Environment
©© 
.
©©  
MachineName
©©  +
;
©©+ ,
}
´´ 
catch
¨¨ 
(
¨¨ '
InvalidOperationException
¨¨ %
)
¨¨% &
{
≠≠ 
}
ÆÆ 
catch
ØØ 
(
ØØ 
System
ØØ 
.
ØØ 
Security
ØØ 
.
ØØ 
SecurityException
ØØ -
)
ØØ- .
{
∞∞ 
}
≥≥ 
}
¥¥ 
if
∑∑ 
(
∑∑ 	

s_hostName
∑∑	 
==
∑∑ 
null
∑∑ 
||
∑∑ 

s_hostName
∑∑ )
.
∑∑) *
Length
∑∑* 0
==
∑∑1 3
$num
∑∑4 5
)
∑∑5 6
{
∏∏ 

s_hostName
ππ 
=
ππ  
s_notAvailableText
ππ %
;
ππ% &
LogLog
∫∫ 
.
∫∫ 
Debug
∫∫ 
(
∫∫ 
declaringType
∫∫  
,
∫∫  !
$str
∫∫" q
)
∫∫q r
;
∫∫r s
}
ªª 
}
ºº 
return
ΩΩ 


s_hostName
ΩΩ 
;
ΩΩ 
}
ææ 
}
øø 
public
–– 
static
––	 
string
–– %
ApplicationFriendlyName
–– .
{
—— 
get
““ 
{
”” 
if
‘‘ 
(
‘‘ 
s_appFriendlyName
‘‘ 
==
‘‘ 
null
‘‘ !
)
‘‘! "
{
’’ 
try
÷÷ 
{
◊◊ 
s_appFriendlyName
ŸŸ 
=
ŸŸ 
	AppDomain
ŸŸ #
.
ŸŸ# $
CurrentDomain
ŸŸ$ 1
.
ŸŸ1 2
FriendlyName
ŸŸ2 >
;
ŸŸ> ?
}
€€ 
catch
‹‹ 

(
‹‹
 
System
‹‹ 
.
‹‹ 
Security
‹‹ 
.
‹‹ 
SecurityException
‹‹ ,
)
‹‹, -
{
›› 
LogLog
‡‡ 
.
‡‡ 
Debug
‡‡ 
(
‡‡ 
declaringType
‡‡  
,
‡‡  !
$str
‡‡" w
)
‡‡w x
;
‡‡x y
}
·· 
if
„„ 
(
„„ 	
s_appFriendlyName
„„	 
==
„„ 
null
„„ "
||
„„# %
s_appFriendlyName
„„& 7
.
„„7 8
Length
„„8 >
==
„„? A
$num
„„B C
)
„„C D
{
‰‰ 
try
ÂÂ 	
{
ÊÊ 
string
ÁÁ 
assemblyLocation
ÁÁ 
=
ÁÁ  

SystemInfo
ÁÁ! +
.
ÁÁ+ ,#
EntryAssemblyLocation
ÁÁ, A
;
ÁÁA B
s_appFriendlyName
ËË 
=
ËË 
System
ËË !
.
ËË! "
IO
ËË" $
.
ËË$ %
Path
ËË% )
.
ËË) *
GetFileName
ËË* 5
(
ËË5 6
assemblyLocation
ËË6 F
)
ËËF G
;
ËËG H
}
ÈÈ 
catch
ÍÍ 
(
ÍÍ 
System
ÍÍ 
.
ÍÍ 
Security
ÍÍ 
.
ÍÍ 
SecurityException
ÍÍ -
)
ÍÍ- .
{
ÎÎ 
}
ÌÌ 
}
ÓÓ 
if
 
(
 	
s_appFriendlyName
	 
==
 
null
 "
||
# %
s_appFriendlyName
& 7
.
7 8
Length
8 >
==
? A
$num
B C
)
C D
{
ÒÒ 
s_appFriendlyName
ÚÚ 
=
ÚÚ  
s_notAvailableText
ÚÚ ,
;
ÚÚ, -
}
ÛÛ 
}
ÙÙ 
return
ıı 

s_appFriendlyName
ıı 
;
ıı 
}
ˆˆ 
}
˜˜ 
[
çç 	
Obsolete
çç	 
(
çç 
$str
çç P
)
ççP Q
]
ççQ R
public
éé 
static
éé	 
DateTime
éé 
ProcessStartTime
éé )
{
èè 
get
êê 
{
êê 
return
êê	 #
s_processStartTimeUtc
êê %
.
êê% &
ToLocalTime
êê& 1
(
êê1 2
)
êê2 3
;
êê3 4
}
êê5 6
}
ëë 
public
ßß 
static
ßß 
DateTime
ßß !
ProcessStartTimeUtc
ßß 2
{
®® 	
get
©© 
{
©© 
return
©© #
s_processStartTimeUtc
©© .
;
©©. /
}
©©0 1
}
™™ 
public
∫∫ 
static
∫∫	 
string
∫∫ 
NullText
∫∫ 
{
ªª 
get
ºº 
{
ºº 
return
ºº	 

s_nullText
ºº 
;
ºº 
}
ºº 
set
ΩΩ 
{
ΩΩ 

s_nullText
ΩΩ	 
=
ΩΩ 
value
ΩΩ 
;
ΩΩ 
}
ΩΩ 
}
ææ 
public
ÕÕ 
static
ÕÕ	 
string
ÕÕ 
NotAvailableText
ÕÕ '
{
ŒŒ 
get
œœ 
{
œœ 
return
œœ	  
s_notAvailableText
œœ "
;
œœ" #
}
œœ$ %
set
–– 
{
––  
s_notAvailableText
––	 
=
–– 
value
–– #
;
––# $
}
––% &
}
—— 
public
„„ 
static
„„	 
string
„„ "
AssemblyLocationInfo
„„ +
(
„„+ ,
Assembly
„„, 4

myAssembly
„„5 ?
)
„„? @
{
‰‰ 
if
ÍÍ 
(
ÍÍ 

myAssembly
ÍÍ 
.
ÍÍ !
GlobalAssemblyCache
ÍÍ %
)
ÍÍ% &
{
ÎÎ 
return
ÏÏ 

$str
ÏÏ "
;
ÏÏ" #
}
ÌÌ 
else
ÓÓ 
{
ÔÔ 
try
 
{
ÒÒ 
if
ÛÛ 
(
ÛÛ 	

myAssembly
ÛÛ	 
.
ÛÛ 
	IsDynamic
ÛÛ 
)
ÛÛ 
{
ÙÙ 
return
ıı 
$str
ıı 
;
ıı  
}
ˆˆ 
else
ÅÅ 	
{
ÇÇ 
return
ÜÜ 

myAssembly
ÜÜ 
.
ÜÜ 
Location
ÜÜ  
;
ÜÜ  !
}
áá 
}
àà 
catch
ââ 	
(
ââ
 #
NotSupportedException
ââ  
)
ââ  !
{
ää 
return
çç 
$str
çç 
;
çç 
}
éé 
catch
èè 	
(
èè
 '
TargetInvocationException
èè $
ex
èè% '
)
èè' (
{
êê 
return
ëë 
$str
ëë &
+
ëë' (
ex
ëë) +
.
ëë+ ,
Message
ëë, 3
+
ëë4 5
$str
ëë6 9
;
ëë9 :
}
íí 
catch
ìì 	
(
ìì
 
ArgumentException
ìì 
ex
ìì 
)
ìì  
{
îî 
return
ïï 
$str
ïï &
+
ïï' (
ex
ïï) +
.
ïï+ ,
Message
ïï, 3
+
ïï4 5
$str
ïï6 9
;
ïï9 :
}
ññ 
catch
óó 	
(
óó
 
System
óó 
.
óó 
Security
óó 
.
óó 
SecurityException
óó ,
)
óó, -
{
òò 
return
ôô 
$str
ôô (
;
ôô( )
}
öö 
}
õõ 
}
ùù 
public
≠≠ 
static
≠≠	 
string
≠≠ #
AssemblyQualifiedName
≠≠ ,
(
≠≠, -
Type
≠≠- 1
type
≠≠2 6
)
≠≠6 7
{
ÆÆ 
return
ØØ 	
type
ØØ
 
.
ØØ 
FullName
ØØ 
+
ØØ 
$str
ØØ 
+
≥≥ 
type
≥≥ 

.
≥≥
 
Assembly
≥≥ 
.
≥≥ 
FullName
≥≥ 
;
≥≥ 
}
µµ 
public
ÕÕ 
static
ÕÕ	 
string
ÕÕ 
AssemblyShortName
ÕÕ (
(
ÕÕ( )
Assembly
ÕÕ) 1

myAssembly
ÕÕ2 <
)
ÕÕ< =
{
ŒŒ 
string
œœ 	
name
œœ
 
=
œœ 

myAssembly
œœ 
.
œœ 
FullName
œœ $
;
œœ$ %
int
–– 
offset
–– 
=
–– 
name
–– 
.
–– 
IndexOf
–– 
(
–– 
$char
––  
)
––  !
;
––! "
if
—— 
(
—— 
offset
—— 
>
—— 
$num
—— 
)
—— 
{
““ 
name
”” 
=
””	 

name
”” 
.
”” 
	Substring
”” 
(
”” 
$num
”” 
,
”” 
offset
”” #
)
””# $
;
””$ %
}
‘‘ 
return
’’ 	
name
’’
 
.
’’ 
Trim
’’ 
(
’’ 
)
’’ 
;
’’ 
}
⁄⁄ 
public
ÊÊ 
static
ÊÊ	 
string
ÊÊ 
AssemblyFileName
ÊÊ '
(
ÊÊ' (
Assembly
ÊÊ( 0

myAssembly
ÊÊ1 ;
)
ÊÊ; <
{
ÁÁ 
return
˚˚ 	
System
˚˚
 
.
˚˚ 
IO
˚˚ 
.
˚˚ 
Path
˚˚ 
.
˚˚ 
GetFileName
˚˚ $
(
˚˚$ %

myAssembly
˚˚% /
.
˚˚/ 0
Location
˚˚0 8
)
˚˚8 9
;
˚˚9 :
}
˝˝ 
public
ìì 
static
ìì	 
Type
ìì 
GetTypeFromString
ìì &
(
ìì& '
Type
ìì' +
relativeType
ìì, 8
,
ìì8 9
string
ìì: @
typeName
ììA I
,
ììI J
bool
ììK O
throwOnError
ììP \
,
ìì\ ]
bool
ìì^ b

ignoreCase
ììc m
)
ììm n
{
îî 
return
òò 	
GetTypeFromString
òò
 
(
òò 
relativeType
òò (
.
òò( )
Assembly
òò) 1
,
òò1 2
typeName
òò3 ;
,
òò; <
throwOnError
òò= I
,
òòI J

ignoreCase
òòK U
)
òòU V
;
òòV W
}
öö 
public
∞∞ 
static
∞∞	 
Type
∞∞ 
GetTypeFromString
∞∞ &
(
∞∞& '
string
∞∞' -
typeName
∞∞. 6
,
∞∞6 7
bool
∞∞8 <
throwOnError
∞∞= I
,
∞∞I J
bool
∞∞K O

ignoreCase
∞∞P Z
)
∞∞Z [
{
±± 
return
≤≤ 	
GetTypeFromString
≤≤
 
(
≤≤ 
Assembly
≤≤ $
.
≤≤$ % 
GetCallingAssembly
≤≤% 7
(
≤≤7 8
)
≤≤8 9
,
≤≤9 :
typeName
≤≤; C
,
≤≤C D
throwOnError
≤≤E Q
,
≤≤Q R

ignoreCase
≤≤S ]
)
≤≤] ^
;
≤≤^ _
}
≥≥ 
public
   
static
  	 
Type
   
GetTypeFromString
   &
(
  & '
Assembly
  ' /
relativeAssembly
  0 @
,
  @ A
string
  B H
typeName
  I Q
,
  Q R
bool
  S W
throwOnError
  X d
,
  d e
bool
  f j

ignoreCase
  k u
)
  u v
{
ÀÀ 
if
ÕÕ 
(
ÕÕ 
typeName
ÕÕ 
.
ÕÕ 
IndexOf
ÕÕ 
(
ÕÕ 
$char
ÕÕ 
)
ÕÕ 
==
ÕÕ 
-
ÕÕ  
$num
ÕÕ  !
)
ÕÕ! "
{
ŒŒ 
Type
÷÷ 
type
÷÷	 
=
÷÷ 
relativeAssembly
÷÷  
.
÷÷  !
GetType
÷÷! (
(
÷÷( )
typeName
÷÷) 1
,
÷÷1 2
false
÷÷3 8
,
÷÷8 9

ignoreCase
÷÷: D
)
÷÷D E
;
÷÷E F
if
◊◊ 
(
◊◊ 
type
◊◊ 
!=
◊◊ 
null
◊◊ 
)
◊◊ 
{
ÿÿ 
return
€€ 
type
€€ 
;
€€ 
}
‹‹ 
Assembly
ﬁﬁ 
[
ﬁﬁ 
]
ﬁﬁ 
loadedAssemblies
ﬁﬁ 
=
ﬁﬁ  !
null
ﬁﬁ" &
;
ﬁﬁ& '
try
ﬂﬂ 
{
‡‡ 
loadedAssemblies
·· 
=
·· 
	AppDomain
·· !
.
··! "
CurrentDomain
··" /
.
··/ 0
GetAssemblies
··0 =
(
··= >
)
··> ?
;
··? @
}
‚‚ 
catch
„„ 	
(
„„	 

System
„„
 
.
„„ 
Security
„„ 
.
„„ 
SecurityException
„„ +
)
„„+ ,
{
‰‰ 
}
ÊÊ 
if
ËË 
(
ËË 
loadedAssemblies
ËË 
!=
ËË 
null
ËË  
)
ËË  !
{
ÈÈ 
Type
ÍÍ 	
fallback
ÍÍ
 
=
ÍÍ 
null
ÍÍ 
;
ÍÍ 
foreach
ÏÏ 
(
ÏÏ 
Assembly
ÏÏ 
assembly
ÏÏ 
in
ÏÏ  "
loadedAssemblies
ÏÏ# 3
)
ÏÏ3 4
{
ÌÌ 
Type
ÓÓ 

t
ÓÓ 
=
ÓÓ 
assembly
ÓÓ 
.
ÓÓ 
GetType
ÓÓ 
(
ÓÓ  
typeName
ÓÓ  (
,
ÓÓ( )
false
ÓÓ* /
,
ÓÓ/ 0

ignoreCase
ÓÓ1 ;
)
ÓÓ; <
;
ÓÓ< =
if
ÔÔ 
(
ÔÔ	 

t
ÔÔ
 
!=
ÔÔ 
null
ÔÔ 
)
ÔÔ 
{
 
LogLog
ÚÚ 
.
ÚÚ 
Debug
ÚÚ 
(
ÚÚ 
declaringType
ÚÚ !
,
ÚÚ! "
$str
ÚÚ# 2
+
ÚÚ2 3
typeName
ÚÚ3 ;
+
ÚÚ; <
$str
ÚÚ< O
+
ÚÚO P
assembly
ÚÚP X
.
ÚÚX Y
FullName
ÚÚY a
+
ÚÚa b
$strÚÚb Ö
)ÚÚÖ Ü
;ÚÚÜ á
if
ÛÛ8 :
(
ÛÛ; <
assembly
ÛÛ< D
.
ÛÛD E!
GlobalAssemblyCache
ÛÛE X
)
ÛÛX Y
{
ÙÙ8 9
fallback
ıı< D
=
ııE F
t
ııG H
;
ııH I
}
ˆˆ8 9
else
˜˜8 <
{
¯¯8 9
return
˘˘< B
t
˘˘C D
;
˘˘D E
}
˙˙8 9
}
˚˚ 
}
¸¸ 
if
˝˝( *
(
˝˝+ ,
fallback
˝˝, 4
!=
˝˝5 7
null
˝˝8 <
)
˝˝< =
{
˛˛( )
return
ˇˇ, 2
fallback
ˇˇ3 ;
;
ˇˇ; <
}
ÄÄ( )
}
ÅÅ 
if
ÑÑ 
(
ÑÑ 
throwOnError
ÑÑ 
)
ÑÑ 
{
ÖÖ 
throw
ÜÜ 

new
ÜÜ 
TypeLoadException
ÜÜ  
(
ÜÜ  !
$str
ÜÜ! 8
+
ÜÜ8 9
typeName
ÜÜ9 A
+
ÜÜA B
$str
ÜÜB W
+
ÜÜW X
relativeAssembly
ÜÜX h
.
ÜÜh i
FullName
ÜÜi q
+
ÜÜq r
$strÜÜr è
)ÜÜè ê
;ÜÜê ë
}
áá 
return
àà 

null
àà 
;
àà 
}
ää 
else
ãã 
{
åå 
return
ïï 

Type
ïï 
.
ïï 
GetType
ïï 
(
ïï 
typeName
ïï  
,
ïï  !
throwOnError
ïï" .
,
ïï. /

ignoreCase
ïï0 :
)
ïï: ;
;
ïï; <
}
óó 
}
òò 
public
§§ 
static
§§	 
Guid
§§ 
NewGuid
§§ 
(
§§ 
)
§§ 
{
•• 
return
©© 	
Guid
©©
 
.
©© 
NewGuid
©© 
(
©© 
)
©© 
;
©© 
}
´´ 
public
¿¿ 
static
¿¿	 )
ArgumentOutOfRangeException
¿¿ +/
!CreateArgumentOutOfRangeException
¿¿, M
(
¿¿M N
string
¿¿N T
parameterName
¿¿U b
,
¿¿b c
object
¿¿d j
actualValue
¿¿k v
,
¿¿v w
string
¿¿x ~
message¿¿ Ü
)¿¿Ü á
{
¡¡ 
return
«« 	
new
««
 )
ArgumentOutOfRangeException
«« )
(
««) *
parameterName
««* 7
,
««7 8
actualValue
««9 D
,
««D E
message
««F M
)
««M N
;
««N O
}
…… 
public
ÿÿ 
static
ÿÿ	 
bool
ÿÿ 
TryParse
ÿÿ 
(
ÿÿ 
string
ÿÿ $
s
ÿÿ% &
,
ÿÿ& '
out
ÿÿ( +
int
ÿÿ, /
val
ÿÿ0 3
)
ÿÿ3 4
{
ŸŸ 
val
ËË 
=
ËË 
$num
ËË	 

;
ËË
 
try
ÍÍ 
{
ÎÎ 
double
ÏÏ 

	doubleVal
ÏÏ 
;
ÏÏ 
if
ÌÌ 
(
ÌÌ 
Double
ÌÌ 
.
ÌÌ 
TryParse
ÌÌ 
(
ÌÌ 
s
ÌÌ 
,
ÌÌ 
System
ÌÌ !
.
ÌÌ! "
Globalization
ÌÌ" /
.
ÌÌ/ 0
NumberStyles
ÌÌ0 <
.
ÌÌ< =
Integer
ÌÌ= D
,
ÌÌD E
System
ÌÌF L
.
ÌÌL M
Globalization
ÌÌM Z
.
ÌÌZ [
CultureInfo
ÌÌ[ f
.
ÌÌf g
InvariantCulture
ÌÌg w
,
ÌÌw x
out
ÌÌy |
	doubleValÌÌ} Ü
)ÌÌÜ á
)ÌÌá à
{
ÓÓ 
val
ÔÔ 
=
ÔÔ	 

Convert
ÔÔ 
.
ÔÔ 
ToInt32
ÔÔ 
(
ÔÔ 
	doubleVal
ÔÔ $
)
ÔÔ$ %
;
ÔÔ% &
return
 
true
 
;
 
}
ÒÒ 
}
ÚÚ 
catch
ÛÛ 
{
ÙÙ 
}
ˆˆ 
return
¯¯ 	
false
¯¯
 
;
¯¯ 
}
˙˙ 
public
àà 
static
àà	 
bool
àà 
TryParse
àà 
(
àà 
string
àà $
s
àà% &
,
àà& '
out
àà( +
long
àà, 0
val
àà1 4
)
àà4 5
{
ââ 
val
òò 
=
òò 
$num
òò	 

;
òò
 
try
öö 
{
õõ 
double
úú 

	doubleVal
úú 
;
úú 
if
ùù 
(
ùù 
Double
ùù 
.
ùù 
TryParse
ùù 
(
ùù 
s
ùù 
,
ùù 
System
ùù !
.
ùù! "
Globalization
ùù" /
.
ùù/ 0
NumberStyles
ùù0 <
.
ùù< =
Integer
ùù= D
,
ùùD E
System
ùùF L
.
ùùL M
Globalization
ùùM Z
.
ùùZ [
CultureInfo
ùù[ f
.
ùùf g
InvariantCulture
ùùg w
,
ùùw x
out
ùùy |
	doubleValùù} Ü
)ùùÜ á
)ùùá à
{
ûû 
val
üü 
=
üü	 

Convert
üü 
.
üü 
ToInt64
üü 
(
üü 
	doubleVal
üü $
)
üü$ %
;
üü% &
return
†† 
true
†† 
;
†† 
}
°° 
}
¢¢ 
catch
££ 
{
§§ 
}
¶¶ 
return
®® 	
false
®®
 
;
®® 
}
™™ 
public
∏∏ 
static
∏∏ 
bool
∏∏ 
TryParse
∏∏ #
(
∏∏# $
string
∏∏$ *
s
∏∏+ ,
,
∏∏, -
out
∏∏. 1
short
∏∏2 7
val
∏∏8 ;
)
∏∏; <
{
ππ 	
val
»» 
=
»» 
$num
»» 
;
»» 
try
   
{
ÀÀ 
double
ÃÃ 
	doubleVal
ÃÃ  
;
ÃÃ  !
if
ÕÕ 
(
ÕÕ 
Double
ÕÕ 
.
ÕÕ 
TryParse
ÕÕ #
(
ÕÕ# $
s
ÕÕ$ %
,
ÕÕ% &
System
ÕÕ' -
.
ÕÕ- .
Globalization
ÕÕ. ;
.
ÕÕ; <
NumberStyles
ÕÕ< H
.
ÕÕH I
Integer
ÕÕI P
,
ÕÕP Q
System
ÕÕR X
.
ÕÕX Y
Globalization
ÕÕY f
.
ÕÕf g
CultureInfo
ÕÕg r
.
ÕÕr s
InvariantCultureÕÕs É
,ÕÕÉ Ñ
outÕÕÖ à
	doubleValÕÕâ í
)ÕÕí ì
)ÕÕì î
{
ŒŒ 
val
œœ 
=
œœ 
Convert
œœ !
.
œœ! "
ToInt16
œœ" )
(
œœ) *
	doubleVal
œœ* 3
)
œœ3 4
;
œœ4 5
return
–– 
true
–– 
;
––  
}
—— 
}
““ 
catch
”” 
{
‘‘ 
}
÷÷ 
return
ÿÿ 
false
ÿÿ 
;
ÿÿ 
}
⁄⁄ 	
public
ÊÊ 
static
ÊÊ	 
string
ÊÊ 
GetAppSetting
ÊÊ $
(
ÊÊ$ %
string
ÊÊ% +
key
ÊÊ, /
)
ÊÊ/ 0
{
ÁÁ 
try
ËË 
{
ÈÈ 
return
ÌÌ 
"
ConfigurationManager
ÌÌ 
.
ÌÌ  
AppSettings
ÌÌ  +
[
ÌÌ+ ,
key
ÌÌ, /
]
ÌÌ/ 0
;
ÌÌ0 1
}
ÒÒ 
catch
ÚÚ 
(
ÚÚ 	
	Exception
ÚÚ	 
ex
ÚÚ 
)
ÚÚ 
{
ÛÛ 
LogLog
ıı 

.
ıı
 
Error
ıı 
(
ıı 
declaringType
ıı 
,
ıı 
$str
ıı  |
,
ıı| }
exıı~ Ä
)ııÄ Å
;ııÅ Ç
}
ˆˆ 
return
˜˜ 	
null
˜˜
 
;
˜˜ 
}
¯¯ 
public
ää 
static
ää	 
string
ää 
ConvertToFullPath
ää (
(
ää( )
string
ää) /
path
ää0 4
)
ää4 5
{
ãã 
if
åå 
(
åå 
path
åå 
==
åå 
null
åå 
)
åå 
{
çç 
throw
éé 	
new
éé
 #
ArgumentNullException
éé #
(
éé# $
$str
éé$ *
)
éé* +
;
éé+ ,
}
èè 
string
ëë 	
baseDirectory
ëë
 
=
ëë 
$str
ëë 
;
ëë 
try
íí 
{
ìì 
string
îî 
&
applicationBaseDirectory
îî #
=
îî$ %

SystemInfo
îî& 0
.
îî0 1&
ApplicationBaseDirectory
îî1 I
;
îîI J
if
ïï 
(
ïï &
applicationBaseDirectory
ïï  
!=
ïï! #
null
ïï$ (
)
ïï( )
{
ññ 
Uri
òò )
applicationBaseDirectoryUri
òò	 $
=
òò% &
new
òò' *
Uri
òò+ .
(
òò. /&
applicationBaseDirectory
òò/ G
)
òòG H
;
òòH I
if
ôô 
(
ôô 	)
applicationBaseDirectoryUri
ôô	 $
.
ôô$ %
IsFile
ôô% +
)
ôô+ ,
{
öö 
baseDirectory
õõ 
=
õõ )
applicationBaseDirectoryUri
õõ 1
.
õõ1 2
	LocalPath
õõ2 ;
;
õõ; <
}
úú 
}
ùù 
}
ûû 
catch
üü 
{
†† 
}
¢¢ 
if
§§ 
(
§§ 
baseDirectory
§§ 
!=
§§ 
null
§§ 
&&
§§ 
baseDirectory
§§  -
.
§§- .
Length
§§. 4
>
§§5 6
$num
§§7 8
)
§§8 9
{
•• 
return
ßß 

Path
ßß 
.
ßß 
GetFullPath
ßß 
(
ßß 
Path
ßß  
.
ßß  !
Combine
ßß! (
(
ßß( )
baseDirectory
ßß) 6
,
ßß6 7
path
ßß8 <
)
ßß< =
)
ßß= >
;
ßß> ?
}
®® 
return
©© 	
Path
©©
 
.
©© 
GetFullPath
©© 
(
©© 
path
©© 
)
©©  
;
©©  !
}
™™ 
public
µµ 
static
µµ	 
	Hashtable
µµ ,
CreateCaseInsensitiveHashtable
µµ 8
(
µµ8 9
)
µµ9 :
{
∂∂ 
return
∫∫ 	
new
∫∫
 
	Hashtable
∫∫ 
(
∫∫ 
StringComparer
∫∫ &
.
∫∫& '
OrdinalIgnoreCase
∫∫' 8
)
∫∫8 9
;
∫∫9 :
}
ææ 
public
ÃÃ 
static
ÃÃ 
Boolean
ÃÃ  
EqualsIgnoringCase
ÃÃ 0
(
ÃÃ0 1
String
ÃÃ1 7
a
ÃÃ8 9
,
ÃÃ9 :
String
ÃÃ; A
b
ÃÃB C
)
ÃÃC D
{
ÕÕ 	
return
”” 
String
”” 
.
”” 
Equals
””  
(
””  !
a
””! "
,
””" #
b
””$ %
,
””% &
StringComparison
””' 7
.
””7 8
OrdinalIgnoreCase
””8 I
)
””I J
;
””J K
}
’’ 	
public
ç	ç	 
static
ç	ç		 
readonly
ç	ç	 
Type
ç	ç	 
[
ç	ç	 
]
ç	ç	 

EmptyTypes
ç	ç	  *
=
ç	ç	+ ,
new
ç	ç	- 0
Type
ç	ç	1 5
[
ç	ç	5 6
$num
ç	ç	6 7
]
ç	ç	7 8
;
ç	ç	8 9
private
ö	ö	 
readonly
ö	ö	 
static
ö	ö	 
Type
ö	ö	 !
declaringType
ö	ö	" /
=
ö	ö	0 1
typeof
ö	ö	2 8
(
ö	ö	8 9

SystemInfo
ö	ö	9 C
)
ö	ö	C D
;
ö	ö	D E
private
ü	ü	 	
static
ü	ü	
 
string
ü	ü	 

s_hostName
ü	ü	 "
;
ü	ü	" #
private
§	§	 	
static
§	§	
 
string
§	§	 
s_appFriendlyName
§	§	 )
;
§	§	) *
private
©	©	 	
static
©	©	
 
string
©	©	 

s_nullText
©	©	 "
;
©	©	" #
private
Æ	Æ	 	
static
Æ	Æ	
 
string
Æ	Æ	  
s_notAvailableText
Æ	Æ	 *
;
Æ	Æ	* +
private
≥	≥	 	
static
≥	≥	
 
DateTime
≥	≥	 #
s_processStartTimeUtc
≥	≥	 /
=
≥	≥	0 1
DateTime
≥	≥	2 :
.
≥	≥	: ;
UtcNow
≥	≥	; A
;
≥	≥	A B
}
Ø
Ø
 
}∞
∞
 ‘L
BC:\sonarqube\projects\log4net-2.0.7\src\Util\SystemStringFormat.cs
	namespace 	
log4net
 
. 
Util 
{ 
public$$ 
sealed$$ 
class$$ 
SystemStringFormat$$ '
{%% 
private&& 	
readonly&&
 
IFormatProvider&& "

m_provider&&# -
;&&- .
private'' 	
readonly''
 
string'' 
m_format'' "
;''" #
private(( 	
readonly((
 
object(( 
[(( 
](( 
m_args(( "
;((" #
public22 
SystemStringFormat22	 
(22 
IFormatProvider22 +
provider22, 4
,224 5
string226 <
format22= C
,22C D
params22E K
object22L R
[22R S
]22S T
args22U Y
)22Y Z
{33 

m_provider44 
=44 
provider44 
;44 
m_format55 
=55 
format55 
;55 
m_args66 	
=66
 
args66 
;66 
}77 
public?? 
override??	 
string?? 
ToString?? !
(??! "
)??" #
{@@ 
returnAA 	
StringFormatAA
 
(AA 

m_providerAA !
,AA! "
m_formatAA# +
,AA+ ,
m_argsAA- 3
)AA3 4
;AA4 5
}BB 
privateXX 	
staticXX
 
stringXX 
StringFormatXX $
(XX$ %
IFormatProviderXX% 4
providerXX5 =
,XX= >
stringXX? E
formatXXF L
,XXL M
paramsXXN T
objectXXU [
[XX[ \
]XX\ ]
argsXX^ b
)XXb c
{YY 
tryZZ 
{[[ 
if]] 
(]] 
format]] 
==]] 
null]] 
)]] 
{^^ 
return__ 
null__ 
;__ 
}`` 
ifcc 
(cc 
argscc 
==cc 
nullcc 
)cc 
{dd 
returnee 
formatee 
;ee 
}ff 
returnii 

Stringii 
.ii 
Formatii 
(ii 
providerii !
,ii! "
formatii# )
,ii) *
argsii+ /
)ii/ 0
;ii0 1
}jj 
catchkk 
(kk 	
	Exceptionkk	 
exkk 
)kk 
{ll 
log4netmm 
.mm 
Utilmm 
.mm 
LogLogmm 
.mm 
Warnmm 
(mm 
declaringTypemm *
,mm* +
$strmm, P
+mmP Q
formatmmQ W
+mmW X
$strmmX [
,mm[ \
exmm] _
)mm_ `
;mm` a
returnnn 

StringFormatErrornn 
(nn 
exnn 
,nn  
formatnn! '
,nn' (
argsnn) -
)nn- .
;nn. /
}oo 
}ww 
private|| 	
static||
 
string|| 
StringFormatError|| )
(||) *
	Exception||* 3
formatException||4 C
,||C D
string||E K
format||L R
,||R S
object||T Z
[||Z [
]||[ \
args||] a
)||a b
{}} 
try~~ 
{ 
StringBuilder
ÄÄ 
buf
ÄÄ 
=
ÄÄ 
new
ÄÄ 
StringBuilder
ÄÄ )
(
ÄÄ) *
$str
ÄÄ* ;
)
ÄÄ; <
;
ÄÄ< =
if
ÇÇ 
(
ÇÇ 
formatException
ÇÇ 
!=
ÇÇ 
null
ÇÇ 
)
ÇÇ  
{
ÉÉ 
buf
ÑÑ 
.
ÑÑ 	
Append
ÑÑ	 
(
ÑÑ 
$str
ÑÑ 1
)
ÑÑ1 2
.
ÑÑ2 3
Append
ÑÑ3 9
(
ÑÑ9 :
formatException
ÑÑ: I
.
ÑÑI J
Message
ÑÑJ Q
)
ÑÑQ R
;
ÑÑR S
}
ÖÖ 
else
ÜÜ 
{
áá 
buf
àà 
.
àà 	
Append
àà	 
(
àà 
$str
àà /
)
àà/ 0
;
àà0 1
}
ââ 
buf
ää 
.
ää 
Append
ää 
(
ää 
$str
ää 
)
ää 
.
ää 
Append
ää "
(
ää" #
format
ää# )
)
ää) *
.
ää* +
Append
ää+ 1
(
ää1 2
$str
ää2 =
)
ää= >
;
ää> ?
buf
ãã 
.
ãã 
Append
ãã 
(
ãã 
$str
ãã 
)
ãã 
;
ãã 
RenderArray
åå 
(
åå 
args
åå 
,
åå 
buf
åå 
)
åå 
;
åå 
buf
çç 
.
çç 
Append
çç 
(
çç 
$str
çç 
)
çç 
;
çç 
buf
éé 
.
éé 
Append
éé 
(
éé 
$str
éé !
)
éé! "
;
éé" #
return
êê 

buf
êê 
.
êê 
ToString
êê 
(
êê 
)
êê 
;
êê 
}
ëë 
catch
íí 
(
íí 	
	Exception
íí	 
ex
íí 
)
íí 
{
ìì 
log4net
îî 
.
îî 
Util
îî 
.
îî 
LogLog
îî 
.
îî 
Error
îî 
(
îî 
declaringType
îî +
,
îî+ ,
$str
îî- `
,
îî` a
ex
îîb d
)
îîd e
;
îîe f
return
ïï 

$str
ïï \
;
ïï\ ]
}
ññ 
}
ûû 
private
££ 	
static
££
 
void
££ 
RenderArray
££ !
(
££! "
Array
££" '
array
££( -
,
££- .
StringBuilder
££/ <
buffer
££= C
)
££C D
{
§§ 
if
•• 
(
•• 
array
•• 
==
•• 
null
•• 
)
•• 
{
¶¶ 
buffer
ßß 

.
ßß
 
Append
ßß 
(
ßß 

SystemInfo
ßß 
.
ßß 
NullText
ßß %
)
ßß% &
;
ßß& '
}
®® 
else
©© 
{
™™ 
if
´´ 
(
´´ 
array
´´ 
.
´´ 
Rank
´´ 
!=
´´ 
$num
´´ 
)
´´ 
{
¨¨ 
buffer
≠≠ 
.
≠≠ 
Append
≠≠ 
(
≠≠ 
array
≠≠ 
.
≠≠ 
ToString
≠≠ !
(
≠≠! "
)
≠≠" #
)
≠≠# $
;
≠≠$ %
}
ÆÆ 
else
ØØ 
{
∞∞ 
buffer
±± 
.
±± 
Append
±± 
(
±± 
$str
±± 
)
±± 
;
±± 
int
≤≤ 
len
≤≤	 
=
≤≤ 
array
≤≤ 
.
≤≤ 
Length
≤≤ 
;
≤≤ 
if
¥¥ 
(
¥¥ 	
len
¥¥	 
>
¥¥ 
$num
¥¥ 
)
¥¥ 
{
µµ 
RenderObject
∂∂ 
(
∂∂ 
array
∂∂ 
.
∂∂ 
GetValue
∂∂ !
(
∂∂! "
$num
∂∂" #
)
∂∂# $
,
∂∂$ %
buffer
∂∂& ,
)
∂∂, -
;
∂∂- .
for
∑∑ 	
(
∑∑
 
int
∑∑ 
i
∑∑ 
=
∑∑ 
$num
∑∑ 
;
∑∑ 
i
∑∑ 
<
∑∑ 
len
∑∑ 
;
∑∑ 
i
∑∑  
++
∑∑  "
)
∑∑" #
{
∏∏ 
buffer
ππ 
.
ππ 
Append
ππ 
(
ππ 
$str
ππ 
)
ππ 
;
ππ 
RenderObject
∫∫ 
(
∫∫ 
array
∫∫ 
.
∫∫ 
GetValue
∫∫ "
(
∫∫" #
i
∫∫# $
)
∫∫$ %
,
∫∫% &
buffer
∫∫' -
)
∫∫- .
;
∫∫. /
}
ªª 
}
ºº 
buffer
ΩΩ 
.
ΩΩ 
Append
ΩΩ 
(
ΩΩ 
$str
ΩΩ 
)
ΩΩ 
;
ΩΩ 
}
ææ 
}
øø 
}
¿¿ 
private
≈≈ 	
static
≈≈
 
void
≈≈ 
RenderObject
≈≈ "
(
≈≈" #
Object
≈≈# )
obj
≈≈* -
,
≈≈- .
StringBuilder
≈≈/ <
buffer
≈≈= C
)
≈≈C D
{
∆∆ 
if
«« 
(
«« 
obj
«« 

==
«« 
null
«« 
)
«« 
{
»» 
buffer
…… 

.
……
 
Append
…… 
(
…… 

SystemInfo
…… 
.
…… 
NullText
…… %
)
……% &
;
……& '
}
   
else
ÀÀ 
{
ÃÃ 
try
ÕÕ 
{
ŒŒ 
buffer
œœ 
.
œœ 
Append
œœ 
(
œœ 
obj
œœ 
)
œœ 
;
œœ 
}
–– 
catch
—— 	
(
——	 

	Exception
——
 
ex
—— 
)
—— 
{
““ 
buffer
”” 
.
”” 
Append
”” 
(
”” 
$str
”” !
)
””! "
.
””" #
Append
””# )
(
””) *
ex
””* ,
.
””, -
Message
””- 4
)
””4 5
.
””5 6
Append
””6 <
(
””< =
$str
””= @
)
””@ A
;
””A B
}
‘‘ 
}
€€ 
}
‹‹ 
private
ÈÈ 
readonly
ÈÈ 
static
ÈÈ 
Type
ÈÈ !
declaringType
ÈÈ" /
=
ÈÈ0 1
typeof
ÈÈ2 8
(
ÈÈ8 9 
SystemStringFormat
ÈÈ9 K
)
ÈÈK L
;
ÈÈL M
}
ÏÏ 
}ÌÌ ã"
AC:\sonarqube\projects\log4net-2.0.7\src\Util\TextWriterAdapter.cs
	namespace 	
log4net
 
. 
Util 
{ 
public&& 
abstract&& 
class&& 
TextWriterAdapter&& (
:&&) *

TextWriter&&+ 5
{'' 
private-- 	

TextWriter--
 
m_writer-- 
;-- 
	protected>> 
TextWriterAdapter>> 
(>> 

TextWriter>> (
writer>>) /
)>>/ 0
:>>1 2
base>>4 8
(>>8 9
CultureInfo>>9 D
.>>D E
InvariantCulture>>E U
)>>U V
{?? 
m_writer@@ 
=@@ 
writer@@ 
;@@ 
}AA 
	protectedRR 

TextWriterRR 
WriterRR 
{SS 
getTT 
{TT 
returnTT	 
m_writerTT 
;TT 
}TT 
setUU 
{UU 
m_writerUU	 
=UU 
valueUU 
;UU 
}UU 
}VV 
overridegg 

publicgg 
Encodinggg 
Encodinggg #
{hh 
getii 
{ii 
returnii	 
m_writerii 
.ii 
Encodingii !
;ii! "
}ii# $
}jj 
overrideww 

publicww 
IFormatProviderww !
FormatProviderww" 0
{xx 
getyy 
{yy 
returnyy	 
m_writeryy 
.yy 
FormatProvideryy '
;yy' (
}yy) *
}zz 
override
áá 

public
áá 
String
áá 
NewLine
áá  
{
àà 
get
ââ 
{
ââ 
return
ââ	 
m_writer
ââ 
.
ââ 
NewLine
ââ  
;
ââ  !
}
ââ" #
set
ää 
{
ää 
m_writer
ää	 
.
ää 
NewLine
ää 
=
ää 
value
ää !
;
ää! "
}
ää# $
}
ãã 
override
ûû 

public
ûû 
void
ûû 
Close
ûû 
(
ûû 
)
ûû 
{
üü 
m_writer
†† 
.
†† 
Close
†† 
(
†† 
)
†† 
;
†† 
}
°° 
override
≠≠ 

	protected
≠≠ 
void
≠≠ 
Dispose
≠≠ !
(
≠≠! "
bool
≠≠" &
	disposing
≠≠' 0
)
≠≠0 1
{
ÆÆ 
if
ØØ 
(
ØØ 
	disposing
ØØ 
)
ØØ 
{
∞∞ 
(
±± 
(
±± 
IDisposable
±± 
)
±± 
m_writer
±± 
)
±± 
.
±± 
Dispose
±± #
(
±±# $
)
±±$ %
;
±±% &
}
≤≤ 
}
≥≥ 
override
ææ 

public
ææ 
void
ææ 
Flush
ææ 
(
ææ 
)
ææ 
{
øø 
m_writer
¿¿ 
.
¿¿ 
Flush
¿¿ 
(
¿¿ 
)
¿¿ 
;
¿¿ 
}
¡¡ 
override
ÃÃ 

public
ÃÃ 
void
ÃÃ 
Write
ÃÃ 
(
ÃÃ 
char
ÃÃ !
value
ÃÃ" '
)
ÃÃ' (
{
ÕÕ 
m_writer
ŒŒ 
.
ŒŒ 
Write
ŒŒ 
(
ŒŒ 
value
ŒŒ 
)
ŒŒ 
;
ŒŒ 
}
œœ 
override
‹‹ 

public
‹‹ 
void
‹‹ 
Write
‹‹ 
(
‹‹ 
char
‹‹ !
[
‹‹! "
]
‹‹" #
buffer
‹‹$ *
,
‹‹* +
int
‹‹, /
index
‹‹0 5
,
‹‹5 6
int
‹‹7 :
count
‹‹; @
)
‹‹@ A
{
›› 
m_writer
ﬁﬁ 
.
ﬁﬁ 
Write
ﬁﬁ 
(
ﬁﬁ 
buffer
ﬁﬁ 
,
ﬁﬁ 
index
ﬁﬁ 
,
ﬁﬁ  
count
ﬁﬁ! &
)
ﬁﬁ& '
;
ﬁﬁ' (
}
ﬂﬂ 
override
ÍÍ 

public
ÍÍ 
void
ÍÍ 
Write
ÍÍ 
(
ÍÍ 
String
ÍÍ #
value
ÍÍ$ )
)
ÍÍ) *
{
ÎÎ 
m_writer
ÏÏ 
.
ÏÏ 
Write
ÏÏ 
(
ÏÏ 
value
ÏÏ 
)
ÏÏ 
;
ÏÏ 
}
ÌÌ 
}
 
}ÒÒ Ù
GC:\sonarqube\projects\log4net-2.0.7\src\Util\ThreadContextProperties.cs
	namespace 	
log4net
 
. 
Util 
{ 
public%% 
sealed%% 
class%% #
ThreadContextProperties%% ,
:%%- .!
ContextPropertiesBase%%/ D
{&& 
[22 
ThreadStatic22 
]22 
private33 	
static33
  
PropertiesDictionary33 %
_dictionary33& 1
;331 2
internalBB 
#
ThreadContextPropertiesBB "
(BB" #
)BB# $
{CC 
}DD 
overrideUU 

publicUU 
objectUU 
thisUU 
[UU 
stringUU $
keyUU% (
]UU( )
{VV 
getWW 
{XX 
if\\ 
(\\ 
_dictionary\\ 
!=\\ 
null\\ 
)\\ 
{]] 
return^^ 
_dictionary^^ 
[^^ 
key^^ 
]^^ 
;^^ 
}__ 
return`` 

null`` 
;`` 
}aa 
setbb 
{cc 
GetPropertiesdd 
(dd 
truedd 
)dd 
[dd 
keydd 
]dd 
=dd 
valuedd $
;dd$ %
}ee 
}ff 
publicuu 
voiduu	 
Removeuu 
(uu 
stringuu 
keyuu 
)uu  
{vv 
ifzz 
(zz 
_dictionaryzz 
!=zz 
nullzz 
)zz 
{{{ 
_dictionary|| 
.|| 
Remove|| 
(|| 
key|| 
)|| 
;|| 
}}} 
}~~ 
public
áá 
string
áá	 
[
áá 
]
áá 
GetKeys
áá 
(
áá 
)
áá 
{
àà 
if
åå 
(
åå 
_dictionary
åå 
!=
åå 
null
åå 
)
åå 
{
çç 
return
éé 

_dictionary
éé 
.
éé 
GetKeys
éé 
(
éé 
)
éé  
;
éé  !
}
èè 
return
êê 	
null
êê
 
;
êê 
}
ëë 
public
õõ 
void
õõ	 
Clear
õõ 
(
õõ 
)
õõ 
{
úú 
if
†† 
(
†† 
_dictionary
†† 
!=
†† 
null
†† 
)
†† 
{
°° 
_dictionary
¢¢ 
.
¢¢ 
Clear
¢¢ 
(
¢¢ 
)
¢¢ 
;
¢¢ 
}
££ 
}
§§ 
internal
∂∂ 
"
PropertiesDictionary
∂∂ 
GetProperties
∂∂  -
(
∂∂- .
bool
∂∂. 2
create
∂∂3 9
)
∂∂9 :
{
∑∑ 
if
ªª 
(
ªª 
_dictionary
ªª 
==
ªª 
null
ªª 
&&
ªª 
create
ªª $
)
ªª$ %
{
ºº 
_dictionary
ΩΩ 
=
ΩΩ 
new
ΩΩ "
PropertiesDictionary
ΩΩ +
(
ΩΩ+ ,
)
ΩΩ, -
;
ΩΩ- .
}
¡¡ 
return
¬¬ 	
_dictionary
¬¬
 
;
¬¬ 
}
√√ 
}
∆∆ 
}«« ﬁ]
IC:\sonarqube\projects\log4net-2.0.7\src\Util\LogicalThreadContextStack.cs
	namespace 	
log4net
 
. 
Util 
{ 
public!! 
delegate!! 
void!! 
TwoArgAction!! "
<!!" #
T1!!# %
,!!% &
T2!!' )
>!!) *
(!!* +
T1!!+ -
t1!!. 0
,!!0 1
T2!!2 4
t2!!5 7
)!!7 8
;!!8 9
public// 
sealed// 
class// %
LogicalThreadContextStack// .
:/// 0
IFixingRequired//1 @
{00 
private66 	
Stack66
 
m_stack66 
=66 
new66 
Stack66 #
(66# $
)66$ %
;66% &
private<< 	
string<<
 
m_propertyKey<< 
;<< 
privateCC 	
TwoArgActionCC
 
<CC 
stringCC 
,CC %
LogicalThreadContextStackCC 8
>CC8 9
m_registerNewCC: G
;CCG H
internalUU 
%
LogicalThreadContextStackUU $
(UU$ %
stringUU% +
propertyKeyUU, 7
,UU7 8
TwoArgActionUU9 E
<UUE F
stringUUF L
,UUL M%
LogicalThreadContextStackUUN g
>UUg h
registerNewUUi t
)UUt u
{YY 
m_propertyKeyZZ 
=ZZ 
propertyKeyZZ 
;ZZ 
m_registerNew[[ 
=[[ 
registerNew[[ 
;[[ 
}\\ 
publicoo 
intoo	 
Countoo 
{pp 
getqq 
{qq 
returnqq	 
m_stackqq 
.qq 
Countqq 
;qq 
}qq  
}rr 
public
áá 
void
áá	 
Clear
áá 
(
áá 
)
áá 
{
àà 
m_registerNew
ââ 
(
ââ 
m_propertyKey
ââ 
,
ââ 
new
ââ  #'
LogicalThreadContextStack
ââ$ =
(
ââ= >
m_propertyKey
ââ> K
,
ââK L
m_registerNew
ââM Z
)
ââZ [
)
ââ[ \
;
ââ\ ]
}
ää 
public
óó 
string
óó	 
Pop
óó 
(
óó 
)
óó 
{
òò 
Stack
öö 
stack
öö	 
=
öö 
new
öö 
Stack
öö 
(
öö 
new
öö 
Stack
öö $
(
öö$ %
m_stack
öö% ,
)
öö, -
)
öö- .
;
öö. /
string
õõ 	
result
õõ
 
=
õõ 
$str
õõ 
;
õõ 
if
úú 
(
úú 
stack
úú 
.
úú 
Count
úú 
>
úú 
$num
úú 
)
úú 
{
ùù 
result
ûû 

=
ûû 
(
ûû 
(
ûû 

StackFrame
ûû 
)
ûû 
(
ûû 
stack
ûû  
.
ûû  !
Pop
ûû! $
(
ûû$ %
)
ûû% &
)
ûû& '
)
ûû' (
.
ûû( )
Message
ûû) 0
;
ûû0 1
}
üü '
LogicalThreadContextStack
†† 
ltcs
†† !
=
††" #
new
††$ ''
LogicalThreadContextStack
††( A
(
††A B
m_propertyKey
††B O
,
††O P
m_registerNew
††Q ^
)
††^ _
;
††_ `
ltcs
°° 
.
°° 
m_stack
°° 
=
°° 
stack
°° 
;
°° 
m_registerNew
¢¢ 
(
¢¢ 
m_propertyKey
¢¢ 
,
¢¢ 
ltcs
¢¢  $
)
¢¢$ %
;
¢¢% &
return
££ 	
result
££
 
;
££ 
}
§§ 
public
ΩΩ 
IDisposable
ΩΩ	 
Push
ΩΩ 
(
ΩΩ 
string
ΩΩ  
message
ΩΩ! (
)
ΩΩ( )
{
ææ 
Stack
¿¿ 
stack
¿¿	 
=
¿¿ 
new
¿¿ 
Stack
¿¿ 
(
¿¿ 
new
¿¿ 
Stack
¿¿ $
(
¿¿$ %
m_stack
¿¿% ,
)
¿¿, -
)
¿¿- .
;
¿¿. /
stack
¡¡ 
.
¡¡ 	
Push
¡¡	 
(
¡¡ 
new
¡¡ 

StackFrame
¡¡ 
(
¡¡ 
message
¡¡ $
,
¡¡$ %
(
¡¡& '
stack
¡¡' ,
.
¡¡, -
Count
¡¡- 2
>
¡¡3 4
$num
¡¡5 6
)
¡¡6 7
?
¡¡8 9
(
¡¡: ;

StackFrame
¡¡; E
)
¡¡E F
stack
¡¡F K
.
¡¡K L
Peek
¡¡L P
(
¡¡P Q
)
¡¡Q R
:
¡¡S T
null
¡¡U Y
)
¡¡Y Z
)
¡¡Z [
;
¡¡[ \'
LogicalThreadContextStack
√√ 
contextStack
√√ )
=
√√* +
new
√√, /'
LogicalThreadContextStack
√√0 I
(
√√I J
m_propertyKey
√√J W
,
√√W X
m_registerNew
√√Y f
)
√√f g
;
√√g h
contextStack
ƒƒ 
.
ƒƒ 
m_stack
ƒƒ 
=
ƒƒ 
stack
ƒƒ 
;
ƒƒ  
m_registerNew
≈≈ 
(
≈≈ 
m_propertyKey
≈≈ 
,
≈≈ 
contextStack
≈≈  ,
)
≈≈, -
;
≈≈- .
return
∆∆ 	
new
∆∆
 
AutoPopStackFrame
∆∆ 
(
∆∆  
contextStack
∆∆  ,
,
∆∆, -
stack
∆∆. 3
.
∆∆3 4
Count
∆∆4 9
-
∆∆: ;
$num
∆∆< =
)
∆∆= >
;
∆∆> ?
}
«« 
internal
—— 

string
—— 
GetFullMessage
——  
(
——  !
)
——! "
{
““ 
Stack
”” 
stack
””	 
=
”” 
m_stack
”” 
;
”” 
if
‘‘ 
(
‘‘ 
stack
‘‘ 
.
‘‘ 
Count
‘‘ 
>
‘‘ 
$num
‘‘ 
)
‘‘ 
{
’’ 
return
÷÷ 

(
÷÷ 
(
÷÷ 

StackFrame
÷÷ 
)
÷÷ 
(
÷÷ 
stack
÷÷ 
.
÷÷ 
Peek
÷÷ #
(
÷÷# $
)
÷÷$ %
)
÷÷% &
)
÷÷& '
.
÷÷' (
FullMessage
÷÷( 3
;
÷÷3 4
}
◊◊ 
return
ÿÿ 	
null
ÿÿ
 
;
ÿÿ 
}
ŸŸ 
internal
ÊÊ 

Stack
ÊÊ 
InternalStack
ÊÊ 
{
ÁÁ 
get
ËË 
{
ËË 
return
ËË	 
m_stack
ËË 
;
ËË 
}
ËË 
set
ÈÈ 
{
ÈÈ 
m_stack
ÈÈ	 
=
ÈÈ 
value
ÈÈ 
;
ÈÈ 
}
ÈÈ 
}
ÍÍ 
public
˜˜ 
override
˜˜	 
string
˜˜ 
ToString
˜˜ !
(
˜˜! "
)
˜˜" #
{
¯¯ 
return
˘˘ 	
GetFullMessage
˘˘
 
(
˘˘ 
)
˘˘ 
;
˘˘ 
}
˙˙ 
object
ÖÖ 
IFixingRequired
ÖÖ	 
.
ÖÖ 
GetFixedObject
ÖÖ '
(
ÖÖ' (
)
ÖÖ( )
{
ÜÜ 
return
áá 	
GetFullMessage
áá
 
(
áá 
)
áá 
;
áá 
}
àà 
private
íí 	
sealed
íí
 
class
íí 

StackFrame
íí !
{
ìì 
private
ññ 

readonly
ññ 
string
ññ 
	m_message
ññ $
;
ññ$ %
private
óó 

readonly
óó 

StackFrame
óó 
m_parent
óó '
;
óó' (
private
òò 

string
òò 
m_fullMessage
òò 
=
òò  !
null
òò" &
;
òò& '
internal
©© 

StackFrame
©© 
(
©© 
string
©© 
message
©© %
,
©©% &

StackFrame
©©' 1
parent
©©2 8
)
©©8 9
{
™™ 
	m_message
´´ 
=
´´ 
message
´´ 
;
´´ 
m_parent
¨¨ 
=
¨¨ 
parent
¨¨ 
;
¨¨ 
if
ÆÆ 
(
ÆÆ 
parent
ÆÆ 
==
ÆÆ 
null
ÆÆ 
)
ÆÆ 
{
ØØ 
m_fullMessage
∞∞ 
=
∞∞ 
message
∞∞ 
;
∞∞ 
}
±± 
}
≤≤ 
internal
¡¡ 
string
¡¡ 
Message
¡¡ 
{
¬¬ 
get
√√ 
{
√√ 	
return
√√
 
	m_message
√√ 
;
√√ 
}
√√ 
}
ƒƒ 
internal
—— 
string
—— 
FullMessage
—— 
{
““ 
get
”” 
{
‘‘ 
if
’’ 
(
’’ 	
m_fullMessage
’’	 
==
’’ 
null
’’ 
&&
’’ !
m_parent
’’" *
!=
’’+ -
null
’’. 2
)
’’2 3
{
÷÷ 
m_fullMessage
◊◊ 
=
◊◊ 
string
◊◊ 
.
◊◊ 
Concat
◊◊ #
(
◊◊# $
m_parent
◊◊$ ,
.
◊◊, -
FullMessage
◊◊- 8
,
◊◊8 9
$str
◊◊: =
,
◊◊= >
	m_message
◊◊? H
)
◊◊H I
;
◊◊I J
}
ÿÿ 
return
ŸŸ 
m_fullMessage
ŸŸ 
;
ŸŸ 
}
⁄⁄ 
}
€€ 
}
ﬁﬁ 
private
ÈÈ 	
struct
ÈÈ
 
AutoPopStackFrame
ÈÈ "
:
ÈÈ# $
IDisposable
ÈÈ% 0
{
ÍÍ 
private
 

int
 
m_frameDepth
 
;
 
private
ıı 
'
LogicalThreadContextStack
ıı $)
m_logicalThreadContextStack
ıı% @
;
ıı@ A
internal
ÜÜ 
AutoPopStackFrame
ÜÜ 
(
ÜÜ '
LogicalThreadContextStack
ÜÜ 7'
logicalThreadContextStack
ÜÜ8 Q
,
ÜÜQ R
int
ÜÜS V

frameDepth
ÜÜW a
)
ÜÜa b
{
áá 
m_frameDepth
àà 
=
àà 

frameDepth
àà 
;
àà )
m_logicalThreadContextStack
ââ 
=
ââ  !'
logicalThreadContextStack
ââ" ;
;
ââ; <
}
ää 
public
òò 	
void
òò
 
Dispose
òò 
(
òò 
)
òò 
{
ôô 
if
öö 
(
öö 
m_frameDepth
öö 
>=
öö 
$num
öö 
&&
öö )
m_logicalThreadContextStack
öö 8
.
öö8 9
m_stack
öö9 @
!=
ööA C
null
ööD H
)
ööH I
{
õõ 
Stack
úú 

stack
úú 
=
úú 
new
úú 
Stack
úú 
(
úú 
new
úú  
Stack
úú! &
(
úú& ')
m_logicalThreadContextStack
úú' B
.
úúB C
m_stack
úúC J
)
úúJ K
)
úúK L
;
úúL M
while
ùù 

(
ùù 
stack
ùù 
.
ùù 
Count
ùù 
>
ùù 
m_frameDepth
ùù &
)
ùù& '
{
ûû 
stack
üü 
.
üü 
Pop
üü 
(
üü 
)
üü 
;
üü 
}
†† '
LogicalThreadContextStack
°° 
ltcs
°° #
=
°°$ %
new
°°& )'
LogicalThreadContextStack
°°* C
(
°°C D)
m_logicalThreadContextStack
°°D _
.
°°_ `
m_propertyKey
°°` m
,
°°m n*
m_logicalThreadContextStack°°o ä
.°°ä ã
m_registerNew°°ã ò
)°°ò ô
;°°ô ö
ltcs
¢¢ 	
.
¢¢	 

m_stack
¢¢
 
=
¢¢ 
stack
¢¢ 
;
¢¢ )
m_logicalThreadContextStack
££  
.
££  !
m_registerNew
££! .
(
££. /)
m_logicalThreadContextStack
££/ J
.
££J K
m_propertyKey
££K X
,
££X Y
ltcs
§§ 

)
§§
 
;
§§ 
}
•• 
}
¶¶ 
}
©© 
}
´´ 
}¨¨ ‰>
BC:\sonarqube\projects\log4net-2.0.7\src\Util\ThreadContextStack.cs
	namespace 	
log4net
 
. 
Util 
{ 
public'' 
sealed'' 
class'' 
ThreadContextStack'' '
:''( )
IFixingRequired''* 9
{(( 
private.. 	
Stack..
 
m_stack.. 
=.. 
new.. 
Stack.. #
(..# $
)..$ %
;..% &
internal<< 

ThreadContextStack<< 
(<< 
)<< 
{== 
}>> 
publicQQ 
intQQ	 
CountQQ 
{RR 
getSS 
{SS 
returnSS	 
m_stackSS 
.SS 
CountSS 
;SS 
}SS  
}TT 
publicii 
voidii	 
Clearii 
(ii 
)ii 
{jj 
m_stackkk 

.kk
 
Clearkk 
(kk 
)kk 
;kk 
}ll 
publicyy 
stringyy	 
Popyy 
(yy 
)yy 
{zz 
Stack{{ 
stack{{	 
={{ 
m_stack{{ 
;{{ 
if|| 
(|| 
stack|| 
.|| 
Count|| 
>|| 
$num|| 
)|| 
{}} 
return~~ 

(~~ 
(~~ 

StackFrame~~ 
)~~ 
(~~ 
stack~~ 
.~~ 
Pop~~ "
(~~" #
)~~# $
)~~$ %
)~~% &
.~~& '
Message~~' .
;~~. /
} 
return
ÄÄ 	
$str
ÄÄ
 
;
ÄÄ 
}
ÅÅ 
public
öö 
IDisposable
öö	 
Push
öö 
(
öö 
string
öö  
message
öö! (
)
öö( )
{
õõ 
Stack
úú 
stack
úú	 
=
úú 
m_stack
úú 
;
úú 
stack
ùù 
.
ùù 	
Push
ùù	 
(
ùù 
new
ùù 

StackFrame
ùù 
(
ùù 
message
ùù $
,
ùù$ %
(
ùù& '
stack
ùù' ,
.
ùù, -
Count
ùù- 2
>
ùù2 3
$num
ùù3 4
)
ùù4 5
?
ùù6 7
(
ùù8 9

StackFrame
ùù9 C
)
ùùC D
stack
ùùD I
.
ùùI J
Peek
ùùJ N
(
ùùN O
)
ùùO P
:
ùùQ R
null
ùùS W
)
ùùW X
)
ùùX Y
;
ùùY Z
return
üü 	
new
üü
 
AutoPopStackFrame
üü 
(
üü  
stack
üü  %
,
üü% &
stack
üü' ,
.
üü, -
Count
üü- 2
-
üü3 4
$num
üü5 6
)
üü6 7
;
üü7 8
}
†† 
internal
™™ 

string
™™ 
GetFullMessage
™™  
(
™™  !
)
™™! "
{
´´ 
Stack
¨¨ 
stack
¨¨	 
=
¨¨ 
m_stack
¨¨ 
;
¨¨ 
if
≠≠ 
(
≠≠ 
stack
≠≠ 
.
≠≠ 
Count
≠≠ 
>
≠≠ 
$num
≠≠ 
)
≠≠ 
{
ÆÆ 
return
ØØ 

(
ØØ 
(
ØØ 

StackFrame
ØØ 
)
ØØ 
(
ØØ 
stack
ØØ 
.
ØØ 
Peek
ØØ #
(
ØØ# $
)
ØØ$ %
)
ØØ% &
)
ØØ& '
.
ØØ' (
FullMessage
ØØ( 3
;
ØØ3 4
}
∞∞ 
return
±± 	
null
±±
 
;
±± 
}
≤≤ 
internal
øø 

Stack
øø 
InternalStack
øø 
{
¿¿ 
get
¡¡ 
{
¡¡ 
return
¡¡	 
m_stack
¡¡ 
;
¡¡ 
}
¡¡ 
set
¬¬ 
{
¬¬ 
m_stack
¬¬	 
=
¬¬ 
value
¬¬ 
;
¬¬ 
}
¬¬ 
}
√√ 
public
–– 
override
––	 
string
–– 
ToString
–– !
(
––! "
)
––" #
{
—— 
return
““ 	
GetFullMessage
““
 
(
““ 
)
““ 
;
““ 
}
”” 
object
ﬁﬁ 
IFixingRequired
ﬁﬁ	 
.
ﬁﬁ 
GetFixedObject
ﬁﬁ '
(
ﬁﬁ' (
)
ﬁﬁ( )
{
ﬂﬂ 
return
‡‡ 	
GetFullMessage
‡‡
 
(
‡‡ 
)
‡‡ 
;
‡‡ 
}
·· 
private
ÎÎ 	
sealed
ÎÎ
 
class
ÎÎ 

StackFrame
ÎÎ !
{
ÏÏ 
private
ÔÔ 

readonly
ÔÔ 
string
ÔÔ 
	m_message
ÔÔ $
;
ÔÔ$ %
private
 

readonly
 

StackFrame
 
m_parent
 '
;
' (
private
ÒÒ 

string
ÒÒ 
m_fullMessage
ÒÒ 
=
ÒÒ  !
null
ÒÒ" &
;
ÒÒ& '
internal
ÇÇ 

StackFrame
ÇÇ 
(
ÇÇ 
string
ÇÇ 
message
ÇÇ %
,
ÇÇ% &

StackFrame
ÇÇ' 1
parent
ÇÇ2 8
)
ÇÇ8 9
{
ÉÉ 
	m_message
ÑÑ 
=
ÑÑ 
message
ÑÑ 
;
ÑÑ 
m_parent
ÖÖ 
=
ÖÖ 
parent
ÖÖ 
;
ÖÖ 
if
áá 
(
áá 
parent
áá 
==
áá 
null
áá 
)
áá 
{
àà 
m_fullMessage
ââ 
=
ââ 
message
ââ 
;
ââ 
}
ää 
}
ãã 
internal
öö 
string
öö 
Message
öö 
{
õõ 
get
úú 
{
úú 	
return
úú
 
	m_message
úú 
;
úú 
}
úú 
}
ùù 
internal
™™ 
string
™™ 
FullMessage
™™ 
{
´´ 
get
¨¨ 
{
≠≠ 
if
ÆÆ 
(
ÆÆ 	
m_fullMessage
ÆÆ	 
==
ÆÆ 
null
ÆÆ 
&&
ÆÆ !
m_parent
ÆÆ" *
!=
ÆÆ+ -
null
ÆÆ. 2
)
ÆÆ2 3
{
ØØ 
m_fullMessage
∞∞ 
=
∞∞ 
string
∞∞ 
.
∞∞ 
Concat
∞∞ #
(
∞∞# $
m_parent
∞∞$ ,
.
∞∞, -
FullMessage
∞∞- 8
,
∞∞8 9
$str
∞∞: =
,
∞∞= >
	m_message
∞∞? H
)
∞∞H I
;
∞∞I J
}
±± 
return
≤≤ 
m_fullMessage
≤≤ 
;
≤≤ 
}
≥≥ 
}
¥¥ 
}
∑∑ 
private
¬¬ 	
struct
¬¬
 
AutoPopStackFrame
¬¬ "
:
¬¬# $
IDisposable
¬¬% 0
{
√√ 
private
…… 

Stack
…… 
m_frameStack
…… 
;
…… 
private
ŒŒ 

int
ŒŒ 
m_frameDepth
ŒŒ 
;
ŒŒ 
internal
ﬂﬂ 
AutoPopStackFrame
ﬂﬂ 
(
ﬂﬂ 
Stack
ﬂﬂ #

frameStack
ﬂﬂ$ .
,
ﬂﬂ. /
int
ﬂﬂ0 3

frameDepth
ﬂﬂ4 >
)
ﬂﬂ> ?
{
‡‡ 
m_frameStack
·· 
=
·· 

frameStack
·· 
;
·· 
m_frameDepth
‚‚ 
=
‚‚ 

frameDepth
‚‚ 
;
‚‚ 
}
„„ 
public
ÒÒ 	
void
ÒÒ
 
Dispose
ÒÒ 
(
ÒÒ 
)
ÒÒ 
{
ÚÚ 
if
ÛÛ 
(
ÛÛ 
m_frameDepth
ÛÛ 
>=
ÛÛ 
$num
ÛÛ 
&&
ÛÛ 
m_frameStack
ÛÛ )
!=
ÛÛ* ,
null
ÛÛ- 1
)
ÛÛ1 2
{
ÙÙ 
while
ıı 

(
ıı
 
m_frameStack
ıı 
.
ıı 
Count
ıı 
>
ıı 
m_frameDepth
ıı  ,
)
ıı, -
{
ˆˆ 
m_frameStack
˜˜ 
.
˜˜ 
Pop
˜˜ 
(
˜˜ 
)
˜˜ 
;
˜˜ 
}
¯¯ 
}
˘˘ 
}
˙˙ 
}
˝˝ 
}
≤≤ 
}≥≥ Ö
JC:\sonarqube\projects\log4net-2.0.7\src\Util\LogicalThreadContextStacks.cs
	namespace 	
log4net
 
. 
Util 
{ 
public## 
sealed## 
class## &
LogicalThreadContextStacks## /
{$$ 
private%% 	
readonly%%
 *
LogicalThreadContextProperties%% 1
m_properties%%2 >
;%%> ?
internal11 
&
LogicalThreadContextStacks11 %
(11% &*
LogicalThreadContextProperties11& D

properties11E O
)11O P
{22 
m_properties33 
=33 

properties33 
;33 
}44 
publicEE %
LogicalThreadContextStackEE	 "
thisEE# '
[EE' (
stringEE( .
keyEE/ 2
]EE2 3
{FF 
getGG 
{HH %
LogicalThreadContextStackII 
stackII #
=II$ %
nullII& *
;II* +
objectKK 

propertyValueKK 
=KK 
m_propertiesKK '
[KK' (
keyKK( +
]KK+ ,
;KK, -
ifLL 
(LL 
propertyValueLL 
==LL 
nullLL 
)LL 
{MM 
stackPP 

=PP 
newPP %
LogicalThreadContextStackPP *
(PP* +
keyPP+ .
,PP. /
registerNewPP0 ;
)PP; <
;PP< =
m_propertiesTT 
[TT 
keyTT 
]TT 
=TT 
stackTT 
;TT 
}UU 
elseVV 
{WW 
stackYY 

=YY 
propertyValueYY 
asYY %
LogicalThreadContextStackYY 7
;YY7 8
ifZZ 
(ZZ 	
stackZZ	 
==ZZ 
nullZZ 
)ZZ 
{[[ 
string]] 
propertyValueString]]  
=]]! "

SystemInfo]]# -
.]]- .
NullText]]. 6
;]]6 7
try__ 	
{`` 
propertyValueStringaa 
=aa 
propertyValueaa *
.aa* +
ToStringaa+ 3
(aa3 4
)aa4 5
;aa5 6
}bb 
catchcc 
{dd 
}ee 
LogLoggg 
.gg 
Errorgg 
(gg 
declaringTypegg  
,gg  !
$strgg" R
+ggS T
keyggU X
+ggY Z
$str	gg[ ü
+
gg† °
propertyValue
gg¢ Ø
.
ggØ ∞
GetType
gg∞ ∑
(
gg∑ ∏
)
gg∏ π
.
ggπ ∫
Name
gg∫ æ
+
ggø ¿
$str
gg¡ —
+
gg“ ”!
propertyValueString
gg‘ Á
+
ggË È
$str
ggÍ Ì
)
ggÌ Ó
;
ggÓ Ô
stackjj 
=jj 
newjj %
LogicalThreadContextStackjj +
(jj+ ,
keyjj, /
,jj/ 0
registerNewjj1 <
)jj< =
;jj= >
}nn 
}oo 
returnqq 

stackqq 
;qq 
}rr 
}ss 
privateyy 	
voidyy
 
registerNewyy 
(yy 
stringyy !
	stackNameyy" +
,yy+ ,%
LogicalThreadContextStackyy- F
stackyyG L
)yyL M
{zz 
m_properties{{ 
[{{ 
	stackName{{ 
]{{ 
={{ 
stack{{ "
;{{" #
}|| 
private
ââ 	
readonly
ââ
 
static
ââ 
Type
ââ 
declaringType
ââ ,
=
ââ- .
typeof
ââ/ 5
(
ââ5 6(
LogicalThreadContextStacks
ââ6 P
)
ââP Q
;
ââQ R
}
åå 
}çç ∏
CC:\sonarqube\projects\log4net-2.0.7\src\Util\ThreadContextStacks.cs
	namespace 	
log4net
 
. 
Util 
{ 
public"" 
sealed"" 
class"" 
ThreadContextStacks"" (
{## 
private$$ 	
readonly$$
 !
ContextPropertiesBase$$ (
m_properties$$) 5
;$$5 6
internal00 

ThreadContextStacks00 
(00 !
ContextPropertiesBase00 4

properties005 ?
)00? @
{11 
m_properties22 
=22 

properties22 
;22 
}33 
publicDD 
ThreadContextStackDD	 
thisDD  
[DD  !
stringDD! '
keyDD( +
]DD+ ,
{EE 
getFF 
{GG 
ThreadContextStackHH 
stackHH 
=HH 
nullHH #
;HH# $
objectJJ 

propertyValueJJ 
=JJ 
m_propertiesJJ '
[JJ' (
keyJJ( +
]JJ+ ,
;JJ, -
ifKK 
(KK 
propertyValueKK 
==KK 
nullKK 
)KK 
{LL 
stackNN 

=NN 
newNN 
ThreadContextStackNN #
(NN# $
)NN$ %
;NN% &
m_propertiesOO 
[OO 
keyOO 
]OO 
=OO 
stackOO 
;OO 
}PP 
elseQQ 
{RR 
stackTT 

=TT 
propertyValueTT 
asTT 
ThreadContextStackTT 0
;TT0 1
ifUU 
(UU 	
stackUU	 
==UU 
nullUU 
)UU 
{VV 
stringXX 
propertyValueStringXX  
=XX! "

SystemInfoXX# -
.XX- .
NullTextXX. 6
;XX6 7
tryZZ 	
{[[ 
propertyValueString\\ 
=\\ 
propertyValue\\ *
.\\* +
ToString\\+ 3
(\\3 4
)\\4 5
;\\5 6
}]] 
catch^^ 
{__ 
}`` 
LogLogbb 
.bb 
Errorbb 
(bb 
declaringTypebb  
,bb  !
$strbb" R
+bbR S
keybbS V
+bbV W
$str	bbW õ
+
bbõ ú
propertyValue
bbú ©
.
bb© ™
GetType
bb™ ±
(
bb± ≤
)
bb≤ ≥
.
bb≥ ¥
Name
bb¥ ∏
+
bb∏ π
$str
bbπ …
+
bb…  !
propertyValueString
bb  ›
+
bb› ﬁ
$str
bbﬁ ·
)
bb· ‚
;
bb‚ „
stackdd 
=dd 
newdd 
ThreadContextStackdd $
(dd$ %
)dd% &
;dd& '
}ee 
}ff 
returnhh 

stackhh 
;hh 
}ii 
}jj 
privateww 
readonlyww 
staticww 
Typeww !
declaringTypeww" /
=ww0 1
typeofww2 8
(ww8 9
ThreadContextStacksww9 L
)wwL M
;wwM N
}zz 
}{{ À:
9C:\sonarqube\projects\log4net-2.0.7\src\Util\Transform.cs
	namespace 	
log4net
 
. 
Util 
{ 
public%% 
sealed%% 
class%% 
	Transform%% 
{&& 
private11 	
	Transform11
 
(11 
)11 
{22 
}33 
publicEE 
staticEE	 
voidEE !
WriteEscapedXmlStringEE *
(EE* +
	XmlWriterEE+ 4
writerEE5 ;
,EE; <
stringEE= C
textDataEED L
,EEL M
stringEEN T"
invalidCharReplacementEEU k
)EEk l
{FF 
stringGG 	

stringDataGG
 
=GG $
MaskXmlInvalidCharactersGG /
(GG/ 0
textDataGG0 8
,GG8 9"
invalidCharReplacementGG: P
)GGP Q
;GGQ R
intJJ 
weightCDataJJ 
=JJ 
$numJJ 
*JJ 
(JJ 
$numJJ 
+JJ 
CountSubstringsJJ .
(JJ. /

stringDataJJ/ 9
,JJ9 :
	CDATA_ENDJJ; D
)JJD E
)JJE F
;JJF G
intKK 
weightStringEscapesKK 
=KK 
$numKK 
*KK 
(KK  
CountSubstringsKK  /
(KK/ 0

stringDataKK0 :
,KK: ;
$strKK< ?
)KK? @
+KKA B
CountSubstringsKKC R
(KKR S

stringDataKKS ]
,KK] ^
$strKK_ b
)KKb c
)KKc d
+KKe f
$numKKg h
*KKh i
CountSubstringsKKi x
(KKx y

stringData	KKy É
,
KKÉ Ñ
$str
KKÖ à
)
KKà â
;
KKâ ä
ifMM 
(MM 
weightStringEscapesMM 
<=MM 
weightCDataMM )
)MM) *
{NN 
writerPP 

.PP
 
WriteStringPP 
(PP 

stringDataPP !
)PP! "
;PP" #
}QQ 
elseRR 
{SS 
intVV 
endVV 
=VV 

stringDataVV 
.VV 
IndexOfVV  
(VV  !
	CDATA_ENDVV! *
)VV* +
;VV+ ,
ifXX 
(XX 
endXX 
<XX 
$numXX 
)XX 
{YY 
writerZZ 
.ZZ 

WriteCDataZZ 
(ZZ 

stringDataZZ !
)ZZ! "
;ZZ" #
}[[ 
else\\ 
{]] 
int^^ 
start^^	 
=^^ 
$num^^ 
;^^ 
while__ 

(__ 
end__ 
>__ 
-__ 
$num__ 
)__ 
{`` 
writeraa 
.aa 

WriteCDataaa 
(aa 

stringDataaa "
.aa" #
	Substringaa# ,
(aa, -
startaa- 2
,aa2 3
endaa4 7
-aa8 9
startaa: ?
)aa? @
)aa@ A
;aaA B
ifbb 
(bb	 

endbb
 
==bb 

stringDatabb 
.bb 
Lengthbb "
-bb# $
$numbb% &
)bb& '
{cc 
startdd 
=dd 

stringDatadd 
.dd 
Lengthdd  
;dd  !
writeree 
.ee 
WriteStringee 
(ee 
	CDATA_ENDee #
)ee# $
;ee$ %
breakff 
;ff 
}gg 
elsehh 

{ii 
writerjj 
.jj 
WriteStringjj 
(jj #
CDATA_UNESCAPABLE_TOKENjj 1
)jj1 2
;jj2 3
startkk 
=kk 
endkk 
+kk 
$numkk 
;kk 
endll 

=ll 

stringDatall 
.ll 
IndexOfll 
(ll  
	CDATA_ENDll  )
,ll) *
startll+ 0
)ll0 1
;ll1 2
}mm 
}nn 
ifpp 
(pp 	
startpp	 
<pp 

stringDatapp 
.pp 
Lengthpp "
)pp" #
{qq 
writerrr 
.rr 

WriteCDatarr 
(rr 

stringDatarr "
.rr" #
	Substringrr# ,
(rr, -
startrr- 2
)rr2 3
)rr3 4
;rr4 5
}ss 
}tt 
}uu 
}vv 
public
àà 
static
àà	 
string
àà &
MaskXmlInvalidCharacters
àà /
(
àà/ 0
string
àà0 6
textData
àà7 ?
,
àà? @
string
ààA G
mask
ààH L
)
ààL M
{
ââ 
return
ää 	
INVALIDCHARS
ää
 
.
ää 
Replace
ää 
(
ää 
textData
ää '
,
ää' (
mask
ää) -
)
ää- .
;
ää. /
}
ãã 
private
úú 	
static
úú
 
int
úú 
CountSubstrings
úú $
(
úú$ %
string
úú% +
text
úú, 0
,
úú0 1
string
úú2 8
	substring
úú9 B
)
úúB C
{
ùù 
int
ûû 
count
ûû 
=
ûû 
$num
ûû 
;
ûû 
int
üü 
offset
üü 
=
üü 
$num
üü 
;
üü 
int
†† 
length
†† 
=
†† 
text
†† 
.
†† 
Length
†† 
;
†† 
int
°° 
substringLength
°° 
=
°° 
	substring
°° "
.
°°" #
Length
°°# )
;
°°) *
if
££ 
(
££ 
length
££ 
==
££ 
$num
££ 
)
££ 
{
§§ 
return
•• 

$num
•• 
;
•• 
}
¶¶ 
if
ßß 
(
ßß 
substringLength
ßß 
==
ßß 
$num
ßß 
)
ßß 
{
®® 
return
©© 

$num
©© 
;
©© 
}
™™ 
while
¨¨ 
(
¨¨ 	
offset
¨¨	 
<
¨¨ 
length
¨¨ 
)
¨¨ 
{
≠≠ 
int
ÆÆ 
index
ÆÆ 
=
ÆÆ 
text
ÆÆ 
.
ÆÆ 
IndexOf
ÆÆ 
(
ÆÆ 
	substring
ÆÆ &
,
ÆÆ& '
offset
ÆÆ( .
)
ÆÆ. /
;
ÆÆ/ 0
if
∞∞ 
(
∞∞ 
index
∞∞ 
==
∞∞ 
-
∞∞ 
$num
∞∞ 
)
∞∞ 
{
±± 
break
≤≤ 

;
≤≤
 
}
≥≥ 
count
µµ 	
++
µµ	 
;
µµ 
offset
∂∂ 

=
∂∂ 
index
∂∂ 
+
∂∂ 
substringLength
∂∂ $
;
∂∂$ %
}
∑∑ 
return
∏∏ 	
count
∏∏
 
;
∏∏ 
}
ππ 
private
øø 	
const
øø
 
string
øø 
	CDATA_END
øø  
=
øø! "
$str
øø# (
;
øø( )
private
¿¿ 	
const
¿¿
 
string
¿¿ %
CDATA_UNESCAPABLE_TOKEN
¿¿ .
=
¿¿/ 0
$str
¿¿1 5
;
¿¿5 6
private
≈≈ 	
static
≈≈
 
Regex
≈≈ 
INVALIDCHARS
≈≈ #
=
≈≈# $
new
≈≈$ '
Regex
≈≈( -
(
≈≈- .
$str
≈≈. X
,
≈≈X Y
RegexOptions
≈≈Y e
.
≈≈e f
Compiled
≈≈f n
)
≈≈n o
;
≈≈o p
}
«« 
}»» ‚
OC:\sonarqube\projects\log4net-2.0.7\src\Util\TypeConverters\BooleanConverter.cs
	namespace 	
log4net
 
. 
Util 
. 
TypeConverters %
{ 
internal%% 	
class%%
 
BooleanConverter%%  
:%%! "
IConvertFrom%%# /
{&& 
public44 
bool44	 
CanConvertFrom44 
(44 
Type44 !

sourceType44" ,
)44, -
{55 
return66 	
(66
 

sourceType66 
==66 
typeof66 
(66  
string66  &
)66& '
)66' (
;66( )
}77 
publicII 
objectII	 
ConvertFromII 
(II 
objectII "
sourceII# )
)II) *
{JJ 
stringKK 	
strKK
 
=KK 
sourceKK 
asKK 
stringKK  
;KK  !
ifLL 
(LL 
strLL 

!=LL 
nullLL 
)LL 
{MM 
returnNN 

boolNN 
.NN 
ParseNN 
(NN 
strNN 
)NN 
;NN 
}OO 
throwPP +
ConversionNotSupportedExceptionPP	 (
.PP( )
CreatePP) /
(PP/ 0
typeofPP0 6
(PP6 7
boolPP7 ;
)PP; <
,PP< =
sourcePP> D
)PPD E
;PPE F
}QQ 
}TT 
}UU ˙
^C:\sonarqube\projects\log4net-2.0.7\src\Util\TypeConverters\ConversionNotSupportedException.cs
	namespace 	
log4net
 
. 
Util 
. 
TypeConverters %
{ 
[(( 
Serializable(( 
](( 
public-- 
class-- +
ConversionNotSupportedException-- -
:--. / 
ApplicationException--0 D
{// 
public:: +
ConversionNotSupportedException::	 (
(::( )
)::) *
{;; 
}<< 
publicHH +
ConversionNotSupportedExceptionHH	 (
(HH( )
StringHH) /
messageHH0 7
)HH7 8
:HH9 :
baseHH; ?
(HH? @
messageHH@ G
)HHG H
{II 
}JJ 
publicWW +
ConversionNotSupportedExceptionWW	 (
(WW( )
StringWW) /
messageWW0 7
,WW7 8
	ExceptionWW9 B
innerExceptionWWC Q
)WWQ R
:WWS T
baseWWU Y
(WWY Z
messageWWZ a
,WWa b
innerExceptionWWc q
)WWq r
{XX 
}YY 
	protectedkk +
ConversionNotSupportedExceptionkk +
(kk+ ,
SerializationInfokk, =
infokk> B
,kkB C
StreamingContextkkD T
contextkkU \
)kk\ ]
:kk^ _
basekk` d
(kkd e
infokke i
,kki j
contextkkk r
)kkr s
{ll 
}mm 
public 
static	 +
ConversionNotSupportedException /
Create0 6
(6 7
Type7 ;
destinationType< K
,K L
objectM S
sourceValueT _
)_ `
{
ÄÄ 
return
ÅÅ 	
Create
ÅÅ
 
(
ÅÅ 
destinationType
ÅÅ  
,
ÅÅ  !
sourceValue
ÅÅ" -
,
ÅÅ- .
null
ÅÅ/ 3
)
ÅÅ3 4
;
ÅÅ4 5
}
ÇÇ 
public
êê 
static
êê	 -
ConversionNotSupportedException
êê /
Create
êê0 6
(
êê6 7
Type
êê7 ;
destinationType
êê< K
,
êêK L
object
êêM S
sourceValue
êêT _
,
êê_ `
	Exception
êêa j
innerException
êêk y
)
êêy z
{
ëë 
if
íí 
(
íí 
sourceValue
íí 
==
íí 
null
íí 
)
íí 
{
ìì 
return
îî 

new
îî -
ConversionNotSupportedException
îî .
(
îî. /
$str
îî/ V
+
îîV W
destinationType
îîW f
+
îîf g
$str
îîg j
,
îîj k
innerException
îîl z
)
îîz {
;
îî{ |
}
ïï 
else
ññ 
{
óó 
return
òò 

new
òò -
ConversionNotSupportedException
òò .
(
òò. /
$str
òò/ K
+
òòK L
sourceValue
òòL W
.
òòW X
GetType
òòX _
(
òò_ `
)
òò` a
+
òòa b
$str
òòb m
+
òòm n
sourceValue
òòn y
+
òòy z
$stròòz á
+òòá à
destinationTypeòòà ó
+òòó ò
$stròòò õ
,òòõ ú
innerExceptionòòù ´
)òò´ ¨
;òò¨ ≠
}
ôô 
}
öö 
}
ùù 
}ûû ·R
PC:\sonarqube\projects\log4net-2.0.7\src\Util\TypeConverters\ConverterRegistry.cs
	namespace 	
log4net
 
. 
Util 
. 
TypeConverters %
{ 
public11 
sealed11 
class11 
ConverterRegistry11 &
{22 
private;; 	
ConverterRegistry;;
 
(;; 
);; 
{<< 
}== 
staticKK 
ConverterRegistryKK	 
(KK 
)KK 
{LL 
AddConverterNN 
(NN 
typeofNN 
(NN 
boolNN 
)NN 
,NN 
typeofNN $
(NN$ %
BooleanConverterNN% 5
)NN5 6
)NN6 7
;NN7 8
AddConverterOO 
(OO 
typeofOO 
(OO 
SystemOO 
.OO 
TextOO "
.OO" #
EncodingOO# +
)OO+ ,
,OO, -
typeofOO. 4
(OO4 5
EncodingConverterOO5 F
)OOF G
)OOG H
;OOH I
AddConverterPP 
(PP 
typeofPP 
(PP 
SystemPP 
.PP 
TypePP "
)PP" #
,PP# $
typeofPP% +
(PP+ ,
TypeConverterPP, 9
)PP9 :
)PP: ;
;PP; <
AddConverterQQ 
(QQ 
typeofQQ 
(QQ 
log4netQQ 
.QQ 
LayoutQQ %
.QQ% &
PatternLayoutQQ& 3
)QQ3 4
,QQ4 5
typeofQQ6 <
(QQ< ="
PatternLayoutConverterQQ= S
)QQS T
)QQT U
;QQU V
AddConverterRR 
(RR 
typeofRR 
(RR 
log4netRR 
.RR 
UtilRR #
.RR# $
PatternStringRR$ 1
)RR1 2
,RR2 3
typeofRR4 :
(RR: ;"
PatternStringConverterRR; Q
)RRQ R
)RRR S
;RRS T
AddConverterSS 
(SS 
typeofSS 
(SS 
SystemSS 
.SS 
NetSS !
.SS! "
	IPAddressSS" +
)SS+ ,
,SS, -
typeofSS. 4
(SS4 5
IPAddressConverterSS5 G
)SSG H
)SSH I
;SSI J
}TT 
publicdd 
staticdd	 
voiddd 
AddConverterdd !
(dd! "
Typedd" &
destinationTypedd' 6
,dd6 7
objectdd8 >
	converterdd? H
)ddH I
{ee 
ifff 
(ff 
destinationTypeff 
!=ff 
nullff 
&&ff !
	converterff" +
!=ff, .
nullff/ 3
)ff3 4
{gg 
lockhh 
(hh 	
s_type2converterhh	 
)hh 
{ii 
s_type2converterjj 
[jj 
destinationTypejj %
]jj% &
=jj' (
	converterjj) 2
;jj2 3
}kk 
}ll 
}mm 
publicyy 
staticyy	 
voidyy 
AddConverteryy !
(yy! "
Typeyy" &
destinationTypeyy' 6
,yy6 7
Typeyy8 <
converterTypeyy= J
)yyJ K
{zz 
AddConverter{{ 
({{ 
destinationType{{ 
,{{  #
CreateConverterInstance{{! 8
({{8 9
converterType{{9 F
){{F G
){{G H
;{{H I
}|| 
public
åå 
static
åå	 

IConvertTo
åå 
GetConvertTo
åå '
(
åå' (
Type
åå( ,

sourceType
åå- 7
,
åå7 8
Type
åå9 =
destinationType
åå> M
)
ååM N
{
çç 
lock
ìì 
(
ìì 
s_type2converter
ìì 
)
ìì 
{
îî 

IConvertTo
ññ 
	converter
ññ 
=
ññ 
s_type2converter
ññ +
[
ññ+ ,

sourceType
ññ, 6
]
ññ6 7
as
ññ8 :

IConvertTo
ññ; E
;
ññE F
if
òò 
(
òò 
	converter
òò 
==
òò 
null
òò 
)
òò 
{
ôô 
	converter
õõ 
=
õõ '
GetConverterFromAttribute
õõ *
(
õõ* +

sourceType
õõ+ 5
)
õõ5 6
as
õõ7 9

IConvertTo
õõ: D
;
õõD E
if
ùù 
(
ùù 	
	converter
ùù	 
!=
ùù 
null
ùù 
)
ùù 
{
ûû 
s_type2converter
†† 
[
†† 

sourceType
†† !
]
††! "
=
††# $
	converter
††% .
;
††. /
}
°° 
}
¢¢ 
return
§§ 

	converter
§§ 
;
§§ 
}
•• 
}
¶¶ 
public
µµ 
static
µµ	 
IConvertFrom
µµ 
GetConvertFrom
µµ +
(
µµ+ ,
Type
µµ, 0
destinationType
µµ1 @
)
µµ@ A
{
∂∂ 
lock
∫∫ 
(
∫∫ 
s_type2converter
∫∫ 
)
∫∫ 
{
ªª 
IConvertFrom
ΩΩ 
	converter
ΩΩ 
=
ΩΩ 
s_type2converter
ΩΩ -
[
ΩΩ- .
destinationType
ΩΩ. =
]
ΩΩ= >
as
ΩΩ? A
IConvertFrom
ΩΩB N
;
ΩΩN O
if
øø 
(
øø 
	converter
øø 
==
øø 
null
øø 
)
øø 
{
¿¿ 
	converter
¬¬ 
=
¬¬ '
GetConverterFromAttribute
¬¬ *
(
¬¬* +
destinationType
¬¬+ :
)
¬¬: ;
as
¬¬< >
IConvertFrom
¬¬? K
;
¬¬K L
if
ƒƒ 
(
ƒƒ 	
	converter
ƒƒ	 
!=
ƒƒ 
null
ƒƒ 
)
ƒƒ 
{
≈≈ 
s_type2converter
«« 
[
«« 
destinationType
«« &
]
««& '
=
««( )
	converter
««* 3
;
««3 4
}
»» 
}
…… 
return
ÀÀ 

	converter
ÀÀ 
;
ÀÀ 
}
ÃÃ 
}
ÕÕ 
private
ÿÿ 	
static
ÿÿ
 
object
ÿÿ '
GetConverterFromAttribute
ÿÿ 1
(
ÿÿ1 2
Type
ÿÿ2 6
destinationType
ÿÿ7 F
)
ÿÿF G
{
ŸŸ 
object
€€ 	
[
€€	 

]
€€
 

attributes
€€ 
=
€€ 
destinationType
€€ (
.
€€( )!
GetCustomAttributes
€€) <
(
€€< =
typeof
€€= C
(
€€C D$
TypeConverterAttribute
€€D Z
)
€€Z [
,
€€[ \
true
€€] a
)
€€a b
;
€€b c
if
‹‹ 
(
‹‹ 

attributes
‹‹ 
!=
‹‹ 
null
‹‹ 
&&
‹‹ 

attributes
‹‹ '
.
‹‹' (
Length
‹‹( .
>
‹‹/ 0
$num
‹‹1 2
)
‹‹2 3
{
›› $
TypeConverterAttribute
ﬁﬁ 
tcAttr
ﬁﬁ !
=
ﬁﬁ" #

attributes
ﬁﬁ$ .
[
ﬁﬁ. /
$num
ﬁﬁ/ 0
]
ﬁﬁ0 1
as
ﬁﬁ2 4$
TypeConverterAttribute
ﬁﬁ5 K
;
ﬁﬁK L
if
ﬂﬂ 
(
ﬂﬂ 
tcAttr
ﬂﬂ 
!=
ﬂﬂ 
null
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
Type
·· 	
converterType
··
 
=
·· 

SystemInfo
·· $
.
··$ %
GetTypeFromString
··% 6
(
··6 7
destinationType
··7 F
,
··F G
tcAttr
··H N
.
··N O
ConverterTypeName
··O `
,
··` a
false
··b g
,
··g h
true
··i m
)
··m n
;
··n o
return
‚‚ %
CreateConverterInstance
‚‚ #
(
‚‚# $
converterType
‚‚$ 1
)
‚‚1 2
;
‚‚2 3
}
„„ 
}
‰‰ 
return
ÁÁ 	
null
ÁÁ
 
;
ÁÁ 
}
ËË 
private
˘˘ 	
static
˘˘
 
object
˘˘ %
CreateConverterInstance
˘˘ /
(
˘˘/ 0
Type
˘˘0 4
converterType
˘˘5 B
)
˘˘B C
{
˙˙ 
if
˚˚ 
(
˚˚ 
converterType
˚˚ 
==
˚˚ 
null
˚˚ 
)
˚˚ 
{
¸¸ 
throw
˝˝ 	
new
˝˝
 #
ArgumentNullException
˝˝ #
(
˝˝# $
$str
˝˝$ 3
,
˝˝3 4
$str
˝˝5 |
)
˝˝| }
;
˝˝} ~
}
˛˛ 
if
ÅÅ 
(
ÅÅ 
typeof
ÅÅ 
(
ÅÅ 
IConvertFrom
ÅÅ 
)
ÅÅ 
.
ÅÅ 
IsAssignableFrom
ÅÅ ,
(
ÅÅ, -
converterType
ÅÅ- :
)
ÅÅ: ;
||
ÅÅ< >
typeof
ÅÅ? E
(
ÅÅE F

IConvertTo
ÅÅF P
)
ÅÅP Q
.
ÅÅQ R
IsAssignableFrom
ÅÅR b
(
ÅÅb c
converterType
ÅÅc p
)
ÅÅp q
)
ÅÅq r
{
ÇÇ 
try
ÉÉ 
{
ÑÑ 
return
ÜÜ 
	Activator
ÜÜ 
.
ÜÜ 
CreateInstance
ÜÜ $
(
ÜÜ$ %
converterType
ÜÜ% 2
)
ÜÜ2 3
;
ÜÜ3 4
}
áá 
catch
àà 	
(
àà	 

	Exception
àà
 
ex
àà 
)
àà 
{
ââ 
LogLog
ää 
.
ää 
Error
ää 
(
ää 
declaringType
ää 
,
ää  
$str
ää! K
+
ääK L
converterType
ääL Y
.
ääY Z
FullName
ääZ b
+
ääb c
$strääc ï
,ääï ñ
exääó ô
)ääô ö
;ääö õ
}
ãã 
}
åå 
else
çç 
{
éé 
LogLog
èè 

.
èè
 
Error
èè 
(
èè 
declaringType
èè 
,
èè 
$str
èè  J
+
èèJ K
converterType
èèK X
.
èèX Y
FullName
èèY a
+
èèa b
$strèèb ô
)èèô ö
;èèö õ
}
êê 
return
ëë 	
null
ëë
 
;
ëë 
}
íí 
private
üü 
readonly
üü 
static
üü 
Type
üü !
declaringType
üü" /
=
üü0 1
typeof
üü2 8
(
üü8 9
ConverterRegistry
üü9 J
)
üüJ K
;
üüK L
private
§§ 	
static
§§
 
	Hashtable
§§ 
s_type2converter
§§ +
=
§§, -
new
§§. 1
	Hashtable
§§2 ;
(
§§; <
)
§§< =
;
§§= >
}
ßß 
}®® Ú
PC:\sonarqube\projects\log4net-2.0.7\src\Util\TypeConverters\EncodingConverter.cs
	namespace 	
log4net
 
. 
Util 
. 
TypeConverters %
{ 
internal&& 	
class&&
 
EncodingConverter&& !
:&&" #
IConvertFrom&&$ 0
{'' 
public55 
bool55	 
CanConvertFrom55 
(55 
Type55 !

sourceType55" ,
)55, -
{66 
return77 	
(77
 

sourceType77 
==77 
typeof77 
(77  
string77  &
)77& '
)77' (
;77( )
}88 
publicJJ 
objectJJ	 
ConvertFromJJ 
(JJ 
objectJJ "
sourceJJ# )
)JJ) *
{KK 
stringLL 	
strLL
 
=LL 
sourceLL 
asLL 
stringLL  
;LL  !
ifMM 
(MM 
strMM 

!=MM 
nullMM 
)MM 
{NN 
returnOO 

EncodingOO 
.OO 
GetEncodingOO 
(OO  
strOO  #
)OO# $
;OO$ %
}PP 
throwQQ +
ConversionNotSupportedExceptionQQ	 (
.QQ( )
CreateQQ) /
(QQ/ 0
typeofQQ0 6
(QQ6 7
EncodingQQ7 ?
)QQ? @
,QQ@ A
sourceQQB H
)QQH I
;QQI J
}RR 
}UU 
}VV «
KC:\sonarqube\projects\log4net-2.0.7\src\Util\TypeConverters\IConvertFrom.cs
	namespace 	
log4net
 
. 
Util 
. 
TypeConverters %
{ 
public## 
	interface## 
IConvertFrom## 
{$$ 
bool00 
CanConvertFrom00 
(00 
Type00 

sourceType00 %
)00% &
;00& '
object== 
ConvertFrom==	 
(== 
object== 
source== "
)==" #
;==# $
}>> 
}?? ¯
IC:\sonarqube\projects\log4net-2.0.7\src\Util\TypeConverters\IConvertTo.cs
	namespace 	
log4net
 
. 
Util 
. 
TypeConverters %
{ 
public"" 
	interface"" 

IConvertTo"" 
{## 
bool// 
CanConvertTo// 
(// 
Type// 

targetType// #
)//# $
;//$ %
object== 
	ConvertTo==	 
(== 
object== 
source==  
,==  !
Type==" &

targetType==' 1
)==1 2
;==2 3
}>> 
}?? Ö#
QC:\sonarqube\projects\log4net-2.0.7\src\Util\TypeConverters\IPAddressConverter.cs
	namespace 	
log4net
 
. 
Util 
. 
TypeConverters %
{ 
internal$$ 	
class$$
 
IPAddressConverter$$ "
:$$# $
IConvertFrom$$% 1
{%% 
public33 
bool33	 
CanConvertFrom33 
(33 
Type33 !

sourceType33" ,
)33, -
{44 
return55 	
(55
 

sourceType55 
==55 
typeof55 
(55  
string55  &
)55& '
)55' (
;55( )
}66 
publicII 
objectII	 
ConvertFromII 
(II 
objectII "
sourceII# )
)II) *
{JJ 
stringKK 	
strKK
 
=KK 
sourceKK 
asKK 
stringKK  
;KK  !
ifLL 
(LL 
strLL 

!=LL 
nullLL 
&&LL 
strLL 
.LL 
LengthLL  
>LL! "
$numLL# $
)LL$ %
{MM 
tryNN 
{OO 
	IPAddressTT 
resultTT 
;TT 
ifUU 
(UU 	
	IPAddressUU	 
.UU 
TryParseUU 
(UU 
strUU 
,UU  
outUU! $
resultUU% +
)UU+ ,
)UU, -
{VV 
returnWW 
resultWW 
;WW 
}XX 
IPHostEntry]] 
host]] 
=]] 
Dns]] 
.]] 
GetHostEntry]] (
(]]( )
str]]) ,
)]], -
;]]- .
if^^ 
(^^ 	
host^^	 
!=^^ 
null^^ 
&&^^ 
host__ 

.__
 
AddressList__ 
!=__ 
null__ 
&&__ !
host`` 

.``
 
AddressList`` 
.`` 
Length`` 
>`` 
$num``  !
&&``" $
hostaa 

.aa
 
AddressListaa 
[aa 
$numaa 
]aa 
!=aa 
nullaa !
)aa! "
{bb 
returncc 
hostcc 
.cc 
AddressListcc 
[cc 
$numcc 
]cc  
;cc  !
}dd 
}
ÑÑ 
catch
ÖÖ 	
(
ÖÖ	 

	Exception
ÖÖ
 
ex
ÖÖ 
)
ÖÖ 
{
ÜÜ 
throw
áá 
-
ConversionNotSupportedException
áá *
.
áá* +
Create
áá+ 1
(
áá1 2
typeof
áá2 8
(
áá8 9
	IPAddress
áá9 B
)
ááB C
,
ááC D
source
ááE K
,
ááK L
ex
ááM O
)
ááO P
;
ááP Q
}
àà 
}
ââ 
throw
ää -
ConversionNotSupportedException
ää	 (
.
ää( )
Create
ää) /
(
ää/ 0
typeof
ää0 6
(
ää6 7
	IPAddress
ää7 @
)
ää@ A
,
ääA B
source
ääC I
)
ääI J
;
ääJ K
}
ãã 
private
íí 	
static
íí
 
readonly
íí 
char
íí 
[
íí 
]
íí  !
validIpAddressChars
íí! 4
=
íí5 6
{
íí7 8
$char
íí8 ;
,
íí; <
$char
íí< ?
,
íí? @
$char
íí@ C
,
ííC D
$char
ííD G
,
ííG H
$char
ííH K
,
ííK L
$char
ííL O
,
ííO P
$char
ííP S
,
ííS T
$char
ííT W
,
ííW X
$char
ííX [
,
íí[ \
$char
íí\ _
,
íí_ `
$char
íí` c
,
ííc d
$char
ííd g
,
ííg h
$char
ííh k
,
íík l
$char
ííl o
,
íío p
$char
ííp s
,
íís t
$char
íít w
,
ííw x
$char
ííx {
,
íí{ |
$char
íí| 
,íí Ä
$charííÄ É
,ííÉ Ñ
$charííÑ á
,ííá à
$charííà ã
,ííã å
$charííå è
,ííè ê
$charííê ì
,ííì î
$charííî ó
,ííó ò
$charííò õ
,ííõ ú
$charííú ü
,ííü †
$charíí† £
}íí£ §
;íí§ •
}
ìì 
}îî í
UC:\sonarqube\projects\log4net-2.0.7\src\Util\TypeConverters\PatternLayoutConverter.cs
	namespace 	
log4net
 
. 
Util 
. 
TypeConverters %
{ 
internal++ 	
class++
 "
PatternLayoutConverter++ &
:++' (
IConvertFrom++) 5
{,, 
public:: 
bool::	 
CanConvertFrom:: 
(:: 
System:: #
.::# $
Type::$ (

sourceType::) 3
)::3 4
{;; 
return<< 	
(<<
 

sourceType<< 
==<< 
typeof<< 
(<<  
string<<  &
)<<& '
)<<' (
;<<( )
}== 
publicPP 
objectPP	 
ConvertFromPP 
(PP 
objectPP "
sourcePP# )
)PP) *
{QQ 
stringRR 	
strRR
 
=RR 
sourceRR 
asRR 
stringRR  
;RR  !
ifSS 
(SS 
strSS 

!=SS 
nullSS 
)SS 
{TT 
returnUU 

newUU 
PatternLayoutUU 
(UU 
strUU  
)UU  !
;UU! "
}VV 
throwWW +
ConversionNotSupportedExceptionWW	 (
.WW( )
CreateWW) /
(WW/ 0
typeofWW0 6
(WW6 7
PatternLayoutWW7 D
)WWD E
,WWE F
sourceWWG M
)WWM N
;WWN O
}XX 
}[[ 
}\\ «
UC:\sonarqube\projects\log4net-2.0.7\src\Util\TypeConverters\PatternStringConverter.cs
	namespace 	
log4net
 
. 
Util 
. 
TypeConverters %
{ 
internal// 	
class//
 "
PatternStringConverter// &
://' (

IConvertTo//) 3
,//3 4
IConvertFrom//5 A
{00 
public>> 
bool>>	 
CanConvertTo>> 
(>> 
Type>> 

targetType>>  *
)>>* +
{?? 
return@@ 	
(@@
 
typeof@@ 
(@@ 
string@@ 
)@@ 
.@@ 
IsAssignableFrom@@ *
(@@* +

targetType@@+ 5
)@@5 6
)@@6 7
;@@7 8
}AA 
publicTT 
objectTT	 
	ConvertToTT 
(TT 
objectTT  
sourceTT! '
,TT' (
TypeTT) -

targetTypeTT. 8
)TT8 9
{UU 
PatternStringVV 
patternStringVV 
=VV  
sourceVV! '
asVV( *
PatternStringVV+ 8
;VV8 9
ifWW 
(WW 
patternStringWW 
!=WW 
nullWW 
&&WW 
CanConvertToWW  ,
(WW, -

targetTypeWW- 7
)WW7 8
)WW8 9
{XX 
returnYY 

patternStringYY 
.YY 
FormatYY 
(YY  
)YY  !
;YY! "
}ZZ 
throw[[ +
ConversionNotSupportedException[[	 (
.[[( )
Create[[) /
([[/ 0

targetType[[0 :
,[[: ;
source[[< B
)[[B C
;[[C D
}\\ 
publicmm 
boolmm	 
CanConvertFrommm 
(mm 
Systemmm #
.mm# $
Typemm$ (

sourceTypemm) 3
)mm3 4
{nn 
returnoo 	
(oo
 

sourceTypeoo 
==oo 
typeofoo 
(oo  
stringoo  &
)oo& '
)oo' (
;oo( )
}pp 
public
ÉÉ 
object
ÉÉ	 
ConvertFrom
ÉÉ 
(
ÉÉ 
object
ÉÉ "
source
ÉÉ# )
)
ÉÉ) *
{
ÑÑ 
string
ÖÖ 	
str
ÖÖ
 
=
ÖÖ 
source
ÖÖ 
as
ÖÖ 
string
ÖÖ  
;
ÖÖ  !
if
ÜÜ 
(
ÜÜ 
str
ÜÜ 

!=
ÜÜ 
null
ÜÜ 
)
ÜÜ 
{
áá 
return
àà 

new
àà 
PatternString
àà 
(
àà 
str
àà  
)
àà  !
;
àà! "
}
ââ 
throw
ää -
ConversionNotSupportedException
ää	 (
.
ää( )
Create
ää) /
(
ää/ 0
typeof
ää0 6
(
ää6 7
PatternString
ää7 D
)
ääD E
,
ääE F
source
ääG M
)
ääM N
;
ääN O
}
ãã 
}
éé 
}èè ∞
LC:\sonarqube\projects\log4net-2.0.7\src\Util\TypeConverters\TypeConverter.cs
	namespace 	
log4net
 
. 
Util 
. 
TypeConverters %
{ 
internal(( 	
class((
 
TypeConverter(( 
:(( 
IConvertFrom((  ,
{)) 
public77 
bool77	 
CanConvertFrom77 
(77 
Type77 !

sourceType77" ,
)77, -
{88 
return99 	
(99
 

sourceType99 
==99 
typeof99 
(99  
string99  &
)99& '
)99' (
;99( )
}:: 
publicNN 
objectNN	 
ConvertFromNN 
(NN 
objectNN "
sourceNN# )
)NN) *
{OO 
stringPP 	
strPP
 
=PP 
sourcePP 
asPP 
stringPP  
;PP  !
ifQQ 
(QQ 
strQQ 

!=QQ 
nullQQ 
)QQ 
{RR 
returnVV 


SystemInfoVV 
.VV 
GetTypeFromStringVV '
(VV' (
strVV( +
,VV+ ,
trueVV- 1
,VV1 2
trueVV3 7
)VV7 8
;VV8 9
}XX 
throwYY +
ConversionNotSupportedExceptionYY	 (
.YY( )
CreateYY) /
(YY/ 0
typeofYY0 6
(YY6 7
TypeYY7 ;
)YY; <
,YY< =
sourceYY> D
)YYD E
;YYE F
}ZZ 
}]] 
}^^ ¯
UC:\sonarqube\projects\log4net-2.0.7\src\Util\TypeConverters\TypeConverterAttribute.cs
	namespace 	
log4net
 
. 
Util 
. 
TypeConverters %
{ 
[(( 
AttributeUsage(( 
((( 
AttributeTargets(( !
.((! "
Class((" '
|((' (
AttributeTargets((( 8
.((8 9
	Interface((9 B
|((B C
AttributeTargets((C S
.((S T
Enum((T X
)((X Y
]((Y Z
public)) 
sealed)) 
class)) "
TypeConverterAttribute)) +
:)), -
	Attribute)). 7
{** 
private00 	
string00
 

m_typeName00 
=00 
null00 "
;00" #
public>> "
TypeConverterAttribute>>	 
(>>  
)>>  !
{?? 
}@@ 
publicLL "
TypeConverterAttributeLL	 
(LL  
stringLL  &
typeNameLL' /
)LL/ 0
{MM 

m_typeNameNN 
=NN 
typeNameNN 
;NN 
}OO 
public[[ "
TypeConverterAttribute[[	 
([[  
Type[[  $
converterType[[% 2
)[[2 3
{\\ 

m_typeName]] 
=]] 
log4net]] 
.]] 
Util]] 
.]] 

SystemInfo]] '
.]]' (!
AssemblyQualifiedName]]( =
(]]= >
converterType]]> K
)]]K L
;]]L M
}^^ 
publicnn 
stringnn	 
ConverterTypeNamenn !
{oo 
getpp 
{pp 
returnpp	 

m_typeNamepp 
;pp 
}pp 
setqq 
{qq 

m_typeNameqq	 
=qq 
valueqq 
;qq 
}qq 
}rr 
}ss 
}tt õd
FC:\sonarqube\projects\log4net-2.0.7\src\Util\WindowsSecurityContext.cs
	namespace$$ 	
log4net$$
 
.$$ 
Util$$ 
{%% 
public33 
class33 "
WindowsSecurityContext33 $
:33% &
SecurityContext33' 6
,336 7
IOptionHandler338 F
{44 
public>> 
enum>>	 
ImpersonationMode>> 
{?? 
UserCC 
,CC 
ProcessHH 

}II 
privateMM 	
ImpersonationModeMM
 
m_impersonationModeMM /
=MM0 1
ImpersonationModeMM2 C
.MMC D
UserMMD H
;MMH I
privateNN 	
stringNN
 

m_userNameNN 
;NN 
privateOO 	
stringOO
 
m_domainNameOO 
=OO 
EnvironmentOO  +
.OO+ ,
MachineNameOO, 7
;OO7 8
privatePP 	
stringPP
 

m_passwordPP 
;PP 
privateQQ 	
WindowsIdentityQQ
 

m_identityQQ $
;QQ$ %
public__ "
WindowsSecurityContext__	 
(__  
)__  !
{`` 
}aa 
public
ÉÉ 
ImpersonationMode
ÉÉ	 
Credentials
ÉÉ &
{
ÑÑ 
get
ÖÖ 
{
ÖÖ 
return
ÖÖ	 !
m_impersonationMode
ÖÖ #
;
ÖÖ# $
}
ÖÖ% &
set
ÜÜ 
{
ÜÜ !
m_impersonationMode
ÜÜ	 
=
ÜÜ 
value
ÜÜ $
;
ÜÜ$ %
}
ÜÜ& '
}
áá 
public
ïï 
string
ïï	 
UserName
ïï 
{
ññ 
get
óó 
{
óó 
return
óó	 

m_userName
óó 
;
óó 
}
óó 
set
òò 
{
òò 

m_userName
òò	 
=
òò 
value
òò 
;
òò 
}
òò 
}
ôô 
public
´´ 
string
´´	 

DomainName
´´ 
{
¨¨ 
get
≠≠ 
{
≠≠ 
return
≠≠	 
m_domainName
≠≠ 
;
≠≠ 
}
≠≠ 
set
ÆÆ 
{
ÆÆ 
m_domainName
ÆÆ	 
=
ÆÆ 
value
ÆÆ 
;
ÆÆ 
}
ÆÆ  
}
ØØ 
public
ΩΩ 
string
ΩΩ	 
Password
ΩΩ 
{
ææ 
set
øø 
{
øø 

m_password
øø	 
=
øø 
value
øø 
;
øø 
}
øø 
}
¿¿ 
public
‹‹ 
void
‹‹	 
ActivateOptions
‹‹ 
(
‹‹ 
)
‹‹ 
{
›› 
if
ﬁﬁ 
(
ﬁﬁ !
m_impersonationMode
ﬁﬁ 
==
ﬁﬁ 
ImpersonationMode
ﬁﬁ /
.
ﬁﬁ/ 0
User
ﬁﬁ0 4
)
ﬁﬁ4 5
{
ﬂﬂ 
if
‡‡ 
(
‡‡ 

m_userName
‡‡ 
==
‡‡ 
null
‡‡ 
)
‡‡ 
throw
‡‡ !
new
‡‡" %#
ArgumentNullException
‡‡& ;
(
‡‡; <
$str
‡‡< H
)
‡‡H I
;
‡‡I J
if
·· 
(
·· 
m_domainName
·· 
==
·· 
null
·· 
)
·· 
throw
·· #
new
··$ '#
ArgumentNullException
··( =
(
··= >
$str
··> L
)
··L M
;
··M N
if
‚‚ 
(
‚‚ 

m_password
‚‚ 
==
‚‚ 
null
‚‚ 
)
‚‚ 
throw
‚‚ !
new
‚‚" %#
ArgumentNullException
‚‚& ;
(
‚‚; <
$str
‚‚< H
)
‚‚H I
;
‚‚I J

m_identity
‰‰ 
=
‰‰ 
	LogonUser
‰‰ 
(
‰‰ 

m_userName
‰‰ %
,
‰‰% &
m_domainName
‰‰' 3
,
‰‰3 4

m_password
‰‰5 ?
)
‰‰? @
;
‰‰@ A
}
ÂÂ 
}
ÊÊ 
public
¯¯ 
override
¯¯	 
IDisposable
¯¯ 
Impersonate
¯¯ )
(
¯¯) *
object
¯¯* 0
state
¯¯1 6
)
¯¯6 7
{
˘˘ 
if
˙˙ 
(
˙˙ !
m_impersonationMode
˙˙ 
==
˙˙ 
ImpersonationMode
˙˙ /
.
˙˙/ 0
User
˙˙0 4
)
˙˙4 5
{
˚˚ 
if
¸¸ 
(
¸¸ 

m_identity
¸¸ 
!=
¸¸ 
null
¸¸ 
)
¸¸ 
{
˝˝ 
return
˛˛ 
new
˛˛ ,
DisposableImpersonationContext
˛˛ .
(
˛˛. /

m_identity
˛˛/ 9
.
˛˛9 :
Impersonate
˛˛: E
(
˛˛E F
)
˛˛F G
)
˛˛G H
;
˛˛H I
}
ˇˇ 
}
ÄÄ 
else
ÅÅ 
if
ÅÅ 

(
ÅÅ !
m_impersonationMode
ÅÅ 
==
ÅÅ  "
ImpersonationMode
ÅÅ# 4
.
ÅÅ4 5
Process
ÅÅ5 <
)
ÅÅ< =
{
ÇÇ 
return
ÑÑ 

new
ÑÑ ,
DisposableImpersonationContext
ÑÑ -
(
ÑÑ- .
WindowsIdentity
ÑÑ. =
.
ÑÑ= >
Impersonate
ÑÑ> I
(
ÑÑI J
IntPtr
ÑÑJ P
.
ÑÑP Q
Zero
ÑÑQ U
)
ÑÑU V
)
ÑÑV W
;
ÑÑW X
}
ÖÖ 
return
ÜÜ 	
null
ÜÜ
 
;
ÜÜ 
}
áá 
[
óó 	
System
óó	 
.
óó 
Security
óó 
.
óó "
SecuritySafeCritical
óó -
]
óó- .
[
ôô 	
System
ôô	 
.
ôô 
Security
ôô 
.
ôô 
Permissions
ôô $
.
ôô$ % 
SecurityPermission
ôô% 7
(
ôô7 8
System
ôô8 >
.
ôô> ?
Security
ôô? G
.
ôôG H
Permissions
ôôH S
.
ôôS T
SecurityAction
ôôT b
.
ôôb c
Demand
ôôc i
,
ôôi j
UnmanagedCode
ôôk x
=
ôôy z
true
ôô{ 
)ôô Ä
]ôôÄ Å
private
öö 
static
öö 
WindowsIdentity
öö &
	LogonUser
öö' 0
(
öö0 1
string
öö1 7
userName
öö8 @
,
öö@ A
string
ööB H

domainName
ööI S
,
ööS T
string
ööU [
password
öö\ d
)
ööd e
{
õõ 
const
úú 
int
úú	 &
LOGON32_PROVIDER_DEFAULT
úú %
=
úú& '
$num
úú( )
;
úú) *
const
ûû 
int
ûû	 '
LOGON32_LOGON_INTERACTIVE
ûû &
=
ûû' (
$num
ûû) *
;
ûû* +
IntPtr
°° 	
tokenHandle
°°
 
=
°° 
IntPtr
°° 
.
°° 
Zero
°° #
;
°°# $
if
¢¢ 
(
¢¢ 
!
¢¢ 
	LogonUser
¢¢ 
(
¢¢ 
userName
¢¢ 
,
¢¢ 

domainName
¢¢ %
,
¢¢% &
password
¢¢' /
,
¢¢/ 0'
LOGON32_LOGON_INTERACTIVE
¢¢1 J
,
¢¢J K&
LOGON32_PROVIDER_DEFAULT
¢¢L d
,
¢¢d e
ref
¢¢f i
tokenHandle
¢¢j u
)
¢¢u v
)
¢¢v w
{
££ 
NativeError
§§ 
error
§§ 
=
§§ 
NativeError
§§ #
.
§§# $
GetLastError
§§$ 0
(
§§0 1
)
§§1 2
;
§§2 3
throw
•• 	
new
••
 
	Exception
•• 
(
•• 
$str
•• /
+
••/ 0
userName
••0 8
+
••8 9
$str
••9 H
+
••H I

domainName
••I S
+
••S T
$str
••T `
+
••` a
error
••b g
.
••g h
ToString
••h p
(
••p q
)
••q r
)
••r s
;
••s t
}
¶¶ 
const
®® 
int
®®	 #
SecurityImpersonation
®® "
=
®®# $
$num
®®% &
;
®®& '
IntPtr
©© 	
dupeTokenHandle
©©
 
=
©© 
IntPtr
©© "
.
©©" #
Zero
©©# '
;
©©' (
if
™™ 
(
™™ 
!
™™ 
DuplicateToken
™™ 
(
™™ 
tokenHandle
™™ !
,
™™! "#
SecurityImpersonation
™™# 8
,
™™8 9
ref
™™: =
dupeTokenHandle
™™> M
)
™™M N
)
™™N O
{
´´ 
NativeError
¨¨ 
error
¨¨ 
=
¨¨ 
NativeError
¨¨ #
.
¨¨# $
GetLastError
¨¨$ 0
(
¨¨0 1
)
¨¨1 2
;
¨¨2 3
if
≠≠ 
(
≠≠ 
tokenHandle
≠≠ 
!=
≠≠ 
IntPtr
≠≠ 
.
≠≠ 
Zero
≠≠ "
)
≠≠" #
{
ÆÆ 
CloseHandle
ØØ 
(
ØØ 
tokenHandle
ØØ 
)
ØØ 
;
ØØ 
}
∞∞ 
throw
±± 	
new
±±
 
	Exception
±± 
(
±± 
$str
±± K
+
±±L M
error
±±N S
.
±±S T
ToString
±±T \
(
±±\ ]
)
±±] ^
)
±±^ _
;
±±_ `
}
≤≤ 
WindowsIdentity
¥¥ 
identity
¥¥ 
=
¥¥ 
new
¥¥ !
WindowsIdentity
¥¥" 1
(
¥¥1 2
dupeTokenHandle
¥¥2 A
)
¥¥A B
;
¥¥B C
if
∑∑ 
(
∑∑ 
dupeTokenHandle
∑∑ 
!=
∑∑ 
IntPtr
∑∑  
.
∑∑  !
Zero
∑∑! %
)
∑∑% &
{
∏∏ 
CloseHandle
ππ 
(
ππ 
dupeTokenHandle
ππ 
)
ππ  
;
ππ  !
}
∫∫ 
if
ªª 
(
ªª 
tokenHandle
ªª 
!=
ªª 
IntPtr
ªª 
.
ªª 
Zero
ªª !
)
ªª! "
{
ºº 
CloseHandle
ΩΩ 
(
ΩΩ 
tokenHandle
ΩΩ 
)
ΩΩ 
;
ΩΩ 
}
ææ 
return
¿¿ 	
identity
¿¿
 
;
¿¿ 
}
¡¡ 
[
≈≈ 
	DllImport
≈≈ 
(
≈≈ 
$str
≈≈ 
,
≈≈ 
SetLastError
≈≈ )
=
≈≈) *
true
≈≈* .
)
≈≈. /
]
≈≈/ 0
private
∆∆ 	
static
∆∆
 
extern
∆∆ 
bool
∆∆ 
	LogonUser
∆∆ &
(
∆∆& '
String
∆∆' -
lpszUsername
∆∆. :
,
∆∆: ;
String
∆∆< B

lpszDomain
∆∆C M
,
∆∆M N
String
∆∆O U
lpszPassword
∆∆V b
,
∆∆b c
int
∆∆d g
dwLogonType
∆∆h s
,
∆∆s t
int
∆∆u x
dwLogonProvider∆∆y à
,∆∆à â
ref∆∆ä ç
IntPtr∆∆é î
phToken∆∆ï ú
)∆∆ú ù
;∆∆ù û
[
»» 
	DllImport
»» 
(
»» 
$str
»» 
,
»» 
CharSet
»» $
=
»»$ %
CharSet
»»% ,
.
»», -
Auto
»»- 1
)
»»1 2
]
»»2 3
private
…… 	
extern
……
 
static
…… 
bool
…… 
CloseHandle
…… (
(
……( )
IntPtr
……) /
handle
……0 6
)
……6 7
;
……7 8
[
ÀÀ 
	DllImport
ÀÀ 
(
ÀÀ 
$str
ÀÀ 
,
ÀÀ 
CharSet
ÀÀ $
=
ÀÀ$ %
CharSet
ÀÀ% ,
.
ÀÀ, -
Auto
ÀÀ- 1
,
ÀÀ1 2
SetLastError
ÀÀ3 ?
=
ÀÀ? @
true
ÀÀ@ D
)
ÀÀD E
]
ÀÀE F
private
ÃÃ 	
extern
ÃÃ
 
static
ÃÃ 
bool
ÃÃ 
DuplicateToken
ÃÃ +
(
ÃÃ+ ,
IntPtr
ÃÃ, 2!
ExistingTokenHandle
ÃÃ3 F
,
ÃÃF G
int
ÃÃH K*
SECURITY_IMPERSONATION_LEVEL
ÃÃL h
,
ÃÃh i
ref
ÃÃj m
IntPtr
ÃÃn t#
DuplicateTokenHandleÃÃu â
)ÃÃâ ä
;ÃÃä ã
private
€€ 	
sealed
€€
 
class
€€ ,
DisposableImpersonationContext
€€ 5
:
€€6 7
IDisposable
€€8 C
{
‹‹ 
private
›› 

readonly
›› )
WindowsImpersonationContext
›› /$
m_impersonationContext
››0 F
;
››F G
public
ËË 	,
DisposableImpersonationContext
ËË
 (
(
ËË( ))
WindowsImpersonationContext
ËË) D"
impersonationContext
ËËE Y
)
ËËY Z
{
ÈÈ $
m_impersonationContext
ÍÍ 
=
ÍÍ "
impersonationContext
ÍÍ 1
;
ÍÍ1 2
}
ÎÎ 
public
ıı 	
void
ıı
 
Dispose
ıı 
(
ıı 
)
ıı 
{
ˆˆ $
m_impersonationContext
˜˜ 
.
˜˜ 
Undo
˜˜ 
(
˜˜  
)
˜˜  !
;
˜˜! "
}
¯¯ 
}
˘˘ 
}
¸¸ 
}˝˝ 